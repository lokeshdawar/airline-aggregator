//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information associated with a specific restaurant.
 * 
 * <p>Java class for RestaurantType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RestaurantType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="MultimediaDescriptions" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}MultimediaDescriptionsType"&gt;
 *                 &lt;attribute name="Attire" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="RelativePosition" type="{http://www.opentravel.org/OTA/2003/05}RelativePositionType" minOccurs="0"/&gt;
 *         &lt;element name="OperationSchedules" type="{http://www.opentravel.org/OTA/2003/05}OperationSchedulesPlusChargeType" minOccurs="0"/&gt;
 *         &lt;element name="InfoCodes" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="InfoCode" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
 *                           &lt;attribute name="Name"&gt;
 *                             &lt;simpleType&gt;
 *                               &lt;restriction base="{http://www.opentravel.org/OTA/2003/05}StringLength1to32"&gt;
 *                                 &lt;enumeration value="SrvcInfo"/&gt;
 *                                 &lt;enumeration value="Beverage"/&gt;
 *                                 &lt;enumeration value="AvailableMealCategory"/&gt;
 *                                 &lt;enumeration value="RestaurantCategory"/&gt;
 *                                 &lt;enumeration value="RestaurantPolicy"/&gt;
 *                               &lt;/restriction&gt;
 *                             &lt;/simpleType&gt;
 *                           &lt;/attribute&gt;
 *                           &lt;attribute name="Code" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="CuisineCodes" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="CuisineCode" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
 *                           &lt;attribute name="Code" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                           &lt;attribute name="IsMain" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                           &lt;attribute name="ExistsCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="DescriptiveText" minOccurs="0"&gt;
 *           &lt;simpleType&gt;
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *               &lt;pattern value="[A-Za-z0-9]{1,500}"/&gt;
 *             &lt;/restriction&gt;
 *           &lt;/simpleType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}ID_OptionalGroup"/&gt;
 *       &lt;attribute name="RestaurantName" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="MaxSeatingCapacity" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
 *       &lt;attribute name="MaxSingleParty" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
 *       &lt;attribute name="InvCode" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="OfferBreakfast" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="OfferLunch" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="OfferDinner" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="OfferBrunch" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="ProximityCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *       &lt;attribute name="Sort" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RestaurantType", propOrder = {
    "multimediaDescriptions",
    "relativePosition",
    "operationSchedules",
    "infoCodes",
    "cuisineCodes",
    "descriptiveText"
})
public class RestaurantType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "MultimediaDescriptions")
    protected RestaurantType.MultimediaDescriptions multimediaDescriptions;
    @XmlElement(name = "RelativePosition")
    protected RelativePositionType relativePosition;
    @XmlElement(name = "OperationSchedules")
    protected OperationSchedulesPlusChargeType operationSchedules;
    @XmlElement(name = "InfoCodes")
    protected RestaurantType.InfoCodes infoCodes;
    @XmlElement(name = "CuisineCodes")
    protected RestaurantType.CuisineCodes cuisineCodes;
    @XmlElement(name = "DescriptiveText")
    protected String descriptiveText;
    @XmlAttribute(name = "RestaurantName")
    protected String restaurantName;
    @XmlAttribute(name = "MaxSeatingCapacity")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger maxSeatingCapacity;
    @XmlAttribute(name = "MaxSingleParty")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger maxSingleParty;
    @XmlAttribute(name = "InvCode")
    protected String invCode;
    @XmlAttribute(name = "OfferBreakfast")
    protected Boolean offerBreakfast;
    @XmlAttribute(name = "OfferLunch")
    protected Boolean offerLunch;
    @XmlAttribute(name = "OfferDinner")
    protected Boolean offerDinner;
    @XmlAttribute(name = "OfferBrunch")
    protected Boolean offerBrunch;
    @XmlAttribute(name = "ProximityCode")
    protected String proximityCode;
    @XmlAttribute(name = "Sort")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger sort;
    @XmlAttribute(name = "ID")
    protected String id;

    /**
     * Gets the value of the multimediaDescriptions property.
     * 
     * @return
     *     possible object is
     *     {@link RestaurantType.MultimediaDescriptions }
     *     
     */
    public RestaurantType.MultimediaDescriptions getMultimediaDescriptions() {
        return multimediaDescriptions;
    }

    /**
     * Sets the value of the multimediaDescriptions property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestaurantType.MultimediaDescriptions }
     *     
     */
    public void setMultimediaDescriptions(RestaurantType.MultimediaDescriptions value) {
        this.multimediaDescriptions = value;
    }

    /**
     * Gets the value of the relativePosition property.
     * 
     * @return
     *     possible object is
     *     {@link RelativePositionType }
     *     
     */
    public RelativePositionType getRelativePosition() {
        return relativePosition;
    }

    /**
     * Sets the value of the relativePosition property.
     * 
     * @param value
     *     allowed object is
     *     {@link RelativePositionType }
     *     
     */
    public void setRelativePosition(RelativePositionType value) {
        this.relativePosition = value;
    }

    /**
     * Gets the value of the operationSchedules property.
     * 
     * @return
     *     possible object is
     *     {@link OperationSchedulesPlusChargeType }
     *     
     */
    public OperationSchedulesPlusChargeType getOperationSchedules() {
        return operationSchedules;
    }

    /**
     * Sets the value of the operationSchedules property.
     * 
     * @param value
     *     allowed object is
     *     {@link OperationSchedulesPlusChargeType }
     *     
     */
    public void setOperationSchedules(OperationSchedulesPlusChargeType value) {
        this.operationSchedules = value;
    }

    /**
     * Gets the value of the infoCodes property.
     * 
     * @return
     *     possible object is
     *     {@link RestaurantType.InfoCodes }
     *     
     */
    public RestaurantType.InfoCodes getInfoCodes() {
        return infoCodes;
    }

    /**
     * Sets the value of the infoCodes property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestaurantType.InfoCodes }
     *     
     */
    public void setInfoCodes(RestaurantType.InfoCodes value) {
        this.infoCodes = value;
    }

    /**
     * Gets the value of the cuisineCodes property.
     * 
     * @return
     *     possible object is
     *     {@link RestaurantType.CuisineCodes }
     *     
     */
    public RestaurantType.CuisineCodes getCuisineCodes() {
        return cuisineCodes;
    }

    /**
     * Sets the value of the cuisineCodes property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestaurantType.CuisineCodes }
     *     
     */
    public void setCuisineCodes(RestaurantType.CuisineCodes value) {
        this.cuisineCodes = value;
    }

    /**
     * Gets the value of the descriptiveText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescriptiveText() {
        return descriptiveText;
    }

    /**
     * Sets the value of the descriptiveText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescriptiveText(String value) {
        this.descriptiveText = value;
    }

    /**
     * Gets the value of the restaurantName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRestaurantName() {
        return restaurantName;
    }

    /**
     * Sets the value of the restaurantName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRestaurantName(String value) {
        this.restaurantName = value;
    }

    /**
     * Gets the value of the maxSeatingCapacity property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxSeatingCapacity() {
        return maxSeatingCapacity;
    }

    /**
     * Sets the value of the maxSeatingCapacity property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxSeatingCapacity(BigInteger value) {
        this.maxSeatingCapacity = value;
    }

    /**
     * Gets the value of the maxSingleParty property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxSingleParty() {
        return maxSingleParty;
    }

    /**
     * Sets the value of the maxSingleParty property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxSingleParty(BigInteger value) {
        this.maxSingleParty = value;
    }

    /**
     * Gets the value of the invCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInvCode() {
        return invCode;
    }

    /**
     * Sets the value of the invCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInvCode(String value) {
        this.invCode = value;
    }

    /**
     * Gets the value of the offerBreakfast property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isOfferBreakfast() {
        return offerBreakfast;
    }

    /**
     * Sets the value of the offerBreakfast property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setOfferBreakfast(Boolean value) {
        this.offerBreakfast = value;
    }

    /**
     * Gets the value of the offerLunch property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isOfferLunch() {
        return offerLunch;
    }

    /**
     * Sets the value of the offerLunch property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setOfferLunch(Boolean value) {
        this.offerLunch = value;
    }

    /**
     * Gets the value of the offerDinner property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isOfferDinner() {
        return offerDinner;
    }

    /**
     * Sets the value of the offerDinner property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setOfferDinner(Boolean value) {
        this.offerDinner = value;
    }

    /**
     * Gets the value of the offerBrunch property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isOfferBrunch() {
        return offerBrunch;
    }

    /**
     * Sets the value of the offerBrunch property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setOfferBrunch(Boolean value) {
        this.offerBrunch = value;
    }

    /**
     * Gets the value of the proximityCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProximityCode() {
        return proximityCode;
    }

    /**
     * Sets the value of the proximityCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProximityCode(String value) {
        this.proximityCode = value;
    }

    /**
     * Gets the value of the sort property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getSort() {
        return sort;
    }

    /**
     * Sets the value of the sort property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setSort(BigInteger value) {
        this.sort = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getID() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setID(String value) {
        this.id = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            RestaurantType.MultimediaDescriptions theMultimediaDescriptions;
            theMultimediaDescriptions = this.getMultimediaDescriptions();
            strategy.appendField(locator, this, "multimediaDescriptions", buffer, theMultimediaDescriptions);
        }
        {
            RelativePositionType theRelativePosition;
            theRelativePosition = this.getRelativePosition();
            strategy.appendField(locator, this, "relativePosition", buffer, theRelativePosition);
        }
        {
            OperationSchedulesPlusChargeType theOperationSchedules;
            theOperationSchedules = this.getOperationSchedules();
            strategy.appendField(locator, this, "operationSchedules", buffer, theOperationSchedules);
        }
        {
            RestaurantType.InfoCodes theInfoCodes;
            theInfoCodes = this.getInfoCodes();
            strategy.appendField(locator, this, "infoCodes", buffer, theInfoCodes);
        }
        {
            RestaurantType.CuisineCodes theCuisineCodes;
            theCuisineCodes = this.getCuisineCodes();
            strategy.appendField(locator, this, "cuisineCodes", buffer, theCuisineCodes);
        }
        {
            String theDescriptiveText;
            theDescriptiveText = this.getDescriptiveText();
            strategy.appendField(locator, this, "descriptiveText", buffer, theDescriptiveText);
        }
        {
            String theRestaurantName;
            theRestaurantName = this.getRestaurantName();
            strategy.appendField(locator, this, "restaurantName", buffer, theRestaurantName);
        }
        {
            BigInteger theMaxSeatingCapacity;
            theMaxSeatingCapacity = this.getMaxSeatingCapacity();
            strategy.appendField(locator, this, "maxSeatingCapacity", buffer, theMaxSeatingCapacity);
        }
        {
            BigInteger theMaxSingleParty;
            theMaxSingleParty = this.getMaxSingleParty();
            strategy.appendField(locator, this, "maxSingleParty", buffer, theMaxSingleParty);
        }
        {
            String theInvCode;
            theInvCode = this.getInvCode();
            strategy.appendField(locator, this, "invCode", buffer, theInvCode);
        }
        {
            Boolean theOfferBreakfast;
            theOfferBreakfast = this.isOfferBreakfast();
            strategy.appendField(locator, this, "offerBreakfast", buffer, theOfferBreakfast);
        }
        {
            Boolean theOfferLunch;
            theOfferLunch = this.isOfferLunch();
            strategy.appendField(locator, this, "offerLunch", buffer, theOfferLunch);
        }
        {
            Boolean theOfferDinner;
            theOfferDinner = this.isOfferDinner();
            strategy.appendField(locator, this, "offerDinner", buffer, theOfferDinner);
        }
        {
            Boolean theOfferBrunch;
            theOfferBrunch = this.isOfferBrunch();
            strategy.appendField(locator, this, "offerBrunch", buffer, theOfferBrunch);
        }
        {
            String theProximityCode;
            theProximityCode = this.getProximityCode();
            strategy.appendField(locator, this, "proximityCode", buffer, theProximityCode);
        }
        {
            BigInteger theSort;
            theSort = this.getSort();
            strategy.appendField(locator, this, "sort", buffer, theSort);
        }
        {
            String theID;
            theID = this.getID();
            strategy.appendField(locator, this, "id", buffer, theID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RestaurantType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RestaurantType that = ((RestaurantType) object);
        {
            RestaurantType.MultimediaDescriptions lhsMultimediaDescriptions;
            lhsMultimediaDescriptions = this.getMultimediaDescriptions();
            RestaurantType.MultimediaDescriptions rhsMultimediaDescriptions;
            rhsMultimediaDescriptions = that.getMultimediaDescriptions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multimediaDescriptions", lhsMultimediaDescriptions), LocatorUtils.property(thatLocator, "multimediaDescriptions", rhsMultimediaDescriptions), lhsMultimediaDescriptions, rhsMultimediaDescriptions)) {
                return false;
            }
        }
        {
            RelativePositionType lhsRelativePosition;
            lhsRelativePosition = this.getRelativePosition();
            RelativePositionType rhsRelativePosition;
            rhsRelativePosition = that.getRelativePosition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relativePosition", lhsRelativePosition), LocatorUtils.property(thatLocator, "relativePosition", rhsRelativePosition), lhsRelativePosition, rhsRelativePosition)) {
                return false;
            }
        }
        {
            OperationSchedulesPlusChargeType lhsOperationSchedules;
            lhsOperationSchedules = this.getOperationSchedules();
            OperationSchedulesPlusChargeType rhsOperationSchedules;
            rhsOperationSchedules = that.getOperationSchedules();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operationSchedules", lhsOperationSchedules), LocatorUtils.property(thatLocator, "operationSchedules", rhsOperationSchedules), lhsOperationSchedules, rhsOperationSchedules)) {
                return false;
            }
        }
        {
            RestaurantType.InfoCodes lhsInfoCodes;
            lhsInfoCodes = this.getInfoCodes();
            RestaurantType.InfoCodes rhsInfoCodes;
            rhsInfoCodes = that.getInfoCodes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "infoCodes", lhsInfoCodes), LocatorUtils.property(thatLocator, "infoCodes", rhsInfoCodes), lhsInfoCodes, rhsInfoCodes)) {
                return false;
            }
        }
        {
            RestaurantType.CuisineCodes lhsCuisineCodes;
            lhsCuisineCodes = this.getCuisineCodes();
            RestaurantType.CuisineCodes rhsCuisineCodes;
            rhsCuisineCodes = that.getCuisineCodes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cuisineCodes", lhsCuisineCodes), LocatorUtils.property(thatLocator, "cuisineCodes", rhsCuisineCodes), lhsCuisineCodes, rhsCuisineCodes)) {
                return false;
            }
        }
        {
            String lhsDescriptiveText;
            lhsDescriptiveText = this.getDescriptiveText();
            String rhsDescriptiveText;
            rhsDescriptiveText = that.getDescriptiveText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "descriptiveText", lhsDescriptiveText), LocatorUtils.property(thatLocator, "descriptiveText", rhsDescriptiveText), lhsDescriptiveText, rhsDescriptiveText)) {
                return false;
            }
        }
        {
            String lhsRestaurantName;
            lhsRestaurantName = this.getRestaurantName();
            String rhsRestaurantName;
            rhsRestaurantName = that.getRestaurantName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restaurantName", lhsRestaurantName), LocatorUtils.property(thatLocator, "restaurantName", rhsRestaurantName), lhsRestaurantName, rhsRestaurantName)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxSeatingCapacity;
            lhsMaxSeatingCapacity = this.getMaxSeatingCapacity();
            BigInteger rhsMaxSeatingCapacity;
            rhsMaxSeatingCapacity = that.getMaxSeatingCapacity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxSeatingCapacity", lhsMaxSeatingCapacity), LocatorUtils.property(thatLocator, "maxSeatingCapacity", rhsMaxSeatingCapacity), lhsMaxSeatingCapacity, rhsMaxSeatingCapacity)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxSingleParty;
            lhsMaxSingleParty = this.getMaxSingleParty();
            BigInteger rhsMaxSingleParty;
            rhsMaxSingleParty = that.getMaxSingleParty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxSingleParty", lhsMaxSingleParty), LocatorUtils.property(thatLocator, "maxSingleParty", rhsMaxSingleParty), lhsMaxSingleParty, rhsMaxSingleParty)) {
                return false;
            }
        }
        {
            String lhsInvCode;
            lhsInvCode = this.getInvCode();
            String rhsInvCode;
            rhsInvCode = that.getInvCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "invCode", lhsInvCode), LocatorUtils.property(thatLocator, "invCode", rhsInvCode), lhsInvCode, rhsInvCode)) {
                return false;
            }
        }
        {
            Boolean lhsOfferBreakfast;
            lhsOfferBreakfast = this.isOfferBreakfast();
            Boolean rhsOfferBreakfast;
            rhsOfferBreakfast = that.isOfferBreakfast();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offerBreakfast", lhsOfferBreakfast), LocatorUtils.property(thatLocator, "offerBreakfast", rhsOfferBreakfast), lhsOfferBreakfast, rhsOfferBreakfast)) {
                return false;
            }
        }
        {
            Boolean lhsOfferLunch;
            lhsOfferLunch = this.isOfferLunch();
            Boolean rhsOfferLunch;
            rhsOfferLunch = that.isOfferLunch();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offerLunch", lhsOfferLunch), LocatorUtils.property(thatLocator, "offerLunch", rhsOfferLunch), lhsOfferLunch, rhsOfferLunch)) {
                return false;
            }
        }
        {
            Boolean lhsOfferDinner;
            lhsOfferDinner = this.isOfferDinner();
            Boolean rhsOfferDinner;
            rhsOfferDinner = that.isOfferDinner();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offerDinner", lhsOfferDinner), LocatorUtils.property(thatLocator, "offerDinner", rhsOfferDinner), lhsOfferDinner, rhsOfferDinner)) {
                return false;
            }
        }
        {
            Boolean lhsOfferBrunch;
            lhsOfferBrunch = this.isOfferBrunch();
            Boolean rhsOfferBrunch;
            rhsOfferBrunch = that.isOfferBrunch();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offerBrunch", lhsOfferBrunch), LocatorUtils.property(thatLocator, "offerBrunch", rhsOfferBrunch), lhsOfferBrunch, rhsOfferBrunch)) {
                return false;
            }
        }
        {
            String lhsProximityCode;
            lhsProximityCode = this.getProximityCode();
            String rhsProximityCode;
            rhsProximityCode = that.getProximityCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "proximityCode", lhsProximityCode), LocatorUtils.property(thatLocator, "proximityCode", rhsProximityCode), lhsProximityCode, rhsProximityCode)) {
                return false;
            }
        }
        {
            BigInteger lhsSort;
            lhsSort = this.getSort();
            BigInteger rhsSort;
            rhsSort = that.getSort();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sort", lhsSort), LocatorUtils.property(thatLocator, "sort", rhsSort), lhsSort, rhsSort)) {
                return false;
            }
        }
        {
            String lhsID;
            lhsID = this.getID();
            String rhsID;
            rhsID = that.getID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsID), LocatorUtils.property(thatLocator, "id", rhsID), lhsID, rhsID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            RestaurantType.MultimediaDescriptions theMultimediaDescriptions;
            theMultimediaDescriptions = this.getMultimediaDescriptions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multimediaDescriptions", theMultimediaDescriptions), currentHashCode, theMultimediaDescriptions);
        }
        {
            RelativePositionType theRelativePosition;
            theRelativePosition = this.getRelativePosition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relativePosition", theRelativePosition), currentHashCode, theRelativePosition);
        }
        {
            OperationSchedulesPlusChargeType theOperationSchedules;
            theOperationSchedules = this.getOperationSchedules();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operationSchedules", theOperationSchedules), currentHashCode, theOperationSchedules);
        }
        {
            RestaurantType.InfoCodes theInfoCodes;
            theInfoCodes = this.getInfoCodes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "infoCodes", theInfoCodes), currentHashCode, theInfoCodes);
        }
        {
            RestaurantType.CuisineCodes theCuisineCodes;
            theCuisineCodes = this.getCuisineCodes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cuisineCodes", theCuisineCodes), currentHashCode, theCuisineCodes);
        }
        {
            String theDescriptiveText;
            theDescriptiveText = this.getDescriptiveText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "descriptiveText", theDescriptiveText), currentHashCode, theDescriptiveText);
        }
        {
            String theRestaurantName;
            theRestaurantName = this.getRestaurantName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restaurantName", theRestaurantName), currentHashCode, theRestaurantName);
        }
        {
            BigInteger theMaxSeatingCapacity;
            theMaxSeatingCapacity = this.getMaxSeatingCapacity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxSeatingCapacity", theMaxSeatingCapacity), currentHashCode, theMaxSeatingCapacity);
        }
        {
            BigInteger theMaxSingleParty;
            theMaxSingleParty = this.getMaxSingleParty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxSingleParty", theMaxSingleParty), currentHashCode, theMaxSingleParty);
        }
        {
            String theInvCode;
            theInvCode = this.getInvCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "invCode", theInvCode), currentHashCode, theInvCode);
        }
        {
            Boolean theOfferBreakfast;
            theOfferBreakfast = this.isOfferBreakfast();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offerBreakfast", theOfferBreakfast), currentHashCode, theOfferBreakfast);
        }
        {
            Boolean theOfferLunch;
            theOfferLunch = this.isOfferLunch();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offerLunch", theOfferLunch), currentHashCode, theOfferLunch);
        }
        {
            Boolean theOfferDinner;
            theOfferDinner = this.isOfferDinner();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offerDinner", theOfferDinner), currentHashCode, theOfferDinner);
        }
        {
            Boolean theOfferBrunch;
            theOfferBrunch = this.isOfferBrunch();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offerBrunch", theOfferBrunch), currentHashCode, theOfferBrunch);
        }
        {
            String theProximityCode;
            theProximityCode = this.getProximityCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "proximityCode", theProximityCode), currentHashCode, theProximityCode);
        }
        {
            BigInteger theSort;
            theSort = this.getSort();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sort", theSort), currentHashCode, theSort);
        }
        {
            String theID;
            theID = this.getID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theID), currentHashCode, theID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof RestaurantType) {
            final RestaurantType copy = ((RestaurantType) draftCopy);
            if (this.multimediaDescriptions!= null) {
                RestaurantType.MultimediaDescriptions sourceMultimediaDescriptions;
                sourceMultimediaDescriptions = this.getMultimediaDescriptions();
                RestaurantType.MultimediaDescriptions copyMultimediaDescriptions = ((RestaurantType.MultimediaDescriptions) strategy.copy(LocatorUtils.property(locator, "multimediaDescriptions", sourceMultimediaDescriptions), sourceMultimediaDescriptions));
                copy.setMultimediaDescriptions(copyMultimediaDescriptions);
            } else {
                copy.multimediaDescriptions = null;
            }
            if (this.relativePosition!= null) {
                RelativePositionType sourceRelativePosition;
                sourceRelativePosition = this.getRelativePosition();
                RelativePositionType copyRelativePosition = ((RelativePositionType) strategy.copy(LocatorUtils.property(locator, "relativePosition", sourceRelativePosition), sourceRelativePosition));
                copy.setRelativePosition(copyRelativePosition);
            } else {
                copy.relativePosition = null;
            }
            if (this.operationSchedules!= null) {
                OperationSchedulesPlusChargeType sourceOperationSchedules;
                sourceOperationSchedules = this.getOperationSchedules();
                OperationSchedulesPlusChargeType copyOperationSchedules = ((OperationSchedulesPlusChargeType) strategy.copy(LocatorUtils.property(locator, "operationSchedules", sourceOperationSchedules), sourceOperationSchedules));
                copy.setOperationSchedules(copyOperationSchedules);
            } else {
                copy.operationSchedules = null;
            }
            if (this.infoCodes!= null) {
                RestaurantType.InfoCodes sourceInfoCodes;
                sourceInfoCodes = this.getInfoCodes();
                RestaurantType.InfoCodes copyInfoCodes = ((RestaurantType.InfoCodes) strategy.copy(LocatorUtils.property(locator, "infoCodes", sourceInfoCodes), sourceInfoCodes));
                copy.setInfoCodes(copyInfoCodes);
            } else {
                copy.infoCodes = null;
            }
            if (this.cuisineCodes!= null) {
                RestaurantType.CuisineCodes sourceCuisineCodes;
                sourceCuisineCodes = this.getCuisineCodes();
                RestaurantType.CuisineCodes copyCuisineCodes = ((RestaurantType.CuisineCodes) strategy.copy(LocatorUtils.property(locator, "cuisineCodes", sourceCuisineCodes), sourceCuisineCodes));
                copy.setCuisineCodes(copyCuisineCodes);
            } else {
                copy.cuisineCodes = null;
            }
            if (this.descriptiveText!= null) {
                String sourceDescriptiveText;
                sourceDescriptiveText = this.getDescriptiveText();
                String copyDescriptiveText = ((String) strategy.copy(LocatorUtils.property(locator, "descriptiveText", sourceDescriptiveText), sourceDescriptiveText));
                copy.setDescriptiveText(copyDescriptiveText);
            } else {
                copy.descriptiveText = null;
            }
            if (this.restaurantName!= null) {
                String sourceRestaurantName;
                sourceRestaurantName = this.getRestaurantName();
                String copyRestaurantName = ((String) strategy.copy(LocatorUtils.property(locator, "restaurantName", sourceRestaurantName), sourceRestaurantName));
                copy.setRestaurantName(copyRestaurantName);
            } else {
                copy.restaurantName = null;
            }
            if (this.maxSeatingCapacity!= null) {
                BigInteger sourceMaxSeatingCapacity;
                sourceMaxSeatingCapacity = this.getMaxSeatingCapacity();
                BigInteger copyMaxSeatingCapacity = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxSeatingCapacity", sourceMaxSeatingCapacity), sourceMaxSeatingCapacity));
                copy.setMaxSeatingCapacity(copyMaxSeatingCapacity);
            } else {
                copy.maxSeatingCapacity = null;
            }
            if (this.maxSingleParty!= null) {
                BigInteger sourceMaxSingleParty;
                sourceMaxSingleParty = this.getMaxSingleParty();
                BigInteger copyMaxSingleParty = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxSingleParty", sourceMaxSingleParty), sourceMaxSingleParty));
                copy.setMaxSingleParty(copyMaxSingleParty);
            } else {
                copy.maxSingleParty = null;
            }
            if (this.invCode!= null) {
                String sourceInvCode;
                sourceInvCode = this.getInvCode();
                String copyInvCode = ((String) strategy.copy(LocatorUtils.property(locator, "invCode", sourceInvCode), sourceInvCode));
                copy.setInvCode(copyInvCode);
            } else {
                copy.invCode = null;
            }
            if (this.offerBreakfast!= null) {
                Boolean sourceOfferBreakfast;
                sourceOfferBreakfast = this.isOfferBreakfast();
                Boolean copyOfferBreakfast = ((Boolean) strategy.copy(LocatorUtils.property(locator, "offerBreakfast", sourceOfferBreakfast), sourceOfferBreakfast));
                copy.setOfferBreakfast(copyOfferBreakfast);
            } else {
                copy.offerBreakfast = null;
            }
            if (this.offerLunch!= null) {
                Boolean sourceOfferLunch;
                sourceOfferLunch = this.isOfferLunch();
                Boolean copyOfferLunch = ((Boolean) strategy.copy(LocatorUtils.property(locator, "offerLunch", sourceOfferLunch), sourceOfferLunch));
                copy.setOfferLunch(copyOfferLunch);
            } else {
                copy.offerLunch = null;
            }
            if (this.offerDinner!= null) {
                Boolean sourceOfferDinner;
                sourceOfferDinner = this.isOfferDinner();
                Boolean copyOfferDinner = ((Boolean) strategy.copy(LocatorUtils.property(locator, "offerDinner", sourceOfferDinner), sourceOfferDinner));
                copy.setOfferDinner(copyOfferDinner);
            } else {
                copy.offerDinner = null;
            }
            if (this.offerBrunch!= null) {
                Boolean sourceOfferBrunch;
                sourceOfferBrunch = this.isOfferBrunch();
                Boolean copyOfferBrunch = ((Boolean) strategy.copy(LocatorUtils.property(locator, "offerBrunch", sourceOfferBrunch), sourceOfferBrunch));
                copy.setOfferBrunch(copyOfferBrunch);
            } else {
                copy.offerBrunch = null;
            }
            if (this.proximityCode!= null) {
                String sourceProximityCode;
                sourceProximityCode = this.getProximityCode();
                String copyProximityCode = ((String) strategy.copy(LocatorUtils.property(locator, "proximityCode", sourceProximityCode), sourceProximityCode));
                copy.setProximityCode(copyProximityCode);
            } else {
                copy.proximityCode = null;
            }
            if (this.sort!= null) {
                BigInteger sourceSort;
                sourceSort = this.getSort();
                BigInteger copySort = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "sort", sourceSort), sourceSort));
                copy.setSort(copySort);
            } else {
                copy.sort = null;
            }
            if (this.id!= null) {
                String sourceID;
                sourceID = this.getID();
                String copyID = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceID), sourceID));
                copy.setID(copyID);
            } else {
                copy.id = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RestaurantType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="CuisineCode" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
     *                 &lt;attribute name="Code" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *                 &lt;attribute name="IsMain" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *                 &lt;attribute name="ExistsCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "cuisineCode"
    })
    public static class CuisineCodes
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "CuisineCode", required = true)
        protected List<RestaurantType.CuisineCodes.CuisineCode> cuisineCode;

        /**
         * Gets the value of the cuisineCode property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the cuisineCode property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getCuisineCode().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link RestaurantType.CuisineCodes.CuisineCode }
         * 
         * 
         */
        public List<RestaurantType.CuisineCodes.CuisineCode> getCuisineCode() {
            if (cuisineCode == null) {
                cuisineCode = new ArrayList<RestaurantType.CuisineCodes.CuisineCode>();
            }
            return this.cuisineCode;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<RestaurantType.CuisineCodes.CuisineCode> theCuisineCode;
                theCuisineCode = (((this.cuisineCode!= null)&&(!this.cuisineCode.isEmpty()))?this.getCuisineCode():null);
                strategy.appendField(locator, this, "cuisineCode", buffer, theCuisineCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RestaurantType.CuisineCodes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final RestaurantType.CuisineCodes that = ((RestaurantType.CuisineCodes) object);
            {
                List<RestaurantType.CuisineCodes.CuisineCode> lhsCuisineCode;
                lhsCuisineCode = (((this.cuisineCode!= null)&&(!this.cuisineCode.isEmpty()))?this.getCuisineCode():null);
                List<RestaurantType.CuisineCodes.CuisineCode> rhsCuisineCode;
                rhsCuisineCode = (((that.cuisineCode!= null)&&(!that.cuisineCode.isEmpty()))?that.getCuisineCode():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "cuisineCode", lhsCuisineCode), LocatorUtils.property(thatLocator, "cuisineCode", rhsCuisineCode), lhsCuisineCode, rhsCuisineCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<RestaurantType.CuisineCodes.CuisineCode> theCuisineCode;
                theCuisineCode = (((this.cuisineCode!= null)&&(!this.cuisineCode.isEmpty()))?this.getCuisineCode():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cuisineCode", theCuisineCode), currentHashCode, theCuisineCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof RestaurantType.CuisineCodes) {
                final RestaurantType.CuisineCodes copy = ((RestaurantType.CuisineCodes) draftCopy);
                if ((this.cuisineCode!= null)&&(!this.cuisineCode.isEmpty())) {
                    List<RestaurantType.CuisineCodes.CuisineCode> sourceCuisineCode;
                    sourceCuisineCode = (((this.cuisineCode!= null)&&(!this.cuisineCode.isEmpty()))?this.getCuisineCode():null);
                    @SuppressWarnings("unchecked")
                    List<RestaurantType.CuisineCodes.CuisineCode> copyCuisineCode = ((List<RestaurantType.CuisineCodes.CuisineCode> ) strategy.copy(LocatorUtils.property(locator, "cuisineCode", sourceCuisineCode), sourceCuisineCode));
                    copy.cuisineCode = null;
                    if (copyCuisineCode!= null) {
                        List<RestaurantType.CuisineCodes.CuisineCode> uniqueCuisineCodel = copy.getCuisineCode();
                        uniqueCuisineCodel.addAll(copyCuisineCode);
                    }
                } else {
                    copy.cuisineCode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RestaurantType.CuisineCodes();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
         *       &lt;attribute name="Code" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
         *       &lt;attribute name="IsMain" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
         *       &lt;attribute name="ExistsCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class CuisineCode
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "Code")
            protected String code;
            @XmlAttribute(name = "IsMain")
            protected Boolean isMain;
            @XmlAttribute(name = "ExistsCode")
            protected String existsCode;
            @XmlAttribute(name = "CodeDetail")
            protected String codeDetail;
            @XmlAttribute(name = "Removal")
            protected Boolean removal;

            /**
             * Gets the value of the code property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCode() {
                return code;
            }

            /**
             * Sets the value of the code property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCode(String value) {
                this.code = value;
            }

            /**
             * Gets the value of the isMain property.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public Boolean isIsMain() {
                return isMain;
            }

            /**
             * Sets the value of the isMain property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             */
            public void setIsMain(Boolean value) {
                this.isMain = value;
            }

            /**
             * Gets the value of the existsCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getExistsCode() {
                return existsCode;
            }

            /**
             * Sets the value of the existsCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setExistsCode(String value) {
                this.existsCode = value;
            }

            /**
             * Gets the value of the codeDetail property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCodeDetail() {
                return codeDetail;
            }

            /**
             * Sets the value of the codeDetail property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCodeDetail(String value) {
                this.codeDetail = value;
            }

            /**
             * Gets the value of the removal property.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public boolean isRemoval() {
                if (removal == null) {
                    return false;
                } else {
                    return removal;
                }
            }

            /**
             * Sets the value of the removal property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             */
            public void setRemoval(Boolean value) {
                this.removal = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theCode;
                    theCode = this.getCode();
                    strategy.appendField(locator, this, "code", buffer, theCode);
                }
                {
                    Boolean theIsMain;
                    theIsMain = this.isIsMain();
                    strategy.appendField(locator, this, "isMain", buffer, theIsMain);
                }
                {
                    String theExistsCode;
                    theExistsCode = this.getExistsCode();
                    strategy.appendField(locator, this, "existsCode", buffer, theExistsCode);
                }
                {
                    String theCodeDetail;
                    theCodeDetail = this.getCodeDetail();
                    strategy.appendField(locator, this, "codeDetail", buffer, theCodeDetail);
                }
                {
                    boolean theRemoval;
                    theRemoval = ((this.removal!= null)?this.isRemoval():false);
                    strategy.appendField(locator, this, "removal", buffer, theRemoval);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof RestaurantType.CuisineCodes.CuisineCode)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final RestaurantType.CuisineCodes.CuisineCode that = ((RestaurantType.CuisineCodes.CuisineCode) object);
                {
                    String lhsCode;
                    lhsCode = this.getCode();
                    String rhsCode;
                    rhsCode = that.getCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                        return false;
                    }
                }
                {
                    Boolean lhsIsMain;
                    lhsIsMain = this.isIsMain();
                    Boolean rhsIsMain;
                    rhsIsMain = that.isIsMain();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "isMain", lhsIsMain), LocatorUtils.property(thatLocator, "isMain", rhsIsMain), lhsIsMain, rhsIsMain)) {
                        return false;
                    }
                }
                {
                    String lhsExistsCode;
                    lhsExistsCode = this.getExistsCode();
                    String rhsExistsCode;
                    rhsExistsCode = that.getExistsCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "existsCode", lhsExistsCode), LocatorUtils.property(thatLocator, "existsCode", rhsExistsCode), lhsExistsCode, rhsExistsCode)) {
                        return false;
                    }
                }
                {
                    String lhsCodeDetail;
                    lhsCodeDetail = this.getCodeDetail();
                    String rhsCodeDetail;
                    rhsCodeDetail = that.getCodeDetail();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "codeDetail", lhsCodeDetail), LocatorUtils.property(thatLocator, "codeDetail", rhsCodeDetail), lhsCodeDetail, rhsCodeDetail)) {
                        return false;
                    }
                }
                {
                    boolean lhsRemoval;
                    lhsRemoval = ((this.removal!= null)?this.isRemoval():false);
                    boolean rhsRemoval;
                    rhsRemoval = ((that.removal!= null)?that.isRemoval():false);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "removal", lhsRemoval), LocatorUtils.property(thatLocator, "removal", rhsRemoval), lhsRemoval, rhsRemoval)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theCode;
                    theCode = this.getCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
                }
                {
                    Boolean theIsMain;
                    theIsMain = this.isIsMain();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isMain", theIsMain), currentHashCode, theIsMain);
                }
                {
                    String theExistsCode;
                    theExistsCode = this.getExistsCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "existsCode", theExistsCode), currentHashCode, theExistsCode);
                }
                {
                    String theCodeDetail;
                    theCodeDetail = this.getCodeDetail();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeDetail", theCodeDetail), currentHashCode, theCodeDetail);
                }
                {
                    boolean theRemoval;
                    theRemoval = ((this.removal!= null)?this.isRemoval():false);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "removal", theRemoval), currentHashCode, theRemoval);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof RestaurantType.CuisineCodes.CuisineCode) {
                    final RestaurantType.CuisineCodes.CuisineCode copy = ((RestaurantType.CuisineCodes.CuisineCode) draftCopy);
                    if (this.code!= null) {
                        String sourceCode;
                        sourceCode = this.getCode();
                        String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                        copy.setCode(copyCode);
                    } else {
                        copy.code = null;
                    }
                    if (this.isMain!= null) {
                        Boolean sourceIsMain;
                        sourceIsMain = this.isIsMain();
                        Boolean copyIsMain = ((Boolean) strategy.copy(LocatorUtils.property(locator, "isMain", sourceIsMain), sourceIsMain));
                        copy.setIsMain(copyIsMain);
                    } else {
                        copy.isMain = null;
                    }
                    if (this.existsCode!= null) {
                        String sourceExistsCode;
                        sourceExistsCode = this.getExistsCode();
                        String copyExistsCode = ((String) strategy.copy(LocatorUtils.property(locator, "existsCode", sourceExistsCode), sourceExistsCode));
                        copy.setExistsCode(copyExistsCode);
                    } else {
                        copy.existsCode = null;
                    }
                    if (this.codeDetail!= null) {
                        String sourceCodeDetail;
                        sourceCodeDetail = this.getCodeDetail();
                        String copyCodeDetail = ((String) strategy.copy(LocatorUtils.property(locator, "codeDetail", sourceCodeDetail), sourceCodeDetail));
                        copy.setCodeDetail(copyCodeDetail);
                    } else {
                        copy.codeDetail = null;
                    }
                    if (this.removal!= null) {
                        boolean sourceRemoval;
                        sourceRemoval = ((this.removal!= null)?this.isRemoval():false);
                        boolean copyRemoval = strategy.copy(LocatorUtils.property(locator, "removal", sourceRemoval), sourceRemoval);
                        copy.setRemoval(copyRemoval);
                    } else {
                        copy.removal = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new RestaurantType.CuisineCodes.CuisineCode();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="InfoCode" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
     *                 &lt;attribute name="Name"&gt;
     *                   &lt;simpleType&gt;
     *                     &lt;restriction base="{http://www.opentravel.org/OTA/2003/05}StringLength1to32"&gt;
     *                       &lt;enumeration value="SrvcInfo"/&gt;
     *                       &lt;enumeration value="Beverage"/&gt;
     *                       &lt;enumeration value="AvailableMealCategory"/&gt;
     *                       &lt;enumeration value="RestaurantCategory"/&gt;
     *                       &lt;enumeration value="RestaurantPolicy"/&gt;
     *                     &lt;/restriction&gt;
     *                   &lt;/simpleType&gt;
     *                 &lt;/attribute&gt;
     *                 &lt;attribute name="Code" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "infoCode"
    })
    public static class InfoCodes
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "InfoCode", required = true)
        protected List<RestaurantType.InfoCodes.InfoCode> infoCode;

        /**
         * Gets the value of the infoCode property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the infoCode property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getInfoCode().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link RestaurantType.InfoCodes.InfoCode }
         * 
         * 
         */
        public List<RestaurantType.InfoCodes.InfoCode> getInfoCode() {
            if (infoCode == null) {
                infoCode = new ArrayList<RestaurantType.InfoCodes.InfoCode>();
            }
            return this.infoCode;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<RestaurantType.InfoCodes.InfoCode> theInfoCode;
                theInfoCode = (((this.infoCode!= null)&&(!this.infoCode.isEmpty()))?this.getInfoCode():null);
                strategy.appendField(locator, this, "infoCode", buffer, theInfoCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RestaurantType.InfoCodes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final RestaurantType.InfoCodes that = ((RestaurantType.InfoCodes) object);
            {
                List<RestaurantType.InfoCodes.InfoCode> lhsInfoCode;
                lhsInfoCode = (((this.infoCode!= null)&&(!this.infoCode.isEmpty()))?this.getInfoCode():null);
                List<RestaurantType.InfoCodes.InfoCode> rhsInfoCode;
                rhsInfoCode = (((that.infoCode!= null)&&(!that.infoCode.isEmpty()))?that.getInfoCode():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "infoCode", lhsInfoCode), LocatorUtils.property(thatLocator, "infoCode", rhsInfoCode), lhsInfoCode, rhsInfoCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<RestaurantType.InfoCodes.InfoCode> theInfoCode;
                theInfoCode = (((this.infoCode!= null)&&(!this.infoCode.isEmpty()))?this.getInfoCode():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "infoCode", theInfoCode), currentHashCode, theInfoCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof RestaurantType.InfoCodes) {
                final RestaurantType.InfoCodes copy = ((RestaurantType.InfoCodes) draftCopy);
                if ((this.infoCode!= null)&&(!this.infoCode.isEmpty())) {
                    List<RestaurantType.InfoCodes.InfoCode> sourceInfoCode;
                    sourceInfoCode = (((this.infoCode!= null)&&(!this.infoCode.isEmpty()))?this.getInfoCode():null);
                    @SuppressWarnings("unchecked")
                    List<RestaurantType.InfoCodes.InfoCode> copyInfoCode = ((List<RestaurantType.InfoCodes.InfoCode> ) strategy.copy(LocatorUtils.property(locator, "infoCode", sourceInfoCode), sourceInfoCode));
                    copy.infoCode = null;
                    if (copyInfoCode!= null) {
                        List<RestaurantType.InfoCodes.InfoCode> uniqueInfoCodel = copy.getInfoCode();
                        uniqueInfoCodel.addAll(copyInfoCode);
                    }
                } else {
                    copy.infoCode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RestaurantType.InfoCodes();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
         *       &lt;attribute name="Name"&gt;
         *         &lt;simpleType&gt;
         *           &lt;restriction base="{http://www.opentravel.org/OTA/2003/05}StringLength1to32"&gt;
         *             &lt;enumeration value="SrvcInfo"/&gt;
         *             &lt;enumeration value="Beverage"/&gt;
         *             &lt;enumeration value="AvailableMealCategory"/&gt;
         *             &lt;enumeration value="RestaurantCategory"/&gt;
         *             &lt;enumeration value="RestaurantPolicy"/&gt;
         *           &lt;/restriction&gt;
         *         &lt;/simpleType&gt;
         *       &lt;/attribute&gt;
         *       &lt;attribute name="Code" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class InfoCode
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "Name")
            protected String name;
            @XmlAttribute(name = "Code")
            protected String code;
            @XmlAttribute(name = "CodeDetail")
            protected String codeDetail;
            @XmlAttribute(name = "Removal")
            protected Boolean removal;

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            /**
             * Gets the value of the code property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCode() {
                return code;
            }

            /**
             * Sets the value of the code property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCode(String value) {
                this.code = value;
            }

            /**
             * Gets the value of the codeDetail property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCodeDetail() {
                return codeDetail;
            }

            /**
             * Sets the value of the codeDetail property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCodeDetail(String value) {
                this.codeDetail = value;
            }

            /**
             * Gets the value of the removal property.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public boolean isRemoval() {
                if (removal == null) {
                    return false;
                } else {
                    return removal;
                }
            }

            /**
             * Sets the value of the removal property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             */
            public void setRemoval(Boolean value) {
                this.removal = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theName;
                    theName = this.getName();
                    strategy.appendField(locator, this, "name", buffer, theName);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    strategy.appendField(locator, this, "code", buffer, theCode);
                }
                {
                    String theCodeDetail;
                    theCodeDetail = this.getCodeDetail();
                    strategy.appendField(locator, this, "codeDetail", buffer, theCodeDetail);
                }
                {
                    boolean theRemoval;
                    theRemoval = ((this.removal!= null)?this.isRemoval():false);
                    strategy.appendField(locator, this, "removal", buffer, theRemoval);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof RestaurantType.InfoCodes.InfoCode)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final RestaurantType.InfoCodes.InfoCode that = ((RestaurantType.InfoCodes.InfoCode) object);
                {
                    String lhsName;
                    lhsName = this.getName();
                    String rhsName;
                    rhsName = that.getName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                        return false;
                    }
                }
                {
                    String lhsCode;
                    lhsCode = this.getCode();
                    String rhsCode;
                    rhsCode = that.getCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                        return false;
                    }
                }
                {
                    String lhsCodeDetail;
                    lhsCodeDetail = this.getCodeDetail();
                    String rhsCodeDetail;
                    rhsCodeDetail = that.getCodeDetail();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "codeDetail", lhsCodeDetail), LocatorUtils.property(thatLocator, "codeDetail", rhsCodeDetail), lhsCodeDetail, rhsCodeDetail)) {
                        return false;
                    }
                }
                {
                    boolean lhsRemoval;
                    lhsRemoval = ((this.removal!= null)?this.isRemoval():false);
                    boolean rhsRemoval;
                    rhsRemoval = ((that.removal!= null)?that.isRemoval():false);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "removal", lhsRemoval), LocatorUtils.property(thatLocator, "removal", rhsRemoval), lhsRemoval, rhsRemoval)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theName;
                    theName = this.getName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
                }
                {
                    String theCodeDetail;
                    theCodeDetail = this.getCodeDetail();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeDetail", theCodeDetail), currentHashCode, theCodeDetail);
                }
                {
                    boolean theRemoval;
                    theRemoval = ((this.removal!= null)?this.isRemoval():false);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "removal", theRemoval), currentHashCode, theRemoval);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof RestaurantType.InfoCodes.InfoCode) {
                    final RestaurantType.InfoCodes.InfoCode copy = ((RestaurantType.InfoCodes.InfoCode) draftCopy);
                    if (this.name!= null) {
                        String sourceName;
                        sourceName = this.getName();
                        String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                        copy.setName(copyName);
                    } else {
                        copy.name = null;
                    }
                    if (this.code!= null) {
                        String sourceCode;
                        sourceCode = this.getCode();
                        String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                        copy.setCode(copyCode);
                    } else {
                        copy.code = null;
                    }
                    if (this.codeDetail!= null) {
                        String sourceCodeDetail;
                        sourceCodeDetail = this.getCodeDetail();
                        String copyCodeDetail = ((String) strategy.copy(LocatorUtils.property(locator, "codeDetail", sourceCodeDetail), sourceCodeDetail));
                        copy.setCodeDetail(copyCodeDetail);
                    } else {
                        copy.codeDetail = null;
                    }
                    if (this.removal!= null) {
                        boolean sourceRemoval;
                        sourceRemoval = ((this.removal!= null)?this.isRemoval():false);
                        boolean copyRemoval = strategy.copy(LocatorUtils.property(locator, "removal", sourceRemoval), sourceRemoval);
                        copy.setRemoval(copyRemoval);
                    } else {
                        copy.removal = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new RestaurantType.InfoCodes.InfoCode();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}MultimediaDescriptionsType"&gt;
     *       &lt;attribute name="Attire" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class MultimediaDescriptions
        extends MultimediaDescriptionsType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Attire")
        protected String attire;

        /**
         * Gets the value of the attire property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAttire() {
            return attire;
        }

        /**
         * Sets the value of the attire property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAttire(String value) {
            this.attire = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                String theAttire;
                theAttire = this.getAttire();
                strategy.appendField(locator, this, "attire", buffer, theAttire);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RestaurantType.MultimediaDescriptions)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final RestaurantType.MultimediaDescriptions that = ((RestaurantType.MultimediaDescriptions) object);
            {
                String lhsAttire;
                lhsAttire = this.getAttire();
                String rhsAttire;
                rhsAttire = that.getAttire();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "attire", lhsAttire), LocatorUtils.property(thatLocator, "attire", rhsAttire), lhsAttire, rhsAttire)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                String theAttire;
                theAttire = this.getAttire();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attire", theAttire), currentHashCode, theAttire);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof RestaurantType.MultimediaDescriptions) {
                final RestaurantType.MultimediaDescriptions copy = ((RestaurantType.MultimediaDescriptions) draftCopy);
                if (this.attire!= null) {
                    String sourceAttire;
                    sourceAttire = this.getAttire();
                    String copyAttire = ((String) strategy.copy(LocatorUtils.property(locator, "attire", sourceAttire), sourceAttire));
                    copy.setAttire(copyAttire);
                } else {
                    copy.attire = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RestaurantType.MultimediaDescriptions();
        }

    }

}
