//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Defines user preferences to be used in conducting a search.
 * 
 * <p>Java class for AirSearchPrefsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AirSearchPrefsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="VendorPref" type="{http://www.opentravel.org/OTA/2003/05}CompanyNamePrefType" maxOccurs="99" minOccurs="0"/&gt;
 *         &lt;element name="FlightTypePref" maxOccurs="3" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FlightTypePrefGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FareRestrictPref" maxOccurs="4" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="AdvResTicketing" type="{http://www.opentravel.org/OTA/2003/05}AdvResTicketingType" minOccurs="0"/&gt;
 *                   &lt;element name="StayRestrictions" type="{http://www.opentravel.org/OTA/2003/05}StayRestrictionsType" minOccurs="0"/&gt;
 *                   &lt;element name="VoluntaryChanges" type="{http://www.opentravel.org/OTA/2003/05}VoluntaryChangesType" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FareRestrictPrefGroup"/&gt;
 *                 &lt;attribute name="FareDisplayCurrency" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *                 &lt;attribute name="CurrencyOverride" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="EquipPref" type="{http://www.opentravel.org/OTA/2003/05}EquipmentTypePref" maxOccurs="9" minOccurs="0"/&gt;
 *         &lt;element name="CabinPref" maxOccurs="3" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CabinPrefGroup"/&gt;
 *                 &lt;attribute name="CabinSubtype" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="TicketDistribPref" maxOccurs="3" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;TicketDistribPrefType"&gt;
 *                 &lt;attribute name="LastTicketDate" type="{http://www.w3.org/2001/XMLSchema}dateTime" /&gt;
 *                 &lt;attribute name="FirstTicketDate" type="{http://www.w3.org/2001/XMLSchema}dateTime" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SmokingIndicatorGroup"/&gt;
 *       &lt;attribute name="OnTimeRate" type="{http://www.opentravel.org/OTA/2003/05}Percentage" /&gt;
 *       &lt;attribute name="ETicketDesired" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="MaxStopsQuantity" type="{http://www.opentravel.org/OTA/2003/05}Numeric0to4" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AirSearchPrefsType", propOrder = {
    "vendorPref",
    "flightTypePref",
    "fareRestrictPref",
    "equipPref",
    "cabinPref",
    "ticketDistribPref"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.OTAAirLowFareSearchRQ.TravelPreferences.class
})
public class AirSearchPrefsType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "VendorPref")
    protected List<CompanyNamePrefType> vendorPref;
    @XmlElement(name = "FlightTypePref")
    protected List<AirSearchPrefsType.FlightTypePref> flightTypePref;
    @XmlElement(name = "FareRestrictPref")
    protected List<AirSearchPrefsType.FareRestrictPref> fareRestrictPref;
    @XmlElement(name = "EquipPref")
    protected List<EquipmentTypePref> equipPref;
    @XmlElement(name = "CabinPref")
    protected List<AirSearchPrefsType.CabinPref> cabinPref;
    @XmlElement(name = "TicketDistribPref")
    protected List<AirSearchPrefsType.TicketDistribPref> ticketDistribPref;
    @XmlAttribute(name = "OnTimeRate")
    protected BigDecimal onTimeRate;
    @XmlAttribute(name = "ETicketDesired")
    protected Boolean eTicketDesired;
    @XmlAttribute(name = "MaxStopsQuantity")
    protected Integer maxStopsQuantity;
    @XmlAttribute(name = "SmokingAllowed")
    protected Boolean smokingAllowed;

    /**
     * Gets the value of the vendorPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the vendorPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVendorPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CompanyNamePrefType }
     * 
     * 
     */
    public List<CompanyNamePrefType> getVendorPref() {
        if (vendorPref == null) {
            vendorPref = new ArrayList<CompanyNamePrefType>();
        }
        return this.vendorPref;
    }

    /**
     * Gets the value of the flightTypePref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the flightTypePref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFlightTypePref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirSearchPrefsType.FlightTypePref }
     * 
     * 
     */
    public List<AirSearchPrefsType.FlightTypePref> getFlightTypePref() {
        if (flightTypePref == null) {
            flightTypePref = new ArrayList<AirSearchPrefsType.FlightTypePref>();
        }
        return this.flightTypePref;
    }

    /**
     * Gets the value of the fareRestrictPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fareRestrictPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFareRestrictPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirSearchPrefsType.FareRestrictPref }
     * 
     * 
     */
    public List<AirSearchPrefsType.FareRestrictPref> getFareRestrictPref() {
        if (fareRestrictPref == null) {
            fareRestrictPref = new ArrayList<AirSearchPrefsType.FareRestrictPref>();
        }
        return this.fareRestrictPref;
    }

    /**
     * Gets the value of the equipPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the equipPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEquipPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EquipmentTypePref }
     * 
     * 
     */
    public List<EquipmentTypePref> getEquipPref() {
        if (equipPref == null) {
            equipPref = new ArrayList<EquipmentTypePref>();
        }
        return this.equipPref;
    }

    /**
     * Gets the value of the cabinPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cabinPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCabinPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirSearchPrefsType.CabinPref }
     * 
     * 
     */
    public List<AirSearchPrefsType.CabinPref> getCabinPref() {
        if (cabinPref == null) {
            cabinPref = new ArrayList<AirSearchPrefsType.CabinPref>();
        }
        return this.cabinPref;
    }

    /**
     * Gets the value of the ticketDistribPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ticketDistribPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTicketDistribPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirSearchPrefsType.TicketDistribPref }
     * 
     * 
     */
    public List<AirSearchPrefsType.TicketDistribPref> getTicketDistribPref() {
        if (ticketDistribPref == null) {
            ticketDistribPref = new ArrayList<AirSearchPrefsType.TicketDistribPref>();
        }
        return this.ticketDistribPref;
    }

    /**
     * Gets the value of the onTimeRate property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getOnTimeRate() {
        return onTimeRate;
    }

    /**
     * Sets the value of the onTimeRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setOnTimeRate(BigDecimal value) {
        this.onTimeRate = value;
    }

    /**
     * Gets the value of the eTicketDesired property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isETicketDesired() {
        if (eTicketDesired == null) {
            return false;
        } else {
            return eTicketDesired;
        }
    }

    /**
     * Sets the value of the eTicketDesired property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setETicketDesired(Boolean value) {
        this.eTicketDesired = value;
    }

    /**
     * Gets the value of the maxStopsQuantity property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMaxStopsQuantity() {
        return maxStopsQuantity;
    }

    /**
     * Sets the value of the maxStopsQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMaxStopsQuantity(Integer value) {
        this.maxStopsQuantity = value;
    }

    /**
     * Gets the value of the smokingAllowed property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isSmokingAllowed() {
        if (smokingAllowed == null) {
            return false;
        } else {
            return smokingAllowed;
        }
    }

    /**
     * Sets the value of the smokingAllowed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setSmokingAllowed(Boolean value) {
        this.smokingAllowed = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<CompanyNamePrefType> theVendorPref;
            theVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
            strategy.appendField(locator, this, "vendorPref", buffer, theVendorPref);
        }
        {
            List<AirSearchPrefsType.FlightTypePref> theFlightTypePref;
            theFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
            strategy.appendField(locator, this, "flightTypePref", buffer, theFlightTypePref);
        }
        {
            List<AirSearchPrefsType.FareRestrictPref> theFareRestrictPref;
            theFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
            strategy.appendField(locator, this, "fareRestrictPref", buffer, theFareRestrictPref);
        }
        {
            List<EquipmentTypePref> theEquipPref;
            theEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
            strategy.appendField(locator, this, "equipPref", buffer, theEquipPref);
        }
        {
            List<AirSearchPrefsType.CabinPref> theCabinPref;
            theCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
            strategy.appendField(locator, this, "cabinPref", buffer, theCabinPref);
        }
        {
            List<AirSearchPrefsType.TicketDistribPref> theTicketDistribPref;
            theTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            strategy.appendField(locator, this, "ticketDistribPref", buffer, theTicketDistribPref);
        }
        {
            BigDecimal theOnTimeRate;
            theOnTimeRate = this.getOnTimeRate();
            strategy.appendField(locator, this, "onTimeRate", buffer, theOnTimeRate);
        }
        {
            boolean theETicketDesired;
            theETicketDesired = ((this.eTicketDesired!= null)?this.isETicketDesired():false);
            strategy.appendField(locator, this, "eTicketDesired", buffer, theETicketDesired);
        }
        {
            Integer theMaxStopsQuantity;
            theMaxStopsQuantity = this.getMaxStopsQuantity();
            strategy.appendField(locator, this, "maxStopsQuantity", buffer, theMaxStopsQuantity);
        }
        {
            boolean theSmokingAllowed;
            theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            strategy.appendField(locator, this, "smokingAllowed", buffer, theSmokingAllowed);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AirSearchPrefsType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AirSearchPrefsType that = ((AirSearchPrefsType) object);
        {
            List<CompanyNamePrefType> lhsVendorPref;
            lhsVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
            List<CompanyNamePrefType> rhsVendorPref;
            rhsVendorPref = (((that.vendorPref!= null)&&(!that.vendorPref.isEmpty()))?that.getVendorPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vendorPref", lhsVendorPref), LocatorUtils.property(thatLocator, "vendorPref", rhsVendorPref), lhsVendorPref, rhsVendorPref)) {
                return false;
            }
        }
        {
            List<AirSearchPrefsType.FlightTypePref> lhsFlightTypePref;
            lhsFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
            List<AirSearchPrefsType.FlightTypePref> rhsFlightTypePref;
            rhsFlightTypePref = (((that.flightTypePref!= null)&&(!that.flightTypePref.isEmpty()))?that.getFlightTypePref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightTypePref", lhsFlightTypePref), LocatorUtils.property(thatLocator, "flightTypePref", rhsFlightTypePref), lhsFlightTypePref, rhsFlightTypePref)) {
                return false;
            }
        }
        {
            List<AirSearchPrefsType.FareRestrictPref> lhsFareRestrictPref;
            lhsFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
            List<AirSearchPrefsType.FareRestrictPref> rhsFareRestrictPref;
            rhsFareRestrictPref = (((that.fareRestrictPref!= null)&&(!that.fareRestrictPref.isEmpty()))?that.getFareRestrictPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareRestrictPref", lhsFareRestrictPref), LocatorUtils.property(thatLocator, "fareRestrictPref", rhsFareRestrictPref), lhsFareRestrictPref, rhsFareRestrictPref)) {
                return false;
            }
        }
        {
            List<EquipmentTypePref> lhsEquipPref;
            lhsEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
            List<EquipmentTypePref> rhsEquipPref;
            rhsEquipPref = (((that.equipPref!= null)&&(!that.equipPref.isEmpty()))?that.getEquipPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "equipPref", lhsEquipPref), LocatorUtils.property(thatLocator, "equipPref", rhsEquipPref), lhsEquipPref, rhsEquipPref)) {
                return false;
            }
        }
        {
            List<AirSearchPrefsType.CabinPref> lhsCabinPref;
            lhsCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
            List<AirSearchPrefsType.CabinPref> rhsCabinPref;
            rhsCabinPref = (((that.cabinPref!= null)&&(!that.cabinPref.isEmpty()))?that.getCabinPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cabinPref", lhsCabinPref), LocatorUtils.property(thatLocator, "cabinPref", rhsCabinPref), lhsCabinPref, rhsCabinPref)) {
                return false;
            }
        }
        {
            List<AirSearchPrefsType.TicketDistribPref> lhsTicketDistribPref;
            lhsTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            List<AirSearchPrefsType.TicketDistribPref> rhsTicketDistribPref;
            rhsTicketDistribPref = (((that.ticketDistribPref!= null)&&(!that.ticketDistribPref.isEmpty()))?that.getTicketDistribPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDistribPref", lhsTicketDistribPref), LocatorUtils.property(thatLocator, "ticketDistribPref", rhsTicketDistribPref), lhsTicketDistribPref, rhsTicketDistribPref)) {
                return false;
            }
        }
        {
            BigDecimal lhsOnTimeRate;
            lhsOnTimeRate = this.getOnTimeRate();
            BigDecimal rhsOnTimeRate;
            rhsOnTimeRate = that.getOnTimeRate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "onTimeRate", lhsOnTimeRate), LocatorUtils.property(thatLocator, "onTimeRate", rhsOnTimeRate), lhsOnTimeRate, rhsOnTimeRate)) {
                return false;
            }
        }
        {
            boolean lhsETicketDesired;
            lhsETicketDesired = ((this.eTicketDesired!= null)?this.isETicketDesired():false);
            boolean rhsETicketDesired;
            rhsETicketDesired = ((that.eTicketDesired!= null)?that.isETicketDesired():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eTicketDesired", lhsETicketDesired), LocatorUtils.property(thatLocator, "eTicketDesired", rhsETicketDesired), lhsETicketDesired, rhsETicketDesired)) {
                return false;
            }
        }
        {
            Integer lhsMaxStopsQuantity;
            lhsMaxStopsQuantity = this.getMaxStopsQuantity();
            Integer rhsMaxStopsQuantity;
            rhsMaxStopsQuantity = that.getMaxStopsQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxStopsQuantity", lhsMaxStopsQuantity), LocatorUtils.property(thatLocator, "maxStopsQuantity", rhsMaxStopsQuantity), lhsMaxStopsQuantity, rhsMaxStopsQuantity)) {
                return false;
            }
        }
        {
            boolean lhsSmokingAllowed;
            lhsSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            boolean rhsSmokingAllowed;
            rhsSmokingAllowed = ((that.smokingAllowed!= null)?that.isSmokingAllowed():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smokingAllowed", lhsSmokingAllowed), LocatorUtils.property(thatLocator, "smokingAllowed", rhsSmokingAllowed), lhsSmokingAllowed, rhsSmokingAllowed)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<CompanyNamePrefType> theVendorPref;
            theVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vendorPref", theVendorPref), currentHashCode, theVendorPref);
        }
        {
            List<AirSearchPrefsType.FlightTypePref> theFlightTypePref;
            theFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightTypePref", theFlightTypePref), currentHashCode, theFlightTypePref);
        }
        {
            List<AirSearchPrefsType.FareRestrictPref> theFareRestrictPref;
            theFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareRestrictPref", theFareRestrictPref), currentHashCode, theFareRestrictPref);
        }
        {
            List<EquipmentTypePref> theEquipPref;
            theEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "equipPref", theEquipPref), currentHashCode, theEquipPref);
        }
        {
            List<AirSearchPrefsType.CabinPref> theCabinPref;
            theCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cabinPref", theCabinPref), currentHashCode, theCabinPref);
        }
        {
            List<AirSearchPrefsType.TicketDistribPref> theTicketDistribPref;
            theTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDistribPref", theTicketDistribPref), currentHashCode, theTicketDistribPref);
        }
        {
            BigDecimal theOnTimeRate;
            theOnTimeRate = this.getOnTimeRate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onTimeRate", theOnTimeRate), currentHashCode, theOnTimeRate);
        }
        {
            boolean theETicketDesired;
            theETicketDesired = ((this.eTicketDesired!= null)?this.isETicketDesired():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eTicketDesired", theETicketDesired), currentHashCode, theETicketDesired);
        }
        {
            Integer theMaxStopsQuantity;
            theMaxStopsQuantity = this.getMaxStopsQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxStopsQuantity", theMaxStopsQuantity), currentHashCode, theMaxStopsQuantity);
        }
        {
            boolean theSmokingAllowed;
            theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smokingAllowed", theSmokingAllowed), currentHashCode, theSmokingAllowed);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AirSearchPrefsType) {
            final AirSearchPrefsType copy = ((AirSearchPrefsType) draftCopy);
            if ((this.vendorPref!= null)&&(!this.vendorPref.isEmpty())) {
                List<CompanyNamePrefType> sourceVendorPref;
                sourceVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
                @SuppressWarnings("unchecked")
                List<CompanyNamePrefType> copyVendorPref = ((List<CompanyNamePrefType> ) strategy.copy(LocatorUtils.property(locator, "vendorPref", sourceVendorPref), sourceVendorPref));
                copy.vendorPref = null;
                if (copyVendorPref!= null) {
                    List<CompanyNamePrefType> uniqueVendorPrefl = copy.getVendorPref();
                    uniqueVendorPrefl.addAll(copyVendorPref);
                }
            } else {
                copy.vendorPref = null;
            }
            if ((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty())) {
                List<AirSearchPrefsType.FlightTypePref> sourceFlightTypePref;
                sourceFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
                @SuppressWarnings("unchecked")
                List<AirSearchPrefsType.FlightTypePref> copyFlightTypePref = ((List<AirSearchPrefsType.FlightTypePref> ) strategy.copy(LocatorUtils.property(locator, "flightTypePref", sourceFlightTypePref), sourceFlightTypePref));
                copy.flightTypePref = null;
                if (copyFlightTypePref!= null) {
                    List<AirSearchPrefsType.FlightTypePref> uniqueFlightTypePrefl = copy.getFlightTypePref();
                    uniqueFlightTypePrefl.addAll(copyFlightTypePref);
                }
            } else {
                copy.flightTypePref = null;
            }
            if ((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty())) {
                List<AirSearchPrefsType.FareRestrictPref> sourceFareRestrictPref;
                sourceFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
                @SuppressWarnings("unchecked")
                List<AirSearchPrefsType.FareRestrictPref> copyFareRestrictPref = ((List<AirSearchPrefsType.FareRestrictPref> ) strategy.copy(LocatorUtils.property(locator, "fareRestrictPref", sourceFareRestrictPref), sourceFareRestrictPref));
                copy.fareRestrictPref = null;
                if (copyFareRestrictPref!= null) {
                    List<AirSearchPrefsType.FareRestrictPref> uniqueFareRestrictPrefl = copy.getFareRestrictPref();
                    uniqueFareRestrictPrefl.addAll(copyFareRestrictPref);
                }
            } else {
                copy.fareRestrictPref = null;
            }
            if ((this.equipPref!= null)&&(!this.equipPref.isEmpty())) {
                List<EquipmentTypePref> sourceEquipPref;
                sourceEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
                @SuppressWarnings("unchecked")
                List<EquipmentTypePref> copyEquipPref = ((List<EquipmentTypePref> ) strategy.copy(LocatorUtils.property(locator, "equipPref", sourceEquipPref), sourceEquipPref));
                copy.equipPref = null;
                if (copyEquipPref!= null) {
                    List<EquipmentTypePref> uniqueEquipPrefl = copy.getEquipPref();
                    uniqueEquipPrefl.addAll(copyEquipPref);
                }
            } else {
                copy.equipPref = null;
            }
            if ((this.cabinPref!= null)&&(!this.cabinPref.isEmpty())) {
                List<AirSearchPrefsType.CabinPref> sourceCabinPref;
                sourceCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
                @SuppressWarnings("unchecked")
                List<AirSearchPrefsType.CabinPref> copyCabinPref = ((List<AirSearchPrefsType.CabinPref> ) strategy.copy(LocatorUtils.property(locator, "cabinPref", sourceCabinPref), sourceCabinPref));
                copy.cabinPref = null;
                if (copyCabinPref!= null) {
                    List<AirSearchPrefsType.CabinPref> uniqueCabinPrefl = copy.getCabinPref();
                    uniqueCabinPrefl.addAll(copyCabinPref);
                }
            } else {
                copy.cabinPref = null;
            }
            if ((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty())) {
                List<AirSearchPrefsType.TicketDistribPref> sourceTicketDistribPref;
                sourceTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
                @SuppressWarnings("unchecked")
                List<AirSearchPrefsType.TicketDistribPref> copyTicketDistribPref = ((List<AirSearchPrefsType.TicketDistribPref> ) strategy.copy(LocatorUtils.property(locator, "ticketDistribPref", sourceTicketDistribPref), sourceTicketDistribPref));
                copy.ticketDistribPref = null;
                if (copyTicketDistribPref!= null) {
                    List<AirSearchPrefsType.TicketDistribPref> uniqueTicketDistribPrefl = copy.getTicketDistribPref();
                    uniqueTicketDistribPrefl.addAll(copyTicketDistribPref);
                }
            } else {
                copy.ticketDistribPref = null;
            }
            if (this.onTimeRate!= null) {
                BigDecimal sourceOnTimeRate;
                sourceOnTimeRate = this.getOnTimeRate();
                BigDecimal copyOnTimeRate = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "onTimeRate", sourceOnTimeRate), sourceOnTimeRate));
                copy.setOnTimeRate(copyOnTimeRate);
            } else {
                copy.onTimeRate = null;
            }
            if (this.eTicketDesired!= null) {
                boolean sourceETicketDesired;
                sourceETicketDesired = ((this.eTicketDesired!= null)?this.isETicketDesired():false);
                boolean copyETicketDesired = strategy.copy(LocatorUtils.property(locator, "eTicketDesired", sourceETicketDesired), sourceETicketDesired);
                copy.setETicketDesired(copyETicketDesired);
            } else {
                copy.eTicketDesired = null;
            }
            if (this.maxStopsQuantity!= null) {
                Integer sourceMaxStopsQuantity;
                sourceMaxStopsQuantity = this.getMaxStopsQuantity();
                Integer copyMaxStopsQuantity = ((Integer) strategy.copy(LocatorUtils.property(locator, "maxStopsQuantity", sourceMaxStopsQuantity), sourceMaxStopsQuantity));
                copy.setMaxStopsQuantity(copyMaxStopsQuantity);
            } else {
                copy.maxStopsQuantity = null;
            }
            if (this.smokingAllowed!= null) {
                boolean sourceSmokingAllowed;
                sourceSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
                boolean copySmokingAllowed = strategy.copy(LocatorUtils.property(locator, "smokingAllowed", sourceSmokingAllowed), sourceSmokingAllowed);
                copy.setSmokingAllowed(copySmokingAllowed);
            } else {
                copy.smokingAllowed = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AirSearchPrefsType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CabinPrefGroup"/&gt;
     *       &lt;attribute name="CabinSubtype" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CabinPref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "CabinSubtype")
        protected String cabinSubtype;
        @XmlAttribute(name = "Cabin")
        protected CabinType cabin;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the cabinSubtype property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCabinSubtype() {
            return cabinSubtype;
        }

        /**
         * Sets the value of the cabinSubtype property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCabinSubtype(String value) {
            this.cabinSubtype = value;
        }

        /**
         * Gets the value of the cabin property.
         * 
         * @return
         *     possible object is
         *     {@link CabinType }
         *     
         */
        public CabinType getCabin() {
            return cabin;
        }

        /**
         * Sets the value of the cabin property.
         * 
         * @param value
         *     allowed object is
         *     {@link CabinType }
         *     
         */
        public void setCabin(CabinType value) {
            this.cabin = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theCabinSubtype;
                theCabinSubtype = this.getCabinSubtype();
                strategy.appendField(locator, this, "cabinSubtype", buffer, theCabinSubtype);
            }
            {
                CabinType theCabin;
                theCabin = this.getCabin();
                strategy.appendField(locator, this, "cabin", buffer, theCabin);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirSearchPrefsType.CabinPref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirSearchPrefsType.CabinPref that = ((AirSearchPrefsType.CabinPref) object);
            {
                String lhsCabinSubtype;
                lhsCabinSubtype = this.getCabinSubtype();
                String rhsCabinSubtype;
                rhsCabinSubtype = that.getCabinSubtype();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "cabinSubtype", lhsCabinSubtype), LocatorUtils.property(thatLocator, "cabinSubtype", rhsCabinSubtype), lhsCabinSubtype, rhsCabinSubtype)) {
                    return false;
                }
            }
            {
                CabinType lhsCabin;
                lhsCabin = this.getCabin();
                CabinType rhsCabin;
                rhsCabin = that.getCabin();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "cabin", lhsCabin), LocatorUtils.property(thatLocator, "cabin", rhsCabin), lhsCabin, rhsCabin)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theCabinSubtype;
                theCabinSubtype = this.getCabinSubtype();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cabinSubtype", theCabinSubtype), currentHashCode, theCabinSubtype);
            }
            {
                CabinType theCabin;
                theCabin = this.getCabin();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cabin", theCabin), currentHashCode, theCabin);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirSearchPrefsType.CabinPref) {
                final AirSearchPrefsType.CabinPref copy = ((AirSearchPrefsType.CabinPref) draftCopy);
                if (this.cabinSubtype!= null) {
                    String sourceCabinSubtype;
                    sourceCabinSubtype = this.getCabinSubtype();
                    String copyCabinSubtype = ((String) strategy.copy(LocatorUtils.property(locator, "cabinSubtype", sourceCabinSubtype), sourceCabinSubtype));
                    copy.setCabinSubtype(copyCabinSubtype);
                } else {
                    copy.cabinSubtype = null;
                }
                if (this.cabin!= null) {
                    CabinType sourceCabin;
                    sourceCabin = this.getCabin();
                    CabinType copyCabin = ((CabinType) strategy.copy(LocatorUtils.property(locator, "cabin", sourceCabin), sourceCabin));
                    copy.setCabin(copyCabin);
                } else {
                    copy.cabin = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirSearchPrefsType.CabinPref();
        }

    }


    /**
     *  Container used for specifying or limiting acceptable fare restrictions.
     * 
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="AdvResTicketing" type="{http://www.opentravel.org/OTA/2003/05}AdvResTicketingType" minOccurs="0"/&gt;
     *         &lt;element name="StayRestrictions" type="{http://www.opentravel.org/OTA/2003/05}StayRestrictionsType" minOccurs="0"/&gt;
     *         &lt;element name="VoluntaryChanges" type="{http://www.opentravel.org/OTA/2003/05}VoluntaryChangesType" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FareRestrictPrefGroup"/&gt;
     *       &lt;attribute name="FareDisplayCurrency" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
     *       &lt;attribute name="CurrencyOverride" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "advResTicketing",
        "stayRestrictions",
        "voluntaryChanges"
    })
    public static class FareRestrictPref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AdvResTicketing")
        protected AdvResTicketingType advResTicketing;
        @XmlElement(name = "StayRestrictions")
        protected StayRestrictionsType stayRestrictions;
        @XmlElement(name = "VoluntaryChanges")
        protected VoluntaryChangesType voluntaryChanges;
        @XmlAttribute(name = "FareDisplayCurrency")
        protected String fareDisplayCurrency;
        @XmlAttribute(name = "CurrencyOverride")
        protected String currencyOverride;
        @XmlAttribute(name = "FareRestriction")
        protected String fareRestriction;
        @XmlAttribute(name = "Date")
        protected String date;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the advResTicketing property.
         * 
         * @return
         *     possible object is
         *     {@link AdvResTicketingType }
         *     
         */
        public AdvResTicketingType getAdvResTicketing() {
            return advResTicketing;
        }

        /**
         * Sets the value of the advResTicketing property.
         * 
         * @param value
         *     allowed object is
         *     {@link AdvResTicketingType }
         *     
         */
        public void setAdvResTicketing(AdvResTicketingType value) {
            this.advResTicketing = value;
        }

        /**
         * Gets the value of the stayRestrictions property.
         * 
         * @return
         *     possible object is
         *     {@link StayRestrictionsType }
         *     
         */
        public StayRestrictionsType getStayRestrictions() {
            return stayRestrictions;
        }

        /**
         * Sets the value of the stayRestrictions property.
         * 
         * @param value
         *     allowed object is
         *     {@link StayRestrictionsType }
         *     
         */
        public void setStayRestrictions(StayRestrictionsType value) {
            this.stayRestrictions = value;
        }

        /**
         * Gets the value of the voluntaryChanges property.
         * 
         * @return
         *     possible object is
         *     {@link VoluntaryChangesType }
         *     
         */
        public VoluntaryChangesType getVoluntaryChanges() {
            return voluntaryChanges;
        }

        /**
         * Sets the value of the voluntaryChanges property.
         * 
         * @param value
         *     allowed object is
         *     {@link VoluntaryChangesType }
         *     
         */
        public void setVoluntaryChanges(VoluntaryChangesType value) {
            this.voluntaryChanges = value;
        }

        /**
         * Gets the value of the fareDisplayCurrency property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFareDisplayCurrency() {
            return fareDisplayCurrency;
        }

        /**
         * Sets the value of the fareDisplayCurrency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFareDisplayCurrency(String value) {
            this.fareDisplayCurrency = value;
        }

        /**
         * Gets the value of the currencyOverride property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyOverride() {
            return currencyOverride;
        }

        /**
         * Sets the value of the currencyOverride property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyOverride(String value) {
            this.currencyOverride = value;
        }

        /**
         * Gets the value of the fareRestriction property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFareRestriction() {
            return fareRestriction;
        }

        /**
         * Sets the value of the fareRestriction property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFareRestriction(String value) {
            this.fareRestriction = value;
        }

        /**
         * Gets the value of the date property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDate() {
            return date;
        }

        /**
         * Sets the value of the date property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDate(String value) {
            this.date = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                AdvResTicketingType theAdvResTicketing;
                theAdvResTicketing = this.getAdvResTicketing();
                strategy.appendField(locator, this, "advResTicketing", buffer, theAdvResTicketing);
            }
            {
                StayRestrictionsType theStayRestrictions;
                theStayRestrictions = this.getStayRestrictions();
                strategy.appendField(locator, this, "stayRestrictions", buffer, theStayRestrictions);
            }
            {
                VoluntaryChangesType theVoluntaryChanges;
                theVoluntaryChanges = this.getVoluntaryChanges();
                strategy.appendField(locator, this, "voluntaryChanges", buffer, theVoluntaryChanges);
            }
            {
                String theFareDisplayCurrency;
                theFareDisplayCurrency = this.getFareDisplayCurrency();
                strategy.appendField(locator, this, "fareDisplayCurrency", buffer, theFareDisplayCurrency);
            }
            {
                String theCurrencyOverride;
                theCurrencyOverride = this.getCurrencyOverride();
                strategy.appendField(locator, this, "currencyOverride", buffer, theCurrencyOverride);
            }
            {
                String theFareRestriction;
                theFareRestriction = this.getFareRestriction();
                strategy.appendField(locator, this, "fareRestriction", buffer, theFareRestriction);
            }
            {
                String theDate;
                theDate = this.getDate();
                strategy.appendField(locator, this, "date", buffer, theDate);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirSearchPrefsType.FareRestrictPref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirSearchPrefsType.FareRestrictPref that = ((AirSearchPrefsType.FareRestrictPref) object);
            {
                AdvResTicketingType lhsAdvResTicketing;
                lhsAdvResTicketing = this.getAdvResTicketing();
                AdvResTicketingType rhsAdvResTicketing;
                rhsAdvResTicketing = that.getAdvResTicketing();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "advResTicketing", lhsAdvResTicketing), LocatorUtils.property(thatLocator, "advResTicketing", rhsAdvResTicketing), lhsAdvResTicketing, rhsAdvResTicketing)) {
                    return false;
                }
            }
            {
                StayRestrictionsType lhsStayRestrictions;
                lhsStayRestrictions = this.getStayRestrictions();
                StayRestrictionsType rhsStayRestrictions;
                rhsStayRestrictions = that.getStayRestrictions();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "stayRestrictions", lhsStayRestrictions), LocatorUtils.property(thatLocator, "stayRestrictions", rhsStayRestrictions), lhsStayRestrictions, rhsStayRestrictions)) {
                    return false;
                }
            }
            {
                VoluntaryChangesType lhsVoluntaryChanges;
                lhsVoluntaryChanges = this.getVoluntaryChanges();
                VoluntaryChangesType rhsVoluntaryChanges;
                rhsVoluntaryChanges = that.getVoluntaryChanges();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "voluntaryChanges", lhsVoluntaryChanges), LocatorUtils.property(thatLocator, "voluntaryChanges", rhsVoluntaryChanges), lhsVoluntaryChanges, rhsVoluntaryChanges)) {
                    return false;
                }
            }
            {
                String lhsFareDisplayCurrency;
                lhsFareDisplayCurrency = this.getFareDisplayCurrency();
                String rhsFareDisplayCurrency;
                rhsFareDisplayCurrency = that.getFareDisplayCurrency();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareDisplayCurrency", lhsFareDisplayCurrency), LocatorUtils.property(thatLocator, "fareDisplayCurrency", rhsFareDisplayCurrency), lhsFareDisplayCurrency, rhsFareDisplayCurrency)) {
                    return false;
                }
            }
            {
                String lhsCurrencyOverride;
                lhsCurrencyOverride = this.getCurrencyOverride();
                String rhsCurrencyOverride;
                rhsCurrencyOverride = that.getCurrencyOverride();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyOverride", lhsCurrencyOverride), LocatorUtils.property(thatLocator, "currencyOverride", rhsCurrencyOverride), lhsCurrencyOverride, rhsCurrencyOverride)) {
                    return false;
                }
            }
            {
                String lhsFareRestriction;
                lhsFareRestriction = this.getFareRestriction();
                String rhsFareRestriction;
                rhsFareRestriction = that.getFareRestriction();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareRestriction", lhsFareRestriction), LocatorUtils.property(thatLocator, "fareRestriction", rhsFareRestriction), lhsFareRestriction, rhsFareRestriction)) {
                    return false;
                }
            }
            {
                String lhsDate;
                lhsDate = this.getDate();
                String rhsDate;
                rhsDate = that.getDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                AdvResTicketingType theAdvResTicketing;
                theAdvResTicketing = this.getAdvResTicketing();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "advResTicketing", theAdvResTicketing), currentHashCode, theAdvResTicketing);
            }
            {
                StayRestrictionsType theStayRestrictions;
                theStayRestrictions = this.getStayRestrictions();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stayRestrictions", theStayRestrictions), currentHashCode, theStayRestrictions);
            }
            {
                VoluntaryChangesType theVoluntaryChanges;
                theVoluntaryChanges = this.getVoluntaryChanges();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "voluntaryChanges", theVoluntaryChanges), currentHashCode, theVoluntaryChanges);
            }
            {
                String theFareDisplayCurrency;
                theFareDisplayCurrency = this.getFareDisplayCurrency();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareDisplayCurrency", theFareDisplayCurrency), currentHashCode, theFareDisplayCurrency);
            }
            {
                String theCurrencyOverride;
                theCurrencyOverride = this.getCurrencyOverride();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyOverride", theCurrencyOverride), currentHashCode, theCurrencyOverride);
            }
            {
                String theFareRestriction;
                theFareRestriction = this.getFareRestriction();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareRestriction", theFareRestriction), currentHashCode, theFareRestriction);
            }
            {
                String theDate;
                theDate = this.getDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirSearchPrefsType.FareRestrictPref) {
                final AirSearchPrefsType.FareRestrictPref copy = ((AirSearchPrefsType.FareRestrictPref) draftCopy);
                if (this.advResTicketing!= null) {
                    AdvResTicketingType sourceAdvResTicketing;
                    sourceAdvResTicketing = this.getAdvResTicketing();
                    AdvResTicketingType copyAdvResTicketing = ((AdvResTicketingType) strategy.copy(LocatorUtils.property(locator, "advResTicketing", sourceAdvResTicketing), sourceAdvResTicketing));
                    copy.setAdvResTicketing(copyAdvResTicketing);
                } else {
                    copy.advResTicketing = null;
                }
                if (this.stayRestrictions!= null) {
                    StayRestrictionsType sourceStayRestrictions;
                    sourceStayRestrictions = this.getStayRestrictions();
                    StayRestrictionsType copyStayRestrictions = ((StayRestrictionsType) strategy.copy(LocatorUtils.property(locator, "stayRestrictions", sourceStayRestrictions), sourceStayRestrictions));
                    copy.setStayRestrictions(copyStayRestrictions);
                } else {
                    copy.stayRestrictions = null;
                }
                if (this.voluntaryChanges!= null) {
                    VoluntaryChangesType sourceVoluntaryChanges;
                    sourceVoluntaryChanges = this.getVoluntaryChanges();
                    VoluntaryChangesType copyVoluntaryChanges = ((VoluntaryChangesType) strategy.copy(LocatorUtils.property(locator, "voluntaryChanges", sourceVoluntaryChanges), sourceVoluntaryChanges));
                    copy.setVoluntaryChanges(copyVoluntaryChanges);
                } else {
                    copy.voluntaryChanges = null;
                }
                if (this.fareDisplayCurrency!= null) {
                    String sourceFareDisplayCurrency;
                    sourceFareDisplayCurrency = this.getFareDisplayCurrency();
                    String copyFareDisplayCurrency = ((String) strategy.copy(LocatorUtils.property(locator, "fareDisplayCurrency", sourceFareDisplayCurrency), sourceFareDisplayCurrency));
                    copy.setFareDisplayCurrency(copyFareDisplayCurrency);
                } else {
                    copy.fareDisplayCurrency = null;
                }
                if (this.currencyOverride!= null) {
                    String sourceCurrencyOverride;
                    sourceCurrencyOverride = this.getCurrencyOverride();
                    String copyCurrencyOverride = ((String) strategy.copy(LocatorUtils.property(locator, "currencyOverride", sourceCurrencyOverride), sourceCurrencyOverride));
                    copy.setCurrencyOverride(copyCurrencyOverride);
                } else {
                    copy.currencyOverride = null;
                }
                if (this.fareRestriction!= null) {
                    String sourceFareRestriction;
                    sourceFareRestriction = this.getFareRestriction();
                    String copyFareRestriction = ((String) strategy.copy(LocatorUtils.property(locator, "fareRestriction", sourceFareRestriction), sourceFareRestriction));
                    copy.setFareRestriction(copyFareRestriction);
                } else {
                    copy.fareRestriction = null;
                }
                if (this.date!= null) {
                    String sourceDate;
                    sourceDate = this.getDate();
                    String copyDate = ((String) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                    copy.setDate(copyDate);
                } else {
                    copy.date = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirSearchPrefsType.FareRestrictPref();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FlightTypePrefGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class FlightTypePref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "FlightType")
        protected FlightTypeType flightType;
        @XmlAttribute(name = "MaxConnections")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger maxConnections;
        @XmlAttribute(name = "NonScheduledFltInfo")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String nonScheduledFltInfo;
        @XmlAttribute(name = "BackhaulIndicator")
        protected Boolean backhaulIndicator;
        @XmlAttribute(name = "GroundTransportIndicator")
        protected Boolean groundTransportIndicator;
        @XmlAttribute(name = "DirectAndNonStopOnlyInd")
        protected Boolean directAndNonStopOnlyInd;
        @XmlAttribute(name = "NonStopsOnlyInd")
        protected Boolean nonStopsOnlyInd;
        @XmlAttribute(name = "OnlineConnectionsOnlyInd")
        protected Boolean onlineConnectionsOnlyInd;
        @XmlAttribute(name = "RoutingType")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String routingType;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the flightType property.
         * 
         * @return
         *     possible object is
         *     {@link FlightTypeType }
         *     
         */
        public FlightTypeType getFlightType() {
            return flightType;
        }

        /**
         * Sets the value of the flightType property.
         * 
         * @param value
         *     allowed object is
         *     {@link FlightTypeType }
         *     
         */
        public void setFlightType(FlightTypeType value) {
            this.flightType = value;
        }

        /**
         * Gets the value of the maxConnections property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getMaxConnections() {
            return maxConnections;
        }

        /**
         * Sets the value of the maxConnections property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setMaxConnections(BigInteger value) {
            this.maxConnections = value;
        }

        /**
         * Gets the value of the nonScheduledFltInfo property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNonScheduledFltInfo() {
            return nonScheduledFltInfo;
        }

        /**
         * Sets the value of the nonScheduledFltInfo property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNonScheduledFltInfo(String value) {
            this.nonScheduledFltInfo = value;
        }

        /**
         * Gets the value of the backhaulIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isBackhaulIndicator() {
            return backhaulIndicator;
        }

        /**
         * Sets the value of the backhaulIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setBackhaulIndicator(Boolean value) {
            this.backhaulIndicator = value;
        }

        /**
         * Gets the value of the groundTransportIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isGroundTransportIndicator() {
            return groundTransportIndicator;
        }

        /**
         * Sets the value of the groundTransportIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setGroundTransportIndicator(Boolean value) {
            this.groundTransportIndicator = value;
        }

        /**
         * Gets the value of the directAndNonStopOnlyInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isDirectAndNonStopOnlyInd() {
            return directAndNonStopOnlyInd;
        }

        /**
         * Sets the value of the directAndNonStopOnlyInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setDirectAndNonStopOnlyInd(Boolean value) {
            this.directAndNonStopOnlyInd = value;
        }

        /**
         * Gets the value of the nonStopsOnlyInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isNonStopsOnlyInd() {
            return nonStopsOnlyInd;
        }

        /**
         * Sets the value of the nonStopsOnlyInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setNonStopsOnlyInd(Boolean value) {
            this.nonStopsOnlyInd = value;
        }

        /**
         * Gets the value of the onlineConnectionsOnlyInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isOnlineConnectionsOnlyInd() {
            return onlineConnectionsOnlyInd;
        }

        /**
         * Sets the value of the onlineConnectionsOnlyInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setOnlineConnectionsOnlyInd(Boolean value) {
            this.onlineConnectionsOnlyInd = value;
        }

        /**
         * Gets the value of the routingType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRoutingType() {
            return routingType;
        }

        /**
         * Sets the value of the routingType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRoutingType(String value) {
            this.routingType = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                FlightTypeType theFlightType;
                theFlightType = this.getFlightType();
                strategy.appendField(locator, this, "flightType", buffer, theFlightType);
            }
            {
                BigInteger theMaxConnections;
                theMaxConnections = this.getMaxConnections();
                strategy.appendField(locator, this, "maxConnections", buffer, theMaxConnections);
            }
            {
                String theNonScheduledFltInfo;
                theNonScheduledFltInfo = this.getNonScheduledFltInfo();
                strategy.appendField(locator, this, "nonScheduledFltInfo", buffer, theNonScheduledFltInfo);
            }
            {
                Boolean theBackhaulIndicator;
                theBackhaulIndicator = this.isBackhaulIndicator();
                strategy.appendField(locator, this, "backhaulIndicator", buffer, theBackhaulIndicator);
            }
            {
                Boolean theGroundTransportIndicator;
                theGroundTransportIndicator = this.isGroundTransportIndicator();
                strategy.appendField(locator, this, "groundTransportIndicator", buffer, theGroundTransportIndicator);
            }
            {
                Boolean theDirectAndNonStopOnlyInd;
                theDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                strategy.appendField(locator, this, "directAndNonStopOnlyInd", buffer, theDirectAndNonStopOnlyInd);
            }
            {
                Boolean theNonStopsOnlyInd;
                theNonStopsOnlyInd = this.isNonStopsOnlyInd();
                strategy.appendField(locator, this, "nonStopsOnlyInd", buffer, theNonStopsOnlyInd);
            }
            {
                Boolean theOnlineConnectionsOnlyInd;
                theOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                strategy.appendField(locator, this, "onlineConnectionsOnlyInd", buffer, theOnlineConnectionsOnlyInd);
            }
            {
                String theRoutingType;
                theRoutingType = this.getRoutingType();
                strategy.appendField(locator, this, "routingType", buffer, theRoutingType);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirSearchPrefsType.FlightTypePref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirSearchPrefsType.FlightTypePref that = ((AirSearchPrefsType.FlightTypePref) object);
            {
                FlightTypeType lhsFlightType;
                lhsFlightType = this.getFlightType();
                FlightTypeType rhsFlightType;
                rhsFlightType = that.getFlightType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "flightType", lhsFlightType), LocatorUtils.property(thatLocator, "flightType", rhsFlightType), lhsFlightType, rhsFlightType)) {
                    return false;
                }
            }
            {
                BigInteger lhsMaxConnections;
                lhsMaxConnections = this.getMaxConnections();
                BigInteger rhsMaxConnections;
                rhsMaxConnections = that.getMaxConnections();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "maxConnections", lhsMaxConnections), LocatorUtils.property(thatLocator, "maxConnections", rhsMaxConnections), lhsMaxConnections, rhsMaxConnections)) {
                    return false;
                }
            }
            {
                String lhsNonScheduledFltInfo;
                lhsNonScheduledFltInfo = this.getNonScheduledFltInfo();
                String rhsNonScheduledFltInfo;
                rhsNonScheduledFltInfo = that.getNonScheduledFltInfo();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nonScheduledFltInfo", lhsNonScheduledFltInfo), LocatorUtils.property(thatLocator, "nonScheduledFltInfo", rhsNonScheduledFltInfo), lhsNonScheduledFltInfo, rhsNonScheduledFltInfo)) {
                    return false;
                }
            }
            {
                Boolean lhsBackhaulIndicator;
                lhsBackhaulIndicator = this.isBackhaulIndicator();
                Boolean rhsBackhaulIndicator;
                rhsBackhaulIndicator = that.isBackhaulIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "backhaulIndicator", lhsBackhaulIndicator), LocatorUtils.property(thatLocator, "backhaulIndicator", rhsBackhaulIndicator), lhsBackhaulIndicator, rhsBackhaulIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsGroundTransportIndicator;
                lhsGroundTransportIndicator = this.isGroundTransportIndicator();
                Boolean rhsGroundTransportIndicator;
                rhsGroundTransportIndicator = that.isGroundTransportIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "groundTransportIndicator", lhsGroundTransportIndicator), LocatorUtils.property(thatLocator, "groundTransportIndicator", rhsGroundTransportIndicator), lhsGroundTransportIndicator, rhsGroundTransportIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsDirectAndNonStopOnlyInd;
                lhsDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                Boolean rhsDirectAndNonStopOnlyInd;
                rhsDirectAndNonStopOnlyInd = that.isDirectAndNonStopOnlyInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "directAndNonStopOnlyInd", lhsDirectAndNonStopOnlyInd), LocatorUtils.property(thatLocator, "directAndNonStopOnlyInd", rhsDirectAndNonStopOnlyInd), lhsDirectAndNonStopOnlyInd, rhsDirectAndNonStopOnlyInd)) {
                    return false;
                }
            }
            {
                Boolean lhsNonStopsOnlyInd;
                lhsNonStopsOnlyInd = this.isNonStopsOnlyInd();
                Boolean rhsNonStopsOnlyInd;
                rhsNonStopsOnlyInd = that.isNonStopsOnlyInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nonStopsOnlyInd", lhsNonStopsOnlyInd), LocatorUtils.property(thatLocator, "nonStopsOnlyInd", rhsNonStopsOnlyInd), lhsNonStopsOnlyInd, rhsNonStopsOnlyInd)) {
                    return false;
                }
            }
            {
                Boolean lhsOnlineConnectionsOnlyInd;
                lhsOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                Boolean rhsOnlineConnectionsOnlyInd;
                rhsOnlineConnectionsOnlyInd = that.isOnlineConnectionsOnlyInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "onlineConnectionsOnlyInd", lhsOnlineConnectionsOnlyInd), LocatorUtils.property(thatLocator, "onlineConnectionsOnlyInd", rhsOnlineConnectionsOnlyInd), lhsOnlineConnectionsOnlyInd, rhsOnlineConnectionsOnlyInd)) {
                    return false;
                }
            }
            {
                String lhsRoutingType;
                lhsRoutingType = this.getRoutingType();
                String rhsRoutingType;
                rhsRoutingType = that.getRoutingType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "routingType", lhsRoutingType), LocatorUtils.property(thatLocator, "routingType", rhsRoutingType), lhsRoutingType, rhsRoutingType)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                FlightTypeType theFlightType;
                theFlightType = this.getFlightType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightType", theFlightType), currentHashCode, theFlightType);
            }
            {
                BigInteger theMaxConnections;
                theMaxConnections = this.getMaxConnections();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxConnections", theMaxConnections), currentHashCode, theMaxConnections);
            }
            {
                String theNonScheduledFltInfo;
                theNonScheduledFltInfo = this.getNonScheduledFltInfo();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nonScheduledFltInfo", theNonScheduledFltInfo), currentHashCode, theNonScheduledFltInfo);
            }
            {
                Boolean theBackhaulIndicator;
                theBackhaulIndicator = this.isBackhaulIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "backhaulIndicator", theBackhaulIndicator), currentHashCode, theBackhaulIndicator);
            }
            {
                Boolean theGroundTransportIndicator;
                theGroundTransportIndicator = this.isGroundTransportIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groundTransportIndicator", theGroundTransportIndicator), currentHashCode, theGroundTransportIndicator);
            }
            {
                Boolean theDirectAndNonStopOnlyInd;
                theDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directAndNonStopOnlyInd", theDirectAndNonStopOnlyInd), currentHashCode, theDirectAndNonStopOnlyInd);
            }
            {
                Boolean theNonStopsOnlyInd;
                theNonStopsOnlyInd = this.isNonStopsOnlyInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nonStopsOnlyInd", theNonStopsOnlyInd), currentHashCode, theNonStopsOnlyInd);
            }
            {
                Boolean theOnlineConnectionsOnlyInd;
                theOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onlineConnectionsOnlyInd", theOnlineConnectionsOnlyInd), currentHashCode, theOnlineConnectionsOnlyInd);
            }
            {
                String theRoutingType;
                theRoutingType = this.getRoutingType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routingType", theRoutingType), currentHashCode, theRoutingType);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirSearchPrefsType.FlightTypePref) {
                final AirSearchPrefsType.FlightTypePref copy = ((AirSearchPrefsType.FlightTypePref) draftCopy);
                if (this.flightType!= null) {
                    FlightTypeType sourceFlightType;
                    sourceFlightType = this.getFlightType();
                    FlightTypeType copyFlightType = ((FlightTypeType) strategy.copy(LocatorUtils.property(locator, "flightType", sourceFlightType), sourceFlightType));
                    copy.setFlightType(copyFlightType);
                } else {
                    copy.flightType = null;
                }
                if (this.maxConnections!= null) {
                    BigInteger sourceMaxConnections;
                    sourceMaxConnections = this.getMaxConnections();
                    BigInteger copyMaxConnections = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxConnections", sourceMaxConnections), sourceMaxConnections));
                    copy.setMaxConnections(copyMaxConnections);
                } else {
                    copy.maxConnections = null;
                }
                if (this.nonScheduledFltInfo!= null) {
                    String sourceNonScheduledFltInfo;
                    sourceNonScheduledFltInfo = this.getNonScheduledFltInfo();
                    String copyNonScheduledFltInfo = ((String) strategy.copy(LocatorUtils.property(locator, "nonScheduledFltInfo", sourceNonScheduledFltInfo), sourceNonScheduledFltInfo));
                    copy.setNonScheduledFltInfo(copyNonScheduledFltInfo);
                } else {
                    copy.nonScheduledFltInfo = null;
                }
                if (this.backhaulIndicator!= null) {
                    Boolean sourceBackhaulIndicator;
                    sourceBackhaulIndicator = this.isBackhaulIndicator();
                    Boolean copyBackhaulIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "backhaulIndicator", sourceBackhaulIndicator), sourceBackhaulIndicator));
                    copy.setBackhaulIndicator(copyBackhaulIndicator);
                } else {
                    copy.backhaulIndicator = null;
                }
                if (this.groundTransportIndicator!= null) {
                    Boolean sourceGroundTransportIndicator;
                    sourceGroundTransportIndicator = this.isGroundTransportIndicator();
                    Boolean copyGroundTransportIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "groundTransportIndicator", sourceGroundTransportIndicator), sourceGroundTransportIndicator));
                    copy.setGroundTransportIndicator(copyGroundTransportIndicator);
                } else {
                    copy.groundTransportIndicator = null;
                }
                if (this.directAndNonStopOnlyInd!= null) {
                    Boolean sourceDirectAndNonStopOnlyInd;
                    sourceDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                    Boolean copyDirectAndNonStopOnlyInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "directAndNonStopOnlyInd", sourceDirectAndNonStopOnlyInd), sourceDirectAndNonStopOnlyInd));
                    copy.setDirectAndNonStopOnlyInd(copyDirectAndNonStopOnlyInd);
                } else {
                    copy.directAndNonStopOnlyInd = null;
                }
                if (this.nonStopsOnlyInd!= null) {
                    Boolean sourceNonStopsOnlyInd;
                    sourceNonStopsOnlyInd = this.isNonStopsOnlyInd();
                    Boolean copyNonStopsOnlyInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "nonStopsOnlyInd", sourceNonStopsOnlyInd), sourceNonStopsOnlyInd));
                    copy.setNonStopsOnlyInd(copyNonStopsOnlyInd);
                } else {
                    copy.nonStopsOnlyInd = null;
                }
                if (this.onlineConnectionsOnlyInd!= null) {
                    Boolean sourceOnlineConnectionsOnlyInd;
                    sourceOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                    Boolean copyOnlineConnectionsOnlyInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "onlineConnectionsOnlyInd", sourceOnlineConnectionsOnlyInd), sourceOnlineConnectionsOnlyInd));
                    copy.setOnlineConnectionsOnlyInd(copyOnlineConnectionsOnlyInd);
                } else {
                    copy.onlineConnectionsOnlyInd = null;
                }
                if (this.routingType!= null) {
                    String sourceRoutingType;
                    sourceRoutingType = this.getRoutingType();
                    String copyRoutingType = ((String) strategy.copy(LocatorUtils.property(locator, "routingType", sourceRoutingType), sourceRoutingType));
                    copy.setRoutingType(copyRoutingType);
                } else {
                    copy.routingType = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirSearchPrefsType.FlightTypePref();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;TicketDistribPrefType"&gt;
     *       &lt;attribute name="LastTicketDate" type="{http://www.w3.org/2001/XMLSchema}dateTime" /&gt;
     *       &lt;attribute name="FirstTicketDate" type="{http://www.w3.org/2001/XMLSchema}dateTime" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TicketDistribPref
        extends TicketDistribPrefType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "LastTicketDate")
        @XmlSchemaType(name = "dateTime")
        protected XMLGregorianCalendar lastTicketDate;
        @XmlAttribute(name = "FirstTicketDate")
        @XmlSchemaType(name = "dateTime")
        protected XMLGregorianCalendar firstTicketDate;

        /**
         * Gets the value of the lastTicketDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getLastTicketDate() {
            return lastTicketDate;
        }

        /**
         * Sets the value of the lastTicketDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setLastTicketDate(XMLGregorianCalendar value) {
            this.lastTicketDate = value;
        }

        /**
         * Gets the value of the firstTicketDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getFirstTicketDate() {
            return firstTicketDate;
        }

        /**
         * Sets the value of the firstTicketDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setFirstTicketDate(XMLGregorianCalendar value) {
            this.firstTicketDate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                XMLGregorianCalendar theLastTicketDate;
                theLastTicketDate = this.getLastTicketDate();
                strategy.appendField(locator, this, "lastTicketDate", buffer, theLastTicketDate);
            }
            {
                XMLGregorianCalendar theFirstTicketDate;
                theFirstTicketDate = this.getFirstTicketDate();
                strategy.appendField(locator, this, "firstTicketDate", buffer, theFirstTicketDate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirSearchPrefsType.TicketDistribPref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final AirSearchPrefsType.TicketDistribPref that = ((AirSearchPrefsType.TicketDistribPref) object);
            {
                XMLGregorianCalendar lhsLastTicketDate;
                lhsLastTicketDate = this.getLastTicketDate();
                XMLGregorianCalendar rhsLastTicketDate;
                rhsLastTicketDate = that.getLastTicketDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "lastTicketDate", lhsLastTicketDate), LocatorUtils.property(thatLocator, "lastTicketDate", rhsLastTicketDate), lhsLastTicketDate, rhsLastTicketDate)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsFirstTicketDate;
                lhsFirstTicketDate = this.getFirstTicketDate();
                XMLGregorianCalendar rhsFirstTicketDate;
                rhsFirstTicketDate = that.getFirstTicketDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "firstTicketDate", lhsFirstTicketDate), LocatorUtils.property(thatLocator, "firstTicketDate", rhsFirstTicketDate), lhsFirstTicketDate, rhsFirstTicketDate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                XMLGregorianCalendar theLastTicketDate;
                theLastTicketDate = this.getLastTicketDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastTicketDate", theLastTicketDate), currentHashCode, theLastTicketDate);
            }
            {
                XMLGregorianCalendar theFirstTicketDate;
                theFirstTicketDate = this.getFirstTicketDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "firstTicketDate", theFirstTicketDate), currentHashCode, theFirstTicketDate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof AirSearchPrefsType.TicketDistribPref) {
                final AirSearchPrefsType.TicketDistribPref copy = ((AirSearchPrefsType.TicketDistribPref) draftCopy);
                if (this.lastTicketDate!= null) {
                    XMLGregorianCalendar sourceLastTicketDate;
                    sourceLastTicketDate = this.getLastTicketDate();
                    XMLGregorianCalendar copyLastTicketDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastTicketDate", sourceLastTicketDate), sourceLastTicketDate));
                    copy.setLastTicketDate(copyLastTicketDate);
                } else {
                    copy.lastTicketDate = null;
                }
                if (this.firstTicketDate!= null) {
                    XMLGregorianCalendar sourceFirstTicketDate;
                    sourceFirstTicketDate = this.getFirstTicketDate();
                    XMLGregorianCalendar copyFirstTicketDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "firstTicketDate", sourceFirstTicketDate), sourceFirstTicketDate));
                    copy.setFirstTicketDate(copyFirstTicketDate);
                } else {
                    copy.firstTicketDate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirSearchPrefsType.TicketDistribPref();
        }

    }

}
