//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Used to specify a time window range by either specifying an earliest and latest date for the start date and end date or by giving a date with a time period that can be applied before and/or after the start date.
 * 
 * <p>Java class for DateTimeSpanType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DateTimeSpanType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="DateWindowRange" type="{http://www.opentravel.org/OTA/2003/05}TimeInstantType"/&gt;
 *         &lt;sequence&gt;
 *           &lt;element name="StartDateWindow" minOccurs="0"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TimeWindowGroup"/&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *           &lt;element name="EndDateWindow" minOccurs="0"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TimeWindowGroup"/&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *         &lt;/sequence&gt;
 *       &lt;/choice&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}DateTimeSpanGroup"/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DateTimeSpanType", propOrder = {
    "dateWindowRange",
    "startDateWindow",
    "endDateWindow"
})
public class DateTimeSpanType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "DateWindowRange")
    protected TimeInstantType dateWindowRange;
    @XmlElement(name = "StartDateWindow")
    protected DateTimeSpanType.StartDateWindow startDateWindow;
    @XmlElement(name = "EndDateWindow")
    protected DateTimeSpanType.EndDateWindow endDateWindow;
    @XmlAttribute(name = "Start")
    protected String start;
    @XmlAttribute(name = "Duration")
    protected String duration;
    @XmlAttribute(name = "End")
    protected String end;

    /**
     * Gets the value of the dateWindowRange property.
     * 
     * @return
     *     possible object is
     *     {@link TimeInstantType }
     *     
     */
    public TimeInstantType getDateWindowRange() {
        return dateWindowRange;
    }

    /**
     * Sets the value of the dateWindowRange property.
     * 
     * @param value
     *     allowed object is
     *     {@link TimeInstantType }
     *     
     */
    public void setDateWindowRange(TimeInstantType value) {
        this.dateWindowRange = value;
    }

    /**
     * Gets the value of the startDateWindow property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimeSpanType.StartDateWindow }
     *     
     */
    public DateTimeSpanType.StartDateWindow getStartDateWindow() {
        return startDateWindow;
    }

    /**
     * Sets the value of the startDateWindow property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimeSpanType.StartDateWindow }
     *     
     */
    public void setStartDateWindow(DateTimeSpanType.StartDateWindow value) {
        this.startDateWindow = value;
    }

    /**
     * Gets the value of the endDateWindow property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimeSpanType.EndDateWindow }
     *     
     */
    public DateTimeSpanType.EndDateWindow getEndDateWindow() {
        return endDateWindow;
    }

    /**
     * Sets the value of the endDateWindow property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimeSpanType.EndDateWindow }
     *     
     */
    public void setEndDateWindow(DateTimeSpanType.EndDateWindow value) {
        this.endDateWindow = value;
    }

    /**
     * Gets the value of the start property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStart() {
        return start;
    }

    /**
     * Sets the value of the start property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStart(String value) {
        this.start = value;
    }

    /**
     * Gets the value of the duration property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDuration() {
        return duration;
    }

    /**
     * Sets the value of the duration property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDuration(String value) {
        this.duration = value;
    }

    /**
     * Gets the value of the end property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEnd() {
        return end;
    }

    /**
     * Sets the value of the end property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEnd(String value) {
        this.end = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TimeInstantType theDateWindowRange;
            theDateWindowRange = this.getDateWindowRange();
            strategy.appendField(locator, this, "dateWindowRange", buffer, theDateWindowRange);
        }
        {
            DateTimeSpanType.StartDateWindow theStartDateWindow;
            theStartDateWindow = this.getStartDateWindow();
            strategy.appendField(locator, this, "startDateWindow", buffer, theStartDateWindow);
        }
        {
            DateTimeSpanType.EndDateWindow theEndDateWindow;
            theEndDateWindow = this.getEndDateWindow();
            strategy.appendField(locator, this, "endDateWindow", buffer, theEndDateWindow);
        }
        {
            String theStart;
            theStart = this.getStart();
            strategy.appendField(locator, this, "start", buffer, theStart);
        }
        {
            String theDuration;
            theDuration = this.getDuration();
            strategy.appendField(locator, this, "duration", buffer, theDuration);
        }
        {
            String theEnd;
            theEnd = this.getEnd();
            strategy.appendField(locator, this, "end", buffer, theEnd);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DateTimeSpanType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DateTimeSpanType that = ((DateTimeSpanType) object);
        {
            TimeInstantType lhsDateWindowRange;
            lhsDateWindowRange = this.getDateWindowRange();
            TimeInstantType rhsDateWindowRange;
            rhsDateWindowRange = that.getDateWindowRange();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateWindowRange", lhsDateWindowRange), LocatorUtils.property(thatLocator, "dateWindowRange", rhsDateWindowRange), lhsDateWindowRange, rhsDateWindowRange)) {
                return false;
            }
        }
        {
            DateTimeSpanType.StartDateWindow lhsStartDateWindow;
            lhsStartDateWindow = this.getStartDateWindow();
            DateTimeSpanType.StartDateWindow rhsStartDateWindow;
            rhsStartDateWindow = that.getStartDateWindow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startDateWindow", lhsStartDateWindow), LocatorUtils.property(thatLocator, "startDateWindow", rhsStartDateWindow), lhsStartDateWindow, rhsStartDateWindow)) {
                return false;
            }
        }
        {
            DateTimeSpanType.EndDateWindow lhsEndDateWindow;
            lhsEndDateWindow = this.getEndDateWindow();
            DateTimeSpanType.EndDateWindow rhsEndDateWindow;
            rhsEndDateWindow = that.getEndDateWindow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endDateWindow", lhsEndDateWindow), LocatorUtils.property(thatLocator, "endDateWindow", rhsEndDateWindow), lhsEndDateWindow, rhsEndDateWindow)) {
                return false;
            }
        }
        {
            String lhsStart;
            lhsStart = this.getStart();
            String rhsStart;
            rhsStart = that.getStart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "start", lhsStart), LocatorUtils.property(thatLocator, "start", rhsStart), lhsStart, rhsStart)) {
                return false;
            }
        }
        {
            String lhsDuration;
            lhsDuration = this.getDuration();
            String rhsDuration;
            rhsDuration = that.getDuration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "duration", lhsDuration), LocatorUtils.property(thatLocator, "duration", rhsDuration), lhsDuration, rhsDuration)) {
                return false;
            }
        }
        {
            String lhsEnd;
            lhsEnd = this.getEnd();
            String rhsEnd;
            rhsEnd = that.getEnd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "end", lhsEnd), LocatorUtils.property(thatLocator, "end", rhsEnd), lhsEnd, rhsEnd)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TimeInstantType theDateWindowRange;
            theDateWindowRange = this.getDateWindowRange();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateWindowRange", theDateWindowRange), currentHashCode, theDateWindowRange);
        }
        {
            DateTimeSpanType.StartDateWindow theStartDateWindow;
            theStartDateWindow = this.getStartDateWindow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startDateWindow", theStartDateWindow), currentHashCode, theStartDateWindow);
        }
        {
            DateTimeSpanType.EndDateWindow theEndDateWindow;
            theEndDateWindow = this.getEndDateWindow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endDateWindow", theEndDateWindow), currentHashCode, theEndDateWindow);
        }
        {
            String theStart;
            theStart = this.getStart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "start", theStart), currentHashCode, theStart);
        }
        {
            String theDuration;
            theDuration = this.getDuration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "duration", theDuration), currentHashCode, theDuration);
        }
        {
            String theEnd;
            theEnd = this.getEnd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "end", theEnd), currentHashCode, theEnd);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof DateTimeSpanType) {
            final DateTimeSpanType copy = ((DateTimeSpanType) draftCopy);
            if (this.dateWindowRange!= null) {
                TimeInstantType sourceDateWindowRange;
                sourceDateWindowRange = this.getDateWindowRange();
                TimeInstantType copyDateWindowRange = ((TimeInstantType) strategy.copy(LocatorUtils.property(locator, "dateWindowRange", sourceDateWindowRange), sourceDateWindowRange));
                copy.setDateWindowRange(copyDateWindowRange);
            } else {
                copy.dateWindowRange = null;
            }
            if (this.startDateWindow!= null) {
                DateTimeSpanType.StartDateWindow sourceStartDateWindow;
                sourceStartDateWindow = this.getStartDateWindow();
                DateTimeSpanType.StartDateWindow copyStartDateWindow = ((DateTimeSpanType.StartDateWindow) strategy.copy(LocatorUtils.property(locator, "startDateWindow", sourceStartDateWindow), sourceStartDateWindow));
                copy.setStartDateWindow(copyStartDateWindow);
            } else {
                copy.startDateWindow = null;
            }
            if (this.endDateWindow!= null) {
                DateTimeSpanType.EndDateWindow sourceEndDateWindow;
                sourceEndDateWindow = this.getEndDateWindow();
                DateTimeSpanType.EndDateWindow copyEndDateWindow = ((DateTimeSpanType.EndDateWindow) strategy.copy(LocatorUtils.property(locator, "endDateWindow", sourceEndDateWindow), sourceEndDateWindow));
                copy.setEndDateWindow(copyEndDateWindow);
            } else {
                copy.endDateWindow = null;
            }
            if (this.start!= null) {
                String sourceStart;
                sourceStart = this.getStart();
                String copyStart = ((String) strategy.copy(LocatorUtils.property(locator, "start", sourceStart), sourceStart));
                copy.setStart(copyStart);
            } else {
                copy.start = null;
            }
            if (this.duration!= null) {
                String sourceDuration;
                sourceDuration = this.getDuration();
                String copyDuration = ((String) strategy.copy(LocatorUtils.property(locator, "duration", sourceDuration), sourceDuration));
                copy.setDuration(copyDuration);
            } else {
                copy.duration = null;
            }
            if (this.end!= null) {
                String sourceEnd;
                sourceEnd = this.getEnd();
                String copyEnd = ((String) strategy.copy(LocatorUtils.property(locator, "end", sourceEnd), sourceEnd));
                copy.setEnd(copyEnd);
            } else {
                copy.end = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DateTimeSpanType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TimeWindowGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class EndDateWindow
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "EarliestDate")
        protected String earliestDate;
        @XmlAttribute(name = "LatestDate")
        protected String latestDate;
        @XmlAttribute(name = "DOW")
        protected DayOfWeekType dow;

        /**
         * Gets the value of the earliestDate property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getEarliestDate() {
            return earliestDate;
        }

        /**
         * Sets the value of the earliestDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setEarliestDate(String value) {
            this.earliestDate = value;
        }

        /**
         * Gets the value of the latestDate property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatestDate() {
            return latestDate;
        }

        /**
         * Sets the value of the latestDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatestDate(String value) {
            this.latestDate = value;
        }

        /**
         * Gets the value of the dow property.
         * 
         * @return
         *     possible object is
         *     {@link DayOfWeekType }
         *     
         */
        public DayOfWeekType getDOW() {
            return dow;
        }

        /**
         * Sets the value of the dow property.
         * 
         * @param value
         *     allowed object is
         *     {@link DayOfWeekType }
         *     
         */
        public void setDOW(DayOfWeekType value) {
            this.dow = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theEarliestDate;
                theEarliestDate = this.getEarliestDate();
                strategy.appendField(locator, this, "earliestDate", buffer, theEarliestDate);
            }
            {
                String theLatestDate;
                theLatestDate = this.getLatestDate();
                strategy.appendField(locator, this, "latestDate", buffer, theLatestDate);
            }
            {
                DayOfWeekType theDOW;
                theDOW = this.getDOW();
                strategy.appendField(locator, this, "dow", buffer, theDOW);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DateTimeSpanType.EndDateWindow)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DateTimeSpanType.EndDateWindow that = ((DateTimeSpanType.EndDateWindow) object);
            {
                String lhsEarliestDate;
                lhsEarliestDate = this.getEarliestDate();
                String rhsEarliestDate;
                rhsEarliestDate = that.getEarliestDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "earliestDate", lhsEarliestDate), LocatorUtils.property(thatLocator, "earliestDate", rhsEarliestDate), lhsEarliestDate, rhsEarliestDate)) {
                    return false;
                }
            }
            {
                String lhsLatestDate;
                lhsLatestDate = this.getLatestDate();
                String rhsLatestDate;
                rhsLatestDate = that.getLatestDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latestDate", lhsLatestDate), LocatorUtils.property(thatLocator, "latestDate", rhsLatestDate), lhsLatestDate, rhsLatestDate)) {
                    return false;
                }
            }
            {
                DayOfWeekType lhsDOW;
                lhsDOW = this.getDOW();
                DayOfWeekType rhsDOW;
                rhsDOW = that.getDOW();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dow", lhsDOW), LocatorUtils.property(thatLocator, "dow", rhsDOW), lhsDOW, rhsDOW)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theEarliestDate;
                theEarliestDate = this.getEarliestDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "earliestDate", theEarliestDate), currentHashCode, theEarliestDate);
            }
            {
                String theLatestDate;
                theLatestDate = this.getLatestDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latestDate", theLatestDate), currentHashCode, theLatestDate);
            }
            {
                DayOfWeekType theDOW;
                theDOW = this.getDOW();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dow", theDOW), currentHashCode, theDOW);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DateTimeSpanType.EndDateWindow) {
                final DateTimeSpanType.EndDateWindow copy = ((DateTimeSpanType.EndDateWindow) draftCopy);
                if (this.earliestDate!= null) {
                    String sourceEarliestDate;
                    sourceEarliestDate = this.getEarliestDate();
                    String copyEarliestDate = ((String) strategy.copy(LocatorUtils.property(locator, "earliestDate", sourceEarliestDate), sourceEarliestDate));
                    copy.setEarliestDate(copyEarliestDate);
                } else {
                    copy.earliestDate = null;
                }
                if (this.latestDate!= null) {
                    String sourceLatestDate;
                    sourceLatestDate = this.getLatestDate();
                    String copyLatestDate = ((String) strategy.copy(LocatorUtils.property(locator, "latestDate", sourceLatestDate), sourceLatestDate));
                    copy.setLatestDate(copyLatestDate);
                } else {
                    copy.latestDate = null;
                }
                if (this.dow!= null) {
                    DayOfWeekType sourceDOW;
                    sourceDOW = this.getDOW();
                    DayOfWeekType copyDOW = ((DayOfWeekType) strategy.copy(LocatorUtils.property(locator, "dow", sourceDOW), sourceDOW));
                    copy.setDOW(copyDOW);
                } else {
                    copy.dow = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DateTimeSpanType.EndDateWindow();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TimeWindowGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class StartDateWindow
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "EarliestDate")
        protected String earliestDate;
        @XmlAttribute(name = "LatestDate")
        protected String latestDate;
        @XmlAttribute(name = "DOW")
        protected DayOfWeekType dow;

        /**
         * Gets the value of the earliestDate property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getEarliestDate() {
            return earliestDate;
        }

        /**
         * Sets the value of the earliestDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setEarliestDate(String value) {
            this.earliestDate = value;
        }

        /**
         * Gets the value of the latestDate property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatestDate() {
            return latestDate;
        }

        /**
         * Sets the value of the latestDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatestDate(String value) {
            this.latestDate = value;
        }

        /**
         * Gets the value of the dow property.
         * 
         * @return
         *     possible object is
         *     {@link DayOfWeekType }
         *     
         */
        public DayOfWeekType getDOW() {
            return dow;
        }

        /**
         * Sets the value of the dow property.
         * 
         * @param value
         *     allowed object is
         *     {@link DayOfWeekType }
         *     
         */
        public void setDOW(DayOfWeekType value) {
            this.dow = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theEarliestDate;
                theEarliestDate = this.getEarliestDate();
                strategy.appendField(locator, this, "earliestDate", buffer, theEarliestDate);
            }
            {
                String theLatestDate;
                theLatestDate = this.getLatestDate();
                strategy.appendField(locator, this, "latestDate", buffer, theLatestDate);
            }
            {
                DayOfWeekType theDOW;
                theDOW = this.getDOW();
                strategy.appendField(locator, this, "dow", buffer, theDOW);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DateTimeSpanType.StartDateWindow)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DateTimeSpanType.StartDateWindow that = ((DateTimeSpanType.StartDateWindow) object);
            {
                String lhsEarliestDate;
                lhsEarliestDate = this.getEarliestDate();
                String rhsEarliestDate;
                rhsEarliestDate = that.getEarliestDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "earliestDate", lhsEarliestDate), LocatorUtils.property(thatLocator, "earliestDate", rhsEarliestDate), lhsEarliestDate, rhsEarliestDate)) {
                    return false;
                }
            }
            {
                String lhsLatestDate;
                lhsLatestDate = this.getLatestDate();
                String rhsLatestDate;
                rhsLatestDate = that.getLatestDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latestDate", lhsLatestDate), LocatorUtils.property(thatLocator, "latestDate", rhsLatestDate), lhsLatestDate, rhsLatestDate)) {
                    return false;
                }
            }
            {
                DayOfWeekType lhsDOW;
                lhsDOW = this.getDOW();
                DayOfWeekType rhsDOW;
                rhsDOW = that.getDOW();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dow", lhsDOW), LocatorUtils.property(thatLocator, "dow", rhsDOW), lhsDOW, rhsDOW)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theEarliestDate;
                theEarliestDate = this.getEarliestDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "earliestDate", theEarliestDate), currentHashCode, theEarliestDate);
            }
            {
                String theLatestDate;
                theLatestDate = this.getLatestDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latestDate", theLatestDate), currentHashCode, theLatestDate);
            }
            {
                DayOfWeekType theDOW;
                theDOW = this.getDOW();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dow", theDOW), currentHashCode, theDOW);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DateTimeSpanType.StartDateWindow) {
                final DateTimeSpanType.StartDateWindow copy = ((DateTimeSpanType.StartDateWindow) draftCopy);
                if (this.earliestDate!= null) {
                    String sourceEarliestDate;
                    sourceEarliestDate = this.getEarliestDate();
                    String copyEarliestDate = ((String) strategy.copy(LocatorUtils.property(locator, "earliestDate", sourceEarliestDate), sourceEarliestDate));
                    copy.setEarliestDate(copyEarliestDate);
                } else {
                    copy.earliestDate = null;
                }
                if (this.latestDate!= null) {
                    String sourceLatestDate;
                    sourceLatestDate = this.getLatestDate();
                    String copyLatestDate = ((String) strategy.copy(LocatorUtils.property(locator, "latestDate", sourceLatestDate), sourceLatestDate));
                    copy.setLatestDate(copyLatestDate);
                } else {
                    copy.latestDate = null;
                }
                if (this.dow!= null) {
                    DayOfWeekType sourceDOW;
                    sourceDOW = this.getDOW();
                    DayOfWeekType copyDOW = ((DayOfWeekType) strategy.copy(LocatorUtils.property(locator, "dow", sourceDOW), sourceDOW));
                    copy.setDOW(copyDOW);
                } else {
                    copy.dow = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DateTimeSpanType.StartDateWindow();
        }

    }

}
