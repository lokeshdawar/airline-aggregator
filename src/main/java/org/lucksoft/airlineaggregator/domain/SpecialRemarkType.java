//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Itinerary Remarks, Invoice Remarks, etc.
 * 
 * <p>Java class for SpecialRemarkType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SpecialRemarkType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="TravelerRefNumber" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TravelerRefNumberGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FlightRefNumber" maxOccurs="10" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FlightRefNumberGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Text" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64"/&gt;
 *         &lt;element name="Airline" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="AuthorizedViewers" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="AuthorizedViewer" maxOccurs="99"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attribute name="ViewerCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *                           &lt;attribute name="ViewerCarrierCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="RemarkType" use="required" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SpecialRemarkType", propOrder = {
    "travelerRefNumber",
    "flightRefNumber",
    "text",
    "airline",
    "authorizedViewers"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.SpecialReqDetailsType.SpecialRemarks.SpecialRemark.class
})
public class SpecialRemarkType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "TravelerRefNumber")
    protected List<SpecialRemarkType.TravelerRefNumber> travelerRefNumber;
    @XmlElement(name = "FlightRefNumber")
    protected List<SpecialRemarkType.FlightRefNumber> flightRefNumber;
    @XmlElement(name = "Text", required = true)
    protected String text;
    @XmlElement(name = "Airline")
    protected List<CompanyNameType> airline;
    @XmlElement(name = "AuthorizedViewers")
    protected SpecialRemarkType.AuthorizedViewers authorizedViewers;
    @XmlAttribute(name = "RemarkType", required = true)
    protected String remarkType;

    /**
     * Gets the value of the travelerRefNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the travelerRefNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTravelerRefNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpecialRemarkType.TravelerRefNumber }
     * 
     * 
     */
    public List<SpecialRemarkType.TravelerRefNumber> getTravelerRefNumber() {
        if (travelerRefNumber == null) {
            travelerRefNumber = new ArrayList<SpecialRemarkType.TravelerRefNumber>();
        }
        return this.travelerRefNumber;
    }

    /**
     * Gets the value of the flightRefNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the flightRefNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFlightRefNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpecialRemarkType.FlightRefNumber }
     * 
     * 
     */
    public List<SpecialRemarkType.FlightRefNumber> getFlightRefNumber() {
        if (flightRefNumber == null) {
            flightRefNumber = new ArrayList<SpecialRemarkType.FlightRefNumber>();
        }
        return this.flightRefNumber;
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setText(String value) {
        this.text = value;
    }

    /**
     * Gets the value of the airline property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the airline property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAirline().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CompanyNameType }
     * 
     * 
     */
    public List<CompanyNameType> getAirline() {
        if (airline == null) {
            airline = new ArrayList<CompanyNameType>();
        }
        return this.airline;
    }

    /**
     * Gets the value of the authorizedViewers property.
     * 
     * @return
     *     possible object is
     *     {@link SpecialRemarkType.AuthorizedViewers }
     *     
     */
    public SpecialRemarkType.AuthorizedViewers getAuthorizedViewers() {
        return authorizedViewers;
    }

    /**
     * Sets the value of the authorizedViewers property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpecialRemarkType.AuthorizedViewers }
     *     
     */
    public void setAuthorizedViewers(SpecialRemarkType.AuthorizedViewers value) {
        this.authorizedViewers = value;
    }

    /**
     * Gets the value of the remarkType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRemarkType() {
        return remarkType;
    }

    /**
     * Sets the value of the remarkType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRemarkType(String value) {
        this.remarkType = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<SpecialRemarkType.TravelerRefNumber> theTravelerRefNumber;
            theTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            strategy.appendField(locator, this, "travelerRefNumber", buffer, theTravelerRefNumber);
        }
        {
            List<SpecialRemarkType.FlightRefNumber> theFlightRefNumber;
            theFlightRefNumber = (((this.flightRefNumber!= null)&&(!this.flightRefNumber.isEmpty()))?this.getFlightRefNumber():null);
            strategy.appendField(locator, this, "flightRefNumber", buffer, theFlightRefNumber);
        }
        {
            String theText;
            theText = this.getText();
            strategy.appendField(locator, this, "text", buffer, theText);
        }
        {
            List<CompanyNameType> theAirline;
            theAirline = (((this.airline!= null)&&(!this.airline.isEmpty()))?this.getAirline():null);
            strategy.appendField(locator, this, "airline", buffer, theAirline);
        }
        {
            SpecialRemarkType.AuthorizedViewers theAuthorizedViewers;
            theAuthorizedViewers = this.getAuthorizedViewers();
            strategy.appendField(locator, this, "authorizedViewers", buffer, theAuthorizedViewers);
        }
        {
            String theRemarkType;
            theRemarkType = this.getRemarkType();
            strategy.appendField(locator, this, "remarkType", buffer, theRemarkType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpecialRemarkType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SpecialRemarkType that = ((SpecialRemarkType) object);
        {
            List<SpecialRemarkType.TravelerRefNumber> lhsTravelerRefNumber;
            lhsTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            List<SpecialRemarkType.TravelerRefNumber> rhsTravelerRefNumber;
            rhsTravelerRefNumber = (((that.travelerRefNumber!= null)&&(!that.travelerRefNumber.isEmpty()))?that.getTravelerRefNumber():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerRefNumber", lhsTravelerRefNumber), LocatorUtils.property(thatLocator, "travelerRefNumber", rhsTravelerRefNumber), lhsTravelerRefNumber, rhsTravelerRefNumber)) {
                return false;
            }
        }
        {
            List<SpecialRemarkType.FlightRefNumber> lhsFlightRefNumber;
            lhsFlightRefNumber = (((this.flightRefNumber!= null)&&(!this.flightRefNumber.isEmpty()))?this.getFlightRefNumber():null);
            List<SpecialRemarkType.FlightRefNumber> rhsFlightRefNumber;
            rhsFlightRefNumber = (((that.flightRefNumber!= null)&&(!that.flightRefNumber.isEmpty()))?that.getFlightRefNumber():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightRefNumber", lhsFlightRefNumber), LocatorUtils.property(thatLocator, "flightRefNumber", rhsFlightRefNumber), lhsFlightRefNumber, rhsFlightRefNumber)) {
                return false;
            }
        }
        {
            String lhsText;
            lhsText = this.getText();
            String rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            List<CompanyNameType> lhsAirline;
            lhsAirline = (((this.airline!= null)&&(!this.airline.isEmpty()))?this.getAirline():null);
            List<CompanyNameType> rhsAirline;
            rhsAirline = (((that.airline!= null)&&(!that.airline.isEmpty()))?that.getAirline():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airline", lhsAirline), LocatorUtils.property(thatLocator, "airline", rhsAirline), lhsAirline, rhsAirline)) {
                return false;
            }
        }
        {
            SpecialRemarkType.AuthorizedViewers lhsAuthorizedViewers;
            lhsAuthorizedViewers = this.getAuthorizedViewers();
            SpecialRemarkType.AuthorizedViewers rhsAuthorizedViewers;
            rhsAuthorizedViewers = that.getAuthorizedViewers();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authorizedViewers", lhsAuthorizedViewers), LocatorUtils.property(thatLocator, "authorizedViewers", rhsAuthorizedViewers), lhsAuthorizedViewers, rhsAuthorizedViewers)) {
                return false;
            }
        }
        {
            String lhsRemarkType;
            lhsRemarkType = this.getRemarkType();
            String rhsRemarkType;
            rhsRemarkType = that.getRemarkType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "remarkType", lhsRemarkType), LocatorUtils.property(thatLocator, "remarkType", rhsRemarkType), lhsRemarkType, rhsRemarkType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<SpecialRemarkType.TravelerRefNumber> theTravelerRefNumber;
            theTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerRefNumber", theTravelerRefNumber), currentHashCode, theTravelerRefNumber);
        }
        {
            List<SpecialRemarkType.FlightRefNumber> theFlightRefNumber;
            theFlightRefNumber = (((this.flightRefNumber!= null)&&(!this.flightRefNumber.isEmpty()))?this.getFlightRefNumber():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightRefNumber", theFlightRefNumber), currentHashCode, theFlightRefNumber);
        }
        {
            String theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            List<CompanyNameType> theAirline;
            theAirline = (((this.airline!= null)&&(!this.airline.isEmpty()))?this.getAirline():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airline", theAirline), currentHashCode, theAirline);
        }
        {
            SpecialRemarkType.AuthorizedViewers theAuthorizedViewers;
            theAuthorizedViewers = this.getAuthorizedViewers();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authorizedViewers", theAuthorizedViewers), currentHashCode, theAuthorizedViewers);
        }
        {
            String theRemarkType;
            theRemarkType = this.getRemarkType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remarkType", theRemarkType), currentHashCode, theRemarkType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SpecialRemarkType) {
            final SpecialRemarkType copy = ((SpecialRemarkType) draftCopy);
            if ((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty())) {
                List<SpecialRemarkType.TravelerRefNumber> sourceTravelerRefNumber;
                sourceTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
                @SuppressWarnings("unchecked")
                List<SpecialRemarkType.TravelerRefNumber> copyTravelerRefNumber = ((List<SpecialRemarkType.TravelerRefNumber> ) strategy.copy(LocatorUtils.property(locator, "travelerRefNumber", sourceTravelerRefNumber), sourceTravelerRefNumber));
                copy.travelerRefNumber = null;
                if (copyTravelerRefNumber!= null) {
                    List<SpecialRemarkType.TravelerRefNumber> uniqueTravelerRefNumberl = copy.getTravelerRefNumber();
                    uniqueTravelerRefNumberl.addAll(copyTravelerRefNumber);
                }
            } else {
                copy.travelerRefNumber = null;
            }
            if ((this.flightRefNumber!= null)&&(!this.flightRefNumber.isEmpty())) {
                List<SpecialRemarkType.FlightRefNumber> sourceFlightRefNumber;
                sourceFlightRefNumber = (((this.flightRefNumber!= null)&&(!this.flightRefNumber.isEmpty()))?this.getFlightRefNumber():null);
                @SuppressWarnings("unchecked")
                List<SpecialRemarkType.FlightRefNumber> copyFlightRefNumber = ((List<SpecialRemarkType.FlightRefNumber> ) strategy.copy(LocatorUtils.property(locator, "flightRefNumber", sourceFlightRefNumber), sourceFlightRefNumber));
                copy.flightRefNumber = null;
                if (copyFlightRefNumber!= null) {
                    List<SpecialRemarkType.FlightRefNumber> uniqueFlightRefNumberl = copy.getFlightRefNumber();
                    uniqueFlightRefNumberl.addAll(copyFlightRefNumber);
                }
            } else {
                copy.flightRefNumber = null;
            }
            if (this.text!= null) {
                String sourceText;
                sourceText = this.getText();
                String copyText = ((String) strategy.copy(LocatorUtils.property(locator, "text", sourceText), sourceText));
                copy.setText(copyText);
            } else {
                copy.text = null;
            }
            if ((this.airline!= null)&&(!this.airline.isEmpty())) {
                List<CompanyNameType> sourceAirline;
                sourceAirline = (((this.airline!= null)&&(!this.airline.isEmpty()))?this.getAirline():null);
                @SuppressWarnings("unchecked")
                List<CompanyNameType> copyAirline = ((List<CompanyNameType> ) strategy.copy(LocatorUtils.property(locator, "airline", sourceAirline), sourceAirline));
                copy.airline = null;
                if (copyAirline!= null) {
                    List<CompanyNameType> uniqueAirlinel = copy.getAirline();
                    uniqueAirlinel.addAll(copyAirline);
                }
            } else {
                copy.airline = null;
            }
            if (this.authorizedViewers!= null) {
                SpecialRemarkType.AuthorizedViewers sourceAuthorizedViewers;
                sourceAuthorizedViewers = this.getAuthorizedViewers();
                SpecialRemarkType.AuthorizedViewers copyAuthorizedViewers = ((SpecialRemarkType.AuthorizedViewers) strategy.copy(LocatorUtils.property(locator, "authorizedViewers", sourceAuthorizedViewers), sourceAuthorizedViewers));
                copy.setAuthorizedViewers(copyAuthorizedViewers);
            } else {
                copy.authorizedViewers = null;
            }
            if (this.remarkType!= null) {
                String sourceRemarkType;
                sourceRemarkType = this.getRemarkType();
                String copyRemarkType = ((String) strategy.copy(LocatorUtils.property(locator, "remarkType", sourceRemarkType), sourceRemarkType));
                copy.setRemarkType(copyRemarkType);
            } else {
                copy.remarkType = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SpecialRemarkType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="AuthorizedViewer" maxOccurs="99"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attribute name="ViewerCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *                 &lt;attribute name="ViewerCarrierCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "authorizedViewer"
    })
    public static class AuthorizedViewers
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AuthorizedViewer", required = true)
        protected List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> authorizedViewer;

        /**
         * Gets the value of the authorizedViewer property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the authorizedViewer property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAuthorizedViewer().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link SpecialRemarkType.AuthorizedViewers.AuthorizedViewer }
         * 
         * 
         */
        public List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> getAuthorizedViewer() {
            if (authorizedViewer == null) {
                authorizedViewer = new ArrayList<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer>();
            }
            return this.authorizedViewer;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> theAuthorizedViewer;
                theAuthorizedViewer = (((this.authorizedViewer!= null)&&(!this.authorizedViewer.isEmpty()))?this.getAuthorizedViewer():null);
                strategy.appendField(locator, this, "authorizedViewer", buffer, theAuthorizedViewer);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialRemarkType.AuthorizedViewers)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialRemarkType.AuthorizedViewers that = ((SpecialRemarkType.AuthorizedViewers) object);
            {
                List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> lhsAuthorizedViewer;
                lhsAuthorizedViewer = (((this.authorizedViewer!= null)&&(!this.authorizedViewer.isEmpty()))?this.getAuthorizedViewer():null);
                List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> rhsAuthorizedViewer;
                rhsAuthorizedViewer = (((that.authorizedViewer!= null)&&(!that.authorizedViewer.isEmpty()))?that.getAuthorizedViewer():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "authorizedViewer", lhsAuthorizedViewer), LocatorUtils.property(thatLocator, "authorizedViewer", rhsAuthorizedViewer), lhsAuthorizedViewer, rhsAuthorizedViewer)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> theAuthorizedViewer;
                theAuthorizedViewer = (((this.authorizedViewer!= null)&&(!this.authorizedViewer.isEmpty()))?this.getAuthorizedViewer():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authorizedViewer", theAuthorizedViewer), currentHashCode, theAuthorizedViewer);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialRemarkType.AuthorizedViewers) {
                final SpecialRemarkType.AuthorizedViewers copy = ((SpecialRemarkType.AuthorizedViewers) draftCopy);
                if ((this.authorizedViewer!= null)&&(!this.authorizedViewer.isEmpty())) {
                    List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> sourceAuthorizedViewer;
                    sourceAuthorizedViewer = (((this.authorizedViewer!= null)&&(!this.authorizedViewer.isEmpty()))?this.getAuthorizedViewer():null);
                    @SuppressWarnings("unchecked")
                    List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> copyAuthorizedViewer = ((List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> ) strategy.copy(LocatorUtils.property(locator, "authorizedViewer", sourceAuthorizedViewer), sourceAuthorizedViewer));
                    copy.authorizedViewer = null;
                    if (copyAuthorizedViewer!= null) {
                        List<SpecialRemarkType.AuthorizedViewers.AuthorizedViewer> uniqueAuthorizedViewerl = copy.getAuthorizedViewer();
                        uniqueAuthorizedViewerl.addAll(copyAuthorizedViewer);
                    }
                } else {
                    copy.authorizedViewer = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialRemarkType.AuthorizedViewers();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attribute name="ViewerCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
         *       &lt;attribute name="ViewerCarrierCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class AuthorizedViewer
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "ViewerCode")
            protected String viewerCode;
            @XmlAttribute(name = "ViewerCarrierCode")
            protected String viewerCarrierCode;

            /**
             * Gets the value of the viewerCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getViewerCode() {
                return viewerCode;
            }

            /**
             * Sets the value of the viewerCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setViewerCode(String value) {
                this.viewerCode = value;
            }

            /**
             * Gets the value of the viewerCarrierCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getViewerCarrierCode() {
                return viewerCarrierCode;
            }

            /**
             * Sets the value of the viewerCarrierCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setViewerCarrierCode(String value) {
                this.viewerCarrierCode = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theViewerCode;
                    theViewerCode = this.getViewerCode();
                    strategy.appendField(locator, this, "viewerCode", buffer, theViewerCode);
                }
                {
                    String theViewerCarrierCode;
                    theViewerCarrierCode = this.getViewerCarrierCode();
                    strategy.appendField(locator, this, "viewerCarrierCode", buffer, theViewerCarrierCode);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof SpecialRemarkType.AuthorizedViewers.AuthorizedViewer)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SpecialRemarkType.AuthorizedViewers.AuthorizedViewer that = ((SpecialRemarkType.AuthorizedViewers.AuthorizedViewer) object);
                {
                    String lhsViewerCode;
                    lhsViewerCode = this.getViewerCode();
                    String rhsViewerCode;
                    rhsViewerCode = that.getViewerCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "viewerCode", lhsViewerCode), LocatorUtils.property(thatLocator, "viewerCode", rhsViewerCode), lhsViewerCode, rhsViewerCode)) {
                        return false;
                    }
                }
                {
                    String lhsViewerCarrierCode;
                    lhsViewerCarrierCode = this.getViewerCarrierCode();
                    String rhsViewerCarrierCode;
                    rhsViewerCarrierCode = that.getViewerCarrierCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "viewerCarrierCode", lhsViewerCarrierCode), LocatorUtils.property(thatLocator, "viewerCarrierCode", rhsViewerCarrierCode), lhsViewerCarrierCode, rhsViewerCarrierCode)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theViewerCode;
                    theViewerCode = this.getViewerCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "viewerCode", theViewerCode), currentHashCode, theViewerCode);
                }
                {
                    String theViewerCarrierCode;
                    theViewerCarrierCode = this.getViewerCarrierCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "viewerCarrierCode", theViewerCarrierCode), currentHashCode, theViewerCarrierCode);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SpecialRemarkType.AuthorizedViewers.AuthorizedViewer) {
                    final SpecialRemarkType.AuthorizedViewers.AuthorizedViewer copy = ((SpecialRemarkType.AuthorizedViewers.AuthorizedViewer) draftCopy);
                    if (this.viewerCode!= null) {
                        String sourceViewerCode;
                        sourceViewerCode = this.getViewerCode();
                        String copyViewerCode = ((String) strategy.copy(LocatorUtils.property(locator, "viewerCode", sourceViewerCode), sourceViewerCode));
                        copy.setViewerCode(copyViewerCode);
                    } else {
                        copy.viewerCode = null;
                    }
                    if (this.viewerCarrierCode!= null) {
                        String sourceViewerCarrierCode;
                        sourceViewerCarrierCode = this.getViewerCarrierCode();
                        String copyViewerCarrierCode = ((String) strategy.copy(LocatorUtils.property(locator, "viewerCarrierCode", sourceViewerCarrierCode), sourceViewerCarrierCode));
                        copy.setViewerCarrierCode(copyViewerCarrierCode);
                    } else {
                        copy.viewerCarrierCode = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SpecialRemarkType.AuthorizedViewers.AuthorizedViewer();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FlightRefNumberGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class FlightRefNumber
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "RPH")
        protected String rph;

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialRemarkType.FlightRefNumber)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialRemarkType.FlightRefNumber that = ((SpecialRemarkType.FlightRefNumber) object);
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialRemarkType.FlightRefNumber) {
                final SpecialRemarkType.FlightRefNumber copy = ((SpecialRemarkType.FlightRefNumber) draftCopy);
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialRemarkType.FlightRefNumber();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TravelerRefNumberGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TravelerRefNumber
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "SurnameRefNumber")
        protected String surnameRefNumber;

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the surnameRefNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSurnameRefNumber() {
            return surnameRefNumber;
        }

        /**
         * Sets the value of the surnameRefNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSurnameRefNumber(String value) {
            this.surnameRefNumber = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                String theSurnameRefNumber;
                theSurnameRefNumber = this.getSurnameRefNumber();
                strategy.appendField(locator, this, "surnameRefNumber", buffer, theSurnameRefNumber);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialRemarkType.TravelerRefNumber)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialRemarkType.TravelerRefNumber that = ((SpecialRemarkType.TravelerRefNumber) object);
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                String lhsSurnameRefNumber;
                lhsSurnameRefNumber = this.getSurnameRefNumber();
                String rhsSurnameRefNumber;
                rhsSurnameRefNumber = that.getSurnameRefNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "surnameRefNumber", lhsSurnameRefNumber), LocatorUtils.property(thatLocator, "surnameRefNumber", rhsSurnameRefNumber), lhsSurnameRefNumber, rhsSurnameRefNumber)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                String theSurnameRefNumber;
                theSurnameRefNumber = this.getSurnameRefNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "surnameRefNumber", theSurnameRefNumber), currentHashCode, theSurnameRefNumber);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialRemarkType.TravelerRefNumber) {
                final SpecialRemarkType.TravelerRefNumber copy = ((SpecialRemarkType.TravelerRefNumber) draftCopy);
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if (this.surnameRefNumber!= null) {
                    String sourceSurnameRefNumber;
                    sourceSurnameRefNumber = this.getSurnameRefNumber();
                    String copySurnameRefNumber = ((String) strategy.copy(LocatorUtils.property(locator, "surnameRefNumber", sourceSurnameRefNumber), sourceSurnameRefNumber));
                    copy.setSurnameRefNumber(copySurnameRefNumber);
                } else {
                    copy.surnameRefNumber = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialRemarkType.TravelerRefNumber();
        }

    }

}
