//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * SpecialRequests : SpecialRequest
 * A collection of SpecialRequest objects. The collection of all special requests associated with any part of the reservation (the reservation in its entirety, one or more guests, or one or more room stays).  Which special requests belong to which part is determined by each object's SpecialRequestRPHs collection.
 * 
 * <p>Java class for SpecialRequestType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SpecialRequestType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="SpecialRequest" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}ParagraphType"&gt;
 *                 &lt;attribute name="RequestCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                 &lt;attribute name="CodeContext" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *                 &lt;attribute name="NumberOfUnits" type="{http://www.opentravel.org/OTA/2003/05}Numeric1to999" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SpecialRequestType", propOrder = {
    "specialRequest"
})
public class SpecialRequestType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "SpecialRequest", required = true)
    protected List<SpecialRequestType.SpecialRequest> specialRequest;

    /**
     * Gets the value of the specialRequest property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specialRequest property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecialRequest().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpecialRequestType.SpecialRequest }
     * 
     * 
     */
    public List<SpecialRequestType.SpecialRequest> getSpecialRequest() {
        if (specialRequest == null) {
            specialRequest = new ArrayList<SpecialRequestType.SpecialRequest>();
        }
        return this.specialRequest;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<SpecialRequestType.SpecialRequest> theSpecialRequest;
            theSpecialRequest = (((this.specialRequest!= null)&&(!this.specialRequest.isEmpty()))?this.getSpecialRequest():null);
            strategy.appendField(locator, this, "specialRequest", buffer, theSpecialRequest);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpecialRequestType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SpecialRequestType that = ((SpecialRequestType) object);
        {
            List<SpecialRequestType.SpecialRequest> lhsSpecialRequest;
            lhsSpecialRequest = (((this.specialRequest!= null)&&(!this.specialRequest.isEmpty()))?this.getSpecialRequest():null);
            List<SpecialRequestType.SpecialRequest> rhsSpecialRequest;
            rhsSpecialRequest = (((that.specialRequest!= null)&&(!that.specialRequest.isEmpty()))?that.getSpecialRequest():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialRequest", lhsSpecialRequest), LocatorUtils.property(thatLocator, "specialRequest", rhsSpecialRequest), lhsSpecialRequest, rhsSpecialRequest)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<SpecialRequestType.SpecialRequest> theSpecialRequest;
            theSpecialRequest = (((this.specialRequest!= null)&&(!this.specialRequest.isEmpty()))?this.getSpecialRequest():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialRequest", theSpecialRequest), currentHashCode, theSpecialRequest);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SpecialRequestType) {
            final SpecialRequestType copy = ((SpecialRequestType) draftCopy);
            if ((this.specialRequest!= null)&&(!this.specialRequest.isEmpty())) {
                List<SpecialRequestType.SpecialRequest> sourceSpecialRequest;
                sourceSpecialRequest = (((this.specialRequest!= null)&&(!this.specialRequest.isEmpty()))?this.getSpecialRequest():null);
                @SuppressWarnings("unchecked")
                List<SpecialRequestType.SpecialRequest> copySpecialRequest = ((List<SpecialRequestType.SpecialRequest> ) strategy.copy(LocatorUtils.property(locator, "specialRequest", sourceSpecialRequest), sourceSpecialRequest));
                copy.specialRequest = null;
                if (copySpecialRequest!= null) {
                    List<SpecialRequestType.SpecialRequest> uniqueSpecialRequestl = copy.getSpecialRequest();
                    uniqueSpecialRequestl.addAll(copySpecialRequest);
                }
            } else {
                copy.specialRequest = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SpecialRequestType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}ParagraphType"&gt;
     *       &lt;attribute name="RequestCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *       &lt;attribute name="CodeContext" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *       &lt;attribute name="NumberOfUnits" type="{http://www.opentravel.org/OTA/2003/05}Numeric1to999" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class SpecialRequest
        extends ParagraphType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "RequestCode")
        protected String requestCode;
        @XmlAttribute(name = "CodeContext")
        protected String codeContext;
        @XmlAttribute(name = "NumberOfUnits")
        protected Integer numberOfUnits;

        /**
         * Gets the value of the requestCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRequestCode() {
            return requestCode;
        }

        /**
         * Sets the value of the requestCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRequestCode(String value) {
            this.requestCode = value;
        }

        /**
         * Gets the value of the codeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCodeContext() {
            return codeContext;
        }

        /**
         * Sets the value of the codeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCodeContext(String value) {
            this.codeContext = value;
        }

        /**
         * Gets the value of the numberOfUnits property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public Integer getNumberOfUnits() {
            return numberOfUnits;
        }

        /**
         * Sets the value of the numberOfUnits property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setNumberOfUnits(Integer value) {
            this.numberOfUnits = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                String theRequestCode;
                theRequestCode = this.getRequestCode();
                strategy.appendField(locator, this, "requestCode", buffer, theRequestCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                strategy.appendField(locator, this, "codeContext", buffer, theCodeContext);
            }
            {
                Integer theNumberOfUnits;
                theNumberOfUnits = this.getNumberOfUnits();
                strategy.appendField(locator, this, "numberOfUnits", buffer, theNumberOfUnits);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialRequestType.SpecialRequest)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final SpecialRequestType.SpecialRequest that = ((SpecialRequestType.SpecialRequest) object);
            {
                String lhsRequestCode;
                lhsRequestCode = this.getRequestCode();
                String rhsRequestCode;
                rhsRequestCode = that.getRequestCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "requestCode", lhsRequestCode), LocatorUtils.property(thatLocator, "requestCode", rhsRequestCode), lhsRequestCode, rhsRequestCode)) {
                    return false;
                }
            }
            {
                String lhsCodeContext;
                lhsCodeContext = this.getCodeContext();
                String rhsCodeContext;
                rhsCodeContext = that.getCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "codeContext", lhsCodeContext), LocatorUtils.property(thatLocator, "codeContext", rhsCodeContext), lhsCodeContext, rhsCodeContext)) {
                    return false;
                }
            }
            {
                Integer lhsNumberOfUnits;
                lhsNumberOfUnits = this.getNumberOfUnits();
                Integer rhsNumberOfUnits;
                rhsNumberOfUnits = that.getNumberOfUnits();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfUnits", lhsNumberOfUnits), LocatorUtils.property(thatLocator, "numberOfUnits", rhsNumberOfUnits), lhsNumberOfUnits, rhsNumberOfUnits)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                String theRequestCode;
                theRequestCode = this.getRequestCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestCode", theRequestCode), currentHashCode, theRequestCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeContext", theCodeContext), currentHashCode, theCodeContext);
            }
            {
                Integer theNumberOfUnits;
                theNumberOfUnits = this.getNumberOfUnits();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfUnits", theNumberOfUnits), currentHashCode, theNumberOfUnits);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof SpecialRequestType.SpecialRequest) {
                final SpecialRequestType.SpecialRequest copy = ((SpecialRequestType.SpecialRequest) draftCopy);
                if (this.requestCode!= null) {
                    String sourceRequestCode;
                    sourceRequestCode = this.getRequestCode();
                    String copyRequestCode = ((String) strategy.copy(LocatorUtils.property(locator, "requestCode", sourceRequestCode), sourceRequestCode));
                    copy.setRequestCode(copyRequestCode);
                } else {
                    copy.requestCode = null;
                }
                if (this.codeContext!= null) {
                    String sourceCodeContext;
                    sourceCodeContext = this.getCodeContext();
                    String copyCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "codeContext", sourceCodeContext), sourceCodeContext));
                    copy.setCodeContext(copyCodeContext);
                } else {
                    copy.codeContext = null;
                }
                if (this.numberOfUnits!= null) {
                    Integer sourceNumberOfUnits;
                    sourceNumberOfUnits = this.getNumberOfUnits();
                    Integer copyNumberOfUnits = ((Integer) strategy.copy(LocatorUtils.property(locator, "numberOfUnits", sourceNumberOfUnits), sourceNumberOfUnits));
                    copy.setNumberOfUnits(copyNumberOfUnits);
                } else {
                    copy.numberOfUnits = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialRequestType.SpecialRequest();
        }

    }

}
