//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Holds a base fare, tax, total and currency information on a price
 * 
 * <p>Java class for FareType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FareType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="BaseFare" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}ExchangeRateGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="EquivFare" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Taxes" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Tax" type="{http://www.opentravel.org/OTA/2003/05}AirTaxType" maxOccurs="99"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Fees" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Fee" type="{http://www.opentravel.org/OTA/2003/05}AirFeeType" maxOccurs="9"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="TotalFare" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FareConstruction" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attribute name="FormattedIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="Language" type="{http://www.w3.org/2001/XMLSchema}language" /&gt;
 *                 &lt;attribute name="OriginCityCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *                 &lt;attribute name="OriginCodeContext" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *                 &lt;attribute name="DestinationCityCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *                 &lt;attribute name="DestinationCodeContext" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="UnstructuredFareCalc" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength1to128"&gt;
 *                 &lt;attribute name="FareCalcMode" type="{http://www.opentravel.org/OTA/2003/05}AlphaNumericStringLength1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element ref="{http://www.opentravel.org/OTA/2003/05}TPA_Extensions" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}NegotiatedFareAttributes"/&gt;
 *       &lt;attribute name="TicketDesignatorCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FareType", propOrder = {
    "baseFare",
    "equivFare",
    "taxes",
    "fees",
    "totalFare",
    "fareConstruction",
    "unstructuredFareCalc",
    "tpaExtensions"
})
public class FareType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "BaseFare")
    protected FareType.BaseFare baseFare;
    @XmlElement(name = "EquivFare")
    protected FareType.EquivFare equivFare;
    @XmlElement(name = "Taxes")
    protected FareType.Taxes taxes;
    @XmlElement(name = "Fees")
    protected FareType.Fees fees;
    @XmlElement(name = "TotalFare")
    protected FareType.TotalFare totalFare;
    @XmlElement(name = "FareConstruction")
    protected FareType.FareConstruction fareConstruction;
    @XmlElement(name = "UnstructuredFareCalc")
    protected FareType.UnstructuredFareCalc unstructuredFareCalc;
    @XmlElement(name = "TPA_Extensions")
    protected TPAExtensionsType tpaExtensions;
    @XmlAttribute(name = "TicketDesignatorCode")
    protected String ticketDesignatorCode;
    @XmlAttribute(name = "NegotiatedFare")
    protected Boolean negotiatedFare;
    @XmlAttribute(name = "NegotiatedFareCode")
    protected String negotiatedFareCode;

    /**
     * Gets the value of the baseFare property.
     * 
     * @return
     *     possible object is
     *     {@link FareType.BaseFare }
     *     
     */
    public FareType.BaseFare getBaseFare() {
        return baseFare;
    }

    /**
     * Sets the value of the baseFare property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType.BaseFare }
     *     
     */
    public void setBaseFare(FareType.BaseFare value) {
        this.baseFare = value;
    }

    /**
     * Gets the value of the equivFare property.
     * 
     * @return
     *     possible object is
     *     {@link FareType.EquivFare }
     *     
     */
    public FareType.EquivFare getEquivFare() {
        return equivFare;
    }

    /**
     * Sets the value of the equivFare property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType.EquivFare }
     *     
     */
    public void setEquivFare(FareType.EquivFare value) {
        this.equivFare = value;
    }

    /**
     * Gets the value of the taxes property.
     * 
     * @return
     *     possible object is
     *     {@link FareType.Taxes }
     *     
     */
    public FareType.Taxes getTaxes() {
        return taxes;
    }

    /**
     * Sets the value of the taxes property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType.Taxes }
     *     
     */
    public void setTaxes(FareType.Taxes value) {
        this.taxes = value;
    }

    /**
     * Gets the value of the fees property.
     * 
     * @return
     *     possible object is
     *     {@link FareType.Fees }
     *     
     */
    public FareType.Fees getFees() {
        return fees;
    }

    /**
     * Sets the value of the fees property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType.Fees }
     *     
     */
    public void setFees(FareType.Fees value) {
        this.fees = value;
    }

    /**
     * Gets the value of the totalFare property.
     * 
     * @return
     *     possible object is
     *     {@link FareType.TotalFare }
     *     
     */
    public FareType.TotalFare getTotalFare() {
        return totalFare;
    }

    /**
     * Sets the value of the totalFare property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType.TotalFare }
     *     
     */
    public void setTotalFare(FareType.TotalFare value) {
        this.totalFare = value;
    }

    /**
     * Gets the value of the fareConstruction property.
     * 
     * @return
     *     possible object is
     *     {@link FareType.FareConstruction }
     *     
     */
    public FareType.FareConstruction getFareConstruction() {
        return fareConstruction;
    }

    /**
     * Sets the value of the fareConstruction property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType.FareConstruction }
     *     
     */
    public void setFareConstruction(FareType.FareConstruction value) {
        this.fareConstruction = value;
    }

    /**
     * Gets the value of the unstructuredFareCalc property.
     * 
     * @return
     *     possible object is
     *     {@link FareType.UnstructuredFareCalc }
     *     
     */
    public FareType.UnstructuredFareCalc getUnstructuredFareCalc() {
        return unstructuredFareCalc;
    }

    /**
     * Sets the value of the unstructuredFareCalc property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType.UnstructuredFareCalc }
     *     
     */
    public void setUnstructuredFareCalc(FareType.UnstructuredFareCalc value) {
        this.unstructuredFareCalc = value;
    }

    /**
     * Gets the value of the tpaExtensions property.
     * 
     * @return
     *     possible object is
     *     {@link TPAExtensionsType }
     *     
     */
    public TPAExtensionsType getTPAExtensions() {
        return tpaExtensions;
    }

    /**
     * Sets the value of the tpaExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link TPAExtensionsType }
     *     
     */
    public void setTPAExtensions(TPAExtensionsType value) {
        this.tpaExtensions = value;
    }

    /**
     * Gets the value of the ticketDesignatorCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTicketDesignatorCode() {
        return ticketDesignatorCode;
    }

    /**
     * Sets the value of the ticketDesignatorCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTicketDesignatorCode(String value) {
        this.ticketDesignatorCode = value;
    }

    /**
     * Gets the value of the negotiatedFare property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isNegotiatedFare() {
        if (negotiatedFare == null) {
            return false;
        } else {
            return negotiatedFare;
        }
    }

    /**
     * Sets the value of the negotiatedFare property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setNegotiatedFare(Boolean value) {
        this.negotiatedFare = value;
    }

    /**
     * Gets the value of the negotiatedFareCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNegotiatedFareCode() {
        return negotiatedFareCode;
    }

    /**
     * Sets the value of the negotiatedFareCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNegotiatedFareCode(String value) {
        this.negotiatedFareCode = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            FareType.BaseFare theBaseFare;
            theBaseFare = this.getBaseFare();
            strategy.appendField(locator, this, "baseFare", buffer, theBaseFare);
        }
        {
            FareType.EquivFare theEquivFare;
            theEquivFare = this.getEquivFare();
            strategy.appendField(locator, this, "equivFare", buffer, theEquivFare);
        }
        {
            FareType.Taxes theTaxes;
            theTaxes = this.getTaxes();
            strategy.appendField(locator, this, "taxes", buffer, theTaxes);
        }
        {
            FareType.Fees theFees;
            theFees = this.getFees();
            strategy.appendField(locator, this, "fees", buffer, theFees);
        }
        {
            FareType.TotalFare theTotalFare;
            theTotalFare = this.getTotalFare();
            strategy.appendField(locator, this, "totalFare", buffer, theTotalFare);
        }
        {
            FareType.FareConstruction theFareConstruction;
            theFareConstruction = this.getFareConstruction();
            strategy.appendField(locator, this, "fareConstruction", buffer, theFareConstruction);
        }
        {
            FareType.UnstructuredFareCalc theUnstructuredFareCalc;
            theUnstructuredFareCalc = this.getUnstructuredFareCalc();
            strategy.appendField(locator, this, "unstructuredFareCalc", buffer, theUnstructuredFareCalc);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            strategy.appendField(locator, this, "tpaExtensions", buffer, theTPAExtensions);
        }
        {
            String theTicketDesignatorCode;
            theTicketDesignatorCode = this.getTicketDesignatorCode();
            strategy.appendField(locator, this, "ticketDesignatorCode", buffer, theTicketDesignatorCode);
        }
        {
            boolean theNegotiatedFare;
            theNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
            strategy.appendField(locator, this, "negotiatedFare", buffer, theNegotiatedFare);
        }
        {
            String theNegotiatedFareCode;
            theNegotiatedFareCode = this.getNegotiatedFareCode();
            strategy.appendField(locator, this, "negotiatedFareCode", buffer, theNegotiatedFareCode);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FareType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FareType that = ((FareType) object);
        {
            FareType.BaseFare lhsBaseFare;
            lhsBaseFare = this.getBaseFare();
            FareType.BaseFare rhsBaseFare;
            rhsBaseFare = that.getBaseFare();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "baseFare", lhsBaseFare), LocatorUtils.property(thatLocator, "baseFare", rhsBaseFare), lhsBaseFare, rhsBaseFare)) {
                return false;
            }
        }
        {
            FareType.EquivFare lhsEquivFare;
            lhsEquivFare = this.getEquivFare();
            FareType.EquivFare rhsEquivFare;
            rhsEquivFare = that.getEquivFare();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "equivFare", lhsEquivFare), LocatorUtils.property(thatLocator, "equivFare", rhsEquivFare), lhsEquivFare, rhsEquivFare)) {
                return false;
            }
        }
        {
            FareType.Taxes lhsTaxes;
            lhsTaxes = this.getTaxes();
            FareType.Taxes rhsTaxes;
            rhsTaxes = that.getTaxes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "taxes", lhsTaxes), LocatorUtils.property(thatLocator, "taxes", rhsTaxes), lhsTaxes, rhsTaxes)) {
                return false;
            }
        }
        {
            FareType.Fees lhsFees;
            lhsFees = this.getFees();
            FareType.Fees rhsFees;
            rhsFees = that.getFees();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fees", lhsFees), LocatorUtils.property(thatLocator, "fees", rhsFees), lhsFees, rhsFees)) {
                return false;
            }
        }
        {
            FareType.TotalFare lhsTotalFare;
            lhsTotalFare = this.getTotalFare();
            FareType.TotalFare rhsTotalFare;
            rhsTotalFare = that.getTotalFare();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalFare", lhsTotalFare), LocatorUtils.property(thatLocator, "totalFare", rhsTotalFare), lhsTotalFare, rhsTotalFare)) {
                return false;
            }
        }
        {
            FareType.FareConstruction lhsFareConstruction;
            lhsFareConstruction = this.getFareConstruction();
            FareType.FareConstruction rhsFareConstruction;
            rhsFareConstruction = that.getFareConstruction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareConstruction", lhsFareConstruction), LocatorUtils.property(thatLocator, "fareConstruction", rhsFareConstruction), lhsFareConstruction, rhsFareConstruction)) {
                return false;
            }
        }
        {
            FareType.UnstructuredFareCalc lhsUnstructuredFareCalc;
            lhsUnstructuredFareCalc = this.getUnstructuredFareCalc();
            FareType.UnstructuredFareCalc rhsUnstructuredFareCalc;
            rhsUnstructuredFareCalc = that.getUnstructuredFareCalc();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "unstructuredFareCalc", lhsUnstructuredFareCalc), LocatorUtils.property(thatLocator, "unstructuredFareCalc", rhsUnstructuredFareCalc), lhsUnstructuredFareCalc, rhsUnstructuredFareCalc)) {
                return false;
            }
        }
        {
            TPAExtensionsType lhsTPAExtensions;
            lhsTPAExtensions = this.getTPAExtensions();
            TPAExtensionsType rhsTPAExtensions;
            rhsTPAExtensions = that.getTPAExtensions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tpaExtensions", lhsTPAExtensions), LocatorUtils.property(thatLocator, "tpaExtensions", rhsTPAExtensions), lhsTPAExtensions, rhsTPAExtensions)) {
                return false;
            }
        }
        {
            String lhsTicketDesignatorCode;
            lhsTicketDesignatorCode = this.getTicketDesignatorCode();
            String rhsTicketDesignatorCode;
            rhsTicketDesignatorCode = that.getTicketDesignatorCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDesignatorCode", lhsTicketDesignatorCode), LocatorUtils.property(thatLocator, "ticketDesignatorCode", rhsTicketDesignatorCode), lhsTicketDesignatorCode, rhsTicketDesignatorCode)) {
                return false;
            }
        }
        {
            boolean lhsNegotiatedFare;
            lhsNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
            boolean rhsNegotiatedFare;
            rhsNegotiatedFare = ((that.negotiatedFare!= null)?that.isNegotiatedFare():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "negotiatedFare", lhsNegotiatedFare), LocatorUtils.property(thatLocator, "negotiatedFare", rhsNegotiatedFare), lhsNegotiatedFare, rhsNegotiatedFare)) {
                return false;
            }
        }
        {
            String lhsNegotiatedFareCode;
            lhsNegotiatedFareCode = this.getNegotiatedFareCode();
            String rhsNegotiatedFareCode;
            rhsNegotiatedFareCode = that.getNegotiatedFareCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "negotiatedFareCode", lhsNegotiatedFareCode), LocatorUtils.property(thatLocator, "negotiatedFareCode", rhsNegotiatedFareCode), lhsNegotiatedFareCode, rhsNegotiatedFareCode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            FareType.BaseFare theBaseFare;
            theBaseFare = this.getBaseFare();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "baseFare", theBaseFare), currentHashCode, theBaseFare);
        }
        {
            FareType.EquivFare theEquivFare;
            theEquivFare = this.getEquivFare();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "equivFare", theEquivFare), currentHashCode, theEquivFare);
        }
        {
            FareType.Taxes theTaxes;
            theTaxes = this.getTaxes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxes", theTaxes), currentHashCode, theTaxes);
        }
        {
            FareType.Fees theFees;
            theFees = this.getFees();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fees", theFees), currentHashCode, theFees);
        }
        {
            FareType.TotalFare theTotalFare;
            theTotalFare = this.getTotalFare();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalFare", theTotalFare), currentHashCode, theTotalFare);
        }
        {
            FareType.FareConstruction theFareConstruction;
            theFareConstruction = this.getFareConstruction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareConstruction", theFareConstruction), currentHashCode, theFareConstruction);
        }
        {
            FareType.UnstructuredFareCalc theUnstructuredFareCalc;
            theUnstructuredFareCalc = this.getUnstructuredFareCalc();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "unstructuredFareCalc", theUnstructuredFareCalc), currentHashCode, theUnstructuredFareCalc);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tpaExtensions", theTPAExtensions), currentHashCode, theTPAExtensions);
        }
        {
            String theTicketDesignatorCode;
            theTicketDesignatorCode = this.getTicketDesignatorCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDesignatorCode", theTicketDesignatorCode), currentHashCode, theTicketDesignatorCode);
        }
        {
            boolean theNegotiatedFare;
            theNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "negotiatedFare", theNegotiatedFare), currentHashCode, theNegotiatedFare);
        }
        {
            String theNegotiatedFareCode;
            theNegotiatedFareCode = this.getNegotiatedFareCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "negotiatedFareCode", theNegotiatedFareCode), currentHashCode, theNegotiatedFareCode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FareType) {
            final FareType copy = ((FareType) draftCopy);
            if (this.baseFare!= null) {
                FareType.BaseFare sourceBaseFare;
                sourceBaseFare = this.getBaseFare();
                FareType.BaseFare copyBaseFare = ((FareType.BaseFare) strategy.copy(LocatorUtils.property(locator, "baseFare", sourceBaseFare), sourceBaseFare));
                copy.setBaseFare(copyBaseFare);
            } else {
                copy.baseFare = null;
            }
            if (this.equivFare!= null) {
                FareType.EquivFare sourceEquivFare;
                sourceEquivFare = this.getEquivFare();
                FareType.EquivFare copyEquivFare = ((FareType.EquivFare) strategy.copy(LocatorUtils.property(locator, "equivFare", sourceEquivFare), sourceEquivFare));
                copy.setEquivFare(copyEquivFare);
            } else {
                copy.equivFare = null;
            }
            if (this.taxes!= null) {
                FareType.Taxes sourceTaxes;
                sourceTaxes = this.getTaxes();
                FareType.Taxes copyTaxes = ((FareType.Taxes) strategy.copy(LocatorUtils.property(locator, "taxes", sourceTaxes), sourceTaxes));
                copy.setTaxes(copyTaxes);
            } else {
                copy.taxes = null;
            }
            if (this.fees!= null) {
                FareType.Fees sourceFees;
                sourceFees = this.getFees();
                FareType.Fees copyFees = ((FareType.Fees) strategy.copy(LocatorUtils.property(locator, "fees", sourceFees), sourceFees));
                copy.setFees(copyFees);
            } else {
                copy.fees = null;
            }
            if (this.totalFare!= null) {
                FareType.TotalFare sourceTotalFare;
                sourceTotalFare = this.getTotalFare();
                FareType.TotalFare copyTotalFare = ((FareType.TotalFare) strategy.copy(LocatorUtils.property(locator, "totalFare", sourceTotalFare), sourceTotalFare));
                copy.setTotalFare(copyTotalFare);
            } else {
                copy.totalFare = null;
            }
            if (this.fareConstruction!= null) {
                FareType.FareConstruction sourceFareConstruction;
                sourceFareConstruction = this.getFareConstruction();
                FareType.FareConstruction copyFareConstruction = ((FareType.FareConstruction) strategy.copy(LocatorUtils.property(locator, "fareConstruction", sourceFareConstruction), sourceFareConstruction));
                copy.setFareConstruction(copyFareConstruction);
            } else {
                copy.fareConstruction = null;
            }
            if (this.unstructuredFareCalc!= null) {
                FareType.UnstructuredFareCalc sourceUnstructuredFareCalc;
                sourceUnstructuredFareCalc = this.getUnstructuredFareCalc();
                FareType.UnstructuredFareCalc copyUnstructuredFareCalc = ((FareType.UnstructuredFareCalc) strategy.copy(LocatorUtils.property(locator, "unstructuredFareCalc", sourceUnstructuredFareCalc), sourceUnstructuredFareCalc));
                copy.setUnstructuredFareCalc(copyUnstructuredFareCalc);
            } else {
                copy.unstructuredFareCalc = null;
            }
            if (this.tpaExtensions!= null) {
                TPAExtensionsType sourceTPAExtensions;
                sourceTPAExtensions = this.getTPAExtensions();
                TPAExtensionsType copyTPAExtensions = ((TPAExtensionsType) strategy.copy(LocatorUtils.property(locator, "tpaExtensions", sourceTPAExtensions), sourceTPAExtensions));
                copy.setTPAExtensions(copyTPAExtensions);
            } else {
                copy.tpaExtensions = null;
            }
            if (this.ticketDesignatorCode!= null) {
                String sourceTicketDesignatorCode;
                sourceTicketDesignatorCode = this.getTicketDesignatorCode();
                String copyTicketDesignatorCode = ((String) strategy.copy(LocatorUtils.property(locator, "ticketDesignatorCode", sourceTicketDesignatorCode), sourceTicketDesignatorCode));
                copy.setTicketDesignatorCode(copyTicketDesignatorCode);
            } else {
                copy.ticketDesignatorCode = null;
            }
            if (this.negotiatedFare!= null) {
                boolean sourceNegotiatedFare;
                sourceNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
                boolean copyNegotiatedFare = strategy.copy(LocatorUtils.property(locator, "negotiatedFare", sourceNegotiatedFare), sourceNegotiatedFare);
                copy.setNegotiatedFare(copyNegotiatedFare);
            } else {
                copy.negotiatedFare = null;
            }
            if (this.negotiatedFareCode!= null) {
                String sourceNegotiatedFareCode;
                sourceNegotiatedFareCode = this.getNegotiatedFareCode();
                String copyNegotiatedFareCode = ((String) strategy.copy(LocatorUtils.property(locator, "negotiatedFareCode", sourceNegotiatedFareCode), sourceNegotiatedFareCode));
                copy.setNegotiatedFareCode(copyNegotiatedFareCode);
            } else {
                copy.negotiatedFareCode = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FareType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}ExchangeRateGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class BaseFare
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;
        @XmlAttribute(name = "FromCurrency")
        protected String fromCurrency;
        @XmlAttribute(name = "ToCurrency")
        protected String toCurrency;
        @XmlAttribute(name = "Rate")
        protected BigDecimal rate;
        @XmlAttribute(name = "Date")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar date;

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        /**
         * Gets the value of the fromCurrency property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFromCurrency() {
            return fromCurrency;
        }

        /**
         * Sets the value of the fromCurrency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFromCurrency(String value) {
            this.fromCurrency = value;
        }

        /**
         * Gets the value of the toCurrency property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getToCurrency() {
            return toCurrency;
        }

        /**
         * Sets the value of the toCurrency property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setToCurrency(String value) {
            this.toCurrency = value;
        }

        /**
         * Gets the value of the rate property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getRate() {
            return rate;
        }

        /**
         * Sets the value of the rate property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setRate(BigDecimal value) {
            this.rate = value;
        }

        /**
         * Gets the value of the date property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getDate() {
            return date;
        }

        /**
         * Sets the value of the date property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setDate(XMLGregorianCalendar value) {
            this.date = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            {
                String theFromCurrency;
                theFromCurrency = this.getFromCurrency();
                strategy.appendField(locator, this, "fromCurrency", buffer, theFromCurrency);
            }
            {
                String theToCurrency;
                theToCurrency = this.getToCurrency();
                strategy.appendField(locator, this, "toCurrency", buffer, theToCurrency);
            }
            {
                BigDecimal theRate;
                theRate = this.getRate();
                strategy.appendField(locator, this, "rate", buffer, theRate);
            }
            {
                XMLGregorianCalendar theDate;
                theDate = this.getDate();
                strategy.appendField(locator, this, "date", buffer, theDate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareType.BaseFare)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareType.BaseFare that = ((FareType.BaseFare) object);
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            {
                String lhsFromCurrency;
                lhsFromCurrency = this.getFromCurrency();
                String rhsFromCurrency;
                rhsFromCurrency = that.getFromCurrency();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fromCurrency", lhsFromCurrency), LocatorUtils.property(thatLocator, "fromCurrency", rhsFromCurrency), lhsFromCurrency, rhsFromCurrency)) {
                    return false;
                }
            }
            {
                String lhsToCurrency;
                lhsToCurrency = this.getToCurrency();
                String rhsToCurrency;
                rhsToCurrency = that.getToCurrency();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "toCurrency", lhsToCurrency), LocatorUtils.property(thatLocator, "toCurrency", rhsToCurrency), lhsToCurrency, rhsToCurrency)) {
                    return false;
                }
            }
            {
                BigDecimal lhsRate;
                lhsRate = this.getRate();
                BigDecimal rhsRate;
                rhsRate = that.getRate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rate", lhsRate), LocatorUtils.property(thatLocator, "rate", rhsRate), lhsRate, rhsRate)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsDate;
                lhsDate = this.getDate();
                XMLGregorianCalendar rhsDate;
                rhsDate = that.getDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            {
                String theFromCurrency;
                theFromCurrency = this.getFromCurrency();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fromCurrency", theFromCurrency), currentHashCode, theFromCurrency);
            }
            {
                String theToCurrency;
                theToCurrency = this.getToCurrency();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "toCurrency", theToCurrency), currentHashCode, theToCurrency);
            }
            {
                BigDecimal theRate;
                theRate = this.getRate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rate", theRate), currentHashCode, theRate);
            }
            {
                XMLGregorianCalendar theDate;
                theDate = this.getDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareType.BaseFare) {
                final FareType.BaseFare copy = ((FareType.BaseFare) draftCopy);
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
                if (this.fromCurrency!= null) {
                    String sourceFromCurrency;
                    sourceFromCurrency = this.getFromCurrency();
                    String copyFromCurrency = ((String) strategy.copy(LocatorUtils.property(locator, "fromCurrency", sourceFromCurrency), sourceFromCurrency));
                    copy.setFromCurrency(copyFromCurrency);
                } else {
                    copy.fromCurrency = null;
                }
                if (this.toCurrency!= null) {
                    String sourceToCurrency;
                    sourceToCurrency = this.getToCurrency();
                    String copyToCurrency = ((String) strategy.copy(LocatorUtils.property(locator, "toCurrency", sourceToCurrency), sourceToCurrency));
                    copy.setToCurrency(copyToCurrency);
                } else {
                    copy.toCurrency = null;
                }
                if (this.rate!= null) {
                    BigDecimal sourceRate;
                    sourceRate = this.getRate();
                    BigDecimal copyRate = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "rate", sourceRate), sourceRate));
                    copy.setRate(copyRate);
                } else {
                    copy.rate = null;
                }
                if (this.date!= null) {
                    XMLGregorianCalendar sourceDate;
                    sourceDate = this.getDate();
                    XMLGregorianCalendar copyDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                    copy.setDate(copyDate);
                } else {
                    copy.date = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareType.BaseFare();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class EquivFare
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareType.EquivFare)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareType.EquivFare that = ((FareType.EquivFare) object);
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareType.EquivFare) {
                final FareType.EquivFare copy = ((FareType.EquivFare) draftCopy);
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareType.EquivFare();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attribute name="FormattedIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="Language" type="{http://www.w3.org/2001/XMLSchema}language" /&gt;
     *       &lt;attribute name="OriginCityCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *       &lt;attribute name="OriginCodeContext" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *       &lt;attribute name="DestinationCityCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *       &lt;attribute name="DestinationCodeContext" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class FareConstruction
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "FormattedIndicator")
        protected Boolean formattedIndicator;
        @XmlAttribute(name = "Language")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlSchemaType(name = "language")
        protected String language;
        @XmlAttribute(name = "OriginCityCode")
        protected String originCityCode;
        @XmlAttribute(name = "OriginCodeContext")
        protected String originCodeContext;
        @XmlAttribute(name = "DestinationCityCode")
        protected String destinationCityCode;
        @XmlAttribute(name = "DestinationCodeContext")
        protected String destinationCodeContext;

        /**
         * Gets the value of the formattedIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isFormattedIndicator() {
            return formattedIndicator;
        }

        /**
         * Sets the value of the formattedIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setFormattedIndicator(Boolean value) {
            this.formattedIndicator = value;
        }

        /**
         * Gets the value of the language property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLanguage() {
            return language;
        }

        /**
         * Sets the value of the language property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLanguage(String value) {
            this.language = value;
        }

        /**
         * Gets the value of the originCityCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getOriginCityCode() {
            return originCityCode;
        }

        /**
         * Sets the value of the originCityCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setOriginCityCode(String value) {
            this.originCityCode = value;
        }

        /**
         * Gets the value of the originCodeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getOriginCodeContext() {
            return originCodeContext;
        }

        /**
         * Sets the value of the originCodeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setOriginCodeContext(String value) {
            this.originCodeContext = value;
        }

        /**
         * Gets the value of the destinationCityCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDestinationCityCode() {
            return destinationCityCode;
        }

        /**
         * Sets the value of the destinationCityCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDestinationCityCode(String value) {
            this.destinationCityCode = value;
        }

        /**
         * Gets the value of the destinationCodeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDestinationCodeContext() {
            return destinationCodeContext;
        }

        /**
         * Sets the value of the destinationCodeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDestinationCodeContext(String value) {
            this.destinationCodeContext = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                Boolean theFormattedIndicator;
                theFormattedIndicator = this.isFormattedIndicator();
                strategy.appendField(locator, this, "formattedIndicator", buffer, theFormattedIndicator);
            }
            {
                String theLanguage;
                theLanguage = this.getLanguage();
                strategy.appendField(locator, this, "language", buffer, theLanguage);
            }
            {
                String theOriginCityCode;
                theOriginCityCode = this.getOriginCityCode();
                strategy.appendField(locator, this, "originCityCode", buffer, theOriginCityCode);
            }
            {
                String theOriginCodeContext;
                theOriginCodeContext = this.getOriginCodeContext();
                strategy.appendField(locator, this, "originCodeContext", buffer, theOriginCodeContext);
            }
            {
                String theDestinationCityCode;
                theDestinationCityCode = this.getDestinationCityCode();
                strategy.appendField(locator, this, "destinationCityCode", buffer, theDestinationCityCode);
            }
            {
                String theDestinationCodeContext;
                theDestinationCodeContext = this.getDestinationCodeContext();
                strategy.appendField(locator, this, "destinationCodeContext", buffer, theDestinationCodeContext);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareType.FareConstruction)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareType.FareConstruction that = ((FareType.FareConstruction) object);
            {
                Boolean lhsFormattedIndicator;
                lhsFormattedIndicator = this.isFormattedIndicator();
                Boolean rhsFormattedIndicator;
                rhsFormattedIndicator = that.isFormattedIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "formattedIndicator", lhsFormattedIndicator), LocatorUtils.property(thatLocator, "formattedIndicator", rhsFormattedIndicator), lhsFormattedIndicator, rhsFormattedIndicator)) {
                    return false;
                }
            }
            {
                String lhsLanguage;
                lhsLanguage = this.getLanguage();
                String rhsLanguage;
                rhsLanguage = that.getLanguage();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                    return false;
                }
            }
            {
                String lhsOriginCityCode;
                lhsOriginCityCode = this.getOriginCityCode();
                String rhsOriginCityCode;
                rhsOriginCityCode = that.getOriginCityCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "originCityCode", lhsOriginCityCode), LocatorUtils.property(thatLocator, "originCityCode", rhsOriginCityCode), lhsOriginCityCode, rhsOriginCityCode)) {
                    return false;
                }
            }
            {
                String lhsOriginCodeContext;
                lhsOriginCodeContext = this.getOriginCodeContext();
                String rhsOriginCodeContext;
                rhsOriginCodeContext = that.getOriginCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "originCodeContext", lhsOriginCodeContext), LocatorUtils.property(thatLocator, "originCodeContext", rhsOriginCodeContext), lhsOriginCodeContext, rhsOriginCodeContext)) {
                    return false;
                }
            }
            {
                String lhsDestinationCityCode;
                lhsDestinationCityCode = this.getDestinationCityCode();
                String rhsDestinationCityCode;
                rhsDestinationCityCode = that.getDestinationCityCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "destinationCityCode", lhsDestinationCityCode), LocatorUtils.property(thatLocator, "destinationCityCode", rhsDestinationCityCode), lhsDestinationCityCode, rhsDestinationCityCode)) {
                    return false;
                }
            }
            {
                String lhsDestinationCodeContext;
                lhsDestinationCodeContext = this.getDestinationCodeContext();
                String rhsDestinationCodeContext;
                rhsDestinationCodeContext = that.getDestinationCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "destinationCodeContext", lhsDestinationCodeContext), LocatorUtils.property(thatLocator, "destinationCodeContext", rhsDestinationCodeContext), lhsDestinationCodeContext, rhsDestinationCodeContext)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                Boolean theFormattedIndicator;
                theFormattedIndicator = this.isFormattedIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formattedIndicator", theFormattedIndicator), currentHashCode, theFormattedIndicator);
            }
            {
                String theLanguage;
                theLanguage = this.getLanguage();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
            }
            {
                String theOriginCityCode;
                theOriginCityCode = this.getOriginCityCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originCityCode", theOriginCityCode), currentHashCode, theOriginCityCode);
            }
            {
                String theOriginCodeContext;
                theOriginCodeContext = this.getOriginCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originCodeContext", theOriginCodeContext), currentHashCode, theOriginCodeContext);
            }
            {
                String theDestinationCityCode;
                theDestinationCityCode = this.getDestinationCityCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destinationCityCode", theDestinationCityCode), currentHashCode, theDestinationCityCode);
            }
            {
                String theDestinationCodeContext;
                theDestinationCodeContext = this.getDestinationCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destinationCodeContext", theDestinationCodeContext), currentHashCode, theDestinationCodeContext);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareType.FareConstruction) {
                final FareType.FareConstruction copy = ((FareType.FareConstruction) draftCopy);
                if (this.formattedIndicator!= null) {
                    Boolean sourceFormattedIndicator;
                    sourceFormattedIndicator = this.isFormattedIndicator();
                    Boolean copyFormattedIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "formattedIndicator", sourceFormattedIndicator), sourceFormattedIndicator));
                    copy.setFormattedIndicator(copyFormattedIndicator);
                } else {
                    copy.formattedIndicator = null;
                }
                if (this.language!= null) {
                    String sourceLanguage;
                    sourceLanguage = this.getLanguage();
                    String copyLanguage = ((String) strategy.copy(LocatorUtils.property(locator, "language", sourceLanguage), sourceLanguage));
                    copy.setLanguage(copyLanguage);
                } else {
                    copy.language = null;
                }
                if (this.originCityCode!= null) {
                    String sourceOriginCityCode;
                    sourceOriginCityCode = this.getOriginCityCode();
                    String copyOriginCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "originCityCode", sourceOriginCityCode), sourceOriginCityCode));
                    copy.setOriginCityCode(copyOriginCityCode);
                } else {
                    copy.originCityCode = null;
                }
                if (this.originCodeContext!= null) {
                    String sourceOriginCodeContext;
                    sourceOriginCodeContext = this.getOriginCodeContext();
                    String copyOriginCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "originCodeContext", sourceOriginCodeContext), sourceOriginCodeContext));
                    copy.setOriginCodeContext(copyOriginCodeContext);
                } else {
                    copy.originCodeContext = null;
                }
                if (this.destinationCityCode!= null) {
                    String sourceDestinationCityCode;
                    sourceDestinationCityCode = this.getDestinationCityCode();
                    String copyDestinationCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "destinationCityCode", sourceDestinationCityCode), sourceDestinationCityCode));
                    copy.setDestinationCityCode(copyDestinationCityCode);
                } else {
                    copy.destinationCityCode = null;
                }
                if (this.destinationCodeContext!= null) {
                    String sourceDestinationCodeContext;
                    sourceDestinationCodeContext = this.getDestinationCodeContext();
                    String copyDestinationCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "destinationCodeContext", sourceDestinationCodeContext), sourceDestinationCodeContext));
                    copy.setDestinationCodeContext(copyDestinationCodeContext);
                } else {
                    copy.destinationCodeContext = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareType.FareConstruction();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Fee" type="{http://www.opentravel.org/OTA/2003/05}AirFeeType" maxOccurs="9"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "fee"
    })
    public static class Fees
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "Fee", required = true)
        protected List<AirFeeType> fee;

        /**
         * Gets the value of the fee property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fee property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getFee().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AirFeeType }
         * 
         * 
         */
        public List<AirFeeType> getFee() {
            if (fee == null) {
                fee = new ArrayList<AirFeeType>();
            }
            return this.fee;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AirFeeType> theFee;
                theFee = (((this.fee!= null)&&(!this.fee.isEmpty()))?this.getFee():null);
                strategy.appendField(locator, this, "fee", buffer, theFee);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareType.Fees)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareType.Fees that = ((FareType.Fees) object);
            {
                List<AirFeeType> lhsFee;
                lhsFee = (((this.fee!= null)&&(!this.fee.isEmpty()))?this.getFee():null);
                List<AirFeeType> rhsFee;
                rhsFee = (((that.fee!= null)&&(!that.fee.isEmpty()))?that.getFee():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fee", lhsFee), LocatorUtils.property(thatLocator, "fee", rhsFee), lhsFee, rhsFee)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AirFeeType> theFee;
                theFee = (((this.fee!= null)&&(!this.fee.isEmpty()))?this.getFee():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fee", theFee), currentHashCode, theFee);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareType.Fees) {
                final FareType.Fees copy = ((FareType.Fees) draftCopy);
                if ((this.fee!= null)&&(!this.fee.isEmpty())) {
                    List<AirFeeType> sourceFee;
                    sourceFee = (((this.fee!= null)&&(!this.fee.isEmpty()))?this.getFee():null);
                    @SuppressWarnings("unchecked")
                    List<AirFeeType> copyFee = ((List<AirFeeType> ) strategy.copy(LocatorUtils.property(locator, "fee", sourceFee), sourceFee));
                    copy.fee = null;
                    if (copyFee!= null) {
                        List<AirFeeType> uniqueFeel = copy.getFee();
                        uniqueFeel.addAll(copyFee);
                    }
                } else {
                    copy.fee = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareType.Fees();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Tax" type="{http://www.opentravel.org/OTA/2003/05}AirTaxType" maxOccurs="99"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "tax"
    })
    public static class Taxes
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "Tax", required = true)
        protected List<AirTaxType> tax;

        /**
         * Gets the value of the tax property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the tax property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getTax().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AirTaxType }
         * 
         * 
         */
        public List<AirTaxType> getTax() {
            if (tax == null) {
                tax = new ArrayList<AirTaxType>();
            }
            return this.tax;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AirTaxType> theTax;
                theTax = (((this.tax!= null)&&(!this.tax.isEmpty()))?this.getTax():null);
                strategy.appendField(locator, this, "tax", buffer, theTax);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareType.Taxes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareType.Taxes that = ((FareType.Taxes) object);
            {
                List<AirTaxType> lhsTax;
                lhsTax = (((this.tax!= null)&&(!this.tax.isEmpty()))?this.getTax():null);
                List<AirTaxType> rhsTax;
                rhsTax = (((that.tax!= null)&&(!that.tax.isEmpty()))?that.getTax():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "tax", lhsTax), LocatorUtils.property(thatLocator, "tax", rhsTax), lhsTax, rhsTax)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AirTaxType> theTax;
                theTax = (((this.tax!= null)&&(!this.tax.isEmpty()))?this.getTax():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tax", theTax), currentHashCode, theTax);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareType.Taxes) {
                final FareType.Taxes copy = ((FareType.Taxes) draftCopy);
                if ((this.tax!= null)&&(!this.tax.isEmpty())) {
                    List<AirTaxType> sourceTax;
                    sourceTax = (((this.tax!= null)&&(!this.tax.isEmpty()))?this.getTax():null);
                    @SuppressWarnings("unchecked")
                    List<AirTaxType> copyTax = ((List<AirTaxType> ) strategy.copy(LocatorUtils.property(locator, "tax", sourceTax), sourceTax));
                    copy.tax = null;
                    if (copyTax!= null) {
                        List<AirTaxType> uniqueTaxl = copy.getTax();
                        uniqueTaxl.addAll(copyTax);
                    }
                } else {
                    copy.tax = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareType.Taxes();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TotalFare
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareType.TotalFare)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareType.TotalFare that = ((FareType.TotalFare) object);
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareType.TotalFare) {
                final FareType.TotalFare copy = ((FareType.TotalFare) draftCopy);
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareType.TotalFare();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength1to128"&gt;
     *       &lt;attribute name="FareCalcMode" type="{http://www.opentravel.org/OTA/2003/05}AlphaNumericStringLength1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class UnstructuredFareCalc
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String value;
        @XmlAttribute(name = "FareCalcMode")
        protected String fareCalcMode;

        /**
         * Used for Character Strings, length 1 to 128
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Gets the value of the fareCalcMode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFareCalcMode() {
            return fareCalcMode;
        }

        /**
         * Sets the value of the fareCalcMode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFareCalcMode(String value) {
            this.fareCalcMode = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theValue;
                theValue = this.getValue();
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                String theFareCalcMode;
                theFareCalcMode = this.getFareCalcMode();
                strategy.appendField(locator, this, "fareCalcMode", buffer, theFareCalcMode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareType.UnstructuredFareCalc)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareType.UnstructuredFareCalc that = ((FareType.UnstructuredFareCalc) object);
            {
                String lhsValue;
                lhsValue = this.getValue();
                String rhsValue;
                rhsValue = that.getValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                String lhsFareCalcMode;
                lhsFareCalcMode = this.getFareCalcMode();
                String rhsFareCalcMode;
                rhsFareCalcMode = that.getFareCalcMode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareCalcMode", lhsFareCalcMode), LocatorUtils.property(thatLocator, "fareCalcMode", rhsFareCalcMode), lhsFareCalcMode, rhsFareCalcMode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theValue;
                theValue = this.getValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                String theFareCalcMode;
                theFareCalcMode = this.getFareCalcMode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareCalcMode", theFareCalcMode), currentHashCode, theFareCalcMode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareType.UnstructuredFareCalc) {
                final FareType.UnstructuredFareCalc copy = ((FareType.UnstructuredFareCalc) draftCopy);
                if (this.value!= null) {
                    String sourceValue;
                    sourceValue = this.getValue();
                    String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.setValue(copyValue);
                } else {
                    copy.value = null;
                }
                if (this.fareCalcMode!= null) {
                    String sourceFareCalcMode;
                    sourceFareCalcMode = this.getFareCalcMode();
                    String copyFareCalcMode = ((String) strategy.copy(LocatorUtils.property(locator, "fareCalcMode", sourceFareCalcMode), sourceFareCalcMode));
                    copy.setFareCalcMode(copyFareCalcMode);
                } else {
                    copy.fareCalcMode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareType.UnstructuredFareCalc();
        }

    }

}
