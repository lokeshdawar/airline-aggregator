//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Provides information on the source of a request.
 * 
 * <p>Java class for SourceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SourceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="RequestorID" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type"&gt;
 *                 &lt;attribute name="MessagePassword" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Position" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PositionGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="BookingChannel" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="CompanyName" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}BookingChannelGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="AgentSine" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *       &lt;attribute name="PseudoCityCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *       &lt;attribute name="ISOCountry" type="{http://www.opentravel.org/OTA/2003/05}ISO3166" /&gt;
 *       &lt;attribute name="ISOCurrency" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *       &lt;attribute name="AgentDutyCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *       &lt;attribute name="AirlineVendorID" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaNumericLength2to3" /&gt;
 *       &lt;attribute name="AirportCode" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaNumericLength3to5" /&gt;
 *       &lt;attribute name="FirstDepartPoint" type="{http://www.opentravel.org/OTA/2003/05}StringLength3" /&gt;
 *       &lt;attribute name="ERSP_UserID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *       &lt;attribute name="TerminalID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SourceType", propOrder = {
    "requestorID",
    "position",
    "bookingChannel"
})
public class SourceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "RequestorID")
    protected SourceType.RequestorID requestorID;
    @XmlElement(name = "Position")
    protected SourceType.Position position;
    @XmlElement(name = "BookingChannel")
    protected SourceType.BookingChannel bookingChannel;
    @XmlAttribute(name = "AgentSine")
    protected String agentSine;
    @XmlAttribute(name = "PseudoCityCode")
    protected String pseudoCityCode;
    @XmlAttribute(name = "ISOCountry")
    protected String isoCountry;
    @XmlAttribute(name = "ISOCurrency")
    protected String isoCurrency;
    @XmlAttribute(name = "AgentDutyCode")
    protected String agentDutyCode;
    @XmlAttribute(name = "AirlineVendorID")
    protected String airlineVendorID;
    @XmlAttribute(name = "AirportCode")
    protected String airportCode;
    @XmlAttribute(name = "FirstDepartPoint")
    protected String firstDepartPoint;
    @XmlAttribute(name = "ERSP_UserID")
    protected String erspUserID;
    @XmlAttribute(name = "TerminalID")
    protected String terminalID;

    /**
     * Gets the value of the requestorID property.
     * 
     * @return
     *     possible object is
     *     {@link SourceType.RequestorID }
     *     
     */
    public SourceType.RequestorID getRequestorID() {
        return requestorID;
    }

    /**
     * Sets the value of the requestorID property.
     * 
     * @param value
     *     allowed object is
     *     {@link SourceType.RequestorID }
     *     
     */
    public void setRequestorID(SourceType.RequestorID value) {
        this.requestorID = value;
    }

    /**
     * Gets the value of the position property.
     * 
     * @return
     *     possible object is
     *     {@link SourceType.Position }
     *     
     */
    public SourceType.Position getPosition() {
        return position;
    }

    /**
     * Sets the value of the position property.
     * 
     * @param value
     *     allowed object is
     *     {@link SourceType.Position }
     *     
     */
    public void setPosition(SourceType.Position value) {
        this.position = value;
    }

    /**
     * Gets the value of the bookingChannel property.
     * 
     * @return
     *     possible object is
     *     {@link SourceType.BookingChannel }
     *     
     */
    public SourceType.BookingChannel getBookingChannel() {
        return bookingChannel;
    }

    /**
     * Sets the value of the bookingChannel property.
     * 
     * @param value
     *     allowed object is
     *     {@link SourceType.BookingChannel }
     *     
     */
    public void setBookingChannel(SourceType.BookingChannel value) {
        this.bookingChannel = value;
    }

    /**
     * Gets the value of the agentSine property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAgentSine() {
        return agentSine;
    }

    /**
     * Sets the value of the agentSine property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAgentSine(String value) {
        this.agentSine = value;
    }

    /**
     * Gets the value of the pseudoCityCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPseudoCityCode() {
        return pseudoCityCode;
    }

    /**
     * Sets the value of the pseudoCityCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPseudoCityCode(String value) {
        this.pseudoCityCode = value;
    }

    /**
     * Gets the value of the isoCountry property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getISOCountry() {
        return isoCountry;
    }

    /**
     * Sets the value of the isoCountry property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setISOCountry(String value) {
        this.isoCountry = value;
    }

    /**
     * Gets the value of the isoCurrency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getISOCurrency() {
        return isoCurrency;
    }

    /**
     * Sets the value of the isoCurrency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setISOCurrency(String value) {
        this.isoCurrency = value;
    }

    /**
     * Gets the value of the agentDutyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAgentDutyCode() {
        return agentDutyCode;
    }

    /**
     * Sets the value of the agentDutyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAgentDutyCode(String value) {
        this.agentDutyCode = value;
    }

    /**
     * Gets the value of the airlineVendorID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAirlineVendorID() {
        return airlineVendorID;
    }

    /**
     * Sets the value of the airlineVendorID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAirlineVendorID(String value) {
        this.airlineVendorID = value;
    }

    /**
     * Gets the value of the airportCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAirportCode() {
        return airportCode;
    }

    /**
     * Sets the value of the airportCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAirportCode(String value) {
        this.airportCode = value;
    }

    /**
     * Gets the value of the firstDepartPoint property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFirstDepartPoint() {
        return firstDepartPoint;
    }

    /**
     * Sets the value of the firstDepartPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFirstDepartPoint(String value) {
        this.firstDepartPoint = value;
    }

    /**
     * Gets the value of the erspUserID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getERSPUserID() {
        return erspUserID;
    }

    /**
     * Sets the value of the erspUserID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setERSPUserID(String value) {
        this.erspUserID = value;
    }

    /**
     * Gets the value of the terminalID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTerminalID() {
        return terminalID;
    }

    /**
     * Sets the value of the terminalID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTerminalID(String value) {
        this.terminalID = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            SourceType.RequestorID theRequestorID;
            theRequestorID = this.getRequestorID();
            strategy.appendField(locator, this, "requestorID", buffer, theRequestorID);
        }
        {
            SourceType.Position thePosition;
            thePosition = this.getPosition();
            strategy.appendField(locator, this, "position", buffer, thePosition);
        }
        {
            SourceType.BookingChannel theBookingChannel;
            theBookingChannel = this.getBookingChannel();
            strategy.appendField(locator, this, "bookingChannel", buffer, theBookingChannel);
        }
        {
            String theAgentSine;
            theAgentSine = this.getAgentSine();
            strategy.appendField(locator, this, "agentSine", buffer, theAgentSine);
        }
        {
            String thePseudoCityCode;
            thePseudoCityCode = this.getPseudoCityCode();
            strategy.appendField(locator, this, "pseudoCityCode", buffer, thePseudoCityCode);
        }
        {
            String theISOCountry;
            theISOCountry = this.getISOCountry();
            strategy.appendField(locator, this, "isoCountry", buffer, theISOCountry);
        }
        {
            String theISOCurrency;
            theISOCurrency = this.getISOCurrency();
            strategy.appendField(locator, this, "isoCurrency", buffer, theISOCurrency);
        }
        {
            String theAgentDutyCode;
            theAgentDutyCode = this.getAgentDutyCode();
            strategy.appendField(locator, this, "agentDutyCode", buffer, theAgentDutyCode);
        }
        {
            String theAirlineVendorID;
            theAirlineVendorID = this.getAirlineVendorID();
            strategy.appendField(locator, this, "airlineVendorID", buffer, theAirlineVendorID);
        }
        {
            String theAirportCode;
            theAirportCode = this.getAirportCode();
            strategy.appendField(locator, this, "airportCode", buffer, theAirportCode);
        }
        {
            String theFirstDepartPoint;
            theFirstDepartPoint = this.getFirstDepartPoint();
            strategy.appendField(locator, this, "firstDepartPoint", buffer, theFirstDepartPoint);
        }
        {
            String theERSPUserID;
            theERSPUserID = this.getERSPUserID();
            strategy.appendField(locator, this, "erspUserID", buffer, theERSPUserID);
        }
        {
            String theTerminalID;
            theTerminalID = this.getTerminalID();
            strategy.appendField(locator, this, "terminalID", buffer, theTerminalID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SourceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SourceType that = ((SourceType) object);
        {
            SourceType.RequestorID lhsRequestorID;
            lhsRequestorID = this.getRequestorID();
            SourceType.RequestorID rhsRequestorID;
            rhsRequestorID = that.getRequestorID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestorID", lhsRequestorID), LocatorUtils.property(thatLocator, "requestorID", rhsRequestorID), lhsRequestorID, rhsRequestorID)) {
                return false;
            }
        }
        {
            SourceType.Position lhsPosition;
            lhsPosition = this.getPosition();
            SourceType.Position rhsPosition;
            rhsPosition = that.getPosition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "position", lhsPosition), LocatorUtils.property(thatLocator, "position", rhsPosition), lhsPosition, rhsPosition)) {
                return false;
            }
        }
        {
            SourceType.BookingChannel lhsBookingChannel;
            lhsBookingChannel = this.getBookingChannel();
            SourceType.BookingChannel rhsBookingChannel;
            rhsBookingChannel = that.getBookingChannel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bookingChannel", lhsBookingChannel), LocatorUtils.property(thatLocator, "bookingChannel", rhsBookingChannel), lhsBookingChannel, rhsBookingChannel)) {
                return false;
            }
        }
        {
            String lhsAgentSine;
            lhsAgentSine = this.getAgentSine();
            String rhsAgentSine;
            rhsAgentSine = that.getAgentSine();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "agentSine", lhsAgentSine), LocatorUtils.property(thatLocator, "agentSine", rhsAgentSine), lhsAgentSine, rhsAgentSine)) {
                return false;
            }
        }
        {
            String lhsPseudoCityCode;
            lhsPseudoCityCode = this.getPseudoCityCode();
            String rhsPseudoCityCode;
            rhsPseudoCityCode = that.getPseudoCityCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pseudoCityCode", lhsPseudoCityCode), LocatorUtils.property(thatLocator, "pseudoCityCode", rhsPseudoCityCode), lhsPseudoCityCode, rhsPseudoCityCode)) {
                return false;
            }
        }
        {
            String lhsISOCountry;
            lhsISOCountry = this.getISOCountry();
            String rhsISOCountry;
            rhsISOCountry = that.getISOCountry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isoCountry", lhsISOCountry), LocatorUtils.property(thatLocator, "isoCountry", rhsISOCountry), lhsISOCountry, rhsISOCountry)) {
                return false;
            }
        }
        {
            String lhsISOCurrency;
            lhsISOCurrency = this.getISOCurrency();
            String rhsISOCurrency;
            rhsISOCurrency = that.getISOCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isoCurrency", lhsISOCurrency), LocatorUtils.property(thatLocator, "isoCurrency", rhsISOCurrency), lhsISOCurrency, rhsISOCurrency)) {
                return false;
            }
        }
        {
            String lhsAgentDutyCode;
            lhsAgentDutyCode = this.getAgentDutyCode();
            String rhsAgentDutyCode;
            rhsAgentDutyCode = that.getAgentDutyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "agentDutyCode", lhsAgentDutyCode), LocatorUtils.property(thatLocator, "agentDutyCode", rhsAgentDutyCode), lhsAgentDutyCode, rhsAgentDutyCode)) {
                return false;
            }
        }
        {
            String lhsAirlineVendorID;
            lhsAirlineVendorID = this.getAirlineVendorID();
            String rhsAirlineVendorID;
            rhsAirlineVendorID = that.getAirlineVendorID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airlineVendorID", lhsAirlineVendorID), LocatorUtils.property(thatLocator, "airlineVendorID", rhsAirlineVendorID), lhsAirlineVendorID, rhsAirlineVendorID)) {
                return false;
            }
        }
        {
            String lhsAirportCode;
            lhsAirportCode = this.getAirportCode();
            String rhsAirportCode;
            rhsAirportCode = that.getAirportCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airportCode", lhsAirportCode), LocatorUtils.property(thatLocator, "airportCode", rhsAirportCode), lhsAirportCode, rhsAirportCode)) {
                return false;
            }
        }
        {
            String lhsFirstDepartPoint;
            lhsFirstDepartPoint = this.getFirstDepartPoint();
            String rhsFirstDepartPoint;
            rhsFirstDepartPoint = that.getFirstDepartPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "firstDepartPoint", lhsFirstDepartPoint), LocatorUtils.property(thatLocator, "firstDepartPoint", rhsFirstDepartPoint), lhsFirstDepartPoint, rhsFirstDepartPoint)) {
                return false;
            }
        }
        {
            String lhsERSPUserID;
            lhsERSPUserID = this.getERSPUserID();
            String rhsERSPUserID;
            rhsERSPUserID = that.getERSPUserID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "erspUserID", lhsERSPUserID), LocatorUtils.property(thatLocator, "erspUserID", rhsERSPUserID), lhsERSPUserID, rhsERSPUserID)) {
                return false;
            }
        }
        {
            String lhsTerminalID;
            lhsTerminalID = this.getTerminalID();
            String rhsTerminalID;
            rhsTerminalID = that.getTerminalID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "terminalID", lhsTerminalID), LocatorUtils.property(thatLocator, "terminalID", rhsTerminalID), lhsTerminalID, rhsTerminalID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            SourceType.RequestorID theRequestorID;
            theRequestorID = this.getRequestorID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestorID", theRequestorID), currentHashCode, theRequestorID);
        }
        {
            SourceType.Position thePosition;
            thePosition = this.getPosition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "position", thePosition), currentHashCode, thePosition);
        }
        {
            SourceType.BookingChannel theBookingChannel;
            theBookingChannel = this.getBookingChannel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bookingChannel", theBookingChannel), currentHashCode, theBookingChannel);
        }
        {
            String theAgentSine;
            theAgentSine = this.getAgentSine();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agentSine", theAgentSine), currentHashCode, theAgentSine);
        }
        {
            String thePseudoCityCode;
            thePseudoCityCode = this.getPseudoCityCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pseudoCityCode", thePseudoCityCode), currentHashCode, thePseudoCityCode);
        }
        {
            String theISOCountry;
            theISOCountry = this.getISOCountry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isoCountry", theISOCountry), currentHashCode, theISOCountry);
        }
        {
            String theISOCurrency;
            theISOCurrency = this.getISOCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isoCurrency", theISOCurrency), currentHashCode, theISOCurrency);
        }
        {
            String theAgentDutyCode;
            theAgentDutyCode = this.getAgentDutyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agentDutyCode", theAgentDutyCode), currentHashCode, theAgentDutyCode);
        }
        {
            String theAirlineVendorID;
            theAirlineVendorID = this.getAirlineVendorID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airlineVendorID", theAirlineVendorID), currentHashCode, theAirlineVendorID);
        }
        {
            String theAirportCode;
            theAirportCode = this.getAirportCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airportCode", theAirportCode), currentHashCode, theAirportCode);
        }
        {
            String theFirstDepartPoint;
            theFirstDepartPoint = this.getFirstDepartPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "firstDepartPoint", theFirstDepartPoint), currentHashCode, theFirstDepartPoint);
        }
        {
            String theERSPUserID;
            theERSPUserID = this.getERSPUserID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "erspUserID", theERSPUserID), currentHashCode, theERSPUserID);
        }
        {
            String theTerminalID;
            theTerminalID = this.getTerminalID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "terminalID", theTerminalID), currentHashCode, theTerminalID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SourceType) {
            final SourceType copy = ((SourceType) draftCopy);
            if (this.requestorID!= null) {
                SourceType.RequestorID sourceRequestorID;
                sourceRequestorID = this.getRequestorID();
                SourceType.RequestorID copyRequestorID = ((SourceType.RequestorID) strategy.copy(LocatorUtils.property(locator, "requestorID", sourceRequestorID), sourceRequestorID));
                copy.setRequestorID(copyRequestorID);
            } else {
                copy.requestorID = null;
            }
            if (this.position!= null) {
                SourceType.Position sourcePosition;
                sourcePosition = this.getPosition();
                SourceType.Position copyPosition = ((SourceType.Position) strategy.copy(LocatorUtils.property(locator, "position", sourcePosition), sourcePosition));
                copy.setPosition(copyPosition);
            } else {
                copy.position = null;
            }
            if (this.bookingChannel!= null) {
                SourceType.BookingChannel sourceBookingChannel;
                sourceBookingChannel = this.getBookingChannel();
                SourceType.BookingChannel copyBookingChannel = ((SourceType.BookingChannel) strategy.copy(LocatorUtils.property(locator, "bookingChannel", sourceBookingChannel), sourceBookingChannel));
                copy.setBookingChannel(copyBookingChannel);
            } else {
                copy.bookingChannel = null;
            }
            if (this.agentSine!= null) {
                String sourceAgentSine;
                sourceAgentSine = this.getAgentSine();
                String copyAgentSine = ((String) strategy.copy(LocatorUtils.property(locator, "agentSine", sourceAgentSine), sourceAgentSine));
                copy.setAgentSine(copyAgentSine);
            } else {
                copy.agentSine = null;
            }
            if (this.pseudoCityCode!= null) {
                String sourcePseudoCityCode;
                sourcePseudoCityCode = this.getPseudoCityCode();
                String copyPseudoCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "pseudoCityCode", sourcePseudoCityCode), sourcePseudoCityCode));
                copy.setPseudoCityCode(copyPseudoCityCode);
            } else {
                copy.pseudoCityCode = null;
            }
            if (this.isoCountry!= null) {
                String sourceISOCountry;
                sourceISOCountry = this.getISOCountry();
                String copyISOCountry = ((String) strategy.copy(LocatorUtils.property(locator, "isoCountry", sourceISOCountry), sourceISOCountry));
                copy.setISOCountry(copyISOCountry);
            } else {
                copy.isoCountry = null;
            }
            if (this.isoCurrency!= null) {
                String sourceISOCurrency;
                sourceISOCurrency = this.getISOCurrency();
                String copyISOCurrency = ((String) strategy.copy(LocatorUtils.property(locator, "isoCurrency", sourceISOCurrency), sourceISOCurrency));
                copy.setISOCurrency(copyISOCurrency);
            } else {
                copy.isoCurrency = null;
            }
            if (this.agentDutyCode!= null) {
                String sourceAgentDutyCode;
                sourceAgentDutyCode = this.getAgentDutyCode();
                String copyAgentDutyCode = ((String) strategy.copy(LocatorUtils.property(locator, "agentDutyCode", sourceAgentDutyCode), sourceAgentDutyCode));
                copy.setAgentDutyCode(copyAgentDutyCode);
            } else {
                copy.agentDutyCode = null;
            }
            if (this.airlineVendorID!= null) {
                String sourceAirlineVendorID;
                sourceAirlineVendorID = this.getAirlineVendorID();
                String copyAirlineVendorID = ((String) strategy.copy(LocatorUtils.property(locator, "airlineVendorID", sourceAirlineVendorID), sourceAirlineVendorID));
                copy.setAirlineVendorID(copyAirlineVendorID);
            } else {
                copy.airlineVendorID = null;
            }
            if (this.airportCode!= null) {
                String sourceAirportCode;
                sourceAirportCode = this.getAirportCode();
                String copyAirportCode = ((String) strategy.copy(LocatorUtils.property(locator, "airportCode", sourceAirportCode), sourceAirportCode));
                copy.setAirportCode(copyAirportCode);
            } else {
                copy.airportCode = null;
            }
            if (this.firstDepartPoint!= null) {
                String sourceFirstDepartPoint;
                sourceFirstDepartPoint = this.getFirstDepartPoint();
                String copyFirstDepartPoint = ((String) strategy.copy(LocatorUtils.property(locator, "firstDepartPoint", sourceFirstDepartPoint), sourceFirstDepartPoint));
                copy.setFirstDepartPoint(copyFirstDepartPoint);
            } else {
                copy.firstDepartPoint = null;
            }
            if (this.erspUserID!= null) {
                String sourceERSPUserID;
                sourceERSPUserID = this.getERSPUserID();
                String copyERSPUserID = ((String) strategy.copy(LocatorUtils.property(locator, "erspUserID", sourceERSPUserID), sourceERSPUserID));
                copy.setERSPUserID(copyERSPUserID);
            } else {
                copy.erspUserID = null;
            }
            if (this.terminalID!= null) {
                String sourceTerminalID;
                sourceTerminalID = this.getTerminalID();
                String copyTerminalID = ((String) strategy.copy(LocatorUtils.property(locator, "terminalID", sourceTerminalID), sourceTerminalID));
                copy.setTerminalID(copyTerminalID);
            } else {
                copy.terminalID = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SourceType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="CompanyName" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}BookingChannelGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "companyName"
    })
    public static class BookingChannel
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "CompanyName")
        protected CompanyNameType companyName;
        @XmlAttribute(name = "Type", required = true)
        protected String type;
        @XmlAttribute(name = "Primary")
        protected Boolean primary;

        /**
         * Gets the value of the companyName property.
         * 
         * @return
         *     possible object is
         *     {@link CompanyNameType }
         *     
         */
        public CompanyNameType getCompanyName() {
            return companyName;
        }

        /**
         * Sets the value of the companyName property.
         * 
         * @param value
         *     allowed object is
         *     {@link CompanyNameType }
         *     
         */
        public void setCompanyName(CompanyNameType value) {
            this.companyName = value;
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        /**
         * Gets the value of the primary property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isPrimary() {
            return primary;
        }

        /**
         * Sets the value of the primary property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setPrimary(Boolean value) {
            this.primary = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                CompanyNameType theCompanyName;
                theCompanyName = this.getCompanyName();
                strategy.appendField(locator, this, "companyName", buffer, theCompanyName);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                Boolean thePrimary;
                thePrimary = this.isPrimary();
                strategy.appendField(locator, this, "primary", buffer, thePrimary);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SourceType.BookingChannel)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SourceType.BookingChannel that = ((SourceType.BookingChannel) object);
            {
                CompanyNameType lhsCompanyName;
                lhsCompanyName = this.getCompanyName();
                CompanyNameType rhsCompanyName;
                rhsCompanyName = that.getCompanyName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "companyName", lhsCompanyName), LocatorUtils.property(thatLocator, "companyName", rhsCompanyName), lhsCompanyName, rhsCompanyName)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                Boolean lhsPrimary;
                lhsPrimary = this.isPrimary();
                Boolean rhsPrimary;
                rhsPrimary = that.isPrimary();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "primary", lhsPrimary), LocatorUtils.property(thatLocator, "primary", rhsPrimary), lhsPrimary, rhsPrimary)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                CompanyNameType theCompanyName;
                theCompanyName = this.getCompanyName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "companyName", theCompanyName), currentHashCode, theCompanyName);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                Boolean thePrimary;
                thePrimary = this.isPrimary();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "primary", thePrimary), currentHashCode, thePrimary);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SourceType.BookingChannel) {
                final SourceType.BookingChannel copy = ((SourceType.BookingChannel) draftCopy);
                if (this.companyName!= null) {
                    CompanyNameType sourceCompanyName;
                    sourceCompanyName = this.getCompanyName();
                    CompanyNameType copyCompanyName = ((CompanyNameType) strategy.copy(LocatorUtils.property(locator, "companyName", sourceCompanyName), sourceCompanyName));
                    copy.setCompanyName(copyCompanyName);
                } else {
                    copy.companyName = null;
                }
                if (this.type!= null) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.primary!= null) {
                    Boolean sourcePrimary;
                    sourcePrimary = this.isPrimary();
                    Boolean copyPrimary = ((Boolean) strategy.copy(LocatorUtils.property(locator, "primary", sourcePrimary), sourcePrimary));
                    copy.setPrimary(copyPrimary);
                } else {
                    copy.primary = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SourceType.BookingChannel();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PositionGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Position
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Latitude")
        protected String latitude;
        @XmlAttribute(name = "Longitude")
        protected String longitude;
        @XmlAttribute(name = "Altitude")
        protected String altitude;
        @XmlAttribute(name = "AltitudeUnitOfMeasureCode")
        protected String altitudeUnitOfMeasureCode;

        /**
         * Gets the value of the latitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatitude(String value) {
            this.latitude = value;
        }

        /**
         * Gets the value of the longitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLongitude(String value) {
            this.longitude = value;
        }

        /**
         * Gets the value of the altitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAltitude() {
            return altitude;
        }

        /**
         * Sets the value of the altitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAltitude(String value) {
            this.altitude = value;
        }

        /**
         * Gets the value of the altitudeUnitOfMeasureCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAltitudeUnitOfMeasureCode() {
            return altitudeUnitOfMeasureCode;
        }

        /**
         * Sets the value of the altitudeUnitOfMeasureCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAltitudeUnitOfMeasureCode(String value) {
            this.altitudeUnitOfMeasureCode = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude);
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude);
            }
            {
                String theAltitude;
                theAltitude = this.getAltitude();
                strategy.appendField(locator, this, "altitude", buffer, theAltitude);
            }
            {
                String theAltitudeUnitOfMeasureCode;
                theAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                strategy.appendField(locator, this, "altitudeUnitOfMeasureCode", buffer, theAltitudeUnitOfMeasureCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SourceType.Position)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SourceType.Position that = ((SourceType.Position) object);
            {
                String lhsLatitude;
                lhsLatitude = this.getLatitude();
                String rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude)) {
                    return false;
                }
            }
            {
                String lhsLongitude;
                lhsLongitude = this.getLongitude();
                String rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude)) {
                    return false;
                }
            }
            {
                String lhsAltitude;
                lhsAltitude = this.getAltitude();
                String rhsAltitude;
                rhsAltitude = that.getAltitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "altitude", lhsAltitude), LocatorUtils.property(thatLocator, "altitude", rhsAltitude), lhsAltitude, rhsAltitude)) {
                    return false;
                }
            }
            {
                String lhsAltitudeUnitOfMeasureCode;
                lhsAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                String rhsAltitudeUnitOfMeasureCode;
                rhsAltitudeUnitOfMeasureCode = that.getAltitudeUnitOfMeasureCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "altitudeUnitOfMeasureCode", lhsAltitudeUnitOfMeasureCode), LocatorUtils.property(thatLocator, "altitudeUnitOfMeasureCode", rhsAltitudeUnitOfMeasureCode), lhsAltitudeUnitOfMeasureCode, rhsAltitudeUnitOfMeasureCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude);
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude);
            }
            {
                String theAltitude;
                theAltitude = this.getAltitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "altitude", theAltitude), currentHashCode, theAltitude);
            }
            {
                String theAltitudeUnitOfMeasureCode;
                theAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "altitudeUnitOfMeasureCode", theAltitudeUnitOfMeasureCode), currentHashCode, theAltitudeUnitOfMeasureCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SourceType.Position) {
                final SourceType.Position copy = ((SourceType.Position) draftCopy);
                if (this.latitude!= null) {
                    String sourceLatitude;
                    sourceLatitude = this.getLatitude();
                    String copyLatitude = ((String) strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude));
                    copy.setLatitude(copyLatitude);
                } else {
                    copy.latitude = null;
                }
                if (this.longitude!= null) {
                    String sourceLongitude;
                    sourceLongitude = this.getLongitude();
                    String copyLongitude = ((String) strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude));
                    copy.setLongitude(copyLongitude);
                } else {
                    copy.longitude = null;
                }
                if (this.altitude!= null) {
                    String sourceAltitude;
                    sourceAltitude = this.getAltitude();
                    String copyAltitude = ((String) strategy.copy(LocatorUtils.property(locator, "altitude", sourceAltitude), sourceAltitude));
                    copy.setAltitude(copyAltitude);
                } else {
                    copy.altitude = null;
                }
                if (this.altitudeUnitOfMeasureCode!= null) {
                    String sourceAltitudeUnitOfMeasureCode;
                    sourceAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                    String copyAltitudeUnitOfMeasureCode = ((String) strategy.copy(LocatorUtils.property(locator, "altitudeUnitOfMeasureCode", sourceAltitudeUnitOfMeasureCode), sourceAltitudeUnitOfMeasureCode));
                    copy.setAltitudeUnitOfMeasureCode(copyAltitudeUnitOfMeasureCode);
                } else {
                    copy.altitudeUnitOfMeasureCode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SourceType.Position();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type"&gt;
     *       &lt;attribute name="MessagePassword" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class RequestorID
        extends UniqueIDType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "MessagePassword")
        protected String messagePassword;

        /**
         * Gets the value of the messagePassword property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMessagePassword() {
            return messagePassword;
        }

        /**
         * Sets the value of the messagePassword property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setMessagePassword(String value) {
            this.messagePassword = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                String theMessagePassword;
                theMessagePassword = this.getMessagePassword();
                strategy.appendField(locator, this, "messagePassword", buffer, theMessagePassword);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SourceType.RequestorID)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final SourceType.RequestorID that = ((SourceType.RequestorID) object);
            {
                String lhsMessagePassword;
                lhsMessagePassword = this.getMessagePassword();
                String rhsMessagePassword;
                rhsMessagePassword = that.getMessagePassword();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "messagePassword", lhsMessagePassword), LocatorUtils.property(thatLocator, "messagePassword", rhsMessagePassword), lhsMessagePassword, rhsMessagePassword)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                String theMessagePassword;
                theMessagePassword = this.getMessagePassword();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "messagePassword", theMessagePassword), currentHashCode, theMessagePassword);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof SourceType.RequestorID) {
                final SourceType.RequestorID copy = ((SourceType.RequestorID) draftCopy);
                if (this.messagePassword!= null) {
                    String sourceMessagePassword;
                    sourceMessagePassword = this.getMessagePassword();
                    String copyMessagePassword = ((String) strategy.copy(LocatorUtils.property(locator, "messagePassword", sourceMessagePassword), sourceMessagePassword));
                    copy.setMessagePassword(copyMessagePassword);
                } else {
                    copy.messagePassword = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SourceType.RequestorID();
        }

    }

}
