//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * ToDo - this types should be moved to OTA_CommonTypes. It's required in a common types file, since the both AuthRQ/RS use it.
 * 
 * <p>Java class for AuthorizationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AuthorizationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;choice&gt;
 *           &lt;element name="CheckAuthorization" minOccurs="0"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element name="BankAcct" type="{http://www.opentravel.org/OTA/2003/05}BankAcctType"/&gt;
 *                   &lt;/sequence&gt;
 *                   &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *           &lt;element name="CreditCardAuthorization" minOccurs="0"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element name="CreditCard" type="{http://www.opentravel.org/OTA/2003/05}PaymentCardType"/&gt;
 *                   &lt;/sequence&gt;
 *                   &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                   &lt;attribute name="SourceType"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                         &lt;enumeration value="NormalTransaction"/&gt;
 *                         &lt;enumeration value="MailOrPhoneOrder"/&gt;
 *                         &lt;enumeration value="UnattendedTerminal"/&gt;
 *                         &lt;enumeration value="MerchantIsSuspicious"/&gt;
 *                         &lt;enumeration value="eCommerceSecuredTransaction"/&gt;
 *                         &lt;enumeration value="eCommerceUnsecuredTransaction"/&gt;
 *                         &lt;enumeration value="InFlightAirPhone"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/attribute&gt;
 *                   &lt;attribute name="ExtendedPaymentInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                   &lt;attribute name="AuthorizationCode"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *                         &lt;pattern value="[A-Za-z0-9]{1,12}"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/attribute&gt;
 *                   &lt;attribute name="ReversalIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *         &lt;/choice&gt;
 *         &lt;element name="DriversLicenseAuthorization" type="{http://www.opentravel.org/OTA/2003/05}DocumentType" minOccurs="0"/&gt;
 *         &lt;element name="BookingReferenceID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="PrincipalCompanyCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AuthorizationType", propOrder = {
    "checkAuthorization",
    "creditCardAuthorization",
    "driversLicenseAuthorization",
    "bookingReferenceID"
})
public class AuthorizationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "CheckAuthorization")
    protected AuthorizationType.CheckAuthorization checkAuthorization;
    @XmlElement(name = "CreditCardAuthorization")
    protected AuthorizationType.CreditCardAuthorization creditCardAuthorization;
    @XmlElement(name = "DriversLicenseAuthorization")
    protected DocumentType driversLicenseAuthorization;
    @XmlElement(name = "BookingReferenceID")
    protected UniqueIDType bookingReferenceID;
    @XmlAttribute(name = "PrincipalCompanyCode")
    protected String principalCompanyCode;

    /**
     * Gets the value of the checkAuthorization property.
     * 
     * @return
     *     possible object is
     *     {@link AuthorizationType.CheckAuthorization }
     *     
     */
    public AuthorizationType.CheckAuthorization getCheckAuthorization() {
        return checkAuthorization;
    }

    /**
     * Sets the value of the checkAuthorization property.
     * 
     * @param value
     *     allowed object is
     *     {@link AuthorizationType.CheckAuthorization }
     *     
     */
    public void setCheckAuthorization(AuthorizationType.CheckAuthorization value) {
        this.checkAuthorization = value;
    }

    /**
     * Gets the value of the creditCardAuthorization property.
     * 
     * @return
     *     possible object is
     *     {@link AuthorizationType.CreditCardAuthorization }
     *     
     */
    public AuthorizationType.CreditCardAuthorization getCreditCardAuthorization() {
        return creditCardAuthorization;
    }

    /**
     * Sets the value of the creditCardAuthorization property.
     * 
     * @param value
     *     allowed object is
     *     {@link AuthorizationType.CreditCardAuthorization }
     *     
     */
    public void setCreditCardAuthorization(AuthorizationType.CreditCardAuthorization value) {
        this.creditCardAuthorization = value;
    }

    /**
     * Gets the value of the driversLicenseAuthorization property.
     * 
     * @return
     *     possible object is
     *     {@link DocumentType }
     *     
     */
    public DocumentType getDriversLicenseAuthorization() {
        return driversLicenseAuthorization;
    }

    /**
     * Sets the value of the driversLicenseAuthorization property.
     * 
     * @param value
     *     allowed object is
     *     {@link DocumentType }
     *     
     */
    public void setDriversLicenseAuthorization(DocumentType value) {
        this.driversLicenseAuthorization = value;
    }

    /**
     * Gets the value of the bookingReferenceID property.
     * 
     * @return
     *     possible object is
     *     {@link UniqueIDType }
     *     
     */
    public UniqueIDType getBookingReferenceID() {
        return bookingReferenceID;
    }

    /**
     * Sets the value of the bookingReferenceID property.
     * 
     * @param value
     *     allowed object is
     *     {@link UniqueIDType }
     *     
     */
    public void setBookingReferenceID(UniqueIDType value) {
        this.bookingReferenceID = value;
    }

    /**
     * Gets the value of the principalCompanyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrincipalCompanyCode() {
        return principalCompanyCode;
    }

    /**
     * Sets the value of the principalCompanyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrincipalCompanyCode(String value) {
        this.principalCompanyCode = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AuthorizationType.CheckAuthorization theCheckAuthorization;
            theCheckAuthorization = this.getCheckAuthorization();
            strategy.appendField(locator, this, "checkAuthorization", buffer, theCheckAuthorization);
        }
        {
            AuthorizationType.CreditCardAuthorization theCreditCardAuthorization;
            theCreditCardAuthorization = this.getCreditCardAuthorization();
            strategy.appendField(locator, this, "creditCardAuthorization", buffer, theCreditCardAuthorization);
        }
        {
            DocumentType theDriversLicenseAuthorization;
            theDriversLicenseAuthorization = this.getDriversLicenseAuthorization();
            strategy.appendField(locator, this, "driversLicenseAuthorization", buffer, theDriversLicenseAuthorization);
        }
        {
            UniqueIDType theBookingReferenceID;
            theBookingReferenceID = this.getBookingReferenceID();
            strategy.appendField(locator, this, "bookingReferenceID", buffer, theBookingReferenceID);
        }
        {
            String thePrincipalCompanyCode;
            thePrincipalCompanyCode = this.getPrincipalCompanyCode();
            strategy.appendField(locator, this, "principalCompanyCode", buffer, thePrincipalCompanyCode);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AuthorizationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AuthorizationType that = ((AuthorizationType) object);
        {
            AuthorizationType.CheckAuthorization lhsCheckAuthorization;
            lhsCheckAuthorization = this.getCheckAuthorization();
            AuthorizationType.CheckAuthorization rhsCheckAuthorization;
            rhsCheckAuthorization = that.getCheckAuthorization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "checkAuthorization", lhsCheckAuthorization), LocatorUtils.property(thatLocator, "checkAuthorization", rhsCheckAuthorization), lhsCheckAuthorization, rhsCheckAuthorization)) {
                return false;
            }
        }
        {
            AuthorizationType.CreditCardAuthorization lhsCreditCardAuthorization;
            lhsCreditCardAuthorization = this.getCreditCardAuthorization();
            AuthorizationType.CreditCardAuthorization rhsCreditCardAuthorization;
            rhsCreditCardAuthorization = that.getCreditCardAuthorization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "creditCardAuthorization", lhsCreditCardAuthorization), LocatorUtils.property(thatLocator, "creditCardAuthorization", rhsCreditCardAuthorization), lhsCreditCardAuthorization, rhsCreditCardAuthorization)) {
                return false;
            }
        }
        {
            DocumentType lhsDriversLicenseAuthorization;
            lhsDriversLicenseAuthorization = this.getDriversLicenseAuthorization();
            DocumentType rhsDriversLicenseAuthorization;
            rhsDriversLicenseAuthorization = that.getDriversLicenseAuthorization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "driversLicenseAuthorization", lhsDriversLicenseAuthorization), LocatorUtils.property(thatLocator, "driversLicenseAuthorization", rhsDriversLicenseAuthorization), lhsDriversLicenseAuthorization, rhsDriversLicenseAuthorization)) {
                return false;
            }
        }
        {
            UniqueIDType lhsBookingReferenceID;
            lhsBookingReferenceID = this.getBookingReferenceID();
            UniqueIDType rhsBookingReferenceID;
            rhsBookingReferenceID = that.getBookingReferenceID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bookingReferenceID", lhsBookingReferenceID), LocatorUtils.property(thatLocator, "bookingReferenceID", rhsBookingReferenceID), lhsBookingReferenceID, rhsBookingReferenceID)) {
                return false;
            }
        }
        {
            String lhsPrincipalCompanyCode;
            lhsPrincipalCompanyCode = this.getPrincipalCompanyCode();
            String rhsPrincipalCompanyCode;
            rhsPrincipalCompanyCode = that.getPrincipalCompanyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "principalCompanyCode", lhsPrincipalCompanyCode), LocatorUtils.property(thatLocator, "principalCompanyCode", rhsPrincipalCompanyCode), lhsPrincipalCompanyCode, rhsPrincipalCompanyCode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AuthorizationType.CheckAuthorization theCheckAuthorization;
            theCheckAuthorization = this.getCheckAuthorization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "checkAuthorization", theCheckAuthorization), currentHashCode, theCheckAuthorization);
        }
        {
            AuthorizationType.CreditCardAuthorization theCreditCardAuthorization;
            theCreditCardAuthorization = this.getCreditCardAuthorization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creditCardAuthorization", theCreditCardAuthorization), currentHashCode, theCreditCardAuthorization);
        }
        {
            DocumentType theDriversLicenseAuthorization;
            theDriversLicenseAuthorization = this.getDriversLicenseAuthorization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "driversLicenseAuthorization", theDriversLicenseAuthorization), currentHashCode, theDriversLicenseAuthorization);
        }
        {
            UniqueIDType theBookingReferenceID;
            theBookingReferenceID = this.getBookingReferenceID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bookingReferenceID", theBookingReferenceID), currentHashCode, theBookingReferenceID);
        }
        {
            String thePrincipalCompanyCode;
            thePrincipalCompanyCode = this.getPrincipalCompanyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "principalCompanyCode", thePrincipalCompanyCode), currentHashCode, thePrincipalCompanyCode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AuthorizationType) {
            final AuthorizationType copy = ((AuthorizationType) draftCopy);
            if (this.checkAuthorization!= null) {
                AuthorizationType.CheckAuthorization sourceCheckAuthorization;
                sourceCheckAuthorization = this.getCheckAuthorization();
                AuthorizationType.CheckAuthorization copyCheckAuthorization = ((AuthorizationType.CheckAuthorization) strategy.copy(LocatorUtils.property(locator, "checkAuthorization", sourceCheckAuthorization), sourceCheckAuthorization));
                copy.setCheckAuthorization(copyCheckAuthorization);
            } else {
                copy.checkAuthorization = null;
            }
            if (this.creditCardAuthorization!= null) {
                AuthorizationType.CreditCardAuthorization sourceCreditCardAuthorization;
                sourceCreditCardAuthorization = this.getCreditCardAuthorization();
                AuthorizationType.CreditCardAuthorization copyCreditCardAuthorization = ((AuthorizationType.CreditCardAuthorization) strategy.copy(LocatorUtils.property(locator, "creditCardAuthorization", sourceCreditCardAuthorization), sourceCreditCardAuthorization));
                copy.setCreditCardAuthorization(copyCreditCardAuthorization);
            } else {
                copy.creditCardAuthorization = null;
            }
            if (this.driversLicenseAuthorization!= null) {
                DocumentType sourceDriversLicenseAuthorization;
                sourceDriversLicenseAuthorization = this.getDriversLicenseAuthorization();
                DocumentType copyDriversLicenseAuthorization = ((DocumentType) strategy.copy(LocatorUtils.property(locator, "driversLicenseAuthorization", sourceDriversLicenseAuthorization), sourceDriversLicenseAuthorization));
                copy.setDriversLicenseAuthorization(copyDriversLicenseAuthorization);
            } else {
                copy.driversLicenseAuthorization = null;
            }
            if (this.bookingReferenceID!= null) {
                UniqueIDType sourceBookingReferenceID;
                sourceBookingReferenceID = this.getBookingReferenceID();
                UniqueIDType copyBookingReferenceID = ((UniqueIDType) strategy.copy(LocatorUtils.property(locator, "bookingReferenceID", sourceBookingReferenceID), sourceBookingReferenceID));
                copy.setBookingReferenceID(copyBookingReferenceID);
            } else {
                copy.bookingReferenceID = null;
            }
            if (this.principalCompanyCode!= null) {
                String sourcePrincipalCompanyCode;
                sourcePrincipalCompanyCode = this.getPrincipalCompanyCode();
                String copyPrincipalCompanyCode = ((String) strategy.copy(LocatorUtils.property(locator, "principalCompanyCode", sourcePrincipalCompanyCode), sourcePrincipalCompanyCode));
                copy.setPrincipalCompanyCode(copyPrincipalCompanyCode);
            } else {
                copy.principalCompanyCode = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AuthorizationType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="BankAcct" type="{http://www.opentravel.org/OTA/2003/05}BankAcctType"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "bankAcct"
    })
    public static class CheckAuthorization
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "BankAcct", required = true)
        protected BankAcctType bankAcct;
        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the bankAcct property.
         * 
         * @return
         *     possible object is
         *     {@link BankAcctType }
         *     
         */
        public BankAcctType getBankAcct() {
            return bankAcct;
        }

        /**
         * Sets the value of the bankAcct property.
         * 
         * @param value
         *     allowed object is
         *     {@link BankAcctType }
         *     
         */
        public void setBankAcct(BankAcctType value) {
            this.bankAcct = value;
        }

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BankAcctType theBankAcct;
                theBankAcct = this.getBankAcct();
                strategy.appendField(locator, this, "bankAcct", buffer, theBankAcct);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AuthorizationType.CheckAuthorization)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AuthorizationType.CheckAuthorization that = ((AuthorizationType.CheckAuthorization) object);
            {
                BankAcctType lhsBankAcct;
                lhsBankAcct = this.getBankAcct();
                BankAcctType rhsBankAcct;
                rhsBankAcct = that.getBankAcct();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "bankAcct", lhsBankAcct), LocatorUtils.property(thatLocator, "bankAcct", rhsBankAcct), lhsBankAcct, rhsBankAcct)) {
                    return false;
                }
            }
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BankAcctType theBankAcct;
                theBankAcct = this.getBankAcct();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bankAcct", theBankAcct), currentHashCode, theBankAcct);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AuthorizationType.CheckAuthorization) {
                final AuthorizationType.CheckAuthorization copy = ((AuthorizationType.CheckAuthorization) draftCopy);
                if (this.bankAcct!= null) {
                    BankAcctType sourceBankAcct;
                    sourceBankAcct = this.getBankAcct();
                    BankAcctType copyBankAcct = ((BankAcctType) strategy.copy(LocatorUtils.property(locator, "bankAcct", sourceBankAcct), sourceBankAcct));
                    copy.setBankAcct(copyBankAcct);
                } else {
                    copy.bankAcct = null;
                }
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AuthorizationType.CheckAuthorization();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="CreditCard" type="{http://www.opentravel.org/OTA/2003/05}PaymentCardType"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *       &lt;attribute name="SourceType"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="NormalTransaction"/&gt;
     *             &lt;enumeration value="MailOrPhoneOrder"/&gt;
     *             &lt;enumeration value="UnattendedTerminal"/&gt;
     *             &lt;enumeration value="MerchantIsSuspicious"/&gt;
     *             &lt;enumeration value="eCommerceSecuredTransaction"/&gt;
     *             &lt;enumeration value="eCommerceUnsecuredTransaction"/&gt;
     *             &lt;enumeration value="InFlightAirPhone"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="ExtendedPaymentInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="AuthorizationCode"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
     *             &lt;pattern value="[A-Za-z0-9]{1,12}"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="ReversalIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "creditCard"
    })
    public static class CreditCardAuthorization
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "CreditCard", required = true)
        protected PaymentCardType creditCard;
        @XmlAttribute(name = "SourceType")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String sourceType;
        @XmlAttribute(name = "ExtendedPaymentInd")
        protected Boolean extendedPaymentInd;
        @XmlAttribute(name = "AuthorizationCode")
        protected String authorizationCode;
        @XmlAttribute(name = "ReversalIndicator")
        protected Boolean reversalIndicator;
        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the creditCard property.
         * 
         * @return
         *     possible object is
         *     {@link PaymentCardType }
         *     
         */
        public PaymentCardType getCreditCard() {
            return creditCard;
        }

        /**
         * Sets the value of the creditCard property.
         * 
         * @param value
         *     allowed object is
         *     {@link PaymentCardType }
         *     
         */
        public void setCreditCard(PaymentCardType value) {
            this.creditCard = value;
        }

        /**
         * Gets the value of the sourceType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSourceType() {
            return sourceType;
        }

        /**
         * Sets the value of the sourceType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSourceType(String value) {
            this.sourceType = value;
        }

        /**
         * Gets the value of the extendedPaymentInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isExtendedPaymentInd() {
            return extendedPaymentInd;
        }

        /**
         * Sets the value of the extendedPaymentInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setExtendedPaymentInd(Boolean value) {
            this.extendedPaymentInd = value;
        }

        /**
         * Gets the value of the authorizationCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAuthorizationCode() {
            return authorizationCode;
        }

        /**
         * Sets the value of the authorizationCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAuthorizationCode(String value) {
            this.authorizationCode = value;
        }

        /**
         * Gets the value of the reversalIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isReversalIndicator() {
            return reversalIndicator;
        }

        /**
         * Sets the value of the reversalIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setReversalIndicator(Boolean value) {
            this.reversalIndicator = value;
        }

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                PaymentCardType theCreditCard;
                theCreditCard = this.getCreditCard();
                strategy.appendField(locator, this, "creditCard", buffer, theCreditCard);
            }
            {
                String theSourceType;
                theSourceType = this.getSourceType();
                strategy.appendField(locator, this, "sourceType", buffer, theSourceType);
            }
            {
                Boolean theExtendedPaymentInd;
                theExtendedPaymentInd = this.isExtendedPaymentInd();
                strategy.appendField(locator, this, "extendedPaymentInd", buffer, theExtendedPaymentInd);
            }
            {
                String theAuthorizationCode;
                theAuthorizationCode = this.getAuthorizationCode();
                strategy.appendField(locator, this, "authorizationCode", buffer, theAuthorizationCode);
            }
            {
                Boolean theReversalIndicator;
                theReversalIndicator = this.isReversalIndicator();
                strategy.appendField(locator, this, "reversalIndicator", buffer, theReversalIndicator);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AuthorizationType.CreditCardAuthorization)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AuthorizationType.CreditCardAuthorization that = ((AuthorizationType.CreditCardAuthorization) object);
            {
                PaymentCardType lhsCreditCard;
                lhsCreditCard = this.getCreditCard();
                PaymentCardType rhsCreditCard;
                rhsCreditCard = that.getCreditCard();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "creditCard", lhsCreditCard), LocatorUtils.property(thatLocator, "creditCard", rhsCreditCard), lhsCreditCard, rhsCreditCard)) {
                    return false;
                }
            }
            {
                String lhsSourceType;
                lhsSourceType = this.getSourceType();
                String rhsSourceType;
                rhsSourceType = that.getSourceType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceType", lhsSourceType), LocatorUtils.property(thatLocator, "sourceType", rhsSourceType), lhsSourceType, rhsSourceType)) {
                    return false;
                }
            }
            {
                Boolean lhsExtendedPaymentInd;
                lhsExtendedPaymentInd = this.isExtendedPaymentInd();
                Boolean rhsExtendedPaymentInd;
                rhsExtendedPaymentInd = that.isExtendedPaymentInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "extendedPaymentInd", lhsExtendedPaymentInd), LocatorUtils.property(thatLocator, "extendedPaymentInd", rhsExtendedPaymentInd), lhsExtendedPaymentInd, rhsExtendedPaymentInd)) {
                    return false;
                }
            }
            {
                String lhsAuthorizationCode;
                lhsAuthorizationCode = this.getAuthorizationCode();
                String rhsAuthorizationCode;
                rhsAuthorizationCode = that.getAuthorizationCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "authorizationCode", lhsAuthorizationCode), LocatorUtils.property(thatLocator, "authorizationCode", rhsAuthorizationCode), lhsAuthorizationCode, rhsAuthorizationCode)) {
                    return false;
                }
            }
            {
                Boolean lhsReversalIndicator;
                lhsReversalIndicator = this.isReversalIndicator();
                Boolean rhsReversalIndicator;
                rhsReversalIndicator = that.isReversalIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "reversalIndicator", lhsReversalIndicator), LocatorUtils.property(thatLocator, "reversalIndicator", rhsReversalIndicator), lhsReversalIndicator, rhsReversalIndicator)) {
                    return false;
                }
            }
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                PaymentCardType theCreditCard;
                theCreditCard = this.getCreditCard();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creditCard", theCreditCard), currentHashCode, theCreditCard);
            }
            {
                String theSourceType;
                theSourceType = this.getSourceType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceType", theSourceType), currentHashCode, theSourceType);
            }
            {
                Boolean theExtendedPaymentInd;
                theExtendedPaymentInd = this.isExtendedPaymentInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extendedPaymentInd", theExtendedPaymentInd), currentHashCode, theExtendedPaymentInd);
            }
            {
                String theAuthorizationCode;
                theAuthorizationCode = this.getAuthorizationCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authorizationCode", theAuthorizationCode), currentHashCode, theAuthorizationCode);
            }
            {
                Boolean theReversalIndicator;
                theReversalIndicator = this.isReversalIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reversalIndicator", theReversalIndicator), currentHashCode, theReversalIndicator);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AuthorizationType.CreditCardAuthorization) {
                final AuthorizationType.CreditCardAuthorization copy = ((AuthorizationType.CreditCardAuthorization) draftCopy);
                if (this.creditCard!= null) {
                    PaymentCardType sourceCreditCard;
                    sourceCreditCard = this.getCreditCard();
                    PaymentCardType copyCreditCard = ((PaymentCardType) strategy.copy(LocatorUtils.property(locator, "creditCard", sourceCreditCard), sourceCreditCard));
                    copy.setCreditCard(copyCreditCard);
                } else {
                    copy.creditCard = null;
                }
                if (this.sourceType!= null) {
                    String sourceSourceType;
                    sourceSourceType = this.getSourceType();
                    String copySourceType = ((String) strategy.copy(LocatorUtils.property(locator, "sourceType", sourceSourceType), sourceSourceType));
                    copy.setSourceType(copySourceType);
                } else {
                    copy.sourceType = null;
                }
                if (this.extendedPaymentInd!= null) {
                    Boolean sourceExtendedPaymentInd;
                    sourceExtendedPaymentInd = this.isExtendedPaymentInd();
                    Boolean copyExtendedPaymentInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "extendedPaymentInd", sourceExtendedPaymentInd), sourceExtendedPaymentInd));
                    copy.setExtendedPaymentInd(copyExtendedPaymentInd);
                } else {
                    copy.extendedPaymentInd = null;
                }
                if (this.authorizationCode!= null) {
                    String sourceAuthorizationCode;
                    sourceAuthorizationCode = this.getAuthorizationCode();
                    String copyAuthorizationCode = ((String) strategy.copy(LocatorUtils.property(locator, "authorizationCode", sourceAuthorizationCode), sourceAuthorizationCode));
                    copy.setAuthorizationCode(copyAuthorizationCode);
                } else {
                    copy.authorizationCode = null;
                }
                if (this.reversalIndicator!= null) {
                    Boolean sourceReversalIndicator;
                    sourceReversalIndicator = this.isReversalIndicator();
                    Boolean copyReversalIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "reversalIndicator", sourceReversalIndicator), sourceReversalIndicator));
                    copy.setReversalIndicator(copyReversalIndicator);
                } else {
                    copy.reversalIndicator = null;
                }
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AuthorizationType.CreditCardAuthorization();
        }

    }

}
