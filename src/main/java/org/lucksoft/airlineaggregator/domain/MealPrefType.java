//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Food and beverage preferences to be used with this collection.
 * 
 * <p>Java class for MealPrefType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MealPrefType"&gt;
 *   &lt;simpleContent&gt;
 *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength0to64"&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PreferLevelGroup"/&gt;
 *       &lt;attribute name="MealType" type="{http://www.opentravel.org/OTA/2003/05}MealType" /&gt;
 *       &lt;attribute name="FavoriteFood" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *       &lt;attribute name="Beverage" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/simpleContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MealPrefType", propOrder = {
    "value"
})
public class MealPrefType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlValue
    protected String value;
    @XmlAttribute(name = "MealType")
    protected MealType mealType;
    @XmlAttribute(name = "FavoriteFood")
    protected String favoriteFood;
    @XmlAttribute(name = "Beverage")
    protected String beverage;
    @XmlAttribute(name = "PreferLevel")
    protected PreferLevelType preferLevel;

    /**
     * Used for Character Strings, length 0 to 64
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Gets the value of the mealType property.
     * 
     * @return
     *     possible object is
     *     {@link MealType }
     *     
     */
    public MealType getMealType() {
        return mealType;
    }

    /**
     * Sets the value of the mealType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MealType }
     *     
     */
    public void setMealType(MealType value) {
        this.mealType = value;
    }

    /**
     * Gets the value of the favoriteFood property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFavoriteFood() {
        return favoriteFood;
    }

    /**
     * Sets the value of the favoriteFood property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFavoriteFood(String value) {
        this.favoriteFood = value;
    }

    /**
     * Gets the value of the beverage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBeverage() {
        return beverage;
    }

    /**
     * Sets the value of the beverage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBeverage(String value) {
        this.beverage = value;
    }

    /**
     * Gets the value of the preferLevel property.
     * 
     * @return
     *     possible object is
     *     {@link PreferLevelType }
     *     
     */
    public PreferLevelType getPreferLevel() {
        if (preferLevel == null) {
            return PreferLevelType.PREFERRED;
        } else {
            return preferLevel;
        }
    }

    /**
     * Sets the value of the preferLevel property.
     * 
     * @param value
     *     allowed object is
     *     {@link PreferLevelType }
     *     
     */
    public void setPreferLevel(PreferLevelType value) {
        this.preferLevel = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theValue;
            theValue = this.getValue();
            strategy.appendField(locator, this, "value", buffer, theValue);
        }
        {
            MealType theMealType;
            theMealType = this.getMealType();
            strategy.appendField(locator, this, "mealType", buffer, theMealType);
        }
        {
            String theFavoriteFood;
            theFavoriteFood = this.getFavoriteFood();
            strategy.appendField(locator, this, "favoriteFood", buffer, theFavoriteFood);
        }
        {
            String theBeverage;
            theBeverage = this.getBeverage();
            strategy.appendField(locator, this, "beverage", buffer, theBeverage);
        }
        {
            PreferLevelType thePreferLevel;
            thePreferLevel = this.getPreferLevel();
            strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MealPrefType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MealPrefType that = ((MealPrefType) object);
        {
            String lhsValue;
            lhsValue = this.getValue();
            String rhsValue;
            rhsValue = that.getValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                return false;
            }
        }
        {
            MealType lhsMealType;
            lhsMealType = this.getMealType();
            MealType rhsMealType;
            rhsMealType = that.getMealType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mealType", lhsMealType), LocatorUtils.property(thatLocator, "mealType", rhsMealType), lhsMealType, rhsMealType)) {
                return false;
            }
        }
        {
            String lhsFavoriteFood;
            lhsFavoriteFood = this.getFavoriteFood();
            String rhsFavoriteFood;
            rhsFavoriteFood = that.getFavoriteFood();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "favoriteFood", lhsFavoriteFood), LocatorUtils.property(thatLocator, "favoriteFood", rhsFavoriteFood), lhsFavoriteFood, rhsFavoriteFood)) {
                return false;
            }
        }
        {
            String lhsBeverage;
            lhsBeverage = this.getBeverage();
            String rhsBeverage;
            rhsBeverage = that.getBeverage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "beverage", lhsBeverage), LocatorUtils.property(thatLocator, "beverage", rhsBeverage), lhsBeverage, rhsBeverage)) {
                return false;
            }
        }
        {
            PreferLevelType lhsPreferLevel;
            lhsPreferLevel = this.getPreferLevel();
            PreferLevelType rhsPreferLevel;
            rhsPreferLevel = that.getPreferLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theValue;
            theValue = this.getValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
        }
        {
            MealType theMealType;
            theMealType = this.getMealType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mealType", theMealType), currentHashCode, theMealType);
        }
        {
            String theFavoriteFood;
            theFavoriteFood = this.getFavoriteFood();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "favoriteFood", theFavoriteFood), currentHashCode, theFavoriteFood);
        }
        {
            String theBeverage;
            theBeverage = this.getBeverage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "beverage", theBeverage), currentHashCode, theBeverage);
        }
        {
            PreferLevelType thePreferLevel;
            thePreferLevel = this.getPreferLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof MealPrefType) {
            final MealPrefType copy = ((MealPrefType) draftCopy);
            if (this.value!= null) {
                String sourceValue;
                sourceValue = this.getValue();
                String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                copy.setValue(copyValue);
            } else {
                copy.value = null;
            }
            if (this.mealType!= null) {
                MealType sourceMealType;
                sourceMealType = this.getMealType();
                MealType copyMealType = ((MealType) strategy.copy(LocatorUtils.property(locator, "mealType", sourceMealType), sourceMealType));
                copy.setMealType(copyMealType);
            } else {
                copy.mealType = null;
            }
            if (this.favoriteFood!= null) {
                String sourceFavoriteFood;
                sourceFavoriteFood = this.getFavoriteFood();
                String copyFavoriteFood = ((String) strategy.copy(LocatorUtils.property(locator, "favoriteFood", sourceFavoriteFood), sourceFavoriteFood));
                copy.setFavoriteFood(copyFavoriteFood);
            } else {
                copy.favoriteFood = null;
            }
            if (this.beverage!= null) {
                String sourceBeverage;
                sourceBeverage = this.getBeverage();
                String copyBeverage = ((String) strategy.copy(LocatorUtils.property(locator, "beverage", sourceBeverage), sourceBeverage));
                copy.setBeverage(copyBeverage);
            } else {
                copy.beverage = null;
            }
            if (this.preferLevel!= null) {
                PreferLevelType sourcePreferLevel;
                sourcePreferLevel = this.getPreferLevel();
                PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                copy.setPreferLevel(copyPreferLevel);
            } else {
                copy.preferLevel = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MealPrefType();
    }

}
