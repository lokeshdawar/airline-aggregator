//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Contains details pertaining to commissions.
 * 
 * <p>Java class for CommissionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CommissionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="UniqueID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type" minOccurs="0"/&gt;
 *         &lt;element name="CommissionableAmount" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                 &lt;attribute name="TaxInclusiveIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="PrepaidAmount" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FlatCommission" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="CommissionPayableAmount" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Comment" type="{http://www.opentravel.org/OTA/2003/05}ParagraphType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyCodeGroup"/&gt;
 *       &lt;attribute name="StatusType"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *             &lt;enumeration value="Full"/&gt;
 *             &lt;enumeration value="Partial"/&gt;
 *             &lt;enumeration value="Non-paying"/&gt;
 *             &lt;enumeration value="No-show"/&gt;
 *             &lt;enumeration value="Adjustment"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *       &lt;attribute name="Percent" type="{http://www.opentravel.org/OTA/2003/05}Percentage" /&gt;
 *       &lt;attribute name="ReasonCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *       &lt;attribute name="BillToID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *       &lt;attribute name="Frequency" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *       &lt;attribute name="MaxCommissionUnitApplies" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" /&gt;
 *       &lt;attribute name="CapAmount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CommissionType", propOrder = {
    "uniqueID",
    "commissionableAmount",
    "prepaidAmount",
    "flatCommission",
    "commissionPayableAmount",
    "comment"
})
public class CommissionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "UniqueID")
    protected UniqueIDType uniqueID;
    @XmlElement(name = "CommissionableAmount")
    protected CommissionType.CommissionableAmount commissionableAmount;
    @XmlElement(name = "PrepaidAmount")
    protected CommissionType.PrepaidAmount prepaidAmount;
    @XmlElement(name = "FlatCommission")
    protected CommissionType.FlatCommission flatCommission;
    @XmlElement(name = "CommissionPayableAmount")
    protected CommissionType.CommissionPayableAmount commissionPayableAmount;
    @XmlElement(name = "Comment")
    protected ParagraphType comment;
    @XmlAttribute(name = "StatusType")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String statusType;
    @XmlAttribute(name = "Percent")
    protected BigDecimal percent;
    @XmlAttribute(name = "ReasonCode")
    protected String reasonCode;
    @XmlAttribute(name = "BillToID")
    protected String billToID;
    @XmlAttribute(name = "Frequency")
    protected String frequency;
    @XmlAttribute(name = "MaxCommissionUnitApplies")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger maxCommissionUnitApplies;
    @XmlAttribute(name = "CapAmount")
    protected BigDecimal capAmount;
    @XmlAttribute(name = "CurrencyCode")
    protected String currencyCode;
    @XmlAttribute(name = "DecimalPlaces")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger decimalPlaces;

    /**
     * Gets the value of the uniqueID property.
     * 
     * @return
     *     possible object is
     *     {@link UniqueIDType }
     *     
     */
    public UniqueIDType getUniqueID() {
        return uniqueID;
    }

    /**
     * Sets the value of the uniqueID property.
     * 
     * @param value
     *     allowed object is
     *     {@link UniqueIDType }
     *     
     */
    public void setUniqueID(UniqueIDType value) {
        this.uniqueID = value;
    }

    /**
     * Gets the value of the commissionableAmount property.
     * 
     * @return
     *     possible object is
     *     {@link CommissionType.CommissionableAmount }
     *     
     */
    public CommissionType.CommissionableAmount getCommissionableAmount() {
        return commissionableAmount;
    }

    /**
     * Sets the value of the commissionableAmount property.
     * 
     * @param value
     *     allowed object is
     *     {@link CommissionType.CommissionableAmount }
     *     
     */
    public void setCommissionableAmount(CommissionType.CommissionableAmount value) {
        this.commissionableAmount = value;
    }

    /**
     * Gets the value of the prepaidAmount property.
     * 
     * @return
     *     possible object is
     *     {@link CommissionType.PrepaidAmount }
     *     
     */
    public CommissionType.PrepaidAmount getPrepaidAmount() {
        return prepaidAmount;
    }

    /**
     * Sets the value of the prepaidAmount property.
     * 
     * @param value
     *     allowed object is
     *     {@link CommissionType.PrepaidAmount }
     *     
     */
    public void setPrepaidAmount(CommissionType.PrepaidAmount value) {
        this.prepaidAmount = value;
    }

    /**
     * Gets the value of the flatCommission property.
     * 
     * @return
     *     possible object is
     *     {@link CommissionType.FlatCommission }
     *     
     */
    public CommissionType.FlatCommission getFlatCommission() {
        return flatCommission;
    }

    /**
     * Sets the value of the flatCommission property.
     * 
     * @param value
     *     allowed object is
     *     {@link CommissionType.FlatCommission }
     *     
     */
    public void setFlatCommission(CommissionType.FlatCommission value) {
        this.flatCommission = value;
    }

    /**
     * Gets the value of the commissionPayableAmount property.
     * 
     * @return
     *     possible object is
     *     {@link CommissionType.CommissionPayableAmount }
     *     
     */
    public CommissionType.CommissionPayableAmount getCommissionPayableAmount() {
        return commissionPayableAmount;
    }

    /**
     * Sets the value of the commissionPayableAmount property.
     * 
     * @param value
     *     allowed object is
     *     {@link CommissionType.CommissionPayableAmount }
     *     
     */
    public void setCommissionPayableAmount(CommissionType.CommissionPayableAmount value) {
        this.commissionPayableAmount = value;
    }

    /**
     * Gets the value of the comment property.
     * 
     * @return
     *     possible object is
     *     {@link ParagraphType }
     *     
     */
    public ParagraphType getComment() {
        return comment;
    }

    /**
     * Sets the value of the comment property.
     * 
     * @param value
     *     allowed object is
     *     {@link ParagraphType }
     *     
     */
    public void setComment(ParagraphType value) {
        this.comment = value;
    }

    /**
     * Gets the value of the statusType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatusType() {
        return statusType;
    }

    /**
     * Sets the value of the statusType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatusType(String value) {
        this.statusType = value;
    }

    /**
     * Gets the value of the percent property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getPercent() {
        return percent;
    }

    /**
     * Sets the value of the percent property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setPercent(BigDecimal value) {
        this.percent = value;
    }

    /**
     * Gets the value of the reasonCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getReasonCode() {
        return reasonCode;
    }

    /**
     * Sets the value of the reasonCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReasonCode(String value) {
        this.reasonCode = value;
    }

    /**
     * Gets the value of the billToID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBillToID() {
        return billToID;
    }

    /**
     * Sets the value of the billToID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBillToID(String value) {
        this.billToID = value;
    }

    /**
     * Gets the value of the frequency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrequency() {
        return frequency;
    }

    /**
     * Sets the value of the frequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrequency(String value) {
        this.frequency = value;
    }

    /**
     * Gets the value of the maxCommissionUnitApplies property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxCommissionUnitApplies() {
        return maxCommissionUnitApplies;
    }

    /**
     * Sets the value of the maxCommissionUnitApplies property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxCommissionUnitApplies(BigInteger value) {
        this.maxCommissionUnitApplies = value;
    }

    /**
     * Gets the value of the capAmount property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getCapAmount() {
        return capAmount;
    }

    /**
     * Sets the value of the capAmount property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setCapAmount(BigDecimal value) {
        this.capAmount = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the decimalPlaces property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDecimalPlaces() {
        return decimalPlaces;
    }

    /**
     * Sets the value of the decimalPlaces property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDecimalPlaces(BigInteger value) {
        this.decimalPlaces = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            UniqueIDType theUniqueID;
            theUniqueID = this.getUniqueID();
            strategy.appendField(locator, this, "uniqueID", buffer, theUniqueID);
        }
        {
            CommissionType.CommissionableAmount theCommissionableAmount;
            theCommissionableAmount = this.getCommissionableAmount();
            strategy.appendField(locator, this, "commissionableAmount", buffer, theCommissionableAmount);
        }
        {
            CommissionType.PrepaidAmount thePrepaidAmount;
            thePrepaidAmount = this.getPrepaidAmount();
            strategy.appendField(locator, this, "prepaidAmount", buffer, thePrepaidAmount);
        }
        {
            CommissionType.FlatCommission theFlatCommission;
            theFlatCommission = this.getFlatCommission();
            strategy.appendField(locator, this, "flatCommission", buffer, theFlatCommission);
        }
        {
            CommissionType.CommissionPayableAmount theCommissionPayableAmount;
            theCommissionPayableAmount = this.getCommissionPayableAmount();
            strategy.appendField(locator, this, "commissionPayableAmount", buffer, theCommissionPayableAmount);
        }
        {
            ParagraphType theComment;
            theComment = this.getComment();
            strategy.appendField(locator, this, "comment", buffer, theComment);
        }
        {
            String theStatusType;
            theStatusType = this.getStatusType();
            strategy.appendField(locator, this, "statusType", buffer, theStatusType);
        }
        {
            BigDecimal thePercent;
            thePercent = this.getPercent();
            strategy.appendField(locator, this, "percent", buffer, thePercent);
        }
        {
            String theReasonCode;
            theReasonCode = this.getReasonCode();
            strategy.appendField(locator, this, "reasonCode", buffer, theReasonCode);
        }
        {
            String theBillToID;
            theBillToID = this.getBillToID();
            strategy.appendField(locator, this, "billToID", buffer, theBillToID);
        }
        {
            String theFrequency;
            theFrequency = this.getFrequency();
            strategy.appendField(locator, this, "frequency", buffer, theFrequency);
        }
        {
            BigInteger theMaxCommissionUnitApplies;
            theMaxCommissionUnitApplies = this.getMaxCommissionUnitApplies();
            strategy.appendField(locator, this, "maxCommissionUnitApplies", buffer, theMaxCommissionUnitApplies);
        }
        {
            BigDecimal theCapAmount;
            theCapAmount = this.getCapAmount();
            strategy.appendField(locator, this, "capAmount", buffer, theCapAmount);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CommissionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CommissionType that = ((CommissionType) object);
        {
            UniqueIDType lhsUniqueID;
            lhsUniqueID = this.getUniqueID();
            UniqueIDType rhsUniqueID;
            rhsUniqueID = that.getUniqueID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uniqueID", lhsUniqueID), LocatorUtils.property(thatLocator, "uniqueID", rhsUniqueID), lhsUniqueID, rhsUniqueID)) {
                return false;
            }
        }
        {
            CommissionType.CommissionableAmount lhsCommissionableAmount;
            lhsCommissionableAmount = this.getCommissionableAmount();
            CommissionType.CommissionableAmount rhsCommissionableAmount;
            rhsCommissionableAmount = that.getCommissionableAmount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "commissionableAmount", lhsCommissionableAmount), LocatorUtils.property(thatLocator, "commissionableAmount", rhsCommissionableAmount), lhsCommissionableAmount, rhsCommissionableAmount)) {
                return false;
            }
        }
        {
            CommissionType.PrepaidAmount lhsPrepaidAmount;
            lhsPrepaidAmount = this.getPrepaidAmount();
            CommissionType.PrepaidAmount rhsPrepaidAmount;
            rhsPrepaidAmount = that.getPrepaidAmount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "prepaidAmount", lhsPrepaidAmount), LocatorUtils.property(thatLocator, "prepaidAmount", rhsPrepaidAmount), lhsPrepaidAmount, rhsPrepaidAmount)) {
                return false;
            }
        }
        {
            CommissionType.FlatCommission lhsFlatCommission;
            lhsFlatCommission = this.getFlatCommission();
            CommissionType.FlatCommission rhsFlatCommission;
            rhsFlatCommission = that.getFlatCommission();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flatCommission", lhsFlatCommission), LocatorUtils.property(thatLocator, "flatCommission", rhsFlatCommission), lhsFlatCommission, rhsFlatCommission)) {
                return false;
            }
        }
        {
            CommissionType.CommissionPayableAmount lhsCommissionPayableAmount;
            lhsCommissionPayableAmount = this.getCommissionPayableAmount();
            CommissionType.CommissionPayableAmount rhsCommissionPayableAmount;
            rhsCommissionPayableAmount = that.getCommissionPayableAmount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "commissionPayableAmount", lhsCommissionPayableAmount), LocatorUtils.property(thatLocator, "commissionPayableAmount", rhsCommissionPayableAmount), lhsCommissionPayableAmount, rhsCommissionPayableAmount)) {
                return false;
            }
        }
        {
            ParagraphType lhsComment;
            lhsComment = this.getComment();
            ParagraphType rhsComment;
            rhsComment = that.getComment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comment", lhsComment), LocatorUtils.property(thatLocator, "comment", rhsComment), lhsComment, rhsComment)) {
                return false;
            }
        }
        {
            String lhsStatusType;
            lhsStatusType = this.getStatusType();
            String rhsStatusType;
            rhsStatusType = that.getStatusType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "statusType", lhsStatusType), LocatorUtils.property(thatLocator, "statusType", rhsStatusType), lhsStatusType, rhsStatusType)) {
                return false;
            }
        }
        {
            BigDecimal lhsPercent;
            lhsPercent = this.getPercent();
            BigDecimal rhsPercent;
            rhsPercent = that.getPercent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "percent", lhsPercent), LocatorUtils.property(thatLocator, "percent", rhsPercent), lhsPercent, rhsPercent)) {
                return false;
            }
        }
        {
            String lhsReasonCode;
            lhsReasonCode = this.getReasonCode();
            String rhsReasonCode;
            rhsReasonCode = that.getReasonCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonCode", lhsReasonCode), LocatorUtils.property(thatLocator, "reasonCode", rhsReasonCode), lhsReasonCode, rhsReasonCode)) {
                return false;
            }
        }
        {
            String lhsBillToID;
            lhsBillToID = this.getBillToID();
            String rhsBillToID;
            rhsBillToID = that.getBillToID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "billToID", lhsBillToID), LocatorUtils.property(thatLocator, "billToID", rhsBillToID), lhsBillToID, rhsBillToID)) {
                return false;
            }
        }
        {
            String lhsFrequency;
            lhsFrequency = this.getFrequency();
            String rhsFrequency;
            rhsFrequency = that.getFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "frequency", lhsFrequency), LocatorUtils.property(thatLocator, "frequency", rhsFrequency), lhsFrequency, rhsFrequency)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxCommissionUnitApplies;
            lhsMaxCommissionUnitApplies = this.getMaxCommissionUnitApplies();
            BigInteger rhsMaxCommissionUnitApplies;
            rhsMaxCommissionUnitApplies = that.getMaxCommissionUnitApplies();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxCommissionUnitApplies", lhsMaxCommissionUnitApplies), LocatorUtils.property(thatLocator, "maxCommissionUnitApplies", rhsMaxCommissionUnitApplies), lhsMaxCommissionUnitApplies, rhsMaxCommissionUnitApplies)) {
                return false;
            }
        }
        {
            BigDecimal lhsCapAmount;
            lhsCapAmount = this.getCapAmount();
            BigDecimal rhsCapAmount;
            rhsCapAmount = that.getCapAmount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "capAmount", lhsCapAmount), LocatorUtils.property(thatLocator, "capAmount", rhsCapAmount), lhsCapAmount, rhsCapAmount)) {
                return false;
            }
        }
        {
            String lhsCurrencyCode;
            lhsCurrencyCode = this.getCurrencyCode();
            String rhsCurrencyCode;
            rhsCurrencyCode = that.getCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                return false;
            }
        }
        {
            BigInteger lhsDecimalPlaces;
            lhsDecimalPlaces = this.getDecimalPlaces();
            BigInteger rhsDecimalPlaces;
            rhsDecimalPlaces = that.getDecimalPlaces();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            UniqueIDType theUniqueID;
            theUniqueID = this.getUniqueID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uniqueID", theUniqueID), currentHashCode, theUniqueID);
        }
        {
            CommissionType.CommissionableAmount theCommissionableAmount;
            theCommissionableAmount = this.getCommissionableAmount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "commissionableAmount", theCommissionableAmount), currentHashCode, theCommissionableAmount);
        }
        {
            CommissionType.PrepaidAmount thePrepaidAmount;
            thePrepaidAmount = this.getPrepaidAmount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "prepaidAmount", thePrepaidAmount), currentHashCode, thePrepaidAmount);
        }
        {
            CommissionType.FlatCommission theFlatCommission;
            theFlatCommission = this.getFlatCommission();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flatCommission", theFlatCommission), currentHashCode, theFlatCommission);
        }
        {
            CommissionType.CommissionPayableAmount theCommissionPayableAmount;
            theCommissionPayableAmount = this.getCommissionPayableAmount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "commissionPayableAmount", theCommissionPayableAmount), currentHashCode, theCommissionPayableAmount);
        }
        {
            ParagraphType theComment;
            theComment = this.getComment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comment", theComment), currentHashCode, theComment);
        }
        {
            String theStatusType;
            theStatusType = this.getStatusType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "statusType", theStatusType), currentHashCode, theStatusType);
        }
        {
            BigDecimal thePercent;
            thePercent = this.getPercent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "percent", thePercent), currentHashCode, thePercent);
        }
        {
            String theReasonCode;
            theReasonCode = this.getReasonCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonCode", theReasonCode), currentHashCode, theReasonCode);
        }
        {
            String theBillToID;
            theBillToID = this.getBillToID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "billToID", theBillToID), currentHashCode, theBillToID);
        }
        {
            String theFrequency;
            theFrequency = this.getFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "frequency", theFrequency), currentHashCode, theFrequency);
        }
        {
            BigInteger theMaxCommissionUnitApplies;
            theMaxCommissionUnitApplies = this.getMaxCommissionUnitApplies();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxCommissionUnitApplies", theMaxCommissionUnitApplies), currentHashCode, theMaxCommissionUnitApplies);
        }
        {
            BigDecimal theCapAmount;
            theCapAmount = this.getCapAmount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "capAmount", theCapAmount), currentHashCode, theCapAmount);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CommissionType) {
            final CommissionType copy = ((CommissionType) draftCopy);
            if (this.uniqueID!= null) {
                UniqueIDType sourceUniqueID;
                sourceUniqueID = this.getUniqueID();
                UniqueIDType copyUniqueID = ((UniqueIDType) strategy.copy(LocatorUtils.property(locator, "uniqueID", sourceUniqueID), sourceUniqueID));
                copy.setUniqueID(copyUniqueID);
            } else {
                copy.uniqueID = null;
            }
            if (this.commissionableAmount!= null) {
                CommissionType.CommissionableAmount sourceCommissionableAmount;
                sourceCommissionableAmount = this.getCommissionableAmount();
                CommissionType.CommissionableAmount copyCommissionableAmount = ((CommissionType.CommissionableAmount) strategy.copy(LocatorUtils.property(locator, "commissionableAmount", sourceCommissionableAmount), sourceCommissionableAmount));
                copy.setCommissionableAmount(copyCommissionableAmount);
            } else {
                copy.commissionableAmount = null;
            }
            if (this.prepaidAmount!= null) {
                CommissionType.PrepaidAmount sourcePrepaidAmount;
                sourcePrepaidAmount = this.getPrepaidAmount();
                CommissionType.PrepaidAmount copyPrepaidAmount = ((CommissionType.PrepaidAmount) strategy.copy(LocatorUtils.property(locator, "prepaidAmount", sourcePrepaidAmount), sourcePrepaidAmount));
                copy.setPrepaidAmount(copyPrepaidAmount);
            } else {
                copy.prepaidAmount = null;
            }
            if (this.flatCommission!= null) {
                CommissionType.FlatCommission sourceFlatCommission;
                sourceFlatCommission = this.getFlatCommission();
                CommissionType.FlatCommission copyFlatCommission = ((CommissionType.FlatCommission) strategy.copy(LocatorUtils.property(locator, "flatCommission", sourceFlatCommission), sourceFlatCommission));
                copy.setFlatCommission(copyFlatCommission);
            } else {
                copy.flatCommission = null;
            }
            if (this.commissionPayableAmount!= null) {
                CommissionType.CommissionPayableAmount sourceCommissionPayableAmount;
                sourceCommissionPayableAmount = this.getCommissionPayableAmount();
                CommissionType.CommissionPayableAmount copyCommissionPayableAmount = ((CommissionType.CommissionPayableAmount) strategy.copy(LocatorUtils.property(locator, "commissionPayableAmount", sourceCommissionPayableAmount), sourceCommissionPayableAmount));
                copy.setCommissionPayableAmount(copyCommissionPayableAmount);
            } else {
                copy.commissionPayableAmount = null;
            }
            if (this.comment!= null) {
                ParagraphType sourceComment;
                sourceComment = this.getComment();
                ParagraphType copyComment = ((ParagraphType) strategy.copy(LocatorUtils.property(locator, "comment", sourceComment), sourceComment));
                copy.setComment(copyComment);
            } else {
                copy.comment = null;
            }
            if (this.statusType!= null) {
                String sourceStatusType;
                sourceStatusType = this.getStatusType();
                String copyStatusType = ((String) strategy.copy(LocatorUtils.property(locator, "statusType", sourceStatusType), sourceStatusType));
                copy.setStatusType(copyStatusType);
            } else {
                copy.statusType = null;
            }
            if (this.percent!= null) {
                BigDecimal sourcePercent;
                sourcePercent = this.getPercent();
                BigDecimal copyPercent = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "percent", sourcePercent), sourcePercent));
                copy.setPercent(copyPercent);
            } else {
                copy.percent = null;
            }
            if (this.reasonCode!= null) {
                String sourceReasonCode;
                sourceReasonCode = this.getReasonCode();
                String copyReasonCode = ((String) strategy.copy(LocatorUtils.property(locator, "reasonCode", sourceReasonCode), sourceReasonCode));
                copy.setReasonCode(copyReasonCode);
            } else {
                copy.reasonCode = null;
            }
            if (this.billToID!= null) {
                String sourceBillToID;
                sourceBillToID = this.getBillToID();
                String copyBillToID = ((String) strategy.copy(LocatorUtils.property(locator, "billToID", sourceBillToID), sourceBillToID));
                copy.setBillToID(copyBillToID);
            } else {
                copy.billToID = null;
            }
            if (this.frequency!= null) {
                String sourceFrequency;
                sourceFrequency = this.getFrequency();
                String copyFrequency = ((String) strategy.copy(LocatorUtils.property(locator, "frequency", sourceFrequency), sourceFrequency));
                copy.setFrequency(copyFrequency);
            } else {
                copy.frequency = null;
            }
            if (this.maxCommissionUnitApplies!= null) {
                BigInteger sourceMaxCommissionUnitApplies;
                sourceMaxCommissionUnitApplies = this.getMaxCommissionUnitApplies();
                BigInteger copyMaxCommissionUnitApplies = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxCommissionUnitApplies", sourceMaxCommissionUnitApplies), sourceMaxCommissionUnitApplies));
                copy.setMaxCommissionUnitApplies(copyMaxCommissionUnitApplies);
            } else {
                copy.maxCommissionUnitApplies = null;
            }
            if (this.capAmount!= null) {
                BigDecimal sourceCapAmount;
                sourceCapAmount = this.getCapAmount();
                BigDecimal copyCapAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "capAmount", sourceCapAmount), sourceCapAmount));
                copy.setCapAmount(copyCapAmount);
            } else {
                copy.capAmount = null;
            }
            if (this.currencyCode!= null) {
                String sourceCurrencyCode;
                sourceCurrencyCode = this.getCurrencyCode();
                String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                copy.setCurrencyCode(copyCurrencyCode);
            } else {
                copy.currencyCode = null;
            }
            if (this.decimalPlaces!= null) {
                BigInteger sourceDecimalPlaces;
                sourceDecimalPlaces = this.getDecimalPlaces();
                BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                copy.setDecimalPlaces(copyDecimalPlaces);
            } else {
                copy.decimalPlaces = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CommissionType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *       &lt;attribute name="TaxInclusiveIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CommissionableAmount
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "TaxInclusiveIndicator")
        protected Boolean taxInclusiveIndicator;
        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the taxInclusiveIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isTaxInclusiveIndicator() {
            return taxInclusiveIndicator;
        }

        /**
         * Sets the value of the taxInclusiveIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setTaxInclusiveIndicator(Boolean value) {
            this.taxInclusiveIndicator = value;
        }

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                Boolean theTaxInclusiveIndicator;
                theTaxInclusiveIndicator = this.isTaxInclusiveIndicator();
                strategy.appendField(locator, this, "taxInclusiveIndicator", buffer, theTaxInclusiveIndicator);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CommissionType.CommissionableAmount)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CommissionType.CommissionableAmount that = ((CommissionType.CommissionableAmount) object);
            {
                Boolean lhsTaxInclusiveIndicator;
                lhsTaxInclusiveIndicator = this.isTaxInclusiveIndicator();
                Boolean rhsTaxInclusiveIndicator;
                rhsTaxInclusiveIndicator = that.isTaxInclusiveIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "taxInclusiveIndicator", lhsTaxInclusiveIndicator), LocatorUtils.property(thatLocator, "taxInclusiveIndicator", rhsTaxInclusiveIndicator), lhsTaxInclusiveIndicator, rhsTaxInclusiveIndicator)) {
                    return false;
                }
            }
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                Boolean theTaxInclusiveIndicator;
                theTaxInclusiveIndicator = this.isTaxInclusiveIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxInclusiveIndicator", theTaxInclusiveIndicator), currentHashCode, theTaxInclusiveIndicator);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CommissionType.CommissionableAmount) {
                final CommissionType.CommissionableAmount copy = ((CommissionType.CommissionableAmount) draftCopy);
                if (this.taxInclusiveIndicator!= null) {
                    Boolean sourceTaxInclusiveIndicator;
                    sourceTaxInclusiveIndicator = this.isTaxInclusiveIndicator();
                    Boolean copyTaxInclusiveIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "taxInclusiveIndicator", sourceTaxInclusiveIndicator), sourceTaxInclusiveIndicator));
                    copy.setTaxInclusiveIndicator(copyTaxInclusiveIndicator);
                } else {
                    copy.taxInclusiveIndicator = null;
                }
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CommissionType.CommissionableAmount();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CommissionPayableAmount
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CommissionType.CommissionPayableAmount)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CommissionType.CommissionPayableAmount that = ((CommissionType.CommissionPayableAmount) object);
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CommissionType.CommissionPayableAmount) {
                final CommissionType.CommissionPayableAmount copy = ((CommissionType.CommissionPayableAmount) draftCopy);
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CommissionType.CommissionPayableAmount();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class FlatCommission
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CommissionType.FlatCommission)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CommissionType.FlatCommission that = ((CommissionType.FlatCommission) object);
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CommissionType.FlatCommission) {
                final CommissionType.FlatCommission copy = ((CommissionType.FlatCommission) draftCopy);
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CommissionType.FlatCommission();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class PrepaidAmount
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CommissionType.PrepaidAmount)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CommissionType.PrepaidAmount that = ((CommissionType.PrepaidAmount) object);
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CommissionType.PrepaidAmount) {
                final CommissionType.PrepaidAmount copy = ((CommissionType.PrepaidAmount) draftCopy);
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CommissionType.PrepaidAmount();
        }

    }

}
