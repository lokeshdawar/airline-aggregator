//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Minimum information about ticketing required to complete the booking transaction.
 * 
 * <p>Java class for TicketingInfoType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TicketingInfoType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="TicketAdvisory" type="{http://www.opentravel.org/OTA/2003/05}FreeTextType" maxOccurs="10" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="TicketTimeLimit" type="{http://www.w3.org/2001/XMLSchema}dateTime" /&gt;
 *       &lt;attribute name="TicketType" type="{http://www.opentravel.org/OTA/2003/05}TicketType" /&gt;
 *       &lt;attribute name="TicketingStatus" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *       &lt;attribute name="FlightSegmentRefNumber" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *       &lt;attribute name="TravelerRefNumber" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *       &lt;attribute name="ReverseTktgSegmentsInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="PseudoCityCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TicketingInfoType", propOrder = {
    "ticketAdvisory"
})
@XmlSeeAlso({
    TicketingInfoRSType.class
})
public class TicketingInfoType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "TicketAdvisory")
    protected List<FreeTextType> ticketAdvisory;
    @XmlAttribute(name = "TicketTimeLimit")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar ticketTimeLimit;
    @XmlAttribute(name = "TicketType")
    protected TicketType ticketType;
    @XmlAttribute(name = "TicketingStatus")
    protected String ticketingStatus;
    @XmlAttribute(name = "FlightSegmentRefNumber")
    protected List<String> flightSegmentRefNumber;
    @XmlAttribute(name = "TravelerRefNumber")
    protected List<String> travelerRefNumber;
    @XmlAttribute(name = "ReverseTktgSegmentsInd")
    protected Boolean reverseTktgSegmentsInd;
    @XmlAttribute(name = "PseudoCityCode")
    protected String pseudoCityCode;

    /**
     * Gets the value of the ticketAdvisory property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ticketAdvisory property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTicketAdvisory().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FreeTextType }
     * 
     * 
     */
    public List<FreeTextType> getTicketAdvisory() {
        if (ticketAdvisory == null) {
            ticketAdvisory = new ArrayList<FreeTextType>();
        }
        return this.ticketAdvisory;
    }

    /**
     * Gets the value of the ticketTimeLimit property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getTicketTimeLimit() {
        return ticketTimeLimit;
    }

    /**
     * Sets the value of the ticketTimeLimit property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setTicketTimeLimit(XMLGregorianCalendar value) {
        this.ticketTimeLimit = value;
    }

    /**
     * Gets the value of the ticketType property.
     * 
     * @return
     *     possible object is
     *     {@link TicketType }
     *     
     */
    public TicketType getTicketType() {
        return ticketType;
    }

    /**
     * Sets the value of the ticketType property.
     * 
     * @param value
     *     allowed object is
     *     {@link TicketType }
     *     
     */
    public void setTicketType(TicketType value) {
        this.ticketType = value;
    }

    /**
     * Gets the value of the ticketingStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTicketingStatus() {
        return ticketingStatus;
    }

    /**
     * Sets the value of the ticketingStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTicketingStatus(String value) {
        this.ticketingStatus = value;
    }

    /**
     * Gets the value of the flightSegmentRefNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the flightSegmentRefNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFlightSegmentRefNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getFlightSegmentRefNumber() {
        if (flightSegmentRefNumber == null) {
            flightSegmentRefNumber = new ArrayList<String>();
        }
        return this.flightSegmentRefNumber;
    }

    /**
     * Gets the value of the travelerRefNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the travelerRefNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTravelerRefNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getTravelerRefNumber() {
        if (travelerRefNumber == null) {
            travelerRefNumber = new ArrayList<String>();
        }
        return this.travelerRefNumber;
    }

    /**
     * Gets the value of the reverseTktgSegmentsInd property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isReverseTktgSegmentsInd() {
        return reverseTktgSegmentsInd;
    }

    /**
     * Sets the value of the reverseTktgSegmentsInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setReverseTktgSegmentsInd(Boolean value) {
        this.reverseTktgSegmentsInd = value;
    }

    /**
     * Gets the value of the pseudoCityCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPseudoCityCode() {
        return pseudoCityCode;
    }

    /**
     * Sets the value of the pseudoCityCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPseudoCityCode(String value) {
        this.pseudoCityCode = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<FreeTextType> theTicketAdvisory;
            theTicketAdvisory = (((this.ticketAdvisory!= null)&&(!this.ticketAdvisory.isEmpty()))?this.getTicketAdvisory():null);
            strategy.appendField(locator, this, "ticketAdvisory", buffer, theTicketAdvisory);
        }
        {
            XMLGregorianCalendar theTicketTimeLimit;
            theTicketTimeLimit = this.getTicketTimeLimit();
            strategy.appendField(locator, this, "ticketTimeLimit", buffer, theTicketTimeLimit);
        }
        {
            TicketType theTicketType;
            theTicketType = this.getTicketType();
            strategy.appendField(locator, this, "ticketType", buffer, theTicketType);
        }
        {
            String theTicketingStatus;
            theTicketingStatus = this.getTicketingStatus();
            strategy.appendField(locator, this, "ticketingStatus", buffer, theTicketingStatus);
        }
        {
            List<String> theFlightSegmentRefNumber;
            theFlightSegmentRefNumber = (((this.flightSegmentRefNumber!= null)&&(!this.flightSegmentRefNumber.isEmpty()))?this.getFlightSegmentRefNumber():null);
            strategy.appendField(locator, this, "flightSegmentRefNumber", buffer, theFlightSegmentRefNumber);
        }
        {
            List<String> theTravelerRefNumber;
            theTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            strategy.appendField(locator, this, "travelerRefNumber", buffer, theTravelerRefNumber);
        }
        {
            Boolean theReverseTktgSegmentsInd;
            theReverseTktgSegmentsInd = this.isReverseTktgSegmentsInd();
            strategy.appendField(locator, this, "reverseTktgSegmentsInd", buffer, theReverseTktgSegmentsInd);
        }
        {
            String thePseudoCityCode;
            thePseudoCityCode = this.getPseudoCityCode();
            strategy.appendField(locator, this, "pseudoCityCode", buffer, thePseudoCityCode);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TicketingInfoType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TicketingInfoType that = ((TicketingInfoType) object);
        {
            List<FreeTextType> lhsTicketAdvisory;
            lhsTicketAdvisory = (((this.ticketAdvisory!= null)&&(!this.ticketAdvisory.isEmpty()))?this.getTicketAdvisory():null);
            List<FreeTextType> rhsTicketAdvisory;
            rhsTicketAdvisory = (((that.ticketAdvisory!= null)&&(!that.ticketAdvisory.isEmpty()))?that.getTicketAdvisory():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketAdvisory", lhsTicketAdvisory), LocatorUtils.property(thatLocator, "ticketAdvisory", rhsTicketAdvisory), lhsTicketAdvisory, rhsTicketAdvisory)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsTicketTimeLimit;
            lhsTicketTimeLimit = this.getTicketTimeLimit();
            XMLGregorianCalendar rhsTicketTimeLimit;
            rhsTicketTimeLimit = that.getTicketTimeLimit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketTimeLimit", lhsTicketTimeLimit), LocatorUtils.property(thatLocator, "ticketTimeLimit", rhsTicketTimeLimit), lhsTicketTimeLimit, rhsTicketTimeLimit)) {
                return false;
            }
        }
        {
            TicketType lhsTicketType;
            lhsTicketType = this.getTicketType();
            TicketType rhsTicketType;
            rhsTicketType = that.getTicketType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketType", lhsTicketType), LocatorUtils.property(thatLocator, "ticketType", rhsTicketType), lhsTicketType, rhsTicketType)) {
                return false;
            }
        }
        {
            String lhsTicketingStatus;
            lhsTicketingStatus = this.getTicketingStatus();
            String rhsTicketingStatus;
            rhsTicketingStatus = that.getTicketingStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketingStatus", lhsTicketingStatus), LocatorUtils.property(thatLocator, "ticketingStatus", rhsTicketingStatus), lhsTicketingStatus, rhsTicketingStatus)) {
                return false;
            }
        }
        {
            List<String> lhsFlightSegmentRefNumber;
            lhsFlightSegmentRefNumber = (((this.flightSegmentRefNumber!= null)&&(!this.flightSegmentRefNumber.isEmpty()))?this.getFlightSegmentRefNumber():null);
            List<String> rhsFlightSegmentRefNumber;
            rhsFlightSegmentRefNumber = (((that.flightSegmentRefNumber!= null)&&(!that.flightSegmentRefNumber.isEmpty()))?that.getFlightSegmentRefNumber():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightSegmentRefNumber", lhsFlightSegmentRefNumber), LocatorUtils.property(thatLocator, "flightSegmentRefNumber", rhsFlightSegmentRefNumber), lhsFlightSegmentRefNumber, rhsFlightSegmentRefNumber)) {
                return false;
            }
        }
        {
            List<String> lhsTravelerRefNumber;
            lhsTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            List<String> rhsTravelerRefNumber;
            rhsTravelerRefNumber = (((that.travelerRefNumber!= null)&&(!that.travelerRefNumber.isEmpty()))?that.getTravelerRefNumber():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerRefNumber", lhsTravelerRefNumber), LocatorUtils.property(thatLocator, "travelerRefNumber", rhsTravelerRefNumber), lhsTravelerRefNumber, rhsTravelerRefNumber)) {
                return false;
            }
        }
        {
            Boolean lhsReverseTktgSegmentsInd;
            lhsReverseTktgSegmentsInd = this.isReverseTktgSegmentsInd();
            Boolean rhsReverseTktgSegmentsInd;
            rhsReverseTktgSegmentsInd = that.isReverseTktgSegmentsInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reverseTktgSegmentsInd", lhsReverseTktgSegmentsInd), LocatorUtils.property(thatLocator, "reverseTktgSegmentsInd", rhsReverseTktgSegmentsInd), lhsReverseTktgSegmentsInd, rhsReverseTktgSegmentsInd)) {
                return false;
            }
        }
        {
            String lhsPseudoCityCode;
            lhsPseudoCityCode = this.getPseudoCityCode();
            String rhsPseudoCityCode;
            rhsPseudoCityCode = that.getPseudoCityCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pseudoCityCode", lhsPseudoCityCode), LocatorUtils.property(thatLocator, "pseudoCityCode", rhsPseudoCityCode), lhsPseudoCityCode, rhsPseudoCityCode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<FreeTextType> theTicketAdvisory;
            theTicketAdvisory = (((this.ticketAdvisory!= null)&&(!this.ticketAdvisory.isEmpty()))?this.getTicketAdvisory():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketAdvisory", theTicketAdvisory), currentHashCode, theTicketAdvisory);
        }
        {
            XMLGregorianCalendar theTicketTimeLimit;
            theTicketTimeLimit = this.getTicketTimeLimit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketTimeLimit", theTicketTimeLimit), currentHashCode, theTicketTimeLimit);
        }
        {
            TicketType theTicketType;
            theTicketType = this.getTicketType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketType", theTicketType), currentHashCode, theTicketType);
        }
        {
            String theTicketingStatus;
            theTicketingStatus = this.getTicketingStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketingStatus", theTicketingStatus), currentHashCode, theTicketingStatus);
        }
        {
            List<String> theFlightSegmentRefNumber;
            theFlightSegmentRefNumber = (((this.flightSegmentRefNumber!= null)&&(!this.flightSegmentRefNumber.isEmpty()))?this.getFlightSegmentRefNumber():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightSegmentRefNumber", theFlightSegmentRefNumber), currentHashCode, theFlightSegmentRefNumber);
        }
        {
            List<String> theTravelerRefNumber;
            theTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerRefNumber", theTravelerRefNumber), currentHashCode, theTravelerRefNumber);
        }
        {
            Boolean theReverseTktgSegmentsInd;
            theReverseTktgSegmentsInd = this.isReverseTktgSegmentsInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reverseTktgSegmentsInd", theReverseTktgSegmentsInd), currentHashCode, theReverseTktgSegmentsInd);
        }
        {
            String thePseudoCityCode;
            thePseudoCityCode = this.getPseudoCityCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pseudoCityCode", thePseudoCityCode), currentHashCode, thePseudoCityCode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TicketingInfoType) {
            final TicketingInfoType copy = ((TicketingInfoType) draftCopy);
            if ((this.ticketAdvisory!= null)&&(!this.ticketAdvisory.isEmpty())) {
                List<FreeTextType> sourceTicketAdvisory;
                sourceTicketAdvisory = (((this.ticketAdvisory!= null)&&(!this.ticketAdvisory.isEmpty()))?this.getTicketAdvisory():null);
                @SuppressWarnings("unchecked")
                List<FreeTextType> copyTicketAdvisory = ((List<FreeTextType> ) strategy.copy(LocatorUtils.property(locator, "ticketAdvisory", sourceTicketAdvisory), sourceTicketAdvisory));
                copy.ticketAdvisory = null;
                if (copyTicketAdvisory!= null) {
                    List<FreeTextType> uniqueTicketAdvisoryl = copy.getTicketAdvisory();
                    uniqueTicketAdvisoryl.addAll(copyTicketAdvisory);
                }
            } else {
                copy.ticketAdvisory = null;
            }
            if (this.ticketTimeLimit!= null) {
                XMLGregorianCalendar sourceTicketTimeLimit;
                sourceTicketTimeLimit = this.getTicketTimeLimit();
                XMLGregorianCalendar copyTicketTimeLimit = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "ticketTimeLimit", sourceTicketTimeLimit), sourceTicketTimeLimit));
                copy.setTicketTimeLimit(copyTicketTimeLimit);
            } else {
                copy.ticketTimeLimit = null;
            }
            if (this.ticketType!= null) {
                TicketType sourceTicketType;
                sourceTicketType = this.getTicketType();
                TicketType copyTicketType = ((TicketType) strategy.copy(LocatorUtils.property(locator, "ticketType", sourceTicketType), sourceTicketType));
                copy.setTicketType(copyTicketType);
            } else {
                copy.ticketType = null;
            }
            if (this.ticketingStatus!= null) {
                String sourceTicketingStatus;
                sourceTicketingStatus = this.getTicketingStatus();
                String copyTicketingStatus = ((String) strategy.copy(LocatorUtils.property(locator, "ticketingStatus", sourceTicketingStatus), sourceTicketingStatus));
                copy.setTicketingStatus(copyTicketingStatus);
            } else {
                copy.ticketingStatus = null;
            }
            if ((this.flightSegmentRefNumber!= null)&&(!this.flightSegmentRefNumber.isEmpty())) {
                List<String> sourceFlightSegmentRefNumber;
                sourceFlightSegmentRefNumber = (((this.flightSegmentRefNumber!= null)&&(!this.flightSegmentRefNumber.isEmpty()))?this.getFlightSegmentRefNumber():null);
                @SuppressWarnings("unchecked")
                List<String> copyFlightSegmentRefNumber = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "flightSegmentRefNumber", sourceFlightSegmentRefNumber), sourceFlightSegmentRefNumber));
                copy.flightSegmentRefNumber = null;
                if (copyFlightSegmentRefNumber!= null) {
                    List<String> uniqueFlightSegmentRefNumberl = copy.getFlightSegmentRefNumber();
                    uniqueFlightSegmentRefNumberl.addAll(copyFlightSegmentRefNumber);
                }
            } else {
                copy.flightSegmentRefNumber = null;
            }
            if ((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty())) {
                List<String> sourceTravelerRefNumber;
                sourceTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
                @SuppressWarnings("unchecked")
                List<String> copyTravelerRefNumber = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "travelerRefNumber", sourceTravelerRefNumber), sourceTravelerRefNumber));
                copy.travelerRefNumber = null;
                if (copyTravelerRefNumber!= null) {
                    List<String> uniqueTravelerRefNumberl = copy.getTravelerRefNumber();
                    uniqueTravelerRefNumberl.addAll(copyTravelerRefNumber);
                }
            } else {
                copy.travelerRefNumber = null;
            }
            if (this.reverseTktgSegmentsInd!= null) {
                Boolean sourceReverseTktgSegmentsInd;
                sourceReverseTktgSegmentsInd = this.isReverseTktgSegmentsInd();
                Boolean copyReverseTktgSegmentsInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "reverseTktgSegmentsInd", sourceReverseTktgSegmentsInd), sourceReverseTktgSegmentsInd));
                copy.setReverseTktgSegmentsInd(copyReverseTktgSegmentsInd);
            } else {
                copy.reverseTktgSegmentsInd = null;
            }
            if (this.pseudoCityCode!= null) {
                String sourcePseudoCityCode;
                sourcePseudoCityCode = this.getPseudoCityCode();
                String copyPseudoCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "pseudoCityCode", sourcePseudoCityCode), sourcePseudoCityCode));
                copy.setPseudoCityCode(copyPseudoCityCode);
            } else {
                copy.pseudoCityCode = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TicketingInfoType();
    }

}
