//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Specify passenger numbers and types
 * 
 * <p>Java class for TravelerInformationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TravelerInformationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PassengerTypeQuantity" type="{http://www.opentravel.org/OTA/2003/05}PassengerTypeQuantityType" maxOccurs="10"/&gt;
 *         &lt;element name="AirTraveler" type="{http://www.opentravel.org/OTA/2003/05}AirTravelerType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TravelerInformationType", propOrder = {
    "passengerTypeQuantity",
    "airTraveler"
})
public class TravelerInformationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "PassengerTypeQuantity", required = true)
    protected List<PassengerTypeQuantityType> passengerTypeQuantity;
    @XmlElement(name = "AirTraveler")
    protected AirTravelerType airTraveler;

    /**
     * Gets the value of the passengerTypeQuantity property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the passengerTypeQuantity property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPassengerTypeQuantity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PassengerTypeQuantityType }
     * 
     * 
     */
    public List<PassengerTypeQuantityType> getPassengerTypeQuantity() {
        if (passengerTypeQuantity == null) {
            passengerTypeQuantity = new ArrayList<PassengerTypeQuantityType>();
        }
        return this.passengerTypeQuantity;
    }

    /**
     * Gets the value of the airTraveler property.
     * 
     * @return
     *     possible object is
     *     {@link AirTravelerType }
     *     
     */
    public AirTravelerType getAirTraveler() {
        return airTraveler;
    }

    /**
     * Sets the value of the airTraveler property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirTravelerType }
     *     
     */
    public void setAirTraveler(AirTravelerType value) {
        this.airTraveler = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<PassengerTypeQuantityType> thePassengerTypeQuantity;
            thePassengerTypeQuantity = (((this.passengerTypeQuantity!= null)&&(!this.passengerTypeQuantity.isEmpty()))?this.getPassengerTypeQuantity():null);
            strategy.appendField(locator, this, "passengerTypeQuantity", buffer, thePassengerTypeQuantity);
        }
        {
            AirTravelerType theAirTraveler;
            theAirTraveler = this.getAirTraveler();
            strategy.appendField(locator, this, "airTraveler", buffer, theAirTraveler);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TravelerInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TravelerInformationType that = ((TravelerInformationType) object);
        {
            List<PassengerTypeQuantityType> lhsPassengerTypeQuantity;
            lhsPassengerTypeQuantity = (((this.passengerTypeQuantity!= null)&&(!this.passengerTypeQuantity.isEmpty()))?this.getPassengerTypeQuantity():null);
            List<PassengerTypeQuantityType> rhsPassengerTypeQuantity;
            rhsPassengerTypeQuantity = (((that.passengerTypeQuantity!= null)&&(!that.passengerTypeQuantity.isEmpty()))?that.getPassengerTypeQuantity():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeQuantity", lhsPassengerTypeQuantity), LocatorUtils.property(thatLocator, "passengerTypeQuantity", rhsPassengerTypeQuantity), lhsPassengerTypeQuantity, rhsPassengerTypeQuantity)) {
                return false;
            }
        }
        {
            AirTravelerType lhsAirTraveler;
            lhsAirTraveler = this.getAirTraveler();
            AirTravelerType rhsAirTraveler;
            rhsAirTraveler = that.getAirTraveler();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airTraveler", lhsAirTraveler), LocatorUtils.property(thatLocator, "airTraveler", rhsAirTraveler), lhsAirTraveler, rhsAirTraveler)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<PassengerTypeQuantityType> thePassengerTypeQuantity;
            thePassengerTypeQuantity = (((this.passengerTypeQuantity!= null)&&(!this.passengerTypeQuantity.isEmpty()))?this.getPassengerTypeQuantity():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerTypeQuantity", thePassengerTypeQuantity), currentHashCode, thePassengerTypeQuantity);
        }
        {
            AirTravelerType theAirTraveler;
            theAirTraveler = this.getAirTraveler();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airTraveler", theAirTraveler), currentHashCode, theAirTraveler);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TravelerInformationType) {
            final TravelerInformationType copy = ((TravelerInformationType) draftCopy);
            if ((this.passengerTypeQuantity!= null)&&(!this.passengerTypeQuantity.isEmpty())) {
                List<PassengerTypeQuantityType> sourcePassengerTypeQuantity;
                sourcePassengerTypeQuantity = (((this.passengerTypeQuantity!= null)&&(!this.passengerTypeQuantity.isEmpty()))?this.getPassengerTypeQuantity():null);
                @SuppressWarnings("unchecked")
                List<PassengerTypeQuantityType> copyPassengerTypeQuantity = ((List<PassengerTypeQuantityType> ) strategy.copy(LocatorUtils.property(locator, "passengerTypeQuantity", sourcePassengerTypeQuantity), sourcePassengerTypeQuantity));
                copy.passengerTypeQuantity = null;
                if (copyPassengerTypeQuantity!= null) {
                    List<PassengerTypeQuantityType> uniquePassengerTypeQuantityl = copy.getPassengerTypeQuantity();
                    uniquePassengerTypeQuantityl.addAll(copyPassengerTypeQuantity);
                }
            } else {
                copy.passengerTypeQuantity = null;
            }
            if (this.airTraveler!= null) {
                AirTravelerType sourceAirTraveler;
                sourceAirTraveler = this.getAirTraveler();
                AirTravelerType copyAirTraveler = ((AirTravelerType) strategy.copy(LocatorUtils.property(locator, "airTraveler", sourceAirTraveler), sourceAirTraveler));
                copy.setAirTraveler(copyAirTraveler);
            } else {
                copy.airTraveler = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TravelerInformationType();
    }

}
