//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Specify passenger numbers and types
 * 
 * <p>Java class for TravelerInfoSummaryType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TravelerInfoSummaryType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="SeatsRequested" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" maxOccurs="99" minOccurs="0"/&gt;
 *         &lt;element name="AirTravelerAvail" type="{http://www.opentravel.org/OTA/2003/05}TravelerInformationType" maxOccurs="99" minOccurs="0"/&gt;
 *         &lt;element name="PriceRequestInformation" type="{http://www.opentravel.org/OTA/2003/05}PriceRequestInformationType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TravelerInfoSummaryType", propOrder = {
    "seatsRequested",
    "airTravelerAvail",
    "priceRequestInformation"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.OTAAirLowFareSearchRQ.TravelerInfoSummary.class
})
public class TravelerInfoSummaryType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "SeatsRequested")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected List<BigInteger> seatsRequested;
    @XmlElement(name = "AirTravelerAvail")
    protected List<TravelerInformationType> airTravelerAvail;
    @XmlElement(name = "PriceRequestInformation")
    protected PriceRequestInformationType priceRequestInformation;

    /**
     * Gets the value of the seatsRequested property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the seatsRequested property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSeatsRequested().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BigInteger }
     * 
     * 
     */
    public List<BigInteger> getSeatsRequested() {
        if (seatsRequested == null) {
            seatsRequested = new ArrayList<BigInteger>();
        }
        return this.seatsRequested;
    }

    /**
     * Gets the value of the airTravelerAvail property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the airTravelerAvail property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAirTravelerAvail().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TravelerInformationType }
     * 
     * 
     */
    public List<TravelerInformationType> getAirTravelerAvail() {
        if (airTravelerAvail == null) {
            airTravelerAvail = new ArrayList<TravelerInformationType>();
        }
        return this.airTravelerAvail;
    }

    /**
     * Gets the value of the priceRequestInformation property.
     * 
     * @return
     *     possible object is
     *     {@link PriceRequestInformationType }
     *     
     */
    public PriceRequestInformationType getPriceRequestInformation() {
        return priceRequestInformation;
    }

    /**
     * Sets the value of the priceRequestInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link PriceRequestInformationType }
     *     
     */
    public void setPriceRequestInformation(PriceRequestInformationType value) {
        this.priceRequestInformation = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<BigInteger> theSeatsRequested;
            theSeatsRequested = (((this.seatsRequested!= null)&&(!this.seatsRequested.isEmpty()))?this.getSeatsRequested():null);
            strategy.appendField(locator, this, "seatsRequested", buffer, theSeatsRequested);
        }
        {
            List<TravelerInformationType> theAirTravelerAvail;
            theAirTravelerAvail = (((this.airTravelerAvail!= null)&&(!this.airTravelerAvail.isEmpty()))?this.getAirTravelerAvail():null);
            strategy.appendField(locator, this, "airTravelerAvail", buffer, theAirTravelerAvail);
        }
        {
            PriceRequestInformationType thePriceRequestInformation;
            thePriceRequestInformation = this.getPriceRequestInformation();
            strategy.appendField(locator, this, "priceRequestInformation", buffer, thePriceRequestInformation);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TravelerInfoSummaryType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TravelerInfoSummaryType that = ((TravelerInfoSummaryType) object);
        {
            List<BigInteger> lhsSeatsRequested;
            lhsSeatsRequested = (((this.seatsRequested!= null)&&(!this.seatsRequested.isEmpty()))?this.getSeatsRequested():null);
            List<BigInteger> rhsSeatsRequested;
            rhsSeatsRequested = (((that.seatsRequested!= null)&&(!that.seatsRequested.isEmpty()))?that.getSeatsRequested():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seatsRequested", lhsSeatsRequested), LocatorUtils.property(thatLocator, "seatsRequested", rhsSeatsRequested), lhsSeatsRequested, rhsSeatsRequested)) {
                return false;
            }
        }
        {
            List<TravelerInformationType> lhsAirTravelerAvail;
            lhsAirTravelerAvail = (((this.airTravelerAvail!= null)&&(!this.airTravelerAvail.isEmpty()))?this.getAirTravelerAvail():null);
            List<TravelerInformationType> rhsAirTravelerAvail;
            rhsAirTravelerAvail = (((that.airTravelerAvail!= null)&&(!that.airTravelerAvail.isEmpty()))?that.getAirTravelerAvail():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airTravelerAvail", lhsAirTravelerAvail), LocatorUtils.property(thatLocator, "airTravelerAvail", rhsAirTravelerAvail), lhsAirTravelerAvail, rhsAirTravelerAvail)) {
                return false;
            }
        }
        {
            PriceRequestInformationType lhsPriceRequestInformation;
            lhsPriceRequestInformation = this.getPriceRequestInformation();
            PriceRequestInformationType rhsPriceRequestInformation;
            rhsPriceRequestInformation = that.getPriceRequestInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priceRequestInformation", lhsPriceRequestInformation), LocatorUtils.property(thatLocator, "priceRequestInformation", rhsPriceRequestInformation), lhsPriceRequestInformation, rhsPriceRequestInformation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<BigInteger> theSeatsRequested;
            theSeatsRequested = (((this.seatsRequested!= null)&&(!this.seatsRequested.isEmpty()))?this.getSeatsRequested():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatsRequested", theSeatsRequested), currentHashCode, theSeatsRequested);
        }
        {
            List<TravelerInformationType> theAirTravelerAvail;
            theAirTravelerAvail = (((this.airTravelerAvail!= null)&&(!this.airTravelerAvail.isEmpty()))?this.getAirTravelerAvail():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airTravelerAvail", theAirTravelerAvail), currentHashCode, theAirTravelerAvail);
        }
        {
            PriceRequestInformationType thePriceRequestInformation;
            thePriceRequestInformation = this.getPriceRequestInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priceRequestInformation", thePriceRequestInformation), currentHashCode, thePriceRequestInformation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TravelerInfoSummaryType) {
            final TravelerInfoSummaryType copy = ((TravelerInfoSummaryType) draftCopy);
            if ((this.seatsRequested!= null)&&(!this.seatsRequested.isEmpty())) {
                List<BigInteger> sourceSeatsRequested;
                sourceSeatsRequested = (((this.seatsRequested!= null)&&(!this.seatsRequested.isEmpty()))?this.getSeatsRequested():null);
                @SuppressWarnings("unchecked")
                List<BigInteger> copySeatsRequested = ((List<BigInteger> ) strategy.copy(LocatorUtils.property(locator, "seatsRequested", sourceSeatsRequested), sourceSeatsRequested));
                copy.seatsRequested = null;
                if (copySeatsRequested!= null) {
                    List<BigInteger> uniqueSeatsRequestedl = copy.getSeatsRequested();
                    uniqueSeatsRequestedl.addAll(copySeatsRequested);
                }
            } else {
                copy.seatsRequested = null;
            }
            if ((this.airTravelerAvail!= null)&&(!this.airTravelerAvail.isEmpty())) {
                List<TravelerInformationType> sourceAirTravelerAvail;
                sourceAirTravelerAvail = (((this.airTravelerAvail!= null)&&(!this.airTravelerAvail.isEmpty()))?this.getAirTravelerAvail():null);
                @SuppressWarnings("unchecked")
                List<TravelerInformationType> copyAirTravelerAvail = ((List<TravelerInformationType> ) strategy.copy(LocatorUtils.property(locator, "airTravelerAvail", sourceAirTravelerAvail), sourceAirTravelerAvail));
                copy.airTravelerAvail = null;
                if (copyAirTravelerAvail!= null) {
                    List<TravelerInformationType> uniqueAirTravelerAvaill = copy.getAirTravelerAvail();
                    uniqueAirTravelerAvaill.addAll(copyAirTravelerAvail);
                }
            } else {
                copy.airTravelerAvail = null;
            }
            if (this.priceRequestInformation!= null) {
                PriceRequestInformationType sourcePriceRequestInformation;
                sourcePriceRequestInformation = this.getPriceRequestInformation();
                PriceRequestInformationType copyPriceRequestInformation = ((PriceRequestInformationType) strategy.copy(LocatorUtils.property(locator, "priceRequestInformation", sourcePriceRequestInformation), sourcePriceRequestInformation));
                copy.setPriceRequestInformation(copyPriceRequestInformation);
            } else {
                copy.priceRequestInformation = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TravelerInfoSummaryType();
    }

}
