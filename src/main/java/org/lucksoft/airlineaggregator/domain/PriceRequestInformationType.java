//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Identify pricing source, if negotiated fares are requested and if it is a reprice request.
 * 
 * <p>Java class for PriceRequestInformationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PriceRequestInformationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="NegotiatedFareCode" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength1to16"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeListAirGroup"/&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PriceRequestAttributes"/&gt;
 *       &lt;attribute name="CabinType" type="{http://www.opentravel.org/OTA/2003/05}CabinType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PriceRequestInformationType", propOrder = {
    "negotiatedFareCode"
})
public class PriceRequestInformationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "NegotiatedFareCode")
    protected List<PriceRequestInformationType.NegotiatedFareCode> negotiatedFareCode;
    @XmlAttribute(name = "CabinType")
    protected CabinType cabinType;
    @XmlAttribute(name = "FareQualifier")
    protected String fareQualifier;
    @XmlAttribute(name = "NegotiatedFaresOnly")
    protected Boolean negotiatedFaresOnly;
    @XmlAttribute(name = "CurrencyCode")
    protected String currencyCode;
    @XmlAttribute(name = "PricingSource")
    protected PricingSourceType pricingSource;
    @XmlAttribute(name = "Reprice")
    protected Boolean reprice;

    /**
     * Gets the value of the negotiatedFareCode property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the negotiatedFareCode property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNegotiatedFareCode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PriceRequestInformationType.NegotiatedFareCode }
     * 
     * 
     */
    public List<PriceRequestInformationType.NegotiatedFareCode> getNegotiatedFareCode() {
        if (negotiatedFareCode == null) {
            negotiatedFareCode = new ArrayList<PriceRequestInformationType.NegotiatedFareCode>();
        }
        return this.negotiatedFareCode;
    }

    /**
     * Gets the value of the cabinType property.
     * 
     * @return
     *     possible object is
     *     {@link CabinType }
     *     
     */
    public CabinType getCabinType() {
        return cabinType;
    }

    /**
     * Sets the value of the cabinType property.
     * 
     * @param value
     *     allowed object is
     *     {@link CabinType }
     *     
     */
    public void setCabinType(CabinType value) {
        this.cabinType = value;
    }

    /**
     * Gets the value of the fareQualifier property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFareQualifier() {
        return fareQualifier;
    }

    /**
     * Sets the value of the fareQualifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFareQualifier(String value) {
        this.fareQualifier = value;
    }

    /**
     * Gets the value of the negotiatedFaresOnly property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isNegotiatedFaresOnly() {
        return negotiatedFaresOnly;
    }

    /**
     * Sets the value of the negotiatedFaresOnly property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setNegotiatedFaresOnly(Boolean value) {
        this.negotiatedFaresOnly = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the pricingSource property.
     * 
     * @return
     *     possible object is
     *     {@link PricingSourceType }
     *     
     */
    public PricingSourceType getPricingSource() {
        return pricingSource;
    }

    /**
     * Sets the value of the pricingSource property.
     * 
     * @param value
     *     allowed object is
     *     {@link PricingSourceType }
     *     
     */
    public void setPricingSource(PricingSourceType value) {
        this.pricingSource = value;
    }

    /**
     * Gets the value of the reprice property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isReprice() {
        return reprice;
    }

    /**
     * Sets the value of the reprice property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setReprice(Boolean value) {
        this.reprice = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<PriceRequestInformationType.NegotiatedFareCode> theNegotiatedFareCode;
            theNegotiatedFareCode = (((this.negotiatedFareCode!= null)&&(!this.negotiatedFareCode.isEmpty()))?this.getNegotiatedFareCode():null);
            strategy.appendField(locator, this, "negotiatedFareCode", buffer, theNegotiatedFareCode);
        }
        {
            CabinType theCabinType;
            theCabinType = this.getCabinType();
            strategy.appendField(locator, this, "cabinType", buffer, theCabinType);
        }
        {
            String theFareQualifier;
            theFareQualifier = this.getFareQualifier();
            strategy.appendField(locator, this, "fareQualifier", buffer, theFareQualifier);
        }
        {
            Boolean theNegotiatedFaresOnly;
            theNegotiatedFaresOnly = this.isNegotiatedFaresOnly();
            strategy.appendField(locator, this, "negotiatedFaresOnly", buffer, theNegotiatedFaresOnly);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
        }
        {
            PricingSourceType thePricingSource;
            thePricingSource = this.getPricingSource();
            strategy.appendField(locator, this, "pricingSource", buffer, thePricingSource);
        }
        {
            Boolean theReprice;
            theReprice = this.isReprice();
            strategy.appendField(locator, this, "reprice", buffer, theReprice);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PriceRequestInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PriceRequestInformationType that = ((PriceRequestInformationType) object);
        {
            List<PriceRequestInformationType.NegotiatedFareCode> lhsNegotiatedFareCode;
            lhsNegotiatedFareCode = (((this.negotiatedFareCode!= null)&&(!this.negotiatedFareCode.isEmpty()))?this.getNegotiatedFareCode():null);
            List<PriceRequestInformationType.NegotiatedFareCode> rhsNegotiatedFareCode;
            rhsNegotiatedFareCode = (((that.negotiatedFareCode!= null)&&(!that.negotiatedFareCode.isEmpty()))?that.getNegotiatedFareCode():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "negotiatedFareCode", lhsNegotiatedFareCode), LocatorUtils.property(thatLocator, "negotiatedFareCode", rhsNegotiatedFareCode), lhsNegotiatedFareCode, rhsNegotiatedFareCode)) {
                return false;
            }
        }
        {
            CabinType lhsCabinType;
            lhsCabinType = this.getCabinType();
            CabinType rhsCabinType;
            rhsCabinType = that.getCabinType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cabinType", lhsCabinType), LocatorUtils.property(thatLocator, "cabinType", rhsCabinType), lhsCabinType, rhsCabinType)) {
                return false;
            }
        }
        {
            String lhsFareQualifier;
            lhsFareQualifier = this.getFareQualifier();
            String rhsFareQualifier;
            rhsFareQualifier = that.getFareQualifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareQualifier", lhsFareQualifier), LocatorUtils.property(thatLocator, "fareQualifier", rhsFareQualifier), lhsFareQualifier, rhsFareQualifier)) {
                return false;
            }
        }
        {
            Boolean lhsNegotiatedFaresOnly;
            lhsNegotiatedFaresOnly = this.isNegotiatedFaresOnly();
            Boolean rhsNegotiatedFaresOnly;
            rhsNegotiatedFaresOnly = that.isNegotiatedFaresOnly();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "negotiatedFaresOnly", lhsNegotiatedFaresOnly), LocatorUtils.property(thatLocator, "negotiatedFaresOnly", rhsNegotiatedFaresOnly), lhsNegotiatedFaresOnly, rhsNegotiatedFaresOnly)) {
                return false;
            }
        }
        {
            String lhsCurrencyCode;
            lhsCurrencyCode = this.getCurrencyCode();
            String rhsCurrencyCode;
            rhsCurrencyCode = that.getCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                return false;
            }
        }
        {
            PricingSourceType lhsPricingSource;
            lhsPricingSource = this.getPricingSource();
            PricingSourceType rhsPricingSource;
            rhsPricingSource = that.getPricingSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pricingSource", lhsPricingSource), LocatorUtils.property(thatLocator, "pricingSource", rhsPricingSource), lhsPricingSource, rhsPricingSource)) {
                return false;
            }
        }
        {
            Boolean lhsReprice;
            lhsReprice = this.isReprice();
            Boolean rhsReprice;
            rhsReprice = that.isReprice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reprice", lhsReprice), LocatorUtils.property(thatLocator, "reprice", rhsReprice), lhsReprice, rhsReprice)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<PriceRequestInformationType.NegotiatedFareCode> theNegotiatedFareCode;
            theNegotiatedFareCode = (((this.negotiatedFareCode!= null)&&(!this.negotiatedFareCode.isEmpty()))?this.getNegotiatedFareCode():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "negotiatedFareCode", theNegotiatedFareCode), currentHashCode, theNegotiatedFareCode);
        }
        {
            CabinType theCabinType;
            theCabinType = this.getCabinType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cabinType", theCabinType), currentHashCode, theCabinType);
        }
        {
            String theFareQualifier;
            theFareQualifier = this.getFareQualifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareQualifier", theFareQualifier), currentHashCode, theFareQualifier);
        }
        {
            Boolean theNegotiatedFaresOnly;
            theNegotiatedFaresOnly = this.isNegotiatedFaresOnly();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "negotiatedFaresOnly", theNegotiatedFaresOnly), currentHashCode, theNegotiatedFaresOnly);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
        }
        {
            PricingSourceType thePricingSource;
            thePricingSource = this.getPricingSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pricingSource", thePricingSource), currentHashCode, thePricingSource);
        }
        {
            Boolean theReprice;
            theReprice = this.isReprice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reprice", theReprice), currentHashCode, theReprice);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PriceRequestInformationType) {
            final PriceRequestInformationType copy = ((PriceRequestInformationType) draftCopy);
            if ((this.negotiatedFareCode!= null)&&(!this.negotiatedFareCode.isEmpty())) {
                List<PriceRequestInformationType.NegotiatedFareCode> sourceNegotiatedFareCode;
                sourceNegotiatedFareCode = (((this.negotiatedFareCode!= null)&&(!this.negotiatedFareCode.isEmpty()))?this.getNegotiatedFareCode():null);
                @SuppressWarnings("unchecked")
                List<PriceRequestInformationType.NegotiatedFareCode> copyNegotiatedFareCode = ((List<PriceRequestInformationType.NegotiatedFareCode> ) strategy.copy(LocatorUtils.property(locator, "negotiatedFareCode", sourceNegotiatedFareCode), sourceNegotiatedFareCode));
                copy.negotiatedFareCode = null;
                if (copyNegotiatedFareCode!= null) {
                    List<PriceRequestInformationType.NegotiatedFareCode> uniqueNegotiatedFareCodel = copy.getNegotiatedFareCode();
                    uniqueNegotiatedFareCodel.addAll(copyNegotiatedFareCode);
                }
            } else {
                copy.negotiatedFareCode = null;
            }
            if (this.cabinType!= null) {
                CabinType sourceCabinType;
                sourceCabinType = this.getCabinType();
                CabinType copyCabinType = ((CabinType) strategy.copy(LocatorUtils.property(locator, "cabinType", sourceCabinType), sourceCabinType));
                copy.setCabinType(copyCabinType);
            } else {
                copy.cabinType = null;
            }
            if (this.fareQualifier!= null) {
                String sourceFareQualifier;
                sourceFareQualifier = this.getFareQualifier();
                String copyFareQualifier = ((String) strategy.copy(LocatorUtils.property(locator, "fareQualifier", sourceFareQualifier), sourceFareQualifier));
                copy.setFareQualifier(copyFareQualifier);
            } else {
                copy.fareQualifier = null;
            }
            if (this.negotiatedFaresOnly!= null) {
                Boolean sourceNegotiatedFaresOnly;
                sourceNegotiatedFaresOnly = this.isNegotiatedFaresOnly();
                Boolean copyNegotiatedFaresOnly = ((Boolean) strategy.copy(LocatorUtils.property(locator, "negotiatedFaresOnly", sourceNegotiatedFaresOnly), sourceNegotiatedFaresOnly));
                copy.setNegotiatedFaresOnly(copyNegotiatedFaresOnly);
            } else {
                copy.negotiatedFaresOnly = null;
            }
            if (this.currencyCode!= null) {
                String sourceCurrencyCode;
                sourceCurrencyCode = this.getCurrencyCode();
                String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                copy.setCurrencyCode(copyCurrencyCode);
            } else {
                copy.currencyCode = null;
            }
            if (this.pricingSource!= null) {
                PricingSourceType sourcePricingSource;
                sourcePricingSource = this.getPricingSource();
                PricingSourceType copyPricingSource = ((PricingSourceType) strategy.copy(LocatorUtils.property(locator, "pricingSource", sourcePricingSource), sourcePricingSource));
                copy.setPricingSource(copyPricingSource);
            } else {
                copy.pricingSource = null;
            }
            if (this.reprice!= null) {
                Boolean sourceReprice;
                sourceReprice = this.isReprice();
                Boolean copyReprice = ((Boolean) strategy.copy(LocatorUtils.property(locator, "reprice", sourceReprice), sourceReprice));
                copy.setReprice(copyReprice);
            } else {
                copy.reprice = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PriceRequestInformationType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength1to16"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeListAirGroup"/&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class NegotiatedFareCode
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String value;
        @XmlAttribute(name = "SecondaryCode")
        protected String secondaryCode;
        @XmlAttribute(name = "SupplierCode")
        protected String supplierCode;
        @XmlAttribute(name = "URI")
        @XmlSchemaType(name = "anyURI")
        protected String uri;
        @XmlAttribute(name = "Code")
        protected String code;
        @XmlAttribute(name = "CodeContext")
        protected String codeContext;
        @XmlAttribute(name = "Quantity")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger quantity;

        /**
         * Used for Character Strings, length 1 to 16
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Gets the value of the secondaryCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSecondaryCode() {
            return secondaryCode;
        }

        /**
         * Sets the value of the secondaryCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSecondaryCode(String value) {
            this.secondaryCode = value;
        }

        /**
         * Gets the value of the supplierCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSupplierCode() {
            return supplierCode;
        }

        /**
         * Sets the value of the supplierCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSupplierCode(String value) {
            this.supplierCode = value;
        }

        /**
         * Gets the value of the uri property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getURI() {
            return uri;
        }

        /**
         * Sets the value of the uri property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setURI(String value) {
            this.uri = value;
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        /**
         * Gets the value of the codeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCodeContext() {
            return codeContext;
        }

        /**
         * Sets the value of the codeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCodeContext(String value) {
            this.codeContext = value;
        }

        /**
         * Gets the value of the quantity property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getQuantity() {
            return quantity;
        }

        /**
         * Sets the value of the quantity property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setQuantity(BigInteger value) {
            this.quantity = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theValue;
                theValue = this.getValue();
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                String theSecondaryCode;
                theSecondaryCode = this.getSecondaryCode();
                strategy.appendField(locator, this, "secondaryCode", buffer, theSecondaryCode);
            }
            {
                String theSupplierCode;
                theSupplierCode = this.getSupplierCode();
                strategy.appendField(locator, this, "supplierCode", buffer, theSupplierCode);
            }
            {
                String theURI;
                theURI = this.getURI();
                strategy.appendField(locator, this, "uri", buffer, theURI);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                strategy.appendField(locator, this, "codeContext", buffer, theCodeContext);
            }
            {
                BigInteger theQuantity;
                theQuantity = this.getQuantity();
                strategy.appendField(locator, this, "quantity", buffer, theQuantity);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PriceRequestInformationType.NegotiatedFareCode)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PriceRequestInformationType.NegotiatedFareCode that = ((PriceRequestInformationType.NegotiatedFareCode) object);
            {
                String lhsValue;
                lhsValue = this.getValue();
                String rhsValue;
                rhsValue = that.getValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                String lhsSecondaryCode;
                lhsSecondaryCode = this.getSecondaryCode();
                String rhsSecondaryCode;
                rhsSecondaryCode = that.getSecondaryCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "secondaryCode", lhsSecondaryCode), LocatorUtils.property(thatLocator, "secondaryCode", rhsSecondaryCode), lhsSecondaryCode, rhsSecondaryCode)) {
                    return false;
                }
            }
            {
                String lhsSupplierCode;
                lhsSupplierCode = this.getSupplierCode();
                String rhsSupplierCode;
                rhsSupplierCode = that.getSupplierCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "supplierCode", lhsSupplierCode), LocatorUtils.property(thatLocator, "supplierCode", rhsSupplierCode), lhsSupplierCode, rhsSupplierCode)) {
                    return false;
                }
            }
            {
                String lhsURI;
                lhsURI = this.getURI();
                String rhsURI;
                rhsURI = that.getURI();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "uri", lhsURI), LocatorUtils.property(thatLocator, "uri", rhsURI), lhsURI, rhsURI)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            {
                String lhsCodeContext;
                lhsCodeContext = this.getCodeContext();
                String rhsCodeContext;
                rhsCodeContext = that.getCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "codeContext", lhsCodeContext), LocatorUtils.property(thatLocator, "codeContext", rhsCodeContext), lhsCodeContext, rhsCodeContext)) {
                    return false;
                }
            }
            {
                BigInteger lhsQuantity;
                lhsQuantity = this.getQuantity();
                BigInteger rhsQuantity;
                rhsQuantity = that.getQuantity();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theValue;
                theValue = this.getValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                String theSecondaryCode;
                theSecondaryCode = this.getSecondaryCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "secondaryCode", theSecondaryCode), currentHashCode, theSecondaryCode);
            }
            {
                String theSupplierCode;
                theSupplierCode = this.getSupplierCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplierCode", theSupplierCode), currentHashCode, theSupplierCode);
            }
            {
                String theURI;
                theURI = this.getURI();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uri", theURI), currentHashCode, theURI);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeContext", theCodeContext), currentHashCode, theCodeContext);
            }
            {
                BigInteger theQuantity;
                theQuantity = this.getQuantity();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PriceRequestInformationType.NegotiatedFareCode) {
                final PriceRequestInformationType.NegotiatedFareCode copy = ((PriceRequestInformationType.NegotiatedFareCode) draftCopy);
                if (this.value!= null) {
                    String sourceValue;
                    sourceValue = this.getValue();
                    String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.setValue(copyValue);
                } else {
                    copy.value = null;
                }
                if (this.secondaryCode!= null) {
                    String sourceSecondaryCode;
                    sourceSecondaryCode = this.getSecondaryCode();
                    String copySecondaryCode = ((String) strategy.copy(LocatorUtils.property(locator, "secondaryCode", sourceSecondaryCode), sourceSecondaryCode));
                    copy.setSecondaryCode(copySecondaryCode);
                } else {
                    copy.secondaryCode = null;
                }
                if (this.supplierCode!= null) {
                    String sourceSupplierCode;
                    sourceSupplierCode = this.getSupplierCode();
                    String copySupplierCode = ((String) strategy.copy(LocatorUtils.property(locator, "supplierCode", sourceSupplierCode), sourceSupplierCode));
                    copy.setSupplierCode(copySupplierCode);
                } else {
                    copy.supplierCode = null;
                }
                if (this.uri!= null) {
                    String sourceURI;
                    sourceURI = this.getURI();
                    String copyURI = ((String) strategy.copy(LocatorUtils.property(locator, "uri", sourceURI), sourceURI));
                    copy.setURI(copyURI);
                } else {
                    copy.uri = null;
                }
                if (this.code!= null) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
                if (this.codeContext!= null) {
                    String sourceCodeContext;
                    sourceCodeContext = this.getCodeContext();
                    String copyCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "codeContext", sourceCodeContext), sourceCodeContext));
                    copy.setCodeContext(copyCodeContext);
                } else {
                    copy.codeContext = null;
                }
                if (this.quantity!= null) {
                    BigInteger sourceQuantity;
                    sourceQuantity = this.getQuantity();
                    BigInteger copyQuantity = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "quantity", sourceQuantity), sourceQuantity));
                    copy.setQuantity(copyQuantity);
                } else {
                    copy.quantity = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PriceRequestInformationType.NegotiatedFareCode();
        }

    }

}
