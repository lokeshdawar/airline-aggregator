//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Contains summary fare rule information as well as detailed Rule Information for Fare Basis Codes.  Information may be actual rules data or the results returned from a rules-based inquiry.
 * 
 * <p>Java class for RuleInfoType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RuleInfoType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="ResTicketingRules" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="AdvResTicketing" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AdvResTicketingType"&gt;
 *                           &lt;attribute name="FirstTicketDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *                           &lt;attribute name="LastTicketDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="LengthOfStayRules" type="{http://www.opentravel.org/OTA/2003/05}StayRestrictionsType" minOccurs="0"/&gt;
 *         &lt;element name="ChargesRules" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="VoluntaryChanges" type="{http://www.opentravel.org/OTA/2003/05}VoluntaryChangesType" minOccurs="0"/&gt;
 *                   &lt;element name="VoluntaryRefunds" type="{http://www.opentravel.org/OTA/2003/05}VoluntaryChangesType" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RuleInfoType", propOrder = {
    "resTicketingRules",
    "lengthOfStayRules",
    "chargesRules"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.FareInfoType.RuleInfo.class
})
public class RuleInfoType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "ResTicketingRules")
    protected RuleInfoType.ResTicketingRules resTicketingRules;
    @XmlElement(name = "LengthOfStayRules")
    protected StayRestrictionsType lengthOfStayRules;
    @XmlElement(name = "ChargesRules")
    protected RuleInfoType.ChargesRules chargesRules;

    /**
     * Gets the value of the resTicketingRules property.
     * 
     * @return
     *     possible object is
     *     {@link RuleInfoType.ResTicketingRules }
     *     
     */
    public RuleInfoType.ResTicketingRules getResTicketingRules() {
        return resTicketingRules;
    }

    /**
     * Sets the value of the resTicketingRules property.
     * 
     * @param value
     *     allowed object is
     *     {@link RuleInfoType.ResTicketingRules }
     *     
     */
    public void setResTicketingRules(RuleInfoType.ResTicketingRules value) {
        this.resTicketingRules = value;
    }

    /**
     * Gets the value of the lengthOfStayRules property.
     * 
     * @return
     *     possible object is
     *     {@link StayRestrictionsType }
     *     
     */
    public StayRestrictionsType getLengthOfStayRules() {
        return lengthOfStayRules;
    }

    /**
     * Sets the value of the lengthOfStayRules property.
     * 
     * @param value
     *     allowed object is
     *     {@link StayRestrictionsType }
     *     
     */
    public void setLengthOfStayRules(StayRestrictionsType value) {
        this.lengthOfStayRules = value;
    }

    /**
     * Gets the value of the chargesRules property.
     * 
     * @return
     *     possible object is
     *     {@link RuleInfoType.ChargesRules }
     *     
     */
    public RuleInfoType.ChargesRules getChargesRules() {
        return chargesRules;
    }

    /**
     * Sets the value of the chargesRules property.
     * 
     * @param value
     *     allowed object is
     *     {@link RuleInfoType.ChargesRules }
     *     
     */
    public void setChargesRules(RuleInfoType.ChargesRules value) {
        this.chargesRules = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            RuleInfoType.ResTicketingRules theResTicketingRules;
            theResTicketingRules = this.getResTicketingRules();
            strategy.appendField(locator, this, "resTicketingRules", buffer, theResTicketingRules);
        }
        {
            StayRestrictionsType theLengthOfStayRules;
            theLengthOfStayRules = this.getLengthOfStayRules();
            strategy.appendField(locator, this, "lengthOfStayRules", buffer, theLengthOfStayRules);
        }
        {
            RuleInfoType.ChargesRules theChargesRules;
            theChargesRules = this.getChargesRules();
            strategy.appendField(locator, this, "chargesRules", buffer, theChargesRules);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RuleInfoType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RuleInfoType that = ((RuleInfoType) object);
        {
            RuleInfoType.ResTicketingRules lhsResTicketingRules;
            lhsResTicketingRules = this.getResTicketingRules();
            RuleInfoType.ResTicketingRules rhsResTicketingRules;
            rhsResTicketingRules = that.getResTicketingRules();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resTicketingRules", lhsResTicketingRules), LocatorUtils.property(thatLocator, "resTicketingRules", rhsResTicketingRules), lhsResTicketingRules, rhsResTicketingRules)) {
                return false;
            }
        }
        {
            StayRestrictionsType lhsLengthOfStayRules;
            lhsLengthOfStayRules = this.getLengthOfStayRules();
            StayRestrictionsType rhsLengthOfStayRules;
            rhsLengthOfStayRules = that.getLengthOfStayRules();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lengthOfStayRules", lhsLengthOfStayRules), LocatorUtils.property(thatLocator, "lengthOfStayRules", rhsLengthOfStayRules), lhsLengthOfStayRules, rhsLengthOfStayRules)) {
                return false;
            }
        }
        {
            RuleInfoType.ChargesRules lhsChargesRules;
            lhsChargesRules = this.getChargesRules();
            RuleInfoType.ChargesRules rhsChargesRules;
            rhsChargesRules = that.getChargesRules();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "chargesRules", lhsChargesRules), LocatorUtils.property(thatLocator, "chargesRules", rhsChargesRules), lhsChargesRules, rhsChargesRules)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            RuleInfoType.ResTicketingRules theResTicketingRules;
            theResTicketingRules = this.getResTicketingRules();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resTicketingRules", theResTicketingRules), currentHashCode, theResTicketingRules);
        }
        {
            StayRestrictionsType theLengthOfStayRules;
            theLengthOfStayRules = this.getLengthOfStayRules();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lengthOfStayRules", theLengthOfStayRules), currentHashCode, theLengthOfStayRules);
        }
        {
            RuleInfoType.ChargesRules theChargesRules;
            theChargesRules = this.getChargesRules();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chargesRules", theChargesRules), currentHashCode, theChargesRules);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof RuleInfoType) {
            final RuleInfoType copy = ((RuleInfoType) draftCopy);
            if (this.resTicketingRules!= null) {
                RuleInfoType.ResTicketingRules sourceResTicketingRules;
                sourceResTicketingRules = this.getResTicketingRules();
                RuleInfoType.ResTicketingRules copyResTicketingRules = ((RuleInfoType.ResTicketingRules) strategy.copy(LocatorUtils.property(locator, "resTicketingRules", sourceResTicketingRules), sourceResTicketingRules));
                copy.setResTicketingRules(copyResTicketingRules);
            } else {
                copy.resTicketingRules = null;
            }
            if (this.lengthOfStayRules!= null) {
                StayRestrictionsType sourceLengthOfStayRules;
                sourceLengthOfStayRules = this.getLengthOfStayRules();
                StayRestrictionsType copyLengthOfStayRules = ((StayRestrictionsType) strategy.copy(LocatorUtils.property(locator, "lengthOfStayRules", sourceLengthOfStayRules), sourceLengthOfStayRules));
                copy.setLengthOfStayRules(copyLengthOfStayRules);
            } else {
                copy.lengthOfStayRules = null;
            }
            if (this.chargesRules!= null) {
                RuleInfoType.ChargesRules sourceChargesRules;
                sourceChargesRules = this.getChargesRules();
                RuleInfoType.ChargesRules copyChargesRules = ((RuleInfoType.ChargesRules) strategy.copy(LocatorUtils.property(locator, "chargesRules", sourceChargesRules), sourceChargesRules));
                copy.setChargesRules(copyChargesRules);
            } else {
                copy.chargesRules = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RuleInfoType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="VoluntaryChanges" type="{http://www.opentravel.org/OTA/2003/05}VoluntaryChangesType" minOccurs="0"/&gt;
     *         &lt;element name="VoluntaryRefunds" type="{http://www.opentravel.org/OTA/2003/05}VoluntaryChangesType" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "voluntaryChanges",
        "voluntaryRefunds"
    })
    public static class ChargesRules
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "VoluntaryChanges")
        protected VoluntaryChangesType voluntaryChanges;
        @XmlElement(name = "VoluntaryRefunds")
        protected VoluntaryChangesType voluntaryRefunds;

        /**
         * Gets the value of the voluntaryChanges property.
         * 
         * @return
         *     possible object is
         *     {@link VoluntaryChangesType }
         *     
         */
        public VoluntaryChangesType getVoluntaryChanges() {
            return voluntaryChanges;
        }

        /**
         * Sets the value of the voluntaryChanges property.
         * 
         * @param value
         *     allowed object is
         *     {@link VoluntaryChangesType }
         *     
         */
        public void setVoluntaryChanges(VoluntaryChangesType value) {
            this.voluntaryChanges = value;
        }

        /**
         * Gets the value of the voluntaryRefunds property.
         * 
         * @return
         *     possible object is
         *     {@link VoluntaryChangesType }
         *     
         */
        public VoluntaryChangesType getVoluntaryRefunds() {
            return voluntaryRefunds;
        }

        /**
         * Sets the value of the voluntaryRefunds property.
         * 
         * @param value
         *     allowed object is
         *     {@link VoluntaryChangesType }
         *     
         */
        public void setVoluntaryRefunds(VoluntaryChangesType value) {
            this.voluntaryRefunds = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                VoluntaryChangesType theVoluntaryChanges;
                theVoluntaryChanges = this.getVoluntaryChanges();
                strategy.appendField(locator, this, "voluntaryChanges", buffer, theVoluntaryChanges);
            }
            {
                VoluntaryChangesType theVoluntaryRefunds;
                theVoluntaryRefunds = this.getVoluntaryRefunds();
                strategy.appendField(locator, this, "voluntaryRefunds", buffer, theVoluntaryRefunds);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RuleInfoType.ChargesRules)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final RuleInfoType.ChargesRules that = ((RuleInfoType.ChargesRules) object);
            {
                VoluntaryChangesType lhsVoluntaryChanges;
                lhsVoluntaryChanges = this.getVoluntaryChanges();
                VoluntaryChangesType rhsVoluntaryChanges;
                rhsVoluntaryChanges = that.getVoluntaryChanges();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "voluntaryChanges", lhsVoluntaryChanges), LocatorUtils.property(thatLocator, "voluntaryChanges", rhsVoluntaryChanges), lhsVoluntaryChanges, rhsVoluntaryChanges)) {
                    return false;
                }
            }
            {
                VoluntaryChangesType lhsVoluntaryRefunds;
                lhsVoluntaryRefunds = this.getVoluntaryRefunds();
                VoluntaryChangesType rhsVoluntaryRefunds;
                rhsVoluntaryRefunds = that.getVoluntaryRefunds();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "voluntaryRefunds", lhsVoluntaryRefunds), LocatorUtils.property(thatLocator, "voluntaryRefunds", rhsVoluntaryRefunds), lhsVoluntaryRefunds, rhsVoluntaryRefunds)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                VoluntaryChangesType theVoluntaryChanges;
                theVoluntaryChanges = this.getVoluntaryChanges();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "voluntaryChanges", theVoluntaryChanges), currentHashCode, theVoluntaryChanges);
            }
            {
                VoluntaryChangesType theVoluntaryRefunds;
                theVoluntaryRefunds = this.getVoluntaryRefunds();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "voluntaryRefunds", theVoluntaryRefunds), currentHashCode, theVoluntaryRefunds);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof RuleInfoType.ChargesRules) {
                final RuleInfoType.ChargesRules copy = ((RuleInfoType.ChargesRules) draftCopy);
                if (this.voluntaryChanges!= null) {
                    VoluntaryChangesType sourceVoluntaryChanges;
                    sourceVoluntaryChanges = this.getVoluntaryChanges();
                    VoluntaryChangesType copyVoluntaryChanges = ((VoluntaryChangesType) strategy.copy(LocatorUtils.property(locator, "voluntaryChanges", sourceVoluntaryChanges), sourceVoluntaryChanges));
                    copy.setVoluntaryChanges(copyVoluntaryChanges);
                } else {
                    copy.voluntaryChanges = null;
                }
                if (this.voluntaryRefunds!= null) {
                    VoluntaryChangesType sourceVoluntaryRefunds;
                    sourceVoluntaryRefunds = this.getVoluntaryRefunds();
                    VoluntaryChangesType copyVoluntaryRefunds = ((VoluntaryChangesType) strategy.copy(LocatorUtils.property(locator, "voluntaryRefunds", sourceVoluntaryRefunds), sourceVoluntaryRefunds));
                    copy.setVoluntaryRefunds(copyVoluntaryRefunds);
                } else {
                    copy.voluntaryRefunds = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RuleInfoType.ChargesRules();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="AdvResTicketing" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AdvResTicketingType"&gt;
     *                 &lt;attribute name="FirstTicketDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
     *                 &lt;attribute name="LastTicketDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "advResTicketing"
    })
    public static class ResTicketingRules
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AdvResTicketing")
        protected RuleInfoType.ResTicketingRules.AdvResTicketing advResTicketing;

        /**
         * Gets the value of the advResTicketing property.
         * 
         * @return
         *     possible object is
         *     {@link RuleInfoType.ResTicketingRules.AdvResTicketing }
         *     
         */
        public RuleInfoType.ResTicketingRules.AdvResTicketing getAdvResTicketing() {
            return advResTicketing;
        }

        /**
         * Sets the value of the advResTicketing property.
         * 
         * @param value
         *     allowed object is
         *     {@link RuleInfoType.ResTicketingRules.AdvResTicketing }
         *     
         */
        public void setAdvResTicketing(RuleInfoType.ResTicketingRules.AdvResTicketing value) {
            this.advResTicketing = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                RuleInfoType.ResTicketingRules.AdvResTicketing theAdvResTicketing;
                theAdvResTicketing = this.getAdvResTicketing();
                strategy.appendField(locator, this, "advResTicketing", buffer, theAdvResTicketing);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RuleInfoType.ResTicketingRules)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final RuleInfoType.ResTicketingRules that = ((RuleInfoType.ResTicketingRules) object);
            {
                RuleInfoType.ResTicketingRules.AdvResTicketing lhsAdvResTicketing;
                lhsAdvResTicketing = this.getAdvResTicketing();
                RuleInfoType.ResTicketingRules.AdvResTicketing rhsAdvResTicketing;
                rhsAdvResTicketing = that.getAdvResTicketing();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "advResTicketing", lhsAdvResTicketing), LocatorUtils.property(thatLocator, "advResTicketing", rhsAdvResTicketing), lhsAdvResTicketing, rhsAdvResTicketing)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                RuleInfoType.ResTicketingRules.AdvResTicketing theAdvResTicketing;
                theAdvResTicketing = this.getAdvResTicketing();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "advResTicketing", theAdvResTicketing), currentHashCode, theAdvResTicketing);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof RuleInfoType.ResTicketingRules) {
                final RuleInfoType.ResTicketingRules copy = ((RuleInfoType.ResTicketingRules) draftCopy);
                if (this.advResTicketing!= null) {
                    RuleInfoType.ResTicketingRules.AdvResTicketing sourceAdvResTicketing;
                    sourceAdvResTicketing = this.getAdvResTicketing();
                    RuleInfoType.ResTicketingRules.AdvResTicketing copyAdvResTicketing = ((RuleInfoType.ResTicketingRules.AdvResTicketing) strategy.copy(LocatorUtils.property(locator, "advResTicketing", sourceAdvResTicketing), sourceAdvResTicketing));
                    copy.setAdvResTicketing(copyAdvResTicketing);
                } else {
                    copy.advResTicketing = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RuleInfoType.ResTicketingRules();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AdvResTicketingType"&gt;
         *       &lt;attribute name="FirstTicketDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
         *       &lt;attribute name="LastTicketDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class AdvResTicketing
            extends AdvResTicketingType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "FirstTicketDate")
            protected String firstTicketDate;
            @XmlAttribute(name = "LastTicketDate")
            protected String lastTicketDate;

            /**
             * Gets the value of the firstTicketDate property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getFirstTicketDate() {
                return firstTicketDate;
            }

            /**
             * Sets the value of the firstTicketDate property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setFirstTicketDate(String value) {
                this.firstTicketDate = value;
            }

            /**
             * Gets the value of the lastTicketDate property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getLastTicketDate() {
                return lastTicketDate;
            }

            /**
             * Sets the value of the lastTicketDate property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setLastTicketDate(String value) {
                this.lastTicketDate = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                {
                    String theFirstTicketDate;
                    theFirstTicketDate = this.getFirstTicketDate();
                    strategy.appendField(locator, this, "firstTicketDate", buffer, theFirstTicketDate);
                }
                {
                    String theLastTicketDate;
                    theLastTicketDate = this.getLastTicketDate();
                    strategy.appendField(locator, this, "lastTicketDate", buffer, theLastTicketDate);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof RuleInfoType.ResTicketingRules.AdvResTicketing)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                final RuleInfoType.ResTicketingRules.AdvResTicketing that = ((RuleInfoType.ResTicketingRules.AdvResTicketing) object);
                {
                    String lhsFirstTicketDate;
                    lhsFirstTicketDate = this.getFirstTicketDate();
                    String rhsFirstTicketDate;
                    rhsFirstTicketDate = that.getFirstTicketDate();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "firstTicketDate", lhsFirstTicketDate), LocatorUtils.property(thatLocator, "firstTicketDate", rhsFirstTicketDate), lhsFirstTicketDate, rhsFirstTicketDate)) {
                        return false;
                    }
                }
                {
                    String lhsLastTicketDate;
                    lhsLastTicketDate = this.getLastTicketDate();
                    String rhsLastTicketDate;
                    rhsLastTicketDate = that.getLastTicketDate();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "lastTicketDate", lhsLastTicketDate), LocatorUtils.property(thatLocator, "lastTicketDate", rhsLastTicketDate), lhsLastTicketDate, rhsLastTicketDate)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                {
                    String theFirstTicketDate;
                    theFirstTicketDate = this.getFirstTicketDate();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "firstTicketDate", theFirstTicketDate), currentHashCode, theFirstTicketDate);
                }
                {
                    String theLastTicketDate;
                    theLastTicketDate = this.getLastTicketDate();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastTicketDate", theLastTicketDate), currentHashCode, theLastTicketDate);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                if (draftCopy instanceof RuleInfoType.ResTicketingRules.AdvResTicketing) {
                    final RuleInfoType.ResTicketingRules.AdvResTicketing copy = ((RuleInfoType.ResTicketingRules.AdvResTicketing) draftCopy);
                    if (this.firstTicketDate!= null) {
                        String sourceFirstTicketDate;
                        sourceFirstTicketDate = this.getFirstTicketDate();
                        String copyFirstTicketDate = ((String) strategy.copy(LocatorUtils.property(locator, "firstTicketDate", sourceFirstTicketDate), sourceFirstTicketDate));
                        copy.setFirstTicketDate(copyFirstTicketDate);
                    } else {
                        copy.firstTicketDate = null;
                    }
                    if (this.lastTicketDate!= null) {
                        String sourceLastTicketDate;
                        sourceLastTicketDate = this.getLastTicketDate();
                        String copyLastTicketDate = ((String) strategy.copy(LocatorUtils.property(locator, "lastTicketDate", sourceLastTicketDate), sourceLastTicketDate));
                        copy.setLastTicketDate(copyLastTicketDate);
                    } else {
                        copy.lastTicketDate = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new RuleInfoType.ResTicketingRules.AdvResTicketing();
            }

        }

    }

}
