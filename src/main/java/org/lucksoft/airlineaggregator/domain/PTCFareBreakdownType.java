//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Per passenger type code pricing for this itinerary. Set if fareBreakdown was requested.
 * 
 * <p>Java class for PTCFareBreakdownType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PTCFareBreakdownType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PassengerTypeQuantity" type="{http://www.opentravel.org/OTA/2003/05}PassengerTypeQuantityType"/&gt;
 *         &lt;element name="FareBasisCodes"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="FareBasisCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" maxOccurs="10"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="PassengerFare" type="{http://www.opentravel.org/OTA/2003/05}FareType"/&gt;
 *         &lt;element name="TravelerRefNumber" maxOccurs="99" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TravelerRefNumberGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="TicketDesignators" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="TicketDesignator" maxOccurs="10"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attribute name="FlightRefRPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *                           &lt;attribute name="TicketDesignatorCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                           &lt;attribute name="TicketDesignatorExtension" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Endorsements" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Endorsement" maxOccurs="9"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;simpleContent&gt;
 *                         &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FreeTextType"&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/simpleContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="NonRefundableIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="NonEndorsableIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FareInfo" maxOccurs="99" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}FareInfoType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="PassengerFare" type="{http://www.opentravel.org/OTA/2003/05}FareType"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="PricingSource" type="{http://www.opentravel.org/OTA/2003/05}PricingSourceType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PTCFareBreakdownType", propOrder = {
    "passengerTypeQuantity",
    "fareBasisCodes",
    "passengerFare",
    "travelerRefNumber",
    "ticketDesignators",
    "endorsements",
    "fareInfo"
})
public class PTCFareBreakdownType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "PassengerTypeQuantity", required = true)
    protected PassengerTypeQuantityType passengerTypeQuantity;
    @XmlElement(name = "FareBasisCodes", required = true)
    protected PTCFareBreakdownType.FareBasisCodes fareBasisCodes;
    @XmlElement(name = "PassengerFare", required = true)
    protected FareType passengerFare;
    @XmlElement(name = "TravelerRefNumber")
    protected List<PTCFareBreakdownType.TravelerRefNumber> travelerRefNumber;
    @XmlElement(name = "TicketDesignators")
    protected PTCFareBreakdownType.TicketDesignators ticketDesignators;
    @XmlElement(name = "Endorsements")
    protected PTCFareBreakdownType.Endorsements endorsements;
    @XmlElement(name = "FareInfo")
    protected List<PTCFareBreakdownType.FareInfo> fareInfo;
    @XmlAttribute(name = "PricingSource")
    protected PricingSourceType pricingSource;

    /**
     * Gets the value of the passengerTypeQuantity property.
     * 
     * @return
     *     possible object is
     *     {@link PassengerTypeQuantityType }
     *     
     */
    public PassengerTypeQuantityType getPassengerTypeQuantity() {
        return passengerTypeQuantity;
    }

    /**
     * Sets the value of the passengerTypeQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link PassengerTypeQuantityType }
     *     
     */
    public void setPassengerTypeQuantity(PassengerTypeQuantityType value) {
        this.passengerTypeQuantity = value;
    }

    /**
     * Gets the value of the fareBasisCodes property.
     * 
     * @return
     *     possible object is
     *     {@link PTCFareBreakdownType.FareBasisCodes }
     *     
     */
    public PTCFareBreakdownType.FareBasisCodes getFareBasisCodes() {
        return fareBasisCodes;
    }

    /**
     * Sets the value of the fareBasisCodes property.
     * 
     * @param value
     *     allowed object is
     *     {@link PTCFareBreakdownType.FareBasisCodes }
     *     
     */
    public void setFareBasisCodes(PTCFareBreakdownType.FareBasisCodes value) {
        this.fareBasisCodes = value;
    }

    /**
     * Gets the value of the passengerFare property.
     * 
     * @return
     *     possible object is
     *     {@link FareType }
     *     
     */
    public FareType getPassengerFare() {
        return passengerFare;
    }

    /**
     * Sets the value of the passengerFare property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareType }
     *     
     */
    public void setPassengerFare(FareType value) {
        this.passengerFare = value;
    }

    /**
     * Gets the value of the travelerRefNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the travelerRefNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTravelerRefNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PTCFareBreakdownType.TravelerRefNumber }
     * 
     * 
     */
    public List<PTCFareBreakdownType.TravelerRefNumber> getTravelerRefNumber() {
        if (travelerRefNumber == null) {
            travelerRefNumber = new ArrayList<PTCFareBreakdownType.TravelerRefNumber>();
        }
        return this.travelerRefNumber;
    }

    /**
     * Gets the value of the ticketDesignators property.
     * 
     * @return
     *     possible object is
     *     {@link PTCFareBreakdownType.TicketDesignators }
     *     
     */
    public PTCFareBreakdownType.TicketDesignators getTicketDesignators() {
        return ticketDesignators;
    }

    /**
     * Sets the value of the ticketDesignators property.
     * 
     * @param value
     *     allowed object is
     *     {@link PTCFareBreakdownType.TicketDesignators }
     *     
     */
    public void setTicketDesignators(PTCFareBreakdownType.TicketDesignators value) {
        this.ticketDesignators = value;
    }

    /**
     * Gets the value of the endorsements property.
     * 
     * @return
     *     possible object is
     *     {@link PTCFareBreakdownType.Endorsements }
     *     
     */
    public PTCFareBreakdownType.Endorsements getEndorsements() {
        return endorsements;
    }

    /**
     * Sets the value of the endorsements property.
     * 
     * @param value
     *     allowed object is
     *     {@link PTCFareBreakdownType.Endorsements }
     *     
     */
    public void setEndorsements(PTCFareBreakdownType.Endorsements value) {
        this.endorsements = value;
    }

    /**
     * Gets the value of the fareInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fareInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFareInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PTCFareBreakdownType.FareInfo }
     * 
     * 
     */
    public List<PTCFareBreakdownType.FareInfo> getFareInfo() {
        if (fareInfo == null) {
            fareInfo = new ArrayList<PTCFareBreakdownType.FareInfo>();
        }
        return this.fareInfo;
    }

    /**
     * Gets the value of the pricingSource property.
     * 
     * @return
     *     possible object is
     *     {@link PricingSourceType }
     *     
     */
    public PricingSourceType getPricingSource() {
        return pricingSource;
    }

    /**
     * Sets the value of the pricingSource property.
     * 
     * @param value
     *     allowed object is
     *     {@link PricingSourceType }
     *     
     */
    public void setPricingSource(PricingSourceType value) {
        this.pricingSource = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            PassengerTypeQuantityType thePassengerTypeQuantity;
            thePassengerTypeQuantity = this.getPassengerTypeQuantity();
            strategy.appendField(locator, this, "passengerTypeQuantity", buffer, thePassengerTypeQuantity);
        }
        {
            PTCFareBreakdownType.FareBasisCodes theFareBasisCodes;
            theFareBasisCodes = this.getFareBasisCodes();
            strategy.appendField(locator, this, "fareBasisCodes", buffer, theFareBasisCodes);
        }
        {
            FareType thePassengerFare;
            thePassengerFare = this.getPassengerFare();
            strategy.appendField(locator, this, "passengerFare", buffer, thePassengerFare);
        }
        {
            List<PTCFareBreakdownType.TravelerRefNumber> theTravelerRefNumber;
            theTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            strategy.appendField(locator, this, "travelerRefNumber", buffer, theTravelerRefNumber);
        }
        {
            PTCFareBreakdownType.TicketDesignators theTicketDesignators;
            theTicketDesignators = this.getTicketDesignators();
            strategy.appendField(locator, this, "ticketDesignators", buffer, theTicketDesignators);
        }
        {
            PTCFareBreakdownType.Endorsements theEndorsements;
            theEndorsements = this.getEndorsements();
            strategy.appendField(locator, this, "endorsements", buffer, theEndorsements);
        }
        {
            List<PTCFareBreakdownType.FareInfo> theFareInfo;
            theFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
            strategy.appendField(locator, this, "fareInfo", buffer, theFareInfo);
        }
        {
            PricingSourceType thePricingSource;
            thePricingSource = this.getPricingSource();
            strategy.appendField(locator, this, "pricingSource", buffer, thePricingSource);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PTCFareBreakdownType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PTCFareBreakdownType that = ((PTCFareBreakdownType) object);
        {
            PassengerTypeQuantityType lhsPassengerTypeQuantity;
            lhsPassengerTypeQuantity = this.getPassengerTypeQuantity();
            PassengerTypeQuantityType rhsPassengerTypeQuantity;
            rhsPassengerTypeQuantity = that.getPassengerTypeQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeQuantity", lhsPassengerTypeQuantity), LocatorUtils.property(thatLocator, "passengerTypeQuantity", rhsPassengerTypeQuantity), lhsPassengerTypeQuantity, rhsPassengerTypeQuantity)) {
                return false;
            }
        }
        {
            PTCFareBreakdownType.FareBasisCodes lhsFareBasisCodes;
            lhsFareBasisCodes = this.getFareBasisCodes();
            PTCFareBreakdownType.FareBasisCodes rhsFareBasisCodes;
            rhsFareBasisCodes = that.getFareBasisCodes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareBasisCodes", lhsFareBasisCodes), LocatorUtils.property(thatLocator, "fareBasisCodes", rhsFareBasisCodes), lhsFareBasisCodes, rhsFareBasisCodes)) {
                return false;
            }
        }
        {
            FareType lhsPassengerFare;
            lhsPassengerFare = this.getPassengerFare();
            FareType rhsPassengerFare;
            rhsPassengerFare = that.getPassengerFare();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerFare", lhsPassengerFare), LocatorUtils.property(thatLocator, "passengerFare", rhsPassengerFare), lhsPassengerFare, rhsPassengerFare)) {
                return false;
            }
        }
        {
            List<PTCFareBreakdownType.TravelerRefNumber> lhsTravelerRefNumber;
            lhsTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            List<PTCFareBreakdownType.TravelerRefNumber> rhsTravelerRefNumber;
            rhsTravelerRefNumber = (((that.travelerRefNumber!= null)&&(!that.travelerRefNumber.isEmpty()))?that.getTravelerRefNumber():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerRefNumber", lhsTravelerRefNumber), LocatorUtils.property(thatLocator, "travelerRefNumber", rhsTravelerRefNumber), lhsTravelerRefNumber, rhsTravelerRefNumber)) {
                return false;
            }
        }
        {
            PTCFareBreakdownType.TicketDesignators lhsTicketDesignators;
            lhsTicketDesignators = this.getTicketDesignators();
            PTCFareBreakdownType.TicketDesignators rhsTicketDesignators;
            rhsTicketDesignators = that.getTicketDesignators();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDesignators", lhsTicketDesignators), LocatorUtils.property(thatLocator, "ticketDesignators", rhsTicketDesignators), lhsTicketDesignators, rhsTicketDesignators)) {
                return false;
            }
        }
        {
            PTCFareBreakdownType.Endorsements lhsEndorsements;
            lhsEndorsements = this.getEndorsements();
            PTCFareBreakdownType.Endorsements rhsEndorsements;
            rhsEndorsements = that.getEndorsements();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endorsements", lhsEndorsements), LocatorUtils.property(thatLocator, "endorsements", rhsEndorsements), lhsEndorsements, rhsEndorsements)) {
                return false;
            }
        }
        {
            List<PTCFareBreakdownType.FareInfo> lhsFareInfo;
            lhsFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
            List<PTCFareBreakdownType.FareInfo> rhsFareInfo;
            rhsFareInfo = (((that.fareInfo!= null)&&(!that.fareInfo.isEmpty()))?that.getFareInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareInfo", lhsFareInfo), LocatorUtils.property(thatLocator, "fareInfo", rhsFareInfo), lhsFareInfo, rhsFareInfo)) {
                return false;
            }
        }
        {
            PricingSourceType lhsPricingSource;
            lhsPricingSource = this.getPricingSource();
            PricingSourceType rhsPricingSource;
            rhsPricingSource = that.getPricingSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pricingSource", lhsPricingSource), LocatorUtils.property(thatLocator, "pricingSource", rhsPricingSource), lhsPricingSource, rhsPricingSource)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            PassengerTypeQuantityType thePassengerTypeQuantity;
            thePassengerTypeQuantity = this.getPassengerTypeQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerTypeQuantity", thePassengerTypeQuantity), currentHashCode, thePassengerTypeQuantity);
        }
        {
            PTCFareBreakdownType.FareBasisCodes theFareBasisCodes;
            theFareBasisCodes = this.getFareBasisCodes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareBasisCodes", theFareBasisCodes), currentHashCode, theFareBasisCodes);
        }
        {
            FareType thePassengerFare;
            thePassengerFare = this.getPassengerFare();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerFare", thePassengerFare), currentHashCode, thePassengerFare);
        }
        {
            List<PTCFareBreakdownType.TravelerRefNumber> theTravelerRefNumber;
            theTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerRefNumber", theTravelerRefNumber), currentHashCode, theTravelerRefNumber);
        }
        {
            PTCFareBreakdownType.TicketDesignators theTicketDesignators;
            theTicketDesignators = this.getTicketDesignators();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDesignators", theTicketDesignators), currentHashCode, theTicketDesignators);
        }
        {
            PTCFareBreakdownType.Endorsements theEndorsements;
            theEndorsements = this.getEndorsements();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endorsements", theEndorsements), currentHashCode, theEndorsements);
        }
        {
            List<PTCFareBreakdownType.FareInfo> theFareInfo;
            theFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareInfo", theFareInfo), currentHashCode, theFareInfo);
        }
        {
            PricingSourceType thePricingSource;
            thePricingSource = this.getPricingSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pricingSource", thePricingSource), currentHashCode, thePricingSource);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PTCFareBreakdownType) {
            final PTCFareBreakdownType copy = ((PTCFareBreakdownType) draftCopy);
            if (this.passengerTypeQuantity!= null) {
                PassengerTypeQuantityType sourcePassengerTypeQuantity;
                sourcePassengerTypeQuantity = this.getPassengerTypeQuantity();
                PassengerTypeQuantityType copyPassengerTypeQuantity = ((PassengerTypeQuantityType) strategy.copy(LocatorUtils.property(locator, "passengerTypeQuantity", sourcePassengerTypeQuantity), sourcePassengerTypeQuantity));
                copy.setPassengerTypeQuantity(copyPassengerTypeQuantity);
            } else {
                copy.passengerTypeQuantity = null;
            }
            if (this.fareBasisCodes!= null) {
                PTCFareBreakdownType.FareBasisCodes sourceFareBasisCodes;
                sourceFareBasisCodes = this.getFareBasisCodes();
                PTCFareBreakdownType.FareBasisCodes copyFareBasisCodes = ((PTCFareBreakdownType.FareBasisCodes) strategy.copy(LocatorUtils.property(locator, "fareBasisCodes", sourceFareBasisCodes), sourceFareBasisCodes));
                copy.setFareBasisCodes(copyFareBasisCodes);
            } else {
                copy.fareBasisCodes = null;
            }
            if (this.passengerFare!= null) {
                FareType sourcePassengerFare;
                sourcePassengerFare = this.getPassengerFare();
                FareType copyPassengerFare = ((FareType) strategy.copy(LocatorUtils.property(locator, "passengerFare", sourcePassengerFare), sourcePassengerFare));
                copy.setPassengerFare(copyPassengerFare);
            } else {
                copy.passengerFare = null;
            }
            if ((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty())) {
                List<PTCFareBreakdownType.TravelerRefNumber> sourceTravelerRefNumber;
                sourceTravelerRefNumber = (((this.travelerRefNumber!= null)&&(!this.travelerRefNumber.isEmpty()))?this.getTravelerRefNumber():null);
                @SuppressWarnings("unchecked")
                List<PTCFareBreakdownType.TravelerRefNumber> copyTravelerRefNumber = ((List<PTCFareBreakdownType.TravelerRefNumber> ) strategy.copy(LocatorUtils.property(locator, "travelerRefNumber", sourceTravelerRefNumber), sourceTravelerRefNumber));
                copy.travelerRefNumber = null;
                if (copyTravelerRefNumber!= null) {
                    List<PTCFareBreakdownType.TravelerRefNumber> uniqueTravelerRefNumberl = copy.getTravelerRefNumber();
                    uniqueTravelerRefNumberl.addAll(copyTravelerRefNumber);
                }
            } else {
                copy.travelerRefNumber = null;
            }
            if (this.ticketDesignators!= null) {
                PTCFareBreakdownType.TicketDesignators sourceTicketDesignators;
                sourceTicketDesignators = this.getTicketDesignators();
                PTCFareBreakdownType.TicketDesignators copyTicketDesignators = ((PTCFareBreakdownType.TicketDesignators) strategy.copy(LocatorUtils.property(locator, "ticketDesignators", sourceTicketDesignators), sourceTicketDesignators));
                copy.setTicketDesignators(copyTicketDesignators);
            } else {
                copy.ticketDesignators = null;
            }
            if (this.endorsements!= null) {
                PTCFareBreakdownType.Endorsements sourceEndorsements;
                sourceEndorsements = this.getEndorsements();
                PTCFareBreakdownType.Endorsements copyEndorsements = ((PTCFareBreakdownType.Endorsements) strategy.copy(LocatorUtils.property(locator, "endorsements", sourceEndorsements), sourceEndorsements));
                copy.setEndorsements(copyEndorsements);
            } else {
                copy.endorsements = null;
            }
            if ((this.fareInfo!= null)&&(!this.fareInfo.isEmpty())) {
                List<PTCFareBreakdownType.FareInfo> sourceFareInfo;
                sourceFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
                @SuppressWarnings("unchecked")
                List<PTCFareBreakdownType.FareInfo> copyFareInfo = ((List<PTCFareBreakdownType.FareInfo> ) strategy.copy(LocatorUtils.property(locator, "fareInfo", sourceFareInfo), sourceFareInfo));
                copy.fareInfo = null;
                if (copyFareInfo!= null) {
                    List<PTCFareBreakdownType.FareInfo> uniqueFareInfol = copy.getFareInfo();
                    uniqueFareInfol.addAll(copyFareInfo);
                }
            } else {
                copy.fareInfo = null;
            }
            if (this.pricingSource!= null) {
                PricingSourceType sourcePricingSource;
                sourcePricingSource = this.getPricingSource();
                PricingSourceType copyPricingSource = ((PricingSourceType) strategy.copy(LocatorUtils.property(locator, "pricingSource", sourcePricingSource), sourcePricingSource));
                copy.setPricingSource(copyPricingSource);
            } else {
                copy.pricingSource = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PTCFareBreakdownType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Endorsement" maxOccurs="9"&gt;
     *           &lt;complexType&gt;
     *             &lt;simpleContent&gt;
     *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FreeTextType"&gt;
     *               &lt;/extension&gt;
     *             &lt;/simpleContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="NonRefundableIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="NonEndorsableIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "endorsement"
    })
    public static class Endorsements
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "Endorsement", required = true)
        protected List<PTCFareBreakdownType.Endorsements.Endorsement> endorsement;
        @XmlAttribute(name = "NonRefundableIndicator")
        protected Boolean nonRefundableIndicator;
        @XmlAttribute(name = "NonEndorsableIndicator")
        protected Boolean nonEndorsableIndicator;

        /**
         * Gets the value of the endorsement property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the endorsement property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getEndorsement().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link PTCFareBreakdownType.Endorsements.Endorsement }
         * 
         * 
         */
        public List<PTCFareBreakdownType.Endorsements.Endorsement> getEndorsement() {
            if (endorsement == null) {
                endorsement = new ArrayList<PTCFareBreakdownType.Endorsements.Endorsement>();
            }
            return this.endorsement;
        }

        /**
         * Gets the value of the nonRefundableIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isNonRefundableIndicator() {
            return nonRefundableIndicator;
        }

        /**
         * Sets the value of the nonRefundableIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setNonRefundableIndicator(Boolean value) {
            this.nonRefundableIndicator = value;
        }

        /**
         * Gets the value of the nonEndorsableIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isNonEndorsableIndicator() {
            return nonEndorsableIndicator;
        }

        /**
         * Sets the value of the nonEndorsableIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setNonEndorsableIndicator(Boolean value) {
            this.nonEndorsableIndicator = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<PTCFareBreakdownType.Endorsements.Endorsement> theEndorsement;
                theEndorsement = (((this.endorsement!= null)&&(!this.endorsement.isEmpty()))?this.getEndorsement():null);
                strategy.appendField(locator, this, "endorsement", buffer, theEndorsement);
            }
            {
                Boolean theNonRefundableIndicator;
                theNonRefundableIndicator = this.isNonRefundableIndicator();
                strategy.appendField(locator, this, "nonRefundableIndicator", buffer, theNonRefundableIndicator);
            }
            {
                Boolean theNonEndorsableIndicator;
                theNonEndorsableIndicator = this.isNonEndorsableIndicator();
                strategy.appendField(locator, this, "nonEndorsableIndicator", buffer, theNonEndorsableIndicator);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PTCFareBreakdownType.Endorsements)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PTCFareBreakdownType.Endorsements that = ((PTCFareBreakdownType.Endorsements) object);
            {
                List<PTCFareBreakdownType.Endorsements.Endorsement> lhsEndorsement;
                lhsEndorsement = (((this.endorsement!= null)&&(!this.endorsement.isEmpty()))?this.getEndorsement():null);
                List<PTCFareBreakdownType.Endorsements.Endorsement> rhsEndorsement;
                rhsEndorsement = (((that.endorsement!= null)&&(!that.endorsement.isEmpty()))?that.getEndorsement():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "endorsement", lhsEndorsement), LocatorUtils.property(thatLocator, "endorsement", rhsEndorsement), lhsEndorsement, rhsEndorsement)) {
                    return false;
                }
            }
            {
                Boolean lhsNonRefundableIndicator;
                lhsNonRefundableIndicator = this.isNonRefundableIndicator();
                Boolean rhsNonRefundableIndicator;
                rhsNonRefundableIndicator = that.isNonRefundableIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nonRefundableIndicator", lhsNonRefundableIndicator), LocatorUtils.property(thatLocator, "nonRefundableIndicator", rhsNonRefundableIndicator), lhsNonRefundableIndicator, rhsNonRefundableIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsNonEndorsableIndicator;
                lhsNonEndorsableIndicator = this.isNonEndorsableIndicator();
                Boolean rhsNonEndorsableIndicator;
                rhsNonEndorsableIndicator = that.isNonEndorsableIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nonEndorsableIndicator", lhsNonEndorsableIndicator), LocatorUtils.property(thatLocator, "nonEndorsableIndicator", rhsNonEndorsableIndicator), lhsNonEndorsableIndicator, rhsNonEndorsableIndicator)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<PTCFareBreakdownType.Endorsements.Endorsement> theEndorsement;
                theEndorsement = (((this.endorsement!= null)&&(!this.endorsement.isEmpty()))?this.getEndorsement():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endorsement", theEndorsement), currentHashCode, theEndorsement);
            }
            {
                Boolean theNonRefundableIndicator;
                theNonRefundableIndicator = this.isNonRefundableIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nonRefundableIndicator", theNonRefundableIndicator), currentHashCode, theNonRefundableIndicator);
            }
            {
                Boolean theNonEndorsableIndicator;
                theNonEndorsableIndicator = this.isNonEndorsableIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nonEndorsableIndicator", theNonEndorsableIndicator), currentHashCode, theNonEndorsableIndicator);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PTCFareBreakdownType.Endorsements) {
                final PTCFareBreakdownType.Endorsements copy = ((PTCFareBreakdownType.Endorsements) draftCopy);
                if ((this.endorsement!= null)&&(!this.endorsement.isEmpty())) {
                    List<PTCFareBreakdownType.Endorsements.Endorsement> sourceEndorsement;
                    sourceEndorsement = (((this.endorsement!= null)&&(!this.endorsement.isEmpty()))?this.getEndorsement():null);
                    @SuppressWarnings("unchecked")
                    List<PTCFareBreakdownType.Endorsements.Endorsement> copyEndorsement = ((List<PTCFareBreakdownType.Endorsements.Endorsement> ) strategy.copy(LocatorUtils.property(locator, "endorsement", sourceEndorsement), sourceEndorsement));
                    copy.endorsement = null;
                    if (copyEndorsement!= null) {
                        List<PTCFareBreakdownType.Endorsements.Endorsement> uniqueEndorsementl = copy.getEndorsement();
                        uniqueEndorsementl.addAll(copyEndorsement);
                    }
                } else {
                    copy.endorsement = null;
                }
                if (this.nonRefundableIndicator!= null) {
                    Boolean sourceNonRefundableIndicator;
                    sourceNonRefundableIndicator = this.isNonRefundableIndicator();
                    Boolean copyNonRefundableIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "nonRefundableIndicator", sourceNonRefundableIndicator), sourceNonRefundableIndicator));
                    copy.setNonRefundableIndicator(copyNonRefundableIndicator);
                } else {
                    copy.nonRefundableIndicator = null;
                }
                if (this.nonEndorsableIndicator!= null) {
                    Boolean sourceNonEndorsableIndicator;
                    sourceNonEndorsableIndicator = this.isNonEndorsableIndicator();
                    Boolean copyNonEndorsableIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "nonEndorsableIndicator", sourceNonEndorsableIndicator), sourceNonEndorsableIndicator));
                    copy.setNonEndorsableIndicator(copyNonEndorsableIndicator);
                } else {
                    copy.nonEndorsableIndicator = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PTCFareBreakdownType.Endorsements();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;simpleContent&gt;
         *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FreeTextType"&gt;
         *     &lt;/extension&gt;
         *   &lt;/simpleContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Endorsement
            extends FreeTextType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {


            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof PTCFareBreakdownType.Endorsements.Endorsement)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                return draftCopy;
            }

            public Object createNewInstance() {
                return new PTCFareBreakdownType.Endorsements.Endorsement();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="FareBasisCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" maxOccurs="10"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "fareBasisCode"
    })
    public static class FareBasisCodes
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "FareBasisCode", required = true)
        protected List<String> fareBasisCode;

        /**
         * Gets the value of the fareBasisCode property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fareBasisCode property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getFareBasisCode().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getFareBasisCode() {
            if (fareBasisCode == null) {
                fareBasisCode = new ArrayList<String>();
            }
            return this.fareBasisCode;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<String> theFareBasisCode;
                theFareBasisCode = (((this.fareBasisCode!= null)&&(!this.fareBasisCode.isEmpty()))?this.getFareBasisCode():null);
                strategy.appendField(locator, this, "fareBasisCode", buffer, theFareBasisCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PTCFareBreakdownType.FareBasisCodes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PTCFareBreakdownType.FareBasisCodes that = ((PTCFareBreakdownType.FareBasisCodes) object);
            {
                List<String> lhsFareBasisCode;
                lhsFareBasisCode = (((this.fareBasisCode!= null)&&(!this.fareBasisCode.isEmpty()))?this.getFareBasisCode():null);
                List<String> rhsFareBasisCode;
                rhsFareBasisCode = (((that.fareBasisCode!= null)&&(!that.fareBasisCode.isEmpty()))?that.getFareBasisCode():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareBasisCode", lhsFareBasisCode), LocatorUtils.property(thatLocator, "fareBasisCode", rhsFareBasisCode), lhsFareBasisCode, rhsFareBasisCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<String> theFareBasisCode;
                theFareBasisCode = (((this.fareBasisCode!= null)&&(!this.fareBasisCode.isEmpty()))?this.getFareBasisCode():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareBasisCode", theFareBasisCode), currentHashCode, theFareBasisCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PTCFareBreakdownType.FareBasisCodes) {
                final PTCFareBreakdownType.FareBasisCodes copy = ((PTCFareBreakdownType.FareBasisCodes) draftCopy);
                if ((this.fareBasisCode!= null)&&(!this.fareBasisCode.isEmpty())) {
                    List<String> sourceFareBasisCode;
                    sourceFareBasisCode = (((this.fareBasisCode!= null)&&(!this.fareBasisCode.isEmpty()))?this.getFareBasisCode():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyFareBasisCode = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "fareBasisCode", sourceFareBasisCode), sourceFareBasisCode));
                    copy.fareBasisCode = null;
                    if (copyFareBasisCode!= null) {
                        List<String> uniqueFareBasisCodel = copy.getFareBasisCode();
                        uniqueFareBasisCodel.addAll(copyFareBasisCode);
                    }
                } else {
                    copy.fareBasisCode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PTCFareBreakdownType.FareBasisCodes();
        }

    }


    /**
     *  Information used to define a fare and its associated rules information.
     * 
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}FareInfoType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="PassengerFare" type="{http://www.opentravel.org/OTA/2003/05}FareType"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "passengerFare"
    })
    public static class FareInfo
        extends FareInfoType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "PassengerFare", required = true)
        protected FareType passengerFare;

        /**
         * Gets the value of the passengerFare property.
         * 
         * @return
         *     possible object is
         *     {@link FareType }
         *     
         */
        public FareType getPassengerFare() {
            return passengerFare;
        }

        /**
         * Sets the value of the passengerFare property.
         * 
         * @param value
         *     allowed object is
         *     {@link FareType }
         *     
         */
        public void setPassengerFare(FareType value) {
            this.passengerFare = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                FareType thePassengerFare;
                thePassengerFare = this.getPassengerFare();
                strategy.appendField(locator, this, "passengerFare", buffer, thePassengerFare);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PTCFareBreakdownType.FareInfo)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final PTCFareBreakdownType.FareInfo that = ((PTCFareBreakdownType.FareInfo) object);
            {
                FareType lhsPassengerFare;
                lhsPassengerFare = this.getPassengerFare();
                FareType rhsPassengerFare;
                rhsPassengerFare = that.getPassengerFare();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerFare", lhsPassengerFare), LocatorUtils.property(thatLocator, "passengerFare", rhsPassengerFare), lhsPassengerFare, rhsPassengerFare)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                FareType thePassengerFare;
                thePassengerFare = this.getPassengerFare();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerFare", thePassengerFare), currentHashCode, thePassengerFare);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof PTCFareBreakdownType.FareInfo) {
                final PTCFareBreakdownType.FareInfo copy = ((PTCFareBreakdownType.FareInfo) draftCopy);
                if (this.passengerFare!= null) {
                    FareType sourcePassengerFare;
                    sourcePassengerFare = this.getPassengerFare();
                    FareType copyPassengerFare = ((FareType) strategy.copy(LocatorUtils.property(locator, "passengerFare", sourcePassengerFare), sourcePassengerFare));
                    copy.setPassengerFare(copyPassengerFare);
                } else {
                    copy.passengerFare = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PTCFareBreakdownType.FareInfo();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="TicketDesignator" maxOccurs="10"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attribute name="FlightRefRPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
     *                 &lt;attribute name="TicketDesignatorCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *                 &lt;attribute name="TicketDesignatorExtension" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "ticketDesignator"
    })
    public static class TicketDesignators
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "TicketDesignator", required = true)
        protected List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> ticketDesignator;

        /**
         * Gets the value of the ticketDesignator property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the ticketDesignator property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getTicketDesignator().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link PTCFareBreakdownType.TicketDesignators.TicketDesignator }
         * 
         * 
         */
        public List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> getTicketDesignator() {
            if (ticketDesignator == null) {
                ticketDesignator = new ArrayList<PTCFareBreakdownType.TicketDesignators.TicketDesignator>();
            }
            return this.ticketDesignator;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> theTicketDesignator;
                theTicketDesignator = (((this.ticketDesignator!= null)&&(!this.ticketDesignator.isEmpty()))?this.getTicketDesignator():null);
                strategy.appendField(locator, this, "ticketDesignator", buffer, theTicketDesignator);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PTCFareBreakdownType.TicketDesignators)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PTCFareBreakdownType.TicketDesignators that = ((PTCFareBreakdownType.TicketDesignators) object);
            {
                List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> lhsTicketDesignator;
                lhsTicketDesignator = (((this.ticketDesignator!= null)&&(!this.ticketDesignator.isEmpty()))?this.getTicketDesignator():null);
                List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> rhsTicketDesignator;
                rhsTicketDesignator = (((that.ticketDesignator!= null)&&(!that.ticketDesignator.isEmpty()))?that.getTicketDesignator():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDesignator", lhsTicketDesignator), LocatorUtils.property(thatLocator, "ticketDesignator", rhsTicketDesignator), lhsTicketDesignator, rhsTicketDesignator)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> theTicketDesignator;
                theTicketDesignator = (((this.ticketDesignator!= null)&&(!this.ticketDesignator.isEmpty()))?this.getTicketDesignator():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDesignator", theTicketDesignator), currentHashCode, theTicketDesignator);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PTCFareBreakdownType.TicketDesignators) {
                final PTCFareBreakdownType.TicketDesignators copy = ((PTCFareBreakdownType.TicketDesignators) draftCopy);
                if ((this.ticketDesignator!= null)&&(!this.ticketDesignator.isEmpty())) {
                    List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> sourceTicketDesignator;
                    sourceTicketDesignator = (((this.ticketDesignator!= null)&&(!this.ticketDesignator.isEmpty()))?this.getTicketDesignator():null);
                    @SuppressWarnings("unchecked")
                    List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> copyTicketDesignator = ((List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> ) strategy.copy(LocatorUtils.property(locator, "ticketDesignator", sourceTicketDesignator), sourceTicketDesignator));
                    copy.ticketDesignator = null;
                    if (copyTicketDesignator!= null) {
                        List<PTCFareBreakdownType.TicketDesignators.TicketDesignator> uniqueTicketDesignatorl = copy.getTicketDesignator();
                        uniqueTicketDesignatorl.addAll(copyTicketDesignator);
                    }
                } else {
                    copy.ticketDesignator = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PTCFareBreakdownType.TicketDesignators();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attribute name="FlightRefRPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
         *       &lt;attribute name="TicketDesignatorCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
         *       &lt;attribute name="TicketDesignatorExtension" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class TicketDesignator
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "FlightRefRPH")
            protected String flightRefRPH;
            @XmlAttribute(name = "TicketDesignatorCode")
            protected String ticketDesignatorCode;
            @XmlAttribute(name = "TicketDesignatorExtension")
            protected String ticketDesignatorExtension;

            /**
             * Gets the value of the flightRefRPH property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getFlightRefRPH() {
                return flightRefRPH;
            }

            /**
             * Sets the value of the flightRefRPH property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setFlightRefRPH(String value) {
                this.flightRefRPH = value;
            }

            /**
             * Gets the value of the ticketDesignatorCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getTicketDesignatorCode() {
                return ticketDesignatorCode;
            }

            /**
             * Sets the value of the ticketDesignatorCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setTicketDesignatorCode(String value) {
                this.ticketDesignatorCode = value;
            }

            /**
             * Gets the value of the ticketDesignatorExtension property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getTicketDesignatorExtension() {
                return ticketDesignatorExtension;
            }

            /**
             * Sets the value of the ticketDesignatorExtension property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setTicketDesignatorExtension(String value) {
                this.ticketDesignatorExtension = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theFlightRefRPH;
                    theFlightRefRPH = this.getFlightRefRPH();
                    strategy.appendField(locator, this, "flightRefRPH", buffer, theFlightRefRPH);
                }
                {
                    String theTicketDesignatorCode;
                    theTicketDesignatorCode = this.getTicketDesignatorCode();
                    strategy.appendField(locator, this, "ticketDesignatorCode", buffer, theTicketDesignatorCode);
                }
                {
                    String theTicketDesignatorExtension;
                    theTicketDesignatorExtension = this.getTicketDesignatorExtension();
                    strategy.appendField(locator, this, "ticketDesignatorExtension", buffer, theTicketDesignatorExtension);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof PTCFareBreakdownType.TicketDesignators.TicketDesignator)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final PTCFareBreakdownType.TicketDesignators.TicketDesignator that = ((PTCFareBreakdownType.TicketDesignators.TicketDesignator) object);
                {
                    String lhsFlightRefRPH;
                    lhsFlightRefRPH = this.getFlightRefRPH();
                    String rhsFlightRefRPH;
                    rhsFlightRefRPH = that.getFlightRefRPH();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "flightRefRPH", lhsFlightRefRPH), LocatorUtils.property(thatLocator, "flightRefRPH", rhsFlightRefRPH), lhsFlightRefRPH, rhsFlightRefRPH)) {
                        return false;
                    }
                }
                {
                    String lhsTicketDesignatorCode;
                    lhsTicketDesignatorCode = this.getTicketDesignatorCode();
                    String rhsTicketDesignatorCode;
                    rhsTicketDesignatorCode = that.getTicketDesignatorCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDesignatorCode", lhsTicketDesignatorCode), LocatorUtils.property(thatLocator, "ticketDesignatorCode", rhsTicketDesignatorCode), lhsTicketDesignatorCode, rhsTicketDesignatorCode)) {
                        return false;
                    }
                }
                {
                    String lhsTicketDesignatorExtension;
                    lhsTicketDesignatorExtension = this.getTicketDesignatorExtension();
                    String rhsTicketDesignatorExtension;
                    rhsTicketDesignatorExtension = that.getTicketDesignatorExtension();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDesignatorExtension", lhsTicketDesignatorExtension), LocatorUtils.property(thatLocator, "ticketDesignatorExtension", rhsTicketDesignatorExtension), lhsTicketDesignatorExtension, rhsTicketDesignatorExtension)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theFlightRefRPH;
                    theFlightRefRPH = this.getFlightRefRPH();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightRefRPH", theFlightRefRPH), currentHashCode, theFlightRefRPH);
                }
                {
                    String theTicketDesignatorCode;
                    theTicketDesignatorCode = this.getTicketDesignatorCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDesignatorCode", theTicketDesignatorCode), currentHashCode, theTicketDesignatorCode);
                }
                {
                    String theTicketDesignatorExtension;
                    theTicketDesignatorExtension = this.getTicketDesignatorExtension();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDesignatorExtension", theTicketDesignatorExtension), currentHashCode, theTicketDesignatorExtension);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof PTCFareBreakdownType.TicketDesignators.TicketDesignator) {
                    final PTCFareBreakdownType.TicketDesignators.TicketDesignator copy = ((PTCFareBreakdownType.TicketDesignators.TicketDesignator) draftCopy);
                    if (this.flightRefRPH!= null) {
                        String sourceFlightRefRPH;
                        sourceFlightRefRPH = this.getFlightRefRPH();
                        String copyFlightRefRPH = ((String) strategy.copy(LocatorUtils.property(locator, "flightRefRPH", sourceFlightRefRPH), sourceFlightRefRPH));
                        copy.setFlightRefRPH(copyFlightRefRPH);
                    } else {
                        copy.flightRefRPH = null;
                    }
                    if (this.ticketDesignatorCode!= null) {
                        String sourceTicketDesignatorCode;
                        sourceTicketDesignatorCode = this.getTicketDesignatorCode();
                        String copyTicketDesignatorCode = ((String) strategy.copy(LocatorUtils.property(locator, "ticketDesignatorCode", sourceTicketDesignatorCode), sourceTicketDesignatorCode));
                        copy.setTicketDesignatorCode(copyTicketDesignatorCode);
                    } else {
                        copy.ticketDesignatorCode = null;
                    }
                    if (this.ticketDesignatorExtension!= null) {
                        String sourceTicketDesignatorExtension;
                        sourceTicketDesignatorExtension = this.getTicketDesignatorExtension();
                        String copyTicketDesignatorExtension = ((String) strategy.copy(LocatorUtils.property(locator, "ticketDesignatorExtension", sourceTicketDesignatorExtension), sourceTicketDesignatorExtension));
                        copy.setTicketDesignatorExtension(copyTicketDesignatorExtension);
                    } else {
                        copy.ticketDesignatorExtension = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new PTCFareBreakdownType.TicketDesignators.TicketDesignator();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TravelerRefNumberGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TravelerRefNumber
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "SurnameRefNumber")
        protected String surnameRefNumber;

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the surnameRefNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSurnameRefNumber() {
            return surnameRefNumber;
        }

        /**
         * Sets the value of the surnameRefNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSurnameRefNumber(String value) {
            this.surnameRefNumber = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                String theSurnameRefNumber;
                theSurnameRefNumber = this.getSurnameRefNumber();
                strategy.appendField(locator, this, "surnameRefNumber", buffer, theSurnameRefNumber);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PTCFareBreakdownType.TravelerRefNumber)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PTCFareBreakdownType.TravelerRefNumber that = ((PTCFareBreakdownType.TravelerRefNumber) object);
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                String lhsSurnameRefNumber;
                lhsSurnameRefNumber = this.getSurnameRefNumber();
                String rhsSurnameRefNumber;
                rhsSurnameRefNumber = that.getSurnameRefNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "surnameRefNumber", lhsSurnameRefNumber), LocatorUtils.property(thatLocator, "surnameRefNumber", rhsSurnameRefNumber), lhsSurnameRefNumber, rhsSurnameRefNumber)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                String theSurnameRefNumber;
                theSurnameRefNumber = this.getSurnameRefNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "surnameRefNumber", theSurnameRefNumber), currentHashCode, theSurnameRefNumber);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PTCFareBreakdownType.TravelerRefNumber) {
                final PTCFareBreakdownType.TravelerRefNumber copy = ((PTCFareBreakdownType.TravelerRefNumber) draftCopy);
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if (this.surnameRefNumber!= null) {
                    String sourceSurnameRefNumber;
                    sourceSurnameRefNumber = this.getSurnameRefNumber();
                    String copySurnameRefNumber = ((String) strategy.copy(LocatorUtils.property(locator, "surnameRefNumber", sourceSurnameRefNumber), sourceSurnameRefNumber));
                    copy.setSurnameRefNumber(copySurnameRefNumber);
                } else {
                    copy.surnameRefNumber = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PTCFareBreakdownType.TravelerRefNumber();
        }

    }

}
