//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Construct for holding a flight segment availability object.
 * 
 * <p>Java class for FlightSegmentBaseType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FlightSegmentBaseType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="DepartureAirport"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AirportLocationGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="ArrivalAirport"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AirportLocationGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="OperatingAirline" type="{http://www.opentravel.org/OTA/2003/05}OperatingAirlineType" minOccurs="0"/&gt;
 *         &lt;element name="Equipment" type="{http://www.opentravel.org/OTA/2003/05}EquipmentType" maxOccurs="2" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="DepartureDateTime" type="{http://www.w3.org/2001/XMLSchema}dateTime" /&gt;
 *       &lt;attribute name="ArrivalDateTime" type="{http://www.w3.org/2001/XMLSchema}dateTime" /&gt;
 *       &lt;attribute name="StopQuantity" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
 *       &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *       &lt;attribute name="InfoSource" type="{http://www.opentravel.org/OTA/2003/05}InfoSourceType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightSegmentBaseType", propOrder = {
    "departureAirport",
    "arrivalAirport",
    "operatingAirline",
    "equipment"
})
@XmlSeeAlso({
    FlightSegmentType.class
})
public class FlightSegmentBaseType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "DepartureAirport", required = true)
    protected FlightSegmentBaseType.DepartureAirport departureAirport;
    @XmlElement(name = "ArrivalAirport", required = true)
    protected FlightSegmentBaseType.ArrivalAirport arrivalAirport;
    @XmlElement(name = "OperatingAirline")
    protected OperatingAirlineType operatingAirline;
    @XmlElement(name = "Equipment")
    protected List<EquipmentType> equipment;
    @XmlAttribute(name = "DepartureDateTime")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar departureDateTime;
    @XmlAttribute(name = "ArrivalDateTime")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar arrivalDateTime;
    @XmlAttribute(name = "StopQuantity")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger stopQuantity;
    @XmlAttribute(name = "RPH")
    protected String rph;
    @XmlAttribute(name = "InfoSource")
    protected String infoSource;

    /**
     * Gets the value of the departureAirport property.
     * 
     * @return
     *     possible object is
     *     {@link FlightSegmentBaseType.DepartureAirport }
     *     
     */
    public FlightSegmentBaseType.DepartureAirport getDepartureAirport() {
        return departureAirport;
    }

    /**
     * Sets the value of the departureAirport property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightSegmentBaseType.DepartureAirport }
     *     
     */
    public void setDepartureAirport(FlightSegmentBaseType.DepartureAirport value) {
        this.departureAirport = value;
    }

    /**
     * Gets the value of the arrivalAirport property.
     * 
     * @return
     *     possible object is
     *     {@link FlightSegmentBaseType.ArrivalAirport }
     *     
     */
    public FlightSegmentBaseType.ArrivalAirport getArrivalAirport() {
        return arrivalAirport;
    }

    /**
     * Sets the value of the arrivalAirport property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightSegmentBaseType.ArrivalAirport }
     *     
     */
    public void setArrivalAirport(FlightSegmentBaseType.ArrivalAirport value) {
        this.arrivalAirport = value;
    }

    /**
     * Gets the value of the operatingAirline property.
     * 
     * @return
     *     possible object is
     *     {@link OperatingAirlineType }
     *     
     */
    public OperatingAirlineType getOperatingAirline() {
        return operatingAirline;
    }

    /**
     * Sets the value of the operatingAirline property.
     * 
     * @param value
     *     allowed object is
     *     {@link OperatingAirlineType }
     *     
     */
    public void setOperatingAirline(OperatingAirlineType value) {
        this.operatingAirline = value;
    }

    /**
     * Gets the value of the equipment property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the equipment property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEquipment().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EquipmentType }
     * 
     * 
     */
    public List<EquipmentType> getEquipment() {
        if (equipment == null) {
            equipment = new ArrayList<EquipmentType>();
        }
        return this.equipment;
    }

    /**
     * Gets the value of the departureDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDepartureDateTime() {
        return departureDateTime;
    }

    /**
     * Sets the value of the departureDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDepartureDateTime(XMLGregorianCalendar value) {
        this.departureDateTime = value;
    }

    /**
     * Gets the value of the arrivalDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getArrivalDateTime() {
        return arrivalDateTime;
    }

    /**
     * Sets the value of the arrivalDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setArrivalDateTime(XMLGregorianCalendar value) {
        this.arrivalDateTime = value;
    }

    /**
     * Gets the value of the stopQuantity property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getStopQuantity() {
        return stopQuantity;
    }

    /**
     * Sets the value of the stopQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setStopQuantity(BigInteger value) {
        this.stopQuantity = value;
    }

    /**
     * Gets the value of the rph property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRPH() {
        return rph;
    }

    /**
     * Sets the value of the rph property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRPH(String value) {
        this.rph = value;
    }

    /**
     * Gets the value of the infoSource property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInfoSource() {
        return infoSource;
    }

    /**
     * Sets the value of the infoSource property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInfoSource(String value) {
        this.infoSource = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            FlightSegmentBaseType.DepartureAirport theDepartureAirport;
            theDepartureAirport = this.getDepartureAirport();
            strategy.appendField(locator, this, "departureAirport", buffer, theDepartureAirport);
        }
        {
            FlightSegmentBaseType.ArrivalAirport theArrivalAirport;
            theArrivalAirport = this.getArrivalAirport();
            strategy.appendField(locator, this, "arrivalAirport", buffer, theArrivalAirport);
        }
        {
            OperatingAirlineType theOperatingAirline;
            theOperatingAirline = this.getOperatingAirline();
            strategy.appendField(locator, this, "operatingAirline", buffer, theOperatingAirline);
        }
        {
            List<EquipmentType> theEquipment;
            theEquipment = (((this.equipment!= null)&&(!this.equipment.isEmpty()))?this.getEquipment():null);
            strategy.appendField(locator, this, "equipment", buffer, theEquipment);
        }
        {
            XMLGregorianCalendar theDepartureDateTime;
            theDepartureDateTime = this.getDepartureDateTime();
            strategy.appendField(locator, this, "departureDateTime", buffer, theDepartureDateTime);
        }
        {
            XMLGregorianCalendar theArrivalDateTime;
            theArrivalDateTime = this.getArrivalDateTime();
            strategy.appendField(locator, this, "arrivalDateTime", buffer, theArrivalDateTime);
        }
        {
            BigInteger theStopQuantity;
            theStopQuantity = this.getStopQuantity();
            strategy.appendField(locator, this, "stopQuantity", buffer, theStopQuantity);
        }
        {
            String theRPH;
            theRPH = this.getRPH();
            strategy.appendField(locator, this, "rph", buffer, theRPH);
        }
        {
            String theInfoSource;
            theInfoSource = this.getInfoSource();
            strategy.appendField(locator, this, "infoSource", buffer, theInfoSource);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FlightSegmentBaseType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FlightSegmentBaseType that = ((FlightSegmentBaseType) object);
        {
            FlightSegmentBaseType.DepartureAirport lhsDepartureAirport;
            lhsDepartureAirport = this.getDepartureAirport();
            FlightSegmentBaseType.DepartureAirport rhsDepartureAirport;
            rhsDepartureAirport = that.getDepartureAirport();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "departureAirport", lhsDepartureAirport), LocatorUtils.property(thatLocator, "departureAirport", rhsDepartureAirport), lhsDepartureAirport, rhsDepartureAirport)) {
                return false;
            }
        }
        {
            FlightSegmentBaseType.ArrivalAirport lhsArrivalAirport;
            lhsArrivalAirport = this.getArrivalAirport();
            FlightSegmentBaseType.ArrivalAirport rhsArrivalAirport;
            rhsArrivalAirport = that.getArrivalAirport();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "arrivalAirport", lhsArrivalAirport), LocatorUtils.property(thatLocator, "arrivalAirport", rhsArrivalAirport), lhsArrivalAirport, rhsArrivalAirport)) {
                return false;
            }
        }
        {
            OperatingAirlineType lhsOperatingAirline;
            lhsOperatingAirline = this.getOperatingAirline();
            OperatingAirlineType rhsOperatingAirline;
            rhsOperatingAirline = that.getOperatingAirline();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operatingAirline", lhsOperatingAirline), LocatorUtils.property(thatLocator, "operatingAirline", rhsOperatingAirline), lhsOperatingAirline, rhsOperatingAirline)) {
                return false;
            }
        }
        {
            List<EquipmentType> lhsEquipment;
            lhsEquipment = (((this.equipment!= null)&&(!this.equipment.isEmpty()))?this.getEquipment():null);
            List<EquipmentType> rhsEquipment;
            rhsEquipment = (((that.equipment!= null)&&(!that.equipment.isEmpty()))?that.getEquipment():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "equipment", lhsEquipment), LocatorUtils.property(thatLocator, "equipment", rhsEquipment), lhsEquipment, rhsEquipment)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsDepartureDateTime;
            lhsDepartureDateTime = this.getDepartureDateTime();
            XMLGregorianCalendar rhsDepartureDateTime;
            rhsDepartureDateTime = that.getDepartureDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "departureDateTime", lhsDepartureDateTime), LocatorUtils.property(thatLocator, "departureDateTime", rhsDepartureDateTime), lhsDepartureDateTime, rhsDepartureDateTime)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsArrivalDateTime;
            lhsArrivalDateTime = this.getArrivalDateTime();
            XMLGregorianCalendar rhsArrivalDateTime;
            rhsArrivalDateTime = that.getArrivalDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "arrivalDateTime", lhsArrivalDateTime), LocatorUtils.property(thatLocator, "arrivalDateTime", rhsArrivalDateTime), lhsArrivalDateTime, rhsArrivalDateTime)) {
                return false;
            }
        }
        {
            BigInteger lhsStopQuantity;
            lhsStopQuantity = this.getStopQuantity();
            BigInteger rhsStopQuantity;
            rhsStopQuantity = that.getStopQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stopQuantity", lhsStopQuantity), LocatorUtils.property(thatLocator, "stopQuantity", rhsStopQuantity), lhsStopQuantity, rhsStopQuantity)) {
                return false;
            }
        }
        {
            String lhsRPH;
            lhsRPH = this.getRPH();
            String rhsRPH;
            rhsRPH = that.getRPH();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                return false;
            }
        }
        {
            String lhsInfoSource;
            lhsInfoSource = this.getInfoSource();
            String rhsInfoSource;
            rhsInfoSource = that.getInfoSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "infoSource", lhsInfoSource), LocatorUtils.property(thatLocator, "infoSource", rhsInfoSource), lhsInfoSource, rhsInfoSource)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            FlightSegmentBaseType.DepartureAirport theDepartureAirport;
            theDepartureAirport = this.getDepartureAirport();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departureAirport", theDepartureAirport), currentHashCode, theDepartureAirport);
        }
        {
            FlightSegmentBaseType.ArrivalAirport theArrivalAirport;
            theArrivalAirport = this.getArrivalAirport();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "arrivalAirport", theArrivalAirport), currentHashCode, theArrivalAirport);
        }
        {
            OperatingAirlineType theOperatingAirline;
            theOperatingAirline = this.getOperatingAirline();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operatingAirline", theOperatingAirline), currentHashCode, theOperatingAirline);
        }
        {
            List<EquipmentType> theEquipment;
            theEquipment = (((this.equipment!= null)&&(!this.equipment.isEmpty()))?this.getEquipment():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "equipment", theEquipment), currentHashCode, theEquipment);
        }
        {
            XMLGregorianCalendar theDepartureDateTime;
            theDepartureDateTime = this.getDepartureDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departureDateTime", theDepartureDateTime), currentHashCode, theDepartureDateTime);
        }
        {
            XMLGregorianCalendar theArrivalDateTime;
            theArrivalDateTime = this.getArrivalDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "arrivalDateTime", theArrivalDateTime), currentHashCode, theArrivalDateTime);
        }
        {
            BigInteger theStopQuantity;
            theStopQuantity = this.getStopQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stopQuantity", theStopQuantity), currentHashCode, theStopQuantity);
        }
        {
            String theRPH;
            theRPH = this.getRPH();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
        }
        {
            String theInfoSource;
            theInfoSource = this.getInfoSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "infoSource", theInfoSource), currentHashCode, theInfoSource);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FlightSegmentBaseType) {
            final FlightSegmentBaseType copy = ((FlightSegmentBaseType) draftCopy);
            if (this.departureAirport!= null) {
                FlightSegmentBaseType.DepartureAirport sourceDepartureAirport;
                sourceDepartureAirport = this.getDepartureAirport();
                FlightSegmentBaseType.DepartureAirport copyDepartureAirport = ((FlightSegmentBaseType.DepartureAirport) strategy.copy(LocatorUtils.property(locator, "departureAirport", sourceDepartureAirport), sourceDepartureAirport));
                copy.setDepartureAirport(copyDepartureAirport);
            } else {
                copy.departureAirport = null;
            }
            if (this.arrivalAirport!= null) {
                FlightSegmentBaseType.ArrivalAirport sourceArrivalAirport;
                sourceArrivalAirport = this.getArrivalAirport();
                FlightSegmentBaseType.ArrivalAirport copyArrivalAirport = ((FlightSegmentBaseType.ArrivalAirport) strategy.copy(LocatorUtils.property(locator, "arrivalAirport", sourceArrivalAirport), sourceArrivalAirport));
                copy.setArrivalAirport(copyArrivalAirport);
            } else {
                copy.arrivalAirport = null;
            }
            if (this.operatingAirline!= null) {
                OperatingAirlineType sourceOperatingAirline;
                sourceOperatingAirline = this.getOperatingAirline();
                OperatingAirlineType copyOperatingAirline = ((OperatingAirlineType) strategy.copy(LocatorUtils.property(locator, "operatingAirline", sourceOperatingAirline), sourceOperatingAirline));
                copy.setOperatingAirline(copyOperatingAirline);
            } else {
                copy.operatingAirline = null;
            }
            if ((this.equipment!= null)&&(!this.equipment.isEmpty())) {
                List<EquipmentType> sourceEquipment;
                sourceEquipment = (((this.equipment!= null)&&(!this.equipment.isEmpty()))?this.getEquipment():null);
                @SuppressWarnings("unchecked")
                List<EquipmentType> copyEquipment = ((List<EquipmentType> ) strategy.copy(LocatorUtils.property(locator, "equipment", sourceEquipment), sourceEquipment));
                copy.equipment = null;
                if (copyEquipment!= null) {
                    List<EquipmentType> uniqueEquipmentl = copy.getEquipment();
                    uniqueEquipmentl.addAll(copyEquipment);
                }
            } else {
                copy.equipment = null;
            }
            if (this.departureDateTime!= null) {
                XMLGregorianCalendar sourceDepartureDateTime;
                sourceDepartureDateTime = this.getDepartureDateTime();
                XMLGregorianCalendar copyDepartureDateTime = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "departureDateTime", sourceDepartureDateTime), sourceDepartureDateTime));
                copy.setDepartureDateTime(copyDepartureDateTime);
            } else {
                copy.departureDateTime = null;
            }
            if (this.arrivalDateTime!= null) {
                XMLGregorianCalendar sourceArrivalDateTime;
                sourceArrivalDateTime = this.getArrivalDateTime();
                XMLGregorianCalendar copyArrivalDateTime = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "arrivalDateTime", sourceArrivalDateTime), sourceArrivalDateTime));
                copy.setArrivalDateTime(copyArrivalDateTime);
            } else {
                copy.arrivalDateTime = null;
            }
            if (this.stopQuantity!= null) {
                BigInteger sourceStopQuantity;
                sourceStopQuantity = this.getStopQuantity();
                BigInteger copyStopQuantity = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "stopQuantity", sourceStopQuantity), sourceStopQuantity));
                copy.setStopQuantity(copyStopQuantity);
            } else {
                copy.stopQuantity = null;
            }
            if (this.rph!= null) {
                String sourceRPH;
                sourceRPH = this.getRPH();
                String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                copy.setRPH(copyRPH);
            } else {
                copy.rph = null;
            }
            if (this.infoSource!= null) {
                String sourceInfoSource;
                sourceInfoSource = this.getInfoSource();
                String copyInfoSource = ((String) strategy.copy(LocatorUtils.property(locator, "infoSource", sourceInfoSource), sourceInfoSource));
                copy.setInfoSource(copyInfoSource);
            } else {
                copy.infoSource = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FlightSegmentBaseType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AirportLocationGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ArrivalAirport
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "LocationCode")
        protected String locationCode;
        @XmlAttribute(name = "CodeContext")
        protected String codeContext;
        @XmlAttribute(name = "Terminal")
        protected String terminal;
        @XmlAttribute(name = "Gate")
        protected String gate;

        /**
         * Gets the value of the locationCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLocationCode() {
            return locationCode;
        }

        /**
         * Sets the value of the locationCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLocationCode(String value) {
            this.locationCode = value;
        }

        /**
         * Gets the value of the codeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCodeContext() {
            if (codeContext == null) {
                return "IATA";
            } else {
                return codeContext;
            }
        }

        /**
         * Sets the value of the codeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCodeContext(String value) {
            this.codeContext = value;
        }

        /**
         * Gets the value of the terminal property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTerminal() {
            return terminal;
        }

        /**
         * Sets the value of the terminal property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTerminal(String value) {
            this.terminal = value;
        }

        /**
         * Gets the value of the gate property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getGate() {
            return gate;
        }

        /**
         * Sets the value of the gate property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setGate(String value) {
            this.gate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                strategy.appendField(locator, this, "locationCode", buffer, theLocationCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                strategy.appendField(locator, this, "codeContext", buffer, theCodeContext);
            }
            {
                String theTerminal;
                theTerminal = this.getTerminal();
                strategy.appendField(locator, this, "terminal", buffer, theTerminal);
            }
            {
                String theGate;
                theGate = this.getGate();
                strategy.appendField(locator, this, "gate", buffer, theGate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FlightSegmentBaseType.ArrivalAirport)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FlightSegmentBaseType.ArrivalAirport that = ((FlightSegmentBaseType.ArrivalAirport) object);
            {
                String lhsLocationCode;
                lhsLocationCode = this.getLocationCode();
                String rhsLocationCode;
                rhsLocationCode = that.getLocationCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "locationCode", lhsLocationCode), LocatorUtils.property(thatLocator, "locationCode", rhsLocationCode), lhsLocationCode, rhsLocationCode)) {
                    return false;
                }
            }
            {
                String lhsCodeContext;
                lhsCodeContext = this.getCodeContext();
                String rhsCodeContext;
                rhsCodeContext = that.getCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "codeContext", lhsCodeContext), LocatorUtils.property(thatLocator, "codeContext", rhsCodeContext), lhsCodeContext, rhsCodeContext)) {
                    return false;
                }
            }
            {
                String lhsTerminal;
                lhsTerminal = this.getTerminal();
                String rhsTerminal;
                rhsTerminal = that.getTerminal();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "terminal", lhsTerminal), LocatorUtils.property(thatLocator, "terminal", rhsTerminal), lhsTerminal, rhsTerminal)) {
                    return false;
                }
            }
            {
                String lhsGate;
                lhsGate = this.getGate();
                String rhsGate;
                rhsGate = that.getGate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "gate", lhsGate), LocatorUtils.property(thatLocator, "gate", rhsGate), lhsGate, rhsGate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locationCode", theLocationCode), currentHashCode, theLocationCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeContext", theCodeContext), currentHashCode, theCodeContext);
            }
            {
                String theTerminal;
                theTerminal = this.getTerminal();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "terminal", theTerminal), currentHashCode, theTerminal);
            }
            {
                String theGate;
                theGate = this.getGate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gate", theGate), currentHashCode, theGate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FlightSegmentBaseType.ArrivalAirport) {
                final FlightSegmentBaseType.ArrivalAirport copy = ((FlightSegmentBaseType.ArrivalAirport) draftCopy);
                if (this.locationCode!= null) {
                    String sourceLocationCode;
                    sourceLocationCode = this.getLocationCode();
                    String copyLocationCode = ((String) strategy.copy(LocatorUtils.property(locator, "locationCode", sourceLocationCode), sourceLocationCode));
                    copy.setLocationCode(copyLocationCode);
                } else {
                    copy.locationCode = null;
                }
                if (this.codeContext!= null) {
                    String sourceCodeContext;
                    sourceCodeContext = this.getCodeContext();
                    String copyCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "codeContext", sourceCodeContext), sourceCodeContext));
                    copy.setCodeContext(copyCodeContext);
                } else {
                    copy.codeContext = null;
                }
                if (this.terminal!= null) {
                    String sourceTerminal;
                    sourceTerminal = this.getTerminal();
                    String copyTerminal = ((String) strategy.copy(LocatorUtils.property(locator, "terminal", sourceTerminal), sourceTerminal));
                    copy.setTerminal(copyTerminal);
                } else {
                    copy.terminal = null;
                }
                if (this.gate!= null) {
                    String sourceGate;
                    sourceGate = this.getGate();
                    String copyGate = ((String) strategy.copy(LocatorUtils.property(locator, "gate", sourceGate), sourceGate));
                    copy.setGate(copyGate);
                } else {
                    copy.gate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FlightSegmentBaseType.ArrivalAirport();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AirportLocationGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DepartureAirport
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "LocationCode")
        protected String locationCode;
        @XmlAttribute(name = "CodeContext")
        protected String codeContext;
        @XmlAttribute(name = "Terminal")
        protected String terminal;
        @XmlAttribute(name = "Gate")
        protected String gate;

        /**
         * Gets the value of the locationCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLocationCode() {
            return locationCode;
        }

        /**
         * Sets the value of the locationCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLocationCode(String value) {
            this.locationCode = value;
        }

        /**
         * Gets the value of the codeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCodeContext() {
            if (codeContext == null) {
                return "IATA";
            } else {
                return codeContext;
            }
        }

        /**
         * Sets the value of the codeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCodeContext(String value) {
            this.codeContext = value;
        }

        /**
         * Gets the value of the terminal property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTerminal() {
            return terminal;
        }

        /**
         * Sets the value of the terminal property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTerminal(String value) {
            this.terminal = value;
        }

        /**
         * Gets the value of the gate property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getGate() {
            return gate;
        }

        /**
         * Sets the value of the gate property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setGate(String value) {
            this.gate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                strategy.appendField(locator, this, "locationCode", buffer, theLocationCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                strategy.appendField(locator, this, "codeContext", buffer, theCodeContext);
            }
            {
                String theTerminal;
                theTerminal = this.getTerminal();
                strategy.appendField(locator, this, "terminal", buffer, theTerminal);
            }
            {
                String theGate;
                theGate = this.getGate();
                strategy.appendField(locator, this, "gate", buffer, theGate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FlightSegmentBaseType.DepartureAirport)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FlightSegmentBaseType.DepartureAirport that = ((FlightSegmentBaseType.DepartureAirport) object);
            {
                String lhsLocationCode;
                lhsLocationCode = this.getLocationCode();
                String rhsLocationCode;
                rhsLocationCode = that.getLocationCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "locationCode", lhsLocationCode), LocatorUtils.property(thatLocator, "locationCode", rhsLocationCode), lhsLocationCode, rhsLocationCode)) {
                    return false;
                }
            }
            {
                String lhsCodeContext;
                lhsCodeContext = this.getCodeContext();
                String rhsCodeContext;
                rhsCodeContext = that.getCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "codeContext", lhsCodeContext), LocatorUtils.property(thatLocator, "codeContext", rhsCodeContext), lhsCodeContext, rhsCodeContext)) {
                    return false;
                }
            }
            {
                String lhsTerminal;
                lhsTerminal = this.getTerminal();
                String rhsTerminal;
                rhsTerminal = that.getTerminal();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "terminal", lhsTerminal), LocatorUtils.property(thatLocator, "terminal", rhsTerminal), lhsTerminal, rhsTerminal)) {
                    return false;
                }
            }
            {
                String lhsGate;
                lhsGate = this.getGate();
                String rhsGate;
                rhsGate = that.getGate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "gate", lhsGate), LocatorUtils.property(thatLocator, "gate", rhsGate), lhsGate, rhsGate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locationCode", theLocationCode), currentHashCode, theLocationCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeContext", theCodeContext), currentHashCode, theCodeContext);
            }
            {
                String theTerminal;
                theTerminal = this.getTerminal();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "terminal", theTerminal), currentHashCode, theTerminal);
            }
            {
                String theGate;
                theGate = this.getGate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gate", theGate), currentHashCode, theGate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FlightSegmentBaseType.DepartureAirport) {
                final FlightSegmentBaseType.DepartureAirport copy = ((FlightSegmentBaseType.DepartureAirport) draftCopy);
                if (this.locationCode!= null) {
                    String sourceLocationCode;
                    sourceLocationCode = this.getLocationCode();
                    String copyLocationCode = ((String) strategy.copy(LocatorUtils.property(locator, "locationCode", sourceLocationCode), sourceLocationCode));
                    copy.setLocationCode(copyLocationCode);
                } else {
                    copy.locationCode = null;
                }
                if (this.codeContext!= null) {
                    String sourceCodeContext;
                    sourceCodeContext = this.getCodeContext();
                    String copyCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "codeContext", sourceCodeContext), sourceCodeContext));
                    copy.setCodeContext(copyCodeContext);
                } else {
                    copy.codeContext = null;
                }
                if (this.terminal!= null) {
                    String sourceTerminal;
                    sourceTerminal = this.getTerminal();
                    String copyTerminal = ((String) strategy.copy(LocatorUtils.property(locator, "terminal", sourceTerminal), sourceTerminal));
                    copy.setTerminal(copyTerminal);
                } else {
                    copy.terminal = null;
                }
                if (this.gate!= null) {
                    String sourceGate;
                    sourceGate = this.getGate();
                    String copyGate = ((String) strategy.copy(LocatorUtils.property(locator, "gate", sourceGate), sourceGate));
                    copy.setGate(copyGate);
                } else {
                    copy.gate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FlightSegmentBaseType.DepartureAirport();
        }

    }

}
