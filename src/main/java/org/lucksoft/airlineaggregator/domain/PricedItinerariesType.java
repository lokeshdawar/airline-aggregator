//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Container for priced itineraries.
 * 
 * <p>Java class for PricedItinerariesType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PricedItinerariesType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PricedItinerary" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}PricedItineraryType"&gt;
 *                 &lt;attribute name="OriginDestinationRefNumber" type="{http://www.opentravel.org/OTA/2003/05}Numeric1to99" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PricedItinerariesType", propOrder = {
    "pricedItinerary"
})
public class PricedItinerariesType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "PricedItinerary", required = true)
    protected List<PricedItinerariesType.PricedItinerary> pricedItinerary;

    /**
     * Gets the value of the pricedItinerary property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pricedItinerary property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPricedItinerary().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PricedItinerariesType.PricedItinerary }
     * 
     * 
     */
    public List<PricedItinerariesType.PricedItinerary> getPricedItinerary() {
        if (pricedItinerary == null) {
            pricedItinerary = new ArrayList<PricedItinerariesType.PricedItinerary>();
        }
        return this.pricedItinerary;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<PricedItinerariesType.PricedItinerary> thePricedItinerary;
            thePricedItinerary = (((this.pricedItinerary!= null)&&(!this.pricedItinerary.isEmpty()))?this.getPricedItinerary():null);
            strategy.appendField(locator, this, "pricedItinerary", buffer, thePricedItinerary);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PricedItinerariesType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PricedItinerariesType that = ((PricedItinerariesType) object);
        {
            List<PricedItinerariesType.PricedItinerary> lhsPricedItinerary;
            lhsPricedItinerary = (((this.pricedItinerary!= null)&&(!this.pricedItinerary.isEmpty()))?this.getPricedItinerary():null);
            List<PricedItinerariesType.PricedItinerary> rhsPricedItinerary;
            rhsPricedItinerary = (((that.pricedItinerary!= null)&&(!that.pricedItinerary.isEmpty()))?that.getPricedItinerary():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pricedItinerary", lhsPricedItinerary), LocatorUtils.property(thatLocator, "pricedItinerary", rhsPricedItinerary), lhsPricedItinerary, rhsPricedItinerary)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<PricedItinerariesType.PricedItinerary> thePricedItinerary;
            thePricedItinerary = (((this.pricedItinerary!= null)&&(!this.pricedItinerary.isEmpty()))?this.getPricedItinerary():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pricedItinerary", thePricedItinerary), currentHashCode, thePricedItinerary);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PricedItinerariesType) {
            final PricedItinerariesType copy = ((PricedItinerariesType) draftCopy);
            if ((this.pricedItinerary!= null)&&(!this.pricedItinerary.isEmpty())) {
                List<PricedItinerariesType.PricedItinerary> sourcePricedItinerary;
                sourcePricedItinerary = (((this.pricedItinerary!= null)&&(!this.pricedItinerary.isEmpty()))?this.getPricedItinerary():null);
                @SuppressWarnings("unchecked")
                List<PricedItinerariesType.PricedItinerary> copyPricedItinerary = ((List<PricedItinerariesType.PricedItinerary> ) strategy.copy(LocatorUtils.property(locator, "pricedItinerary", sourcePricedItinerary), sourcePricedItinerary));
                copy.pricedItinerary = null;
                if (copyPricedItinerary!= null) {
                    List<PricedItinerariesType.PricedItinerary> uniquePricedItineraryl = copy.getPricedItinerary();
                    uniquePricedItineraryl.addAll(copyPricedItinerary);
                }
            } else {
                copy.pricedItinerary = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PricedItinerariesType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}PricedItineraryType"&gt;
     *       &lt;attribute name="OriginDestinationRefNumber" type="{http://www.opentravel.org/OTA/2003/05}Numeric1to99" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class PricedItinerary
        extends PricedItineraryType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "OriginDestinationRefNumber")
        protected Integer originDestinationRefNumber;

        /**
         * Gets the value of the originDestinationRefNumber property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public Integer getOriginDestinationRefNumber() {
            return originDestinationRefNumber;
        }

        /**
         * Sets the value of the originDestinationRefNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setOriginDestinationRefNumber(Integer value) {
            this.originDestinationRefNumber = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                Integer theOriginDestinationRefNumber;
                theOriginDestinationRefNumber = this.getOriginDestinationRefNumber();
                strategy.appendField(locator, this, "originDestinationRefNumber", buffer, theOriginDestinationRefNumber);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PricedItinerariesType.PricedItinerary)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final PricedItinerariesType.PricedItinerary that = ((PricedItinerariesType.PricedItinerary) object);
            {
                Integer lhsOriginDestinationRefNumber;
                lhsOriginDestinationRefNumber = this.getOriginDestinationRefNumber();
                Integer rhsOriginDestinationRefNumber;
                rhsOriginDestinationRefNumber = that.getOriginDestinationRefNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "originDestinationRefNumber", lhsOriginDestinationRefNumber), LocatorUtils.property(thatLocator, "originDestinationRefNumber", rhsOriginDestinationRefNumber), lhsOriginDestinationRefNumber, rhsOriginDestinationRefNumber)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                Integer theOriginDestinationRefNumber;
                theOriginDestinationRefNumber = this.getOriginDestinationRefNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originDestinationRefNumber", theOriginDestinationRefNumber), currentHashCode, theOriginDestinationRefNumber);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof PricedItinerariesType.PricedItinerary) {
                final PricedItinerariesType.PricedItinerary copy = ((PricedItinerariesType.PricedItinerary) draftCopy);
                if (this.originDestinationRefNumber!= null) {
                    Integer sourceOriginDestinationRefNumber;
                    sourceOriginDestinationRefNumber = this.getOriginDestinationRefNumber();
                    Integer copyOriginDestinationRefNumber = ((Integer) strategy.copy(LocatorUtils.property(locator, "originDestinationRefNumber", sourceOriginDestinationRefNumber), sourceOriginDestinationRefNumber));
                    copy.setOriginDestinationRefNumber(copyOriginDestinationRefNumber);
                } else {
                    copy.originDestinationRefNumber = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PricedItinerariesType.PricedItinerary();
        }

    }

}
