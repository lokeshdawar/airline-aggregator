//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Container used to hold information regarding advance reservation and/or advance ticketing.
 * 
 * <p>Java class for AdvResTicketingType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AdvResTicketingType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence minOccurs="0"&gt;
 *         &lt;element name="AdvReservation" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attribute name="LatestTimeOfDay" type="{http://www.opentravel.org/OTA/2003/05}TimeOrDateTimeType" /&gt;
 *                 &lt;attribute name="LatestPeriod" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to3" /&gt;
 *                 &lt;attribute name="LatestUnit" type="{http://www.opentravel.org/OTA/2003/05}StayUnitType" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="AdvTicketing" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attribute name="FromResTimeOfDay" type="{http://www.opentravel.org/OTA/2003/05}TimeOrDateTimeType" /&gt;
 *                 &lt;attribute name="FromResPeriod" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to3" /&gt;
 *                 &lt;attribute name="FromResUnit" type="{http://www.opentravel.org/OTA/2003/05}StayUnitType" /&gt;
 *                 &lt;attribute name="FromDepartTimeOfDay" type="{http://www.opentravel.org/OTA/2003/05}TimeOrDateTimeType" /&gt;
 *                 &lt;attribute name="FromDepartPeriod" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to3" /&gt;
 *                 &lt;attribute name="FromDepartUnit" type="{http://www.opentravel.org/OTA/2003/05}StayUnitType" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="AdvResInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="AdvTicketingInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="RequestedTicketingDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AdvResTicketingType", propOrder = {
    "advReservation",
    "advTicketing"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.RuleInfoType.ResTicketingRules.AdvResTicketing.class
})
public class AdvResTicketingType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AdvReservation")
    protected AdvResTicketingType.AdvReservation advReservation;
    @XmlElement(name = "AdvTicketing")
    protected AdvResTicketingType.AdvTicketing advTicketing;
    @XmlAttribute(name = "AdvResInd")
    protected Boolean advResInd;
    @XmlAttribute(name = "AdvTicketingInd")
    protected Boolean advTicketingInd;
    @XmlAttribute(name = "RequestedTicketingDate")
    protected String requestedTicketingDate;

    /**
     * Gets the value of the advReservation property.
     * 
     * @return
     *     possible object is
     *     {@link AdvResTicketingType.AdvReservation }
     *     
     */
    public AdvResTicketingType.AdvReservation getAdvReservation() {
        return advReservation;
    }

    /**
     * Sets the value of the advReservation property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdvResTicketingType.AdvReservation }
     *     
     */
    public void setAdvReservation(AdvResTicketingType.AdvReservation value) {
        this.advReservation = value;
    }

    /**
     * Gets the value of the advTicketing property.
     * 
     * @return
     *     possible object is
     *     {@link AdvResTicketingType.AdvTicketing }
     *     
     */
    public AdvResTicketingType.AdvTicketing getAdvTicketing() {
        return advTicketing;
    }

    /**
     * Sets the value of the advTicketing property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdvResTicketingType.AdvTicketing }
     *     
     */
    public void setAdvTicketing(AdvResTicketingType.AdvTicketing value) {
        this.advTicketing = value;
    }

    /**
     * Gets the value of the advResInd property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAdvResInd() {
        return advResInd;
    }

    /**
     * Sets the value of the advResInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAdvResInd(Boolean value) {
        this.advResInd = value;
    }

    /**
     * Gets the value of the advTicketingInd property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAdvTicketingInd() {
        return advTicketingInd;
    }

    /**
     * Sets the value of the advTicketingInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAdvTicketingInd(Boolean value) {
        this.advTicketingInd = value;
    }

    /**
     * Gets the value of the requestedTicketingDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRequestedTicketingDate() {
        return requestedTicketingDate;
    }

    /**
     * Sets the value of the requestedTicketingDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRequestedTicketingDate(String value) {
        this.requestedTicketingDate = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AdvResTicketingType.AdvReservation theAdvReservation;
            theAdvReservation = this.getAdvReservation();
            strategy.appendField(locator, this, "advReservation", buffer, theAdvReservation);
        }
        {
            AdvResTicketingType.AdvTicketing theAdvTicketing;
            theAdvTicketing = this.getAdvTicketing();
            strategy.appendField(locator, this, "advTicketing", buffer, theAdvTicketing);
        }
        {
            Boolean theAdvResInd;
            theAdvResInd = this.isAdvResInd();
            strategy.appendField(locator, this, "advResInd", buffer, theAdvResInd);
        }
        {
            Boolean theAdvTicketingInd;
            theAdvTicketingInd = this.isAdvTicketingInd();
            strategy.appendField(locator, this, "advTicketingInd", buffer, theAdvTicketingInd);
        }
        {
            String theRequestedTicketingDate;
            theRequestedTicketingDate = this.getRequestedTicketingDate();
            strategy.appendField(locator, this, "requestedTicketingDate", buffer, theRequestedTicketingDate);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AdvResTicketingType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AdvResTicketingType that = ((AdvResTicketingType) object);
        {
            AdvResTicketingType.AdvReservation lhsAdvReservation;
            lhsAdvReservation = this.getAdvReservation();
            AdvResTicketingType.AdvReservation rhsAdvReservation;
            rhsAdvReservation = that.getAdvReservation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "advReservation", lhsAdvReservation), LocatorUtils.property(thatLocator, "advReservation", rhsAdvReservation), lhsAdvReservation, rhsAdvReservation)) {
                return false;
            }
        }
        {
            AdvResTicketingType.AdvTicketing lhsAdvTicketing;
            lhsAdvTicketing = this.getAdvTicketing();
            AdvResTicketingType.AdvTicketing rhsAdvTicketing;
            rhsAdvTicketing = that.getAdvTicketing();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "advTicketing", lhsAdvTicketing), LocatorUtils.property(thatLocator, "advTicketing", rhsAdvTicketing), lhsAdvTicketing, rhsAdvTicketing)) {
                return false;
            }
        }
        {
            Boolean lhsAdvResInd;
            lhsAdvResInd = this.isAdvResInd();
            Boolean rhsAdvResInd;
            rhsAdvResInd = that.isAdvResInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "advResInd", lhsAdvResInd), LocatorUtils.property(thatLocator, "advResInd", rhsAdvResInd), lhsAdvResInd, rhsAdvResInd)) {
                return false;
            }
        }
        {
            Boolean lhsAdvTicketingInd;
            lhsAdvTicketingInd = this.isAdvTicketingInd();
            Boolean rhsAdvTicketingInd;
            rhsAdvTicketingInd = that.isAdvTicketingInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "advTicketingInd", lhsAdvTicketingInd), LocatorUtils.property(thatLocator, "advTicketingInd", rhsAdvTicketingInd), lhsAdvTicketingInd, rhsAdvTicketingInd)) {
                return false;
            }
        }
        {
            String lhsRequestedTicketingDate;
            lhsRequestedTicketingDate = this.getRequestedTicketingDate();
            String rhsRequestedTicketingDate;
            rhsRequestedTicketingDate = that.getRequestedTicketingDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestedTicketingDate", lhsRequestedTicketingDate), LocatorUtils.property(thatLocator, "requestedTicketingDate", rhsRequestedTicketingDate), lhsRequestedTicketingDate, rhsRequestedTicketingDate)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AdvResTicketingType.AdvReservation theAdvReservation;
            theAdvReservation = this.getAdvReservation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "advReservation", theAdvReservation), currentHashCode, theAdvReservation);
        }
        {
            AdvResTicketingType.AdvTicketing theAdvTicketing;
            theAdvTicketing = this.getAdvTicketing();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "advTicketing", theAdvTicketing), currentHashCode, theAdvTicketing);
        }
        {
            Boolean theAdvResInd;
            theAdvResInd = this.isAdvResInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "advResInd", theAdvResInd), currentHashCode, theAdvResInd);
        }
        {
            Boolean theAdvTicketingInd;
            theAdvTicketingInd = this.isAdvTicketingInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "advTicketingInd", theAdvTicketingInd), currentHashCode, theAdvTicketingInd);
        }
        {
            String theRequestedTicketingDate;
            theRequestedTicketingDate = this.getRequestedTicketingDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestedTicketingDate", theRequestedTicketingDate), currentHashCode, theRequestedTicketingDate);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AdvResTicketingType) {
            final AdvResTicketingType copy = ((AdvResTicketingType) draftCopy);
            if (this.advReservation!= null) {
                AdvResTicketingType.AdvReservation sourceAdvReservation;
                sourceAdvReservation = this.getAdvReservation();
                AdvResTicketingType.AdvReservation copyAdvReservation = ((AdvResTicketingType.AdvReservation) strategy.copy(LocatorUtils.property(locator, "advReservation", sourceAdvReservation), sourceAdvReservation));
                copy.setAdvReservation(copyAdvReservation);
            } else {
                copy.advReservation = null;
            }
            if (this.advTicketing!= null) {
                AdvResTicketingType.AdvTicketing sourceAdvTicketing;
                sourceAdvTicketing = this.getAdvTicketing();
                AdvResTicketingType.AdvTicketing copyAdvTicketing = ((AdvResTicketingType.AdvTicketing) strategy.copy(LocatorUtils.property(locator, "advTicketing", sourceAdvTicketing), sourceAdvTicketing));
                copy.setAdvTicketing(copyAdvTicketing);
            } else {
                copy.advTicketing = null;
            }
            if (this.advResInd!= null) {
                Boolean sourceAdvResInd;
                sourceAdvResInd = this.isAdvResInd();
                Boolean copyAdvResInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "advResInd", sourceAdvResInd), sourceAdvResInd));
                copy.setAdvResInd(copyAdvResInd);
            } else {
                copy.advResInd = null;
            }
            if (this.advTicketingInd!= null) {
                Boolean sourceAdvTicketingInd;
                sourceAdvTicketingInd = this.isAdvTicketingInd();
                Boolean copyAdvTicketingInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "advTicketingInd", sourceAdvTicketingInd), sourceAdvTicketingInd));
                copy.setAdvTicketingInd(copyAdvTicketingInd);
            } else {
                copy.advTicketingInd = null;
            }
            if (this.requestedTicketingDate!= null) {
                String sourceRequestedTicketingDate;
                sourceRequestedTicketingDate = this.getRequestedTicketingDate();
                String copyRequestedTicketingDate = ((String) strategy.copy(LocatorUtils.property(locator, "requestedTicketingDate", sourceRequestedTicketingDate), sourceRequestedTicketingDate));
                copy.setRequestedTicketingDate(copyRequestedTicketingDate);
            } else {
                copy.requestedTicketingDate = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AdvResTicketingType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attribute name="LatestTimeOfDay" type="{http://www.opentravel.org/OTA/2003/05}TimeOrDateTimeType" /&gt;
     *       &lt;attribute name="LatestPeriod" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to3" /&gt;
     *       &lt;attribute name="LatestUnit" type="{http://www.opentravel.org/OTA/2003/05}StayUnitType" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class AdvReservation
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "LatestTimeOfDay")
        protected String latestTimeOfDay;
        @XmlAttribute(name = "LatestPeriod")
        protected String latestPeriod;
        @XmlAttribute(name = "LatestUnit")
        protected StayUnitType latestUnit;

        /**
         * Gets the value of the latestTimeOfDay property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatestTimeOfDay() {
            return latestTimeOfDay;
        }

        /**
         * Sets the value of the latestTimeOfDay property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatestTimeOfDay(String value) {
            this.latestTimeOfDay = value;
        }

        /**
         * Gets the value of the latestPeriod property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatestPeriod() {
            return latestPeriod;
        }

        /**
         * Sets the value of the latestPeriod property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatestPeriod(String value) {
            this.latestPeriod = value;
        }

        /**
         * Gets the value of the latestUnit property.
         * 
         * @return
         *     possible object is
         *     {@link StayUnitType }
         *     
         */
        public StayUnitType getLatestUnit() {
            return latestUnit;
        }

        /**
         * Sets the value of the latestUnit property.
         * 
         * @param value
         *     allowed object is
         *     {@link StayUnitType }
         *     
         */
        public void setLatestUnit(StayUnitType value) {
            this.latestUnit = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theLatestTimeOfDay;
                theLatestTimeOfDay = this.getLatestTimeOfDay();
                strategy.appendField(locator, this, "latestTimeOfDay", buffer, theLatestTimeOfDay);
            }
            {
                String theLatestPeriod;
                theLatestPeriod = this.getLatestPeriod();
                strategy.appendField(locator, this, "latestPeriod", buffer, theLatestPeriod);
            }
            {
                StayUnitType theLatestUnit;
                theLatestUnit = this.getLatestUnit();
                strategy.appendField(locator, this, "latestUnit", buffer, theLatestUnit);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AdvResTicketingType.AdvReservation)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AdvResTicketingType.AdvReservation that = ((AdvResTicketingType.AdvReservation) object);
            {
                String lhsLatestTimeOfDay;
                lhsLatestTimeOfDay = this.getLatestTimeOfDay();
                String rhsLatestTimeOfDay;
                rhsLatestTimeOfDay = that.getLatestTimeOfDay();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latestTimeOfDay", lhsLatestTimeOfDay), LocatorUtils.property(thatLocator, "latestTimeOfDay", rhsLatestTimeOfDay), lhsLatestTimeOfDay, rhsLatestTimeOfDay)) {
                    return false;
                }
            }
            {
                String lhsLatestPeriod;
                lhsLatestPeriod = this.getLatestPeriod();
                String rhsLatestPeriod;
                rhsLatestPeriod = that.getLatestPeriod();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latestPeriod", lhsLatestPeriod), LocatorUtils.property(thatLocator, "latestPeriod", rhsLatestPeriod), lhsLatestPeriod, rhsLatestPeriod)) {
                    return false;
                }
            }
            {
                StayUnitType lhsLatestUnit;
                lhsLatestUnit = this.getLatestUnit();
                StayUnitType rhsLatestUnit;
                rhsLatestUnit = that.getLatestUnit();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latestUnit", lhsLatestUnit), LocatorUtils.property(thatLocator, "latestUnit", rhsLatestUnit), lhsLatestUnit, rhsLatestUnit)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theLatestTimeOfDay;
                theLatestTimeOfDay = this.getLatestTimeOfDay();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latestTimeOfDay", theLatestTimeOfDay), currentHashCode, theLatestTimeOfDay);
            }
            {
                String theLatestPeriod;
                theLatestPeriod = this.getLatestPeriod();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latestPeriod", theLatestPeriod), currentHashCode, theLatestPeriod);
            }
            {
                StayUnitType theLatestUnit;
                theLatestUnit = this.getLatestUnit();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latestUnit", theLatestUnit), currentHashCode, theLatestUnit);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AdvResTicketingType.AdvReservation) {
                final AdvResTicketingType.AdvReservation copy = ((AdvResTicketingType.AdvReservation) draftCopy);
                if (this.latestTimeOfDay!= null) {
                    String sourceLatestTimeOfDay;
                    sourceLatestTimeOfDay = this.getLatestTimeOfDay();
                    String copyLatestTimeOfDay = ((String) strategy.copy(LocatorUtils.property(locator, "latestTimeOfDay", sourceLatestTimeOfDay), sourceLatestTimeOfDay));
                    copy.setLatestTimeOfDay(copyLatestTimeOfDay);
                } else {
                    copy.latestTimeOfDay = null;
                }
                if (this.latestPeriod!= null) {
                    String sourceLatestPeriod;
                    sourceLatestPeriod = this.getLatestPeriod();
                    String copyLatestPeriod = ((String) strategy.copy(LocatorUtils.property(locator, "latestPeriod", sourceLatestPeriod), sourceLatestPeriod));
                    copy.setLatestPeriod(copyLatestPeriod);
                } else {
                    copy.latestPeriod = null;
                }
                if (this.latestUnit!= null) {
                    StayUnitType sourceLatestUnit;
                    sourceLatestUnit = this.getLatestUnit();
                    StayUnitType copyLatestUnit = ((StayUnitType) strategy.copy(LocatorUtils.property(locator, "latestUnit", sourceLatestUnit), sourceLatestUnit));
                    copy.setLatestUnit(copyLatestUnit);
                } else {
                    copy.latestUnit = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AdvResTicketingType.AdvReservation();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attribute name="FromResTimeOfDay" type="{http://www.opentravel.org/OTA/2003/05}TimeOrDateTimeType" /&gt;
     *       &lt;attribute name="FromResPeriod" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to3" /&gt;
     *       &lt;attribute name="FromResUnit" type="{http://www.opentravel.org/OTA/2003/05}StayUnitType" /&gt;
     *       &lt;attribute name="FromDepartTimeOfDay" type="{http://www.opentravel.org/OTA/2003/05}TimeOrDateTimeType" /&gt;
     *       &lt;attribute name="FromDepartPeriod" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to3" /&gt;
     *       &lt;attribute name="FromDepartUnit" type="{http://www.opentravel.org/OTA/2003/05}StayUnitType" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class AdvTicketing
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "FromResTimeOfDay")
        protected String fromResTimeOfDay;
        @XmlAttribute(name = "FromResPeriod")
        protected String fromResPeriod;
        @XmlAttribute(name = "FromResUnit")
        protected StayUnitType fromResUnit;
        @XmlAttribute(name = "FromDepartTimeOfDay")
        protected String fromDepartTimeOfDay;
        @XmlAttribute(name = "FromDepartPeriod")
        protected String fromDepartPeriod;
        @XmlAttribute(name = "FromDepartUnit")
        protected StayUnitType fromDepartUnit;

        /**
         * Gets the value of the fromResTimeOfDay property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFromResTimeOfDay() {
            return fromResTimeOfDay;
        }

        /**
         * Sets the value of the fromResTimeOfDay property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFromResTimeOfDay(String value) {
            this.fromResTimeOfDay = value;
        }

        /**
         * Gets the value of the fromResPeriod property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFromResPeriod() {
            return fromResPeriod;
        }

        /**
         * Sets the value of the fromResPeriod property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFromResPeriod(String value) {
            this.fromResPeriod = value;
        }

        /**
         * Gets the value of the fromResUnit property.
         * 
         * @return
         *     possible object is
         *     {@link StayUnitType }
         *     
         */
        public StayUnitType getFromResUnit() {
            return fromResUnit;
        }

        /**
         * Sets the value of the fromResUnit property.
         * 
         * @param value
         *     allowed object is
         *     {@link StayUnitType }
         *     
         */
        public void setFromResUnit(StayUnitType value) {
            this.fromResUnit = value;
        }

        /**
         * Gets the value of the fromDepartTimeOfDay property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFromDepartTimeOfDay() {
            return fromDepartTimeOfDay;
        }

        /**
         * Sets the value of the fromDepartTimeOfDay property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFromDepartTimeOfDay(String value) {
            this.fromDepartTimeOfDay = value;
        }

        /**
         * Gets the value of the fromDepartPeriod property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFromDepartPeriod() {
            return fromDepartPeriod;
        }

        /**
         * Sets the value of the fromDepartPeriod property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFromDepartPeriod(String value) {
            this.fromDepartPeriod = value;
        }

        /**
         * Gets the value of the fromDepartUnit property.
         * 
         * @return
         *     possible object is
         *     {@link StayUnitType }
         *     
         */
        public StayUnitType getFromDepartUnit() {
            return fromDepartUnit;
        }

        /**
         * Sets the value of the fromDepartUnit property.
         * 
         * @param value
         *     allowed object is
         *     {@link StayUnitType }
         *     
         */
        public void setFromDepartUnit(StayUnitType value) {
            this.fromDepartUnit = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theFromResTimeOfDay;
                theFromResTimeOfDay = this.getFromResTimeOfDay();
                strategy.appendField(locator, this, "fromResTimeOfDay", buffer, theFromResTimeOfDay);
            }
            {
                String theFromResPeriod;
                theFromResPeriod = this.getFromResPeriod();
                strategy.appendField(locator, this, "fromResPeriod", buffer, theFromResPeriod);
            }
            {
                StayUnitType theFromResUnit;
                theFromResUnit = this.getFromResUnit();
                strategy.appendField(locator, this, "fromResUnit", buffer, theFromResUnit);
            }
            {
                String theFromDepartTimeOfDay;
                theFromDepartTimeOfDay = this.getFromDepartTimeOfDay();
                strategy.appendField(locator, this, "fromDepartTimeOfDay", buffer, theFromDepartTimeOfDay);
            }
            {
                String theFromDepartPeriod;
                theFromDepartPeriod = this.getFromDepartPeriod();
                strategy.appendField(locator, this, "fromDepartPeriod", buffer, theFromDepartPeriod);
            }
            {
                StayUnitType theFromDepartUnit;
                theFromDepartUnit = this.getFromDepartUnit();
                strategy.appendField(locator, this, "fromDepartUnit", buffer, theFromDepartUnit);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AdvResTicketingType.AdvTicketing)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AdvResTicketingType.AdvTicketing that = ((AdvResTicketingType.AdvTicketing) object);
            {
                String lhsFromResTimeOfDay;
                lhsFromResTimeOfDay = this.getFromResTimeOfDay();
                String rhsFromResTimeOfDay;
                rhsFromResTimeOfDay = that.getFromResTimeOfDay();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fromResTimeOfDay", lhsFromResTimeOfDay), LocatorUtils.property(thatLocator, "fromResTimeOfDay", rhsFromResTimeOfDay), lhsFromResTimeOfDay, rhsFromResTimeOfDay)) {
                    return false;
                }
            }
            {
                String lhsFromResPeriod;
                lhsFromResPeriod = this.getFromResPeriod();
                String rhsFromResPeriod;
                rhsFromResPeriod = that.getFromResPeriod();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fromResPeriod", lhsFromResPeriod), LocatorUtils.property(thatLocator, "fromResPeriod", rhsFromResPeriod), lhsFromResPeriod, rhsFromResPeriod)) {
                    return false;
                }
            }
            {
                StayUnitType lhsFromResUnit;
                lhsFromResUnit = this.getFromResUnit();
                StayUnitType rhsFromResUnit;
                rhsFromResUnit = that.getFromResUnit();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fromResUnit", lhsFromResUnit), LocatorUtils.property(thatLocator, "fromResUnit", rhsFromResUnit), lhsFromResUnit, rhsFromResUnit)) {
                    return false;
                }
            }
            {
                String lhsFromDepartTimeOfDay;
                lhsFromDepartTimeOfDay = this.getFromDepartTimeOfDay();
                String rhsFromDepartTimeOfDay;
                rhsFromDepartTimeOfDay = that.getFromDepartTimeOfDay();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fromDepartTimeOfDay", lhsFromDepartTimeOfDay), LocatorUtils.property(thatLocator, "fromDepartTimeOfDay", rhsFromDepartTimeOfDay), lhsFromDepartTimeOfDay, rhsFromDepartTimeOfDay)) {
                    return false;
                }
            }
            {
                String lhsFromDepartPeriod;
                lhsFromDepartPeriod = this.getFromDepartPeriod();
                String rhsFromDepartPeriod;
                rhsFromDepartPeriod = that.getFromDepartPeriod();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fromDepartPeriod", lhsFromDepartPeriod), LocatorUtils.property(thatLocator, "fromDepartPeriod", rhsFromDepartPeriod), lhsFromDepartPeriod, rhsFromDepartPeriod)) {
                    return false;
                }
            }
            {
                StayUnitType lhsFromDepartUnit;
                lhsFromDepartUnit = this.getFromDepartUnit();
                StayUnitType rhsFromDepartUnit;
                rhsFromDepartUnit = that.getFromDepartUnit();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fromDepartUnit", lhsFromDepartUnit), LocatorUtils.property(thatLocator, "fromDepartUnit", rhsFromDepartUnit), lhsFromDepartUnit, rhsFromDepartUnit)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theFromResTimeOfDay;
                theFromResTimeOfDay = this.getFromResTimeOfDay();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fromResTimeOfDay", theFromResTimeOfDay), currentHashCode, theFromResTimeOfDay);
            }
            {
                String theFromResPeriod;
                theFromResPeriod = this.getFromResPeriod();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fromResPeriod", theFromResPeriod), currentHashCode, theFromResPeriod);
            }
            {
                StayUnitType theFromResUnit;
                theFromResUnit = this.getFromResUnit();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fromResUnit", theFromResUnit), currentHashCode, theFromResUnit);
            }
            {
                String theFromDepartTimeOfDay;
                theFromDepartTimeOfDay = this.getFromDepartTimeOfDay();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fromDepartTimeOfDay", theFromDepartTimeOfDay), currentHashCode, theFromDepartTimeOfDay);
            }
            {
                String theFromDepartPeriod;
                theFromDepartPeriod = this.getFromDepartPeriod();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fromDepartPeriod", theFromDepartPeriod), currentHashCode, theFromDepartPeriod);
            }
            {
                StayUnitType theFromDepartUnit;
                theFromDepartUnit = this.getFromDepartUnit();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fromDepartUnit", theFromDepartUnit), currentHashCode, theFromDepartUnit);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AdvResTicketingType.AdvTicketing) {
                final AdvResTicketingType.AdvTicketing copy = ((AdvResTicketingType.AdvTicketing) draftCopy);
                if (this.fromResTimeOfDay!= null) {
                    String sourceFromResTimeOfDay;
                    sourceFromResTimeOfDay = this.getFromResTimeOfDay();
                    String copyFromResTimeOfDay = ((String) strategy.copy(LocatorUtils.property(locator, "fromResTimeOfDay", sourceFromResTimeOfDay), sourceFromResTimeOfDay));
                    copy.setFromResTimeOfDay(copyFromResTimeOfDay);
                } else {
                    copy.fromResTimeOfDay = null;
                }
                if (this.fromResPeriod!= null) {
                    String sourceFromResPeriod;
                    sourceFromResPeriod = this.getFromResPeriod();
                    String copyFromResPeriod = ((String) strategy.copy(LocatorUtils.property(locator, "fromResPeriod", sourceFromResPeriod), sourceFromResPeriod));
                    copy.setFromResPeriod(copyFromResPeriod);
                } else {
                    copy.fromResPeriod = null;
                }
                if (this.fromResUnit!= null) {
                    StayUnitType sourceFromResUnit;
                    sourceFromResUnit = this.getFromResUnit();
                    StayUnitType copyFromResUnit = ((StayUnitType) strategy.copy(LocatorUtils.property(locator, "fromResUnit", sourceFromResUnit), sourceFromResUnit));
                    copy.setFromResUnit(copyFromResUnit);
                } else {
                    copy.fromResUnit = null;
                }
                if (this.fromDepartTimeOfDay!= null) {
                    String sourceFromDepartTimeOfDay;
                    sourceFromDepartTimeOfDay = this.getFromDepartTimeOfDay();
                    String copyFromDepartTimeOfDay = ((String) strategy.copy(LocatorUtils.property(locator, "fromDepartTimeOfDay", sourceFromDepartTimeOfDay), sourceFromDepartTimeOfDay));
                    copy.setFromDepartTimeOfDay(copyFromDepartTimeOfDay);
                } else {
                    copy.fromDepartTimeOfDay = null;
                }
                if (this.fromDepartPeriod!= null) {
                    String sourceFromDepartPeriod;
                    sourceFromDepartPeriod = this.getFromDepartPeriod();
                    String copyFromDepartPeriod = ((String) strategy.copy(LocatorUtils.property(locator, "fromDepartPeriod", sourceFromDepartPeriod), sourceFromDepartPeriod));
                    copy.setFromDepartPeriod(copyFromDepartPeriod);
                } else {
                    copy.fromDepartPeriod = null;
                }
                if (this.fromDepartUnit!= null) {
                    StayUnitType sourceFromDepartUnit;
                    sourceFromDepartUnit = this.getFromDepartUnit();
                    StayUnitType copyFromDepartUnit = ((StayUnitType) strategy.copy(LocatorUtils.property(locator, "fromDepartUnit", sourceFromDepartUnit), sourceFromDepartUnit));
                    copy.setFromDepartUnit(copyFromDepartUnit);
                } else {
                    copy.fromDepartUnit = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AdvResTicketingType.AdvTicketing();
        }

    }

}
