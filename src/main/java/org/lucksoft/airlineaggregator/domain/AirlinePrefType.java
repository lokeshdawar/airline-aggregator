//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Identifies a collection of preferences for airline travel.
 * 
 * <p>Java class for AirlinePrefType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AirlinePrefType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="LoyaltyPref" type="{http://www.opentravel.org/OTA/2003/05}LoyaltyPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="VendorPref" type="{http://www.opentravel.org/OTA/2003/05}CompanyNamePrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="PaymentFormPref" type="{http://www.opentravel.org/OTA/2003/05}PaymentFormPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="AirportOriginPref" type="{http://www.opentravel.org/OTA/2003/05}AirportPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="AirportRoutePref" type="{http://www.opentravel.org/OTA/2003/05}AirportPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="FareRestrictPref" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FareRestrictPrefGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FlightTypePref" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FlightTypePrefGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="EquipPref" type="{http://www.opentravel.org/OTA/2003/05}EquipmentTypePref" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="CabinPref" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CabinPrefGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="SeatPref" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SeatPrefGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="TicketDistribPref" type="{http://www.opentravel.org/OTA/2003/05}TicketDistribPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="MealPref" type="{http://www.opentravel.org/OTA/2003/05}MealPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="SpecRequestPref" type="{http://www.opentravel.org/OTA/2003/05}SpecRequestPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="SSR_Pref" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SSR_PrefGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element ref="{http://www.opentravel.org/OTA/2003/05}TPA_Extensions" minOccurs="0"/&gt;
 *         &lt;element name="MediaEntertainPref" type="{http://www.opentravel.org/OTA/2003/05}MediaEntertainPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="PetInfoPref" type="{http://www.opentravel.org/OTA/2003/05}PetInfoPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PrivacyGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PreferLevelGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SmokingIndicatorGroup"/&gt;
 *       &lt;attribute name="PassengerTypeCode" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *       &lt;attribute name="AirTicketType" type="{http://www.opentravel.org/OTA/2003/05}TicketType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AirlinePrefType", propOrder = {
    "loyaltyPref",
    "vendorPref",
    "paymentFormPref",
    "airportOriginPref",
    "airportRoutePref",
    "fareRestrictPref",
    "flightTypePref",
    "equipPref",
    "cabinPref",
    "seatPref",
    "ticketDistribPref",
    "mealPref",
    "specRequestPref",
    "ssrPref",
    "tpaExtensions",
    "mediaEntertainPref",
    "petInfoPref"
})
public class AirlinePrefType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "LoyaltyPref")
    protected List<LoyaltyPrefType> loyaltyPref;
    @XmlElement(name = "VendorPref")
    protected List<CompanyNamePrefType> vendorPref;
    @XmlElement(name = "PaymentFormPref")
    protected List<PaymentFormPrefType> paymentFormPref;
    @XmlElement(name = "AirportOriginPref")
    protected List<AirportPrefType> airportOriginPref;
    @XmlElement(name = "AirportRoutePref")
    protected List<AirportPrefType> airportRoutePref;
    @XmlElement(name = "FareRestrictPref")
    protected List<AirlinePrefType.FareRestrictPref> fareRestrictPref;
    @XmlElement(name = "FlightTypePref")
    protected List<AirlinePrefType.FlightTypePref> flightTypePref;
    @XmlElement(name = "EquipPref")
    protected List<EquipmentTypePref> equipPref;
    @XmlElement(name = "CabinPref")
    protected List<AirlinePrefType.CabinPref> cabinPref;
    @XmlElement(name = "SeatPref")
    protected List<AirlinePrefType.SeatPref> seatPref;
    @XmlElement(name = "TicketDistribPref")
    protected List<TicketDistribPrefType> ticketDistribPref;
    @XmlElement(name = "MealPref")
    protected List<MealPrefType> mealPref;
    @XmlElement(name = "SpecRequestPref")
    protected List<SpecRequestPrefType> specRequestPref;
    @XmlElement(name = "SSR_Pref")
    protected List<AirlinePrefType.SSRPref> ssrPref;
    @XmlElement(name = "TPA_Extensions")
    protected TPAExtensionsType tpaExtensions;
    @XmlElement(name = "MediaEntertainPref")
    protected List<MediaEntertainPrefType> mediaEntertainPref;
    @XmlElement(name = "PetInfoPref")
    protected List<PetInfoPrefType> petInfoPref;
    @XmlAttribute(name = "PassengerTypeCode")
    protected String passengerTypeCode;
    @XmlAttribute(name = "AirTicketType")
    protected TicketType airTicketType;
    @XmlAttribute(name = "ShareSynchInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareSynchInd;
    @XmlAttribute(name = "ShareMarketInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareMarketInd;
    @XmlAttribute(name = "PreferLevel")
    protected PreferLevelType preferLevel;
    @XmlAttribute(name = "SmokingAllowed")
    protected Boolean smokingAllowed;

    /**
     * Gets the value of the loyaltyPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the loyaltyPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLoyaltyPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LoyaltyPrefType }
     * 
     * 
     */
    public List<LoyaltyPrefType> getLoyaltyPref() {
        if (loyaltyPref == null) {
            loyaltyPref = new ArrayList<LoyaltyPrefType>();
        }
        return this.loyaltyPref;
    }

    /**
     * Gets the value of the vendorPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the vendorPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVendorPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CompanyNamePrefType }
     * 
     * 
     */
    public List<CompanyNamePrefType> getVendorPref() {
        if (vendorPref == null) {
            vendorPref = new ArrayList<CompanyNamePrefType>();
        }
        return this.vendorPref;
    }

    /**
     * Gets the value of the paymentFormPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the paymentFormPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPaymentFormPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PaymentFormPrefType }
     * 
     * 
     */
    public List<PaymentFormPrefType> getPaymentFormPref() {
        if (paymentFormPref == null) {
            paymentFormPref = new ArrayList<PaymentFormPrefType>();
        }
        return this.paymentFormPref;
    }

    /**
     * Gets the value of the airportOriginPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the airportOriginPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAirportOriginPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirportPrefType }
     * 
     * 
     */
    public List<AirportPrefType> getAirportOriginPref() {
        if (airportOriginPref == null) {
            airportOriginPref = new ArrayList<AirportPrefType>();
        }
        return this.airportOriginPref;
    }

    /**
     * Gets the value of the airportRoutePref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the airportRoutePref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAirportRoutePref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirportPrefType }
     * 
     * 
     */
    public List<AirportPrefType> getAirportRoutePref() {
        if (airportRoutePref == null) {
            airportRoutePref = new ArrayList<AirportPrefType>();
        }
        return this.airportRoutePref;
    }

    /**
     * Gets the value of the fareRestrictPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fareRestrictPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFareRestrictPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirlinePrefType.FareRestrictPref }
     * 
     * 
     */
    public List<AirlinePrefType.FareRestrictPref> getFareRestrictPref() {
        if (fareRestrictPref == null) {
            fareRestrictPref = new ArrayList<AirlinePrefType.FareRestrictPref>();
        }
        return this.fareRestrictPref;
    }

    /**
     * Gets the value of the flightTypePref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the flightTypePref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFlightTypePref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirlinePrefType.FlightTypePref }
     * 
     * 
     */
    public List<AirlinePrefType.FlightTypePref> getFlightTypePref() {
        if (flightTypePref == null) {
            flightTypePref = new ArrayList<AirlinePrefType.FlightTypePref>();
        }
        return this.flightTypePref;
    }

    /**
     * Gets the value of the equipPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the equipPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEquipPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EquipmentTypePref }
     * 
     * 
     */
    public List<EquipmentTypePref> getEquipPref() {
        if (equipPref == null) {
            equipPref = new ArrayList<EquipmentTypePref>();
        }
        return this.equipPref;
    }

    /**
     * Gets the value of the cabinPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cabinPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCabinPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirlinePrefType.CabinPref }
     * 
     * 
     */
    public List<AirlinePrefType.CabinPref> getCabinPref() {
        if (cabinPref == null) {
            cabinPref = new ArrayList<AirlinePrefType.CabinPref>();
        }
        return this.cabinPref;
    }

    /**
     * Gets the value of the seatPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the seatPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSeatPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirlinePrefType.SeatPref }
     * 
     * 
     */
    public List<AirlinePrefType.SeatPref> getSeatPref() {
        if (seatPref == null) {
            seatPref = new ArrayList<AirlinePrefType.SeatPref>();
        }
        return this.seatPref;
    }

    /**
     * Gets the value of the ticketDistribPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ticketDistribPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTicketDistribPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TicketDistribPrefType }
     * 
     * 
     */
    public List<TicketDistribPrefType> getTicketDistribPref() {
        if (ticketDistribPref == null) {
            ticketDistribPref = new ArrayList<TicketDistribPrefType>();
        }
        return this.ticketDistribPref;
    }

    /**
     * Gets the value of the mealPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mealPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMealPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MealPrefType }
     * 
     * 
     */
    public List<MealPrefType> getMealPref() {
        if (mealPref == null) {
            mealPref = new ArrayList<MealPrefType>();
        }
        return this.mealPref;
    }

    /**
     * Gets the value of the specRequestPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specRequestPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecRequestPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpecRequestPrefType }
     * 
     * 
     */
    public List<SpecRequestPrefType> getSpecRequestPref() {
        if (specRequestPref == null) {
            specRequestPref = new ArrayList<SpecRequestPrefType>();
        }
        return this.specRequestPref;
    }

    /**
     * Gets the value of the ssrPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ssrPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSSRPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirlinePrefType.SSRPref }
     * 
     * 
     */
    public List<AirlinePrefType.SSRPref> getSSRPref() {
        if (ssrPref == null) {
            ssrPref = new ArrayList<AirlinePrefType.SSRPref>();
        }
        return this.ssrPref;
    }

    /**
     * Gets the value of the tpaExtensions property.
     * 
     * @return
     *     possible object is
     *     {@link TPAExtensionsType }
     *     
     */
    public TPAExtensionsType getTPAExtensions() {
        return tpaExtensions;
    }

    /**
     * Sets the value of the tpaExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link TPAExtensionsType }
     *     
     */
    public void setTPAExtensions(TPAExtensionsType value) {
        this.tpaExtensions = value;
    }

    /**
     * Gets the value of the mediaEntertainPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mediaEntertainPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMediaEntertainPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MediaEntertainPrefType }
     * 
     * 
     */
    public List<MediaEntertainPrefType> getMediaEntertainPref() {
        if (mediaEntertainPref == null) {
            mediaEntertainPref = new ArrayList<MediaEntertainPrefType>();
        }
        return this.mediaEntertainPref;
    }

    /**
     * Gets the value of the petInfoPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the petInfoPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPetInfoPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PetInfoPrefType }
     * 
     * 
     */
    public List<PetInfoPrefType> getPetInfoPref() {
        if (petInfoPref == null) {
            petInfoPref = new ArrayList<PetInfoPrefType>();
        }
        return this.petInfoPref;
    }

    /**
     * Gets the value of the passengerTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPassengerTypeCode() {
        return passengerTypeCode;
    }

    /**
     * Sets the value of the passengerTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPassengerTypeCode(String value) {
        this.passengerTypeCode = value;
    }

    /**
     * Gets the value of the airTicketType property.
     * 
     * @return
     *     possible object is
     *     {@link TicketType }
     *     
     */
    public TicketType getAirTicketType() {
        return airTicketType;
    }

    /**
     * Sets the value of the airTicketType property.
     * 
     * @param value
     *     allowed object is
     *     {@link TicketType }
     *     
     */
    public void setAirTicketType(TicketType value) {
        this.airTicketType = value;
    }

    /**
     * Gets the value of the shareSynchInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareSynchInd() {
        return shareSynchInd;
    }

    /**
     * Sets the value of the shareSynchInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareSynchInd(String value) {
        this.shareSynchInd = value;
    }

    /**
     * Gets the value of the shareMarketInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareMarketInd() {
        return shareMarketInd;
    }

    /**
     * Sets the value of the shareMarketInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareMarketInd(String value) {
        this.shareMarketInd = value;
    }

    /**
     * Gets the value of the preferLevel property.
     * 
     * @return
     *     possible object is
     *     {@link PreferLevelType }
     *     
     */
    public PreferLevelType getPreferLevel() {
        if (preferLevel == null) {
            return PreferLevelType.PREFERRED;
        } else {
            return preferLevel;
        }
    }

    /**
     * Sets the value of the preferLevel property.
     * 
     * @param value
     *     allowed object is
     *     {@link PreferLevelType }
     *     
     */
    public void setPreferLevel(PreferLevelType value) {
        this.preferLevel = value;
    }

    /**
     * Gets the value of the smokingAllowed property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isSmokingAllowed() {
        if (smokingAllowed == null) {
            return false;
        } else {
            return smokingAllowed;
        }
    }

    /**
     * Sets the value of the smokingAllowed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setSmokingAllowed(Boolean value) {
        this.smokingAllowed = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<LoyaltyPrefType> theLoyaltyPref;
            theLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
            strategy.appendField(locator, this, "loyaltyPref", buffer, theLoyaltyPref);
        }
        {
            List<CompanyNamePrefType> theVendorPref;
            theVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
            strategy.appendField(locator, this, "vendorPref", buffer, theVendorPref);
        }
        {
            List<PaymentFormPrefType> thePaymentFormPref;
            thePaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
            strategy.appendField(locator, this, "paymentFormPref", buffer, thePaymentFormPref);
        }
        {
            List<AirportPrefType> theAirportOriginPref;
            theAirportOriginPref = (((this.airportOriginPref!= null)&&(!this.airportOriginPref.isEmpty()))?this.getAirportOriginPref():null);
            strategy.appendField(locator, this, "airportOriginPref", buffer, theAirportOriginPref);
        }
        {
            List<AirportPrefType> theAirportRoutePref;
            theAirportRoutePref = (((this.airportRoutePref!= null)&&(!this.airportRoutePref.isEmpty()))?this.getAirportRoutePref():null);
            strategy.appendField(locator, this, "airportRoutePref", buffer, theAirportRoutePref);
        }
        {
            List<AirlinePrefType.FareRestrictPref> theFareRestrictPref;
            theFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
            strategy.appendField(locator, this, "fareRestrictPref", buffer, theFareRestrictPref);
        }
        {
            List<AirlinePrefType.FlightTypePref> theFlightTypePref;
            theFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
            strategy.appendField(locator, this, "flightTypePref", buffer, theFlightTypePref);
        }
        {
            List<EquipmentTypePref> theEquipPref;
            theEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
            strategy.appendField(locator, this, "equipPref", buffer, theEquipPref);
        }
        {
            List<AirlinePrefType.CabinPref> theCabinPref;
            theCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
            strategy.appendField(locator, this, "cabinPref", buffer, theCabinPref);
        }
        {
            List<AirlinePrefType.SeatPref> theSeatPref;
            theSeatPref = (((this.seatPref!= null)&&(!this.seatPref.isEmpty()))?this.getSeatPref():null);
            strategy.appendField(locator, this, "seatPref", buffer, theSeatPref);
        }
        {
            List<TicketDistribPrefType> theTicketDistribPref;
            theTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            strategy.appendField(locator, this, "ticketDistribPref", buffer, theTicketDistribPref);
        }
        {
            List<MealPrefType> theMealPref;
            theMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
            strategy.appendField(locator, this, "mealPref", buffer, theMealPref);
        }
        {
            List<SpecRequestPrefType> theSpecRequestPref;
            theSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
            strategy.appendField(locator, this, "specRequestPref", buffer, theSpecRequestPref);
        }
        {
            List<AirlinePrefType.SSRPref> theSSRPref;
            theSSRPref = (((this.ssrPref!= null)&&(!this.ssrPref.isEmpty()))?this.getSSRPref():null);
            strategy.appendField(locator, this, "ssrPref", buffer, theSSRPref);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            strategy.appendField(locator, this, "tpaExtensions", buffer, theTPAExtensions);
        }
        {
            List<MediaEntertainPrefType> theMediaEntertainPref;
            theMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
            strategy.appendField(locator, this, "mediaEntertainPref", buffer, theMediaEntertainPref);
        }
        {
            List<PetInfoPrefType> thePetInfoPref;
            thePetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
            strategy.appendField(locator, this, "petInfoPref", buffer, thePetInfoPref);
        }
        {
            String thePassengerTypeCode;
            thePassengerTypeCode = this.getPassengerTypeCode();
            strategy.appendField(locator, this, "passengerTypeCode", buffer, thePassengerTypeCode);
        }
        {
            TicketType theAirTicketType;
            theAirTicketType = this.getAirTicketType();
            strategy.appendField(locator, this, "airTicketType", buffer, theAirTicketType);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
        }
        {
            PreferLevelType thePreferLevel;
            thePreferLevel = this.getPreferLevel();
            strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
        }
        {
            boolean theSmokingAllowed;
            theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            strategy.appendField(locator, this, "smokingAllowed", buffer, theSmokingAllowed);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AirlinePrefType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AirlinePrefType that = ((AirlinePrefType) object);
        {
            List<LoyaltyPrefType> lhsLoyaltyPref;
            lhsLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
            List<LoyaltyPrefType> rhsLoyaltyPref;
            rhsLoyaltyPref = (((that.loyaltyPref!= null)&&(!that.loyaltyPref.isEmpty()))?that.getLoyaltyPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "loyaltyPref", lhsLoyaltyPref), LocatorUtils.property(thatLocator, "loyaltyPref", rhsLoyaltyPref), lhsLoyaltyPref, rhsLoyaltyPref)) {
                return false;
            }
        }
        {
            List<CompanyNamePrefType> lhsVendorPref;
            lhsVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
            List<CompanyNamePrefType> rhsVendorPref;
            rhsVendorPref = (((that.vendorPref!= null)&&(!that.vendorPref.isEmpty()))?that.getVendorPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vendorPref", lhsVendorPref), LocatorUtils.property(thatLocator, "vendorPref", rhsVendorPref), lhsVendorPref, rhsVendorPref)) {
                return false;
            }
        }
        {
            List<PaymentFormPrefType> lhsPaymentFormPref;
            lhsPaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
            List<PaymentFormPrefType> rhsPaymentFormPref;
            rhsPaymentFormPref = (((that.paymentFormPref!= null)&&(!that.paymentFormPref.isEmpty()))?that.getPaymentFormPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentFormPref", lhsPaymentFormPref), LocatorUtils.property(thatLocator, "paymentFormPref", rhsPaymentFormPref), lhsPaymentFormPref, rhsPaymentFormPref)) {
                return false;
            }
        }
        {
            List<AirportPrefType> lhsAirportOriginPref;
            lhsAirportOriginPref = (((this.airportOriginPref!= null)&&(!this.airportOriginPref.isEmpty()))?this.getAirportOriginPref():null);
            List<AirportPrefType> rhsAirportOriginPref;
            rhsAirportOriginPref = (((that.airportOriginPref!= null)&&(!that.airportOriginPref.isEmpty()))?that.getAirportOriginPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airportOriginPref", lhsAirportOriginPref), LocatorUtils.property(thatLocator, "airportOriginPref", rhsAirportOriginPref), lhsAirportOriginPref, rhsAirportOriginPref)) {
                return false;
            }
        }
        {
            List<AirportPrefType> lhsAirportRoutePref;
            lhsAirportRoutePref = (((this.airportRoutePref!= null)&&(!this.airportRoutePref.isEmpty()))?this.getAirportRoutePref():null);
            List<AirportPrefType> rhsAirportRoutePref;
            rhsAirportRoutePref = (((that.airportRoutePref!= null)&&(!that.airportRoutePref.isEmpty()))?that.getAirportRoutePref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airportRoutePref", lhsAirportRoutePref), LocatorUtils.property(thatLocator, "airportRoutePref", rhsAirportRoutePref), lhsAirportRoutePref, rhsAirportRoutePref)) {
                return false;
            }
        }
        {
            List<AirlinePrefType.FareRestrictPref> lhsFareRestrictPref;
            lhsFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
            List<AirlinePrefType.FareRestrictPref> rhsFareRestrictPref;
            rhsFareRestrictPref = (((that.fareRestrictPref!= null)&&(!that.fareRestrictPref.isEmpty()))?that.getFareRestrictPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareRestrictPref", lhsFareRestrictPref), LocatorUtils.property(thatLocator, "fareRestrictPref", rhsFareRestrictPref), lhsFareRestrictPref, rhsFareRestrictPref)) {
                return false;
            }
        }
        {
            List<AirlinePrefType.FlightTypePref> lhsFlightTypePref;
            lhsFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
            List<AirlinePrefType.FlightTypePref> rhsFlightTypePref;
            rhsFlightTypePref = (((that.flightTypePref!= null)&&(!that.flightTypePref.isEmpty()))?that.getFlightTypePref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightTypePref", lhsFlightTypePref), LocatorUtils.property(thatLocator, "flightTypePref", rhsFlightTypePref), lhsFlightTypePref, rhsFlightTypePref)) {
                return false;
            }
        }
        {
            List<EquipmentTypePref> lhsEquipPref;
            lhsEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
            List<EquipmentTypePref> rhsEquipPref;
            rhsEquipPref = (((that.equipPref!= null)&&(!that.equipPref.isEmpty()))?that.getEquipPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "equipPref", lhsEquipPref), LocatorUtils.property(thatLocator, "equipPref", rhsEquipPref), lhsEquipPref, rhsEquipPref)) {
                return false;
            }
        }
        {
            List<AirlinePrefType.CabinPref> lhsCabinPref;
            lhsCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
            List<AirlinePrefType.CabinPref> rhsCabinPref;
            rhsCabinPref = (((that.cabinPref!= null)&&(!that.cabinPref.isEmpty()))?that.getCabinPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cabinPref", lhsCabinPref), LocatorUtils.property(thatLocator, "cabinPref", rhsCabinPref), lhsCabinPref, rhsCabinPref)) {
                return false;
            }
        }
        {
            List<AirlinePrefType.SeatPref> lhsSeatPref;
            lhsSeatPref = (((this.seatPref!= null)&&(!this.seatPref.isEmpty()))?this.getSeatPref():null);
            List<AirlinePrefType.SeatPref> rhsSeatPref;
            rhsSeatPref = (((that.seatPref!= null)&&(!that.seatPref.isEmpty()))?that.getSeatPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seatPref", lhsSeatPref), LocatorUtils.property(thatLocator, "seatPref", rhsSeatPref), lhsSeatPref, rhsSeatPref)) {
                return false;
            }
        }
        {
            List<TicketDistribPrefType> lhsTicketDistribPref;
            lhsTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            List<TicketDistribPrefType> rhsTicketDistribPref;
            rhsTicketDistribPref = (((that.ticketDistribPref!= null)&&(!that.ticketDistribPref.isEmpty()))?that.getTicketDistribPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDistribPref", lhsTicketDistribPref), LocatorUtils.property(thatLocator, "ticketDistribPref", rhsTicketDistribPref), lhsTicketDistribPref, rhsTicketDistribPref)) {
                return false;
            }
        }
        {
            List<MealPrefType> lhsMealPref;
            lhsMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
            List<MealPrefType> rhsMealPref;
            rhsMealPref = (((that.mealPref!= null)&&(!that.mealPref.isEmpty()))?that.getMealPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mealPref", lhsMealPref), LocatorUtils.property(thatLocator, "mealPref", rhsMealPref), lhsMealPref, rhsMealPref)) {
                return false;
            }
        }
        {
            List<SpecRequestPrefType> lhsSpecRequestPref;
            lhsSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
            List<SpecRequestPrefType> rhsSpecRequestPref;
            rhsSpecRequestPref = (((that.specRequestPref!= null)&&(!that.specRequestPref.isEmpty()))?that.getSpecRequestPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specRequestPref", lhsSpecRequestPref), LocatorUtils.property(thatLocator, "specRequestPref", rhsSpecRequestPref), lhsSpecRequestPref, rhsSpecRequestPref)) {
                return false;
            }
        }
        {
            List<AirlinePrefType.SSRPref> lhsSSRPref;
            lhsSSRPref = (((this.ssrPref!= null)&&(!this.ssrPref.isEmpty()))?this.getSSRPref():null);
            List<AirlinePrefType.SSRPref> rhsSSRPref;
            rhsSSRPref = (((that.ssrPref!= null)&&(!that.ssrPref.isEmpty()))?that.getSSRPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ssrPref", lhsSSRPref), LocatorUtils.property(thatLocator, "ssrPref", rhsSSRPref), lhsSSRPref, rhsSSRPref)) {
                return false;
            }
        }
        {
            TPAExtensionsType lhsTPAExtensions;
            lhsTPAExtensions = this.getTPAExtensions();
            TPAExtensionsType rhsTPAExtensions;
            rhsTPAExtensions = that.getTPAExtensions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tpaExtensions", lhsTPAExtensions), LocatorUtils.property(thatLocator, "tpaExtensions", rhsTPAExtensions), lhsTPAExtensions, rhsTPAExtensions)) {
                return false;
            }
        }
        {
            List<MediaEntertainPrefType> lhsMediaEntertainPref;
            lhsMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
            List<MediaEntertainPrefType> rhsMediaEntertainPref;
            rhsMediaEntertainPref = (((that.mediaEntertainPref!= null)&&(!that.mediaEntertainPref.isEmpty()))?that.getMediaEntertainPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mediaEntertainPref", lhsMediaEntertainPref), LocatorUtils.property(thatLocator, "mediaEntertainPref", rhsMediaEntertainPref), lhsMediaEntertainPref, rhsMediaEntertainPref)) {
                return false;
            }
        }
        {
            List<PetInfoPrefType> lhsPetInfoPref;
            lhsPetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
            List<PetInfoPrefType> rhsPetInfoPref;
            rhsPetInfoPref = (((that.petInfoPref!= null)&&(!that.petInfoPref.isEmpty()))?that.getPetInfoPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "petInfoPref", lhsPetInfoPref), LocatorUtils.property(thatLocator, "petInfoPref", rhsPetInfoPref), lhsPetInfoPref, rhsPetInfoPref)) {
                return false;
            }
        }
        {
            String lhsPassengerTypeCode;
            lhsPassengerTypeCode = this.getPassengerTypeCode();
            String rhsPassengerTypeCode;
            rhsPassengerTypeCode = that.getPassengerTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeCode", lhsPassengerTypeCode), LocatorUtils.property(thatLocator, "passengerTypeCode", rhsPassengerTypeCode), lhsPassengerTypeCode, rhsPassengerTypeCode)) {
                return false;
            }
        }
        {
            TicketType lhsAirTicketType;
            lhsAirTicketType = this.getAirTicketType();
            TicketType rhsAirTicketType;
            rhsAirTicketType = that.getAirTicketType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airTicketType", lhsAirTicketType), LocatorUtils.property(thatLocator, "airTicketType", rhsAirTicketType), lhsAirTicketType, rhsAirTicketType)) {
                return false;
            }
        }
        {
            String lhsShareSynchInd;
            lhsShareSynchInd = this.getShareSynchInd();
            String rhsShareSynchInd;
            rhsShareSynchInd = that.getShareSynchInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                return false;
            }
        }
        {
            String lhsShareMarketInd;
            lhsShareMarketInd = this.getShareMarketInd();
            String rhsShareMarketInd;
            rhsShareMarketInd = that.getShareMarketInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                return false;
            }
        }
        {
            PreferLevelType lhsPreferLevel;
            lhsPreferLevel = this.getPreferLevel();
            PreferLevelType rhsPreferLevel;
            rhsPreferLevel = that.getPreferLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                return false;
            }
        }
        {
            boolean lhsSmokingAllowed;
            lhsSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            boolean rhsSmokingAllowed;
            rhsSmokingAllowed = ((that.smokingAllowed!= null)?that.isSmokingAllowed():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smokingAllowed", lhsSmokingAllowed), LocatorUtils.property(thatLocator, "smokingAllowed", rhsSmokingAllowed), lhsSmokingAllowed, rhsSmokingAllowed)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<LoyaltyPrefType> theLoyaltyPref;
            theLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loyaltyPref", theLoyaltyPref), currentHashCode, theLoyaltyPref);
        }
        {
            List<CompanyNamePrefType> theVendorPref;
            theVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vendorPref", theVendorPref), currentHashCode, theVendorPref);
        }
        {
            List<PaymentFormPrefType> thePaymentFormPref;
            thePaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentFormPref", thePaymentFormPref), currentHashCode, thePaymentFormPref);
        }
        {
            List<AirportPrefType> theAirportOriginPref;
            theAirportOriginPref = (((this.airportOriginPref!= null)&&(!this.airportOriginPref.isEmpty()))?this.getAirportOriginPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airportOriginPref", theAirportOriginPref), currentHashCode, theAirportOriginPref);
        }
        {
            List<AirportPrefType> theAirportRoutePref;
            theAirportRoutePref = (((this.airportRoutePref!= null)&&(!this.airportRoutePref.isEmpty()))?this.getAirportRoutePref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airportRoutePref", theAirportRoutePref), currentHashCode, theAirportRoutePref);
        }
        {
            List<AirlinePrefType.FareRestrictPref> theFareRestrictPref;
            theFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareRestrictPref", theFareRestrictPref), currentHashCode, theFareRestrictPref);
        }
        {
            List<AirlinePrefType.FlightTypePref> theFlightTypePref;
            theFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightTypePref", theFlightTypePref), currentHashCode, theFlightTypePref);
        }
        {
            List<EquipmentTypePref> theEquipPref;
            theEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "equipPref", theEquipPref), currentHashCode, theEquipPref);
        }
        {
            List<AirlinePrefType.CabinPref> theCabinPref;
            theCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cabinPref", theCabinPref), currentHashCode, theCabinPref);
        }
        {
            List<AirlinePrefType.SeatPref> theSeatPref;
            theSeatPref = (((this.seatPref!= null)&&(!this.seatPref.isEmpty()))?this.getSeatPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatPref", theSeatPref), currentHashCode, theSeatPref);
        }
        {
            List<TicketDistribPrefType> theTicketDistribPref;
            theTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDistribPref", theTicketDistribPref), currentHashCode, theTicketDistribPref);
        }
        {
            List<MealPrefType> theMealPref;
            theMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mealPref", theMealPref), currentHashCode, theMealPref);
        }
        {
            List<SpecRequestPrefType> theSpecRequestPref;
            theSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specRequestPref", theSpecRequestPref), currentHashCode, theSpecRequestPref);
        }
        {
            List<AirlinePrefType.SSRPref> theSSRPref;
            theSSRPref = (((this.ssrPref!= null)&&(!this.ssrPref.isEmpty()))?this.getSSRPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ssrPref", theSSRPref), currentHashCode, theSSRPref);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tpaExtensions", theTPAExtensions), currentHashCode, theTPAExtensions);
        }
        {
            List<MediaEntertainPrefType> theMediaEntertainPref;
            theMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mediaEntertainPref", theMediaEntertainPref), currentHashCode, theMediaEntertainPref);
        }
        {
            List<PetInfoPrefType> thePetInfoPref;
            thePetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "petInfoPref", thePetInfoPref), currentHashCode, thePetInfoPref);
        }
        {
            String thePassengerTypeCode;
            thePassengerTypeCode = this.getPassengerTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerTypeCode", thePassengerTypeCode), currentHashCode, thePassengerTypeCode);
        }
        {
            TicketType theAirTicketType;
            theAirTicketType = this.getAirTicketType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airTicketType", theAirTicketType), currentHashCode, theAirTicketType);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
        }
        {
            PreferLevelType thePreferLevel;
            thePreferLevel = this.getPreferLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
        }
        {
            boolean theSmokingAllowed;
            theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smokingAllowed", theSmokingAllowed), currentHashCode, theSmokingAllowed);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AirlinePrefType) {
            final AirlinePrefType copy = ((AirlinePrefType) draftCopy);
            if ((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty())) {
                List<LoyaltyPrefType> sourceLoyaltyPref;
                sourceLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
                @SuppressWarnings("unchecked")
                List<LoyaltyPrefType> copyLoyaltyPref = ((List<LoyaltyPrefType> ) strategy.copy(LocatorUtils.property(locator, "loyaltyPref", sourceLoyaltyPref), sourceLoyaltyPref));
                copy.loyaltyPref = null;
                if (copyLoyaltyPref!= null) {
                    List<LoyaltyPrefType> uniqueLoyaltyPrefl = copy.getLoyaltyPref();
                    uniqueLoyaltyPrefl.addAll(copyLoyaltyPref);
                }
            } else {
                copy.loyaltyPref = null;
            }
            if ((this.vendorPref!= null)&&(!this.vendorPref.isEmpty())) {
                List<CompanyNamePrefType> sourceVendorPref;
                sourceVendorPref = (((this.vendorPref!= null)&&(!this.vendorPref.isEmpty()))?this.getVendorPref():null);
                @SuppressWarnings("unchecked")
                List<CompanyNamePrefType> copyVendorPref = ((List<CompanyNamePrefType> ) strategy.copy(LocatorUtils.property(locator, "vendorPref", sourceVendorPref), sourceVendorPref));
                copy.vendorPref = null;
                if (copyVendorPref!= null) {
                    List<CompanyNamePrefType> uniqueVendorPrefl = copy.getVendorPref();
                    uniqueVendorPrefl.addAll(copyVendorPref);
                }
            } else {
                copy.vendorPref = null;
            }
            if ((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty())) {
                List<PaymentFormPrefType> sourcePaymentFormPref;
                sourcePaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
                @SuppressWarnings("unchecked")
                List<PaymentFormPrefType> copyPaymentFormPref = ((List<PaymentFormPrefType> ) strategy.copy(LocatorUtils.property(locator, "paymentFormPref", sourcePaymentFormPref), sourcePaymentFormPref));
                copy.paymentFormPref = null;
                if (copyPaymentFormPref!= null) {
                    List<PaymentFormPrefType> uniquePaymentFormPrefl = copy.getPaymentFormPref();
                    uniquePaymentFormPrefl.addAll(copyPaymentFormPref);
                }
            } else {
                copy.paymentFormPref = null;
            }
            if ((this.airportOriginPref!= null)&&(!this.airportOriginPref.isEmpty())) {
                List<AirportPrefType> sourceAirportOriginPref;
                sourceAirportOriginPref = (((this.airportOriginPref!= null)&&(!this.airportOriginPref.isEmpty()))?this.getAirportOriginPref():null);
                @SuppressWarnings("unchecked")
                List<AirportPrefType> copyAirportOriginPref = ((List<AirportPrefType> ) strategy.copy(LocatorUtils.property(locator, "airportOriginPref", sourceAirportOriginPref), sourceAirportOriginPref));
                copy.airportOriginPref = null;
                if (copyAirportOriginPref!= null) {
                    List<AirportPrefType> uniqueAirportOriginPrefl = copy.getAirportOriginPref();
                    uniqueAirportOriginPrefl.addAll(copyAirportOriginPref);
                }
            } else {
                copy.airportOriginPref = null;
            }
            if ((this.airportRoutePref!= null)&&(!this.airportRoutePref.isEmpty())) {
                List<AirportPrefType> sourceAirportRoutePref;
                sourceAirportRoutePref = (((this.airportRoutePref!= null)&&(!this.airportRoutePref.isEmpty()))?this.getAirportRoutePref():null);
                @SuppressWarnings("unchecked")
                List<AirportPrefType> copyAirportRoutePref = ((List<AirportPrefType> ) strategy.copy(LocatorUtils.property(locator, "airportRoutePref", sourceAirportRoutePref), sourceAirportRoutePref));
                copy.airportRoutePref = null;
                if (copyAirportRoutePref!= null) {
                    List<AirportPrefType> uniqueAirportRoutePrefl = copy.getAirportRoutePref();
                    uniqueAirportRoutePrefl.addAll(copyAirportRoutePref);
                }
            } else {
                copy.airportRoutePref = null;
            }
            if ((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty())) {
                List<AirlinePrefType.FareRestrictPref> sourceFareRestrictPref;
                sourceFareRestrictPref = (((this.fareRestrictPref!= null)&&(!this.fareRestrictPref.isEmpty()))?this.getFareRestrictPref():null);
                @SuppressWarnings("unchecked")
                List<AirlinePrefType.FareRestrictPref> copyFareRestrictPref = ((List<AirlinePrefType.FareRestrictPref> ) strategy.copy(LocatorUtils.property(locator, "fareRestrictPref", sourceFareRestrictPref), sourceFareRestrictPref));
                copy.fareRestrictPref = null;
                if (copyFareRestrictPref!= null) {
                    List<AirlinePrefType.FareRestrictPref> uniqueFareRestrictPrefl = copy.getFareRestrictPref();
                    uniqueFareRestrictPrefl.addAll(copyFareRestrictPref);
                }
            } else {
                copy.fareRestrictPref = null;
            }
            if ((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty())) {
                List<AirlinePrefType.FlightTypePref> sourceFlightTypePref;
                sourceFlightTypePref = (((this.flightTypePref!= null)&&(!this.flightTypePref.isEmpty()))?this.getFlightTypePref():null);
                @SuppressWarnings("unchecked")
                List<AirlinePrefType.FlightTypePref> copyFlightTypePref = ((List<AirlinePrefType.FlightTypePref> ) strategy.copy(LocatorUtils.property(locator, "flightTypePref", sourceFlightTypePref), sourceFlightTypePref));
                copy.flightTypePref = null;
                if (copyFlightTypePref!= null) {
                    List<AirlinePrefType.FlightTypePref> uniqueFlightTypePrefl = copy.getFlightTypePref();
                    uniqueFlightTypePrefl.addAll(copyFlightTypePref);
                }
            } else {
                copy.flightTypePref = null;
            }
            if ((this.equipPref!= null)&&(!this.equipPref.isEmpty())) {
                List<EquipmentTypePref> sourceEquipPref;
                sourceEquipPref = (((this.equipPref!= null)&&(!this.equipPref.isEmpty()))?this.getEquipPref():null);
                @SuppressWarnings("unchecked")
                List<EquipmentTypePref> copyEquipPref = ((List<EquipmentTypePref> ) strategy.copy(LocatorUtils.property(locator, "equipPref", sourceEquipPref), sourceEquipPref));
                copy.equipPref = null;
                if (copyEquipPref!= null) {
                    List<EquipmentTypePref> uniqueEquipPrefl = copy.getEquipPref();
                    uniqueEquipPrefl.addAll(copyEquipPref);
                }
            } else {
                copy.equipPref = null;
            }
            if ((this.cabinPref!= null)&&(!this.cabinPref.isEmpty())) {
                List<AirlinePrefType.CabinPref> sourceCabinPref;
                sourceCabinPref = (((this.cabinPref!= null)&&(!this.cabinPref.isEmpty()))?this.getCabinPref():null);
                @SuppressWarnings("unchecked")
                List<AirlinePrefType.CabinPref> copyCabinPref = ((List<AirlinePrefType.CabinPref> ) strategy.copy(LocatorUtils.property(locator, "cabinPref", sourceCabinPref), sourceCabinPref));
                copy.cabinPref = null;
                if (copyCabinPref!= null) {
                    List<AirlinePrefType.CabinPref> uniqueCabinPrefl = copy.getCabinPref();
                    uniqueCabinPrefl.addAll(copyCabinPref);
                }
            } else {
                copy.cabinPref = null;
            }
            if ((this.seatPref!= null)&&(!this.seatPref.isEmpty())) {
                List<AirlinePrefType.SeatPref> sourceSeatPref;
                sourceSeatPref = (((this.seatPref!= null)&&(!this.seatPref.isEmpty()))?this.getSeatPref():null);
                @SuppressWarnings("unchecked")
                List<AirlinePrefType.SeatPref> copySeatPref = ((List<AirlinePrefType.SeatPref> ) strategy.copy(LocatorUtils.property(locator, "seatPref", sourceSeatPref), sourceSeatPref));
                copy.seatPref = null;
                if (copySeatPref!= null) {
                    List<AirlinePrefType.SeatPref> uniqueSeatPrefl = copy.getSeatPref();
                    uniqueSeatPrefl.addAll(copySeatPref);
                }
            } else {
                copy.seatPref = null;
            }
            if ((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty())) {
                List<TicketDistribPrefType> sourceTicketDistribPref;
                sourceTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
                @SuppressWarnings("unchecked")
                List<TicketDistribPrefType> copyTicketDistribPref = ((List<TicketDistribPrefType> ) strategy.copy(LocatorUtils.property(locator, "ticketDistribPref", sourceTicketDistribPref), sourceTicketDistribPref));
                copy.ticketDistribPref = null;
                if (copyTicketDistribPref!= null) {
                    List<TicketDistribPrefType> uniqueTicketDistribPrefl = copy.getTicketDistribPref();
                    uniqueTicketDistribPrefl.addAll(copyTicketDistribPref);
                }
            } else {
                copy.ticketDistribPref = null;
            }
            if ((this.mealPref!= null)&&(!this.mealPref.isEmpty())) {
                List<MealPrefType> sourceMealPref;
                sourceMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
                @SuppressWarnings("unchecked")
                List<MealPrefType> copyMealPref = ((List<MealPrefType> ) strategy.copy(LocatorUtils.property(locator, "mealPref", sourceMealPref), sourceMealPref));
                copy.mealPref = null;
                if (copyMealPref!= null) {
                    List<MealPrefType> uniqueMealPrefl = copy.getMealPref();
                    uniqueMealPrefl.addAll(copyMealPref);
                }
            } else {
                copy.mealPref = null;
            }
            if ((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty())) {
                List<SpecRequestPrefType> sourceSpecRequestPref;
                sourceSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
                @SuppressWarnings("unchecked")
                List<SpecRequestPrefType> copySpecRequestPref = ((List<SpecRequestPrefType> ) strategy.copy(LocatorUtils.property(locator, "specRequestPref", sourceSpecRequestPref), sourceSpecRequestPref));
                copy.specRequestPref = null;
                if (copySpecRequestPref!= null) {
                    List<SpecRequestPrefType> uniqueSpecRequestPrefl = copy.getSpecRequestPref();
                    uniqueSpecRequestPrefl.addAll(copySpecRequestPref);
                }
            } else {
                copy.specRequestPref = null;
            }
            if ((this.ssrPref!= null)&&(!this.ssrPref.isEmpty())) {
                List<AirlinePrefType.SSRPref> sourceSSRPref;
                sourceSSRPref = (((this.ssrPref!= null)&&(!this.ssrPref.isEmpty()))?this.getSSRPref():null);
                @SuppressWarnings("unchecked")
                List<AirlinePrefType.SSRPref> copySSRPref = ((List<AirlinePrefType.SSRPref> ) strategy.copy(LocatorUtils.property(locator, "ssrPref", sourceSSRPref), sourceSSRPref));
                copy.ssrPref = null;
                if (copySSRPref!= null) {
                    List<AirlinePrefType.SSRPref> uniqueSSRPrefl = copy.getSSRPref();
                    uniqueSSRPrefl.addAll(copySSRPref);
                }
            } else {
                copy.ssrPref = null;
            }
            if (this.tpaExtensions!= null) {
                TPAExtensionsType sourceTPAExtensions;
                sourceTPAExtensions = this.getTPAExtensions();
                TPAExtensionsType copyTPAExtensions = ((TPAExtensionsType) strategy.copy(LocatorUtils.property(locator, "tpaExtensions", sourceTPAExtensions), sourceTPAExtensions));
                copy.setTPAExtensions(copyTPAExtensions);
            } else {
                copy.tpaExtensions = null;
            }
            if ((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty())) {
                List<MediaEntertainPrefType> sourceMediaEntertainPref;
                sourceMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
                @SuppressWarnings("unchecked")
                List<MediaEntertainPrefType> copyMediaEntertainPref = ((List<MediaEntertainPrefType> ) strategy.copy(LocatorUtils.property(locator, "mediaEntertainPref", sourceMediaEntertainPref), sourceMediaEntertainPref));
                copy.mediaEntertainPref = null;
                if (copyMediaEntertainPref!= null) {
                    List<MediaEntertainPrefType> uniqueMediaEntertainPrefl = copy.getMediaEntertainPref();
                    uniqueMediaEntertainPrefl.addAll(copyMediaEntertainPref);
                }
            } else {
                copy.mediaEntertainPref = null;
            }
            if ((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty())) {
                List<PetInfoPrefType> sourcePetInfoPref;
                sourcePetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
                @SuppressWarnings("unchecked")
                List<PetInfoPrefType> copyPetInfoPref = ((List<PetInfoPrefType> ) strategy.copy(LocatorUtils.property(locator, "petInfoPref", sourcePetInfoPref), sourcePetInfoPref));
                copy.petInfoPref = null;
                if (copyPetInfoPref!= null) {
                    List<PetInfoPrefType> uniquePetInfoPrefl = copy.getPetInfoPref();
                    uniquePetInfoPrefl.addAll(copyPetInfoPref);
                }
            } else {
                copy.petInfoPref = null;
            }
            if (this.passengerTypeCode!= null) {
                String sourcePassengerTypeCode;
                sourcePassengerTypeCode = this.getPassengerTypeCode();
                String copyPassengerTypeCode = ((String) strategy.copy(LocatorUtils.property(locator, "passengerTypeCode", sourcePassengerTypeCode), sourcePassengerTypeCode));
                copy.setPassengerTypeCode(copyPassengerTypeCode);
            } else {
                copy.passengerTypeCode = null;
            }
            if (this.airTicketType!= null) {
                TicketType sourceAirTicketType;
                sourceAirTicketType = this.getAirTicketType();
                TicketType copyAirTicketType = ((TicketType) strategy.copy(LocatorUtils.property(locator, "airTicketType", sourceAirTicketType), sourceAirTicketType));
                copy.setAirTicketType(copyAirTicketType);
            } else {
                copy.airTicketType = null;
            }
            if (this.shareSynchInd!= null) {
                String sourceShareSynchInd;
                sourceShareSynchInd = this.getShareSynchInd();
                String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                copy.setShareSynchInd(copyShareSynchInd);
            } else {
                copy.shareSynchInd = null;
            }
            if (this.shareMarketInd!= null) {
                String sourceShareMarketInd;
                sourceShareMarketInd = this.getShareMarketInd();
                String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                copy.setShareMarketInd(copyShareMarketInd);
            } else {
                copy.shareMarketInd = null;
            }
            if (this.preferLevel!= null) {
                PreferLevelType sourcePreferLevel;
                sourcePreferLevel = this.getPreferLevel();
                PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                copy.setPreferLevel(copyPreferLevel);
            } else {
                copy.preferLevel = null;
            }
            if (this.smokingAllowed!= null) {
                boolean sourceSmokingAllowed;
                sourceSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
                boolean copySmokingAllowed = strategy.copy(LocatorUtils.property(locator, "smokingAllowed", sourceSmokingAllowed), sourceSmokingAllowed);
                copy.setSmokingAllowed(copySmokingAllowed);
            } else {
                copy.smokingAllowed = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AirlinePrefType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CabinPrefGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CabinPref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Cabin")
        protected CabinType cabin;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the cabin property.
         * 
         * @return
         *     possible object is
         *     {@link CabinType }
         *     
         */
        public CabinType getCabin() {
            return cabin;
        }

        /**
         * Sets the value of the cabin property.
         * 
         * @param value
         *     allowed object is
         *     {@link CabinType }
         *     
         */
        public void setCabin(CabinType value) {
            this.cabin = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                CabinType theCabin;
                theCabin = this.getCabin();
                strategy.appendField(locator, this, "cabin", buffer, theCabin);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirlinePrefType.CabinPref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirlinePrefType.CabinPref that = ((AirlinePrefType.CabinPref) object);
            {
                CabinType lhsCabin;
                lhsCabin = this.getCabin();
                CabinType rhsCabin;
                rhsCabin = that.getCabin();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "cabin", lhsCabin), LocatorUtils.property(thatLocator, "cabin", rhsCabin), lhsCabin, rhsCabin)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                CabinType theCabin;
                theCabin = this.getCabin();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cabin", theCabin), currentHashCode, theCabin);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirlinePrefType.CabinPref) {
                final AirlinePrefType.CabinPref copy = ((AirlinePrefType.CabinPref) draftCopy);
                if (this.cabin!= null) {
                    CabinType sourceCabin;
                    sourceCabin = this.getCabin();
                    CabinType copyCabin = ((CabinType) strategy.copy(LocatorUtils.property(locator, "cabin", sourceCabin), sourceCabin));
                    copy.setCabin(copyCabin);
                } else {
                    copy.cabin = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirlinePrefType.CabinPref();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FareRestrictPrefGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class FareRestrictPref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "FareRestriction")
        protected String fareRestriction;
        @XmlAttribute(name = "Date")
        protected String date;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the fareRestriction property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFareRestriction() {
            return fareRestriction;
        }

        /**
         * Sets the value of the fareRestriction property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFareRestriction(String value) {
            this.fareRestriction = value;
        }

        /**
         * Gets the value of the date property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDate() {
            return date;
        }

        /**
         * Sets the value of the date property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDate(String value) {
            this.date = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theFareRestriction;
                theFareRestriction = this.getFareRestriction();
                strategy.appendField(locator, this, "fareRestriction", buffer, theFareRestriction);
            }
            {
                String theDate;
                theDate = this.getDate();
                strategy.appendField(locator, this, "date", buffer, theDate);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirlinePrefType.FareRestrictPref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirlinePrefType.FareRestrictPref that = ((AirlinePrefType.FareRestrictPref) object);
            {
                String lhsFareRestriction;
                lhsFareRestriction = this.getFareRestriction();
                String rhsFareRestriction;
                rhsFareRestriction = that.getFareRestriction();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareRestriction", lhsFareRestriction), LocatorUtils.property(thatLocator, "fareRestriction", rhsFareRestriction), lhsFareRestriction, rhsFareRestriction)) {
                    return false;
                }
            }
            {
                String lhsDate;
                lhsDate = this.getDate();
                String rhsDate;
                rhsDate = that.getDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theFareRestriction;
                theFareRestriction = this.getFareRestriction();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareRestriction", theFareRestriction), currentHashCode, theFareRestriction);
            }
            {
                String theDate;
                theDate = this.getDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirlinePrefType.FareRestrictPref) {
                final AirlinePrefType.FareRestrictPref copy = ((AirlinePrefType.FareRestrictPref) draftCopy);
                if (this.fareRestriction!= null) {
                    String sourceFareRestriction;
                    sourceFareRestriction = this.getFareRestriction();
                    String copyFareRestriction = ((String) strategy.copy(LocatorUtils.property(locator, "fareRestriction", sourceFareRestriction), sourceFareRestriction));
                    copy.setFareRestriction(copyFareRestriction);
                } else {
                    copy.fareRestriction = null;
                }
                if (this.date!= null) {
                    String sourceDate;
                    sourceDate = this.getDate();
                    String copyDate = ((String) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                    copy.setDate(copyDate);
                } else {
                    copy.date = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirlinePrefType.FareRestrictPref();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FlightTypePrefGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class FlightTypePref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "FlightType")
        protected FlightTypeType flightType;
        @XmlAttribute(name = "MaxConnections")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger maxConnections;
        @XmlAttribute(name = "NonScheduledFltInfo")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String nonScheduledFltInfo;
        @XmlAttribute(name = "BackhaulIndicator")
        protected Boolean backhaulIndicator;
        @XmlAttribute(name = "GroundTransportIndicator")
        protected Boolean groundTransportIndicator;
        @XmlAttribute(name = "DirectAndNonStopOnlyInd")
        protected Boolean directAndNonStopOnlyInd;
        @XmlAttribute(name = "NonStopsOnlyInd")
        protected Boolean nonStopsOnlyInd;
        @XmlAttribute(name = "OnlineConnectionsOnlyInd")
        protected Boolean onlineConnectionsOnlyInd;
        @XmlAttribute(name = "RoutingType")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String routingType;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the flightType property.
         * 
         * @return
         *     possible object is
         *     {@link FlightTypeType }
         *     
         */
        public FlightTypeType getFlightType() {
            return flightType;
        }

        /**
         * Sets the value of the flightType property.
         * 
         * @param value
         *     allowed object is
         *     {@link FlightTypeType }
         *     
         */
        public void setFlightType(FlightTypeType value) {
            this.flightType = value;
        }

        /**
         * Gets the value of the maxConnections property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getMaxConnections() {
            return maxConnections;
        }

        /**
         * Sets the value of the maxConnections property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setMaxConnections(BigInteger value) {
            this.maxConnections = value;
        }

        /**
         * Gets the value of the nonScheduledFltInfo property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNonScheduledFltInfo() {
            return nonScheduledFltInfo;
        }

        /**
         * Sets the value of the nonScheduledFltInfo property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNonScheduledFltInfo(String value) {
            this.nonScheduledFltInfo = value;
        }

        /**
         * Gets the value of the backhaulIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isBackhaulIndicator() {
            return backhaulIndicator;
        }

        /**
         * Sets the value of the backhaulIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setBackhaulIndicator(Boolean value) {
            this.backhaulIndicator = value;
        }

        /**
         * Gets the value of the groundTransportIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isGroundTransportIndicator() {
            return groundTransportIndicator;
        }

        /**
         * Sets the value of the groundTransportIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setGroundTransportIndicator(Boolean value) {
            this.groundTransportIndicator = value;
        }

        /**
         * Gets the value of the directAndNonStopOnlyInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isDirectAndNonStopOnlyInd() {
            return directAndNonStopOnlyInd;
        }

        /**
         * Sets the value of the directAndNonStopOnlyInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setDirectAndNonStopOnlyInd(Boolean value) {
            this.directAndNonStopOnlyInd = value;
        }

        /**
         * Gets the value of the nonStopsOnlyInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isNonStopsOnlyInd() {
            return nonStopsOnlyInd;
        }

        /**
         * Sets the value of the nonStopsOnlyInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setNonStopsOnlyInd(Boolean value) {
            this.nonStopsOnlyInd = value;
        }

        /**
         * Gets the value of the onlineConnectionsOnlyInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isOnlineConnectionsOnlyInd() {
            return onlineConnectionsOnlyInd;
        }

        /**
         * Sets the value of the onlineConnectionsOnlyInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setOnlineConnectionsOnlyInd(Boolean value) {
            this.onlineConnectionsOnlyInd = value;
        }

        /**
         * Gets the value of the routingType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRoutingType() {
            return routingType;
        }

        /**
         * Sets the value of the routingType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRoutingType(String value) {
            this.routingType = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                FlightTypeType theFlightType;
                theFlightType = this.getFlightType();
                strategy.appendField(locator, this, "flightType", buffer, theFlightType);
            }
            {
                BigInteger theMaxConnections;
                theMaxConnections = this.getMaxConnections();
                strategy.appendField(locator, this, "maxConnections", buffer, theMaxConnections);
            }
            {
                String theNonScheduledFltInfo;
                theNonScheduledFltInfo = this.getNonScheduledFltInfo();
                strategy.appendField(locator, this, "nonScheduledFltInfo", buffer, theNonScheduledFltInfo);
            }
            {
                Boolean theBackhaulIndicator;
                theBackhaulIndicator = this.isBackhaulIndicator();
                strategy.appendField(locator, this, "backhaulIndicator", buffer, theBackhaulIndicator);
            }
            {
                Boolean theGroundTransportIndicator;
                theGroundTransportIndicator = this.isGroundTransportIndicator();
                strategy.appendField(locator, this, "groundTransportIndicator", buffer, theGroundTransportIndicator);
            }
            {
                Boolean theDirectAndNonStopOnlyInd;
                theDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                strategy.appendField(locator, this, "directAndNonStopOnlyInd", buffer, theDirectAndNonStopOnlyInd);
            }
            {
                Boolean theNonStopsOnlyInd;
                theNonStopsOnlyInd = this.isNonStopsOnlyInd();
                strategy.appendField(locator, this, "nonStopsOnlyInd", buffer, theNonStopsOnlyInd);
            }
            {
                Boolean theOnlineConnectionsOnlyInd;
                theOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                strategy.appendField(locator, this, "onlineConnectionsOnlyInd", buffer, theOnlineConnectionsOnlyInd);
            }
            {
                String theRoutingType;
                theRoutingType = this.getRoutingType();
                strategy.appendField(locator, this, "routingType", buffer, theRoutingType);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirlinePrefType.FlightTypePref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirlinePrefType.FlightTypePref that = ((AirlinePrefType.FlightTypePref) object);
            {
                FlightTypeType lhsFlightType;
                lhsFlightType = this.getFlightType();
                FlightTypeType rhsFlightType;
                rhsFlightType = that.getFlightType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "flightType", lhsFlightType), LocatorUtils.property(thatLocator, "flightType", rhsFlightType), lhsFlightType, rhsFlightType)) {
                    return false;
                }
            }
            {
                BigInteger lhsMaxConnections;
                lhsMaxConnections = this.getMaxConnections();
                BigInteger rhsMaxConnections;
                rhsMaxConnections = that.getMaxConnections();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "maxConnections", lhsMaxConnections), LocatorUtils.property(thatLocator, "maxConnections", rhsMaxConnections), lhsMaxConnections, rhsMaxConnections)) {
                    return false;
                }
            }
            {
                String lhsNonScheduledFltInfo;
                lhsNonScheduledFltInfo = this.getNonScheduledFltInfo();
                String rhsNonScheduledFltInfo;
                rhsNonScheduledFltInfo = that.getNonScheduledFltInfo();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nonScheduledFltInfo", lhsNonScheduledFltInfo), LocatorUtils.property(thatLocator, "nonScheduledFltInfo", rhsNonScheduledFltInfo), lhsNonScheduledFltInfo, rhsNonScheduledFltInfo)) {
                    return false;
                }
            }
            {
                Boolean lhsBackhaulIndicator;
                lhsBackhaulIndicator = this.isBackhaulIndicator();
                Boolean rhsBackhaulIndicator;
                rhsBackhaulIndicator = that.isBackhaulIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "backhaulIndicator", lhsBackhaulIndicator), LocatorUtils.property(thatLocator, "backhaulIndicator", rhsBackhaulIndicator), lhsBackhaulIndicator, rhsBackhaulIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsGroundTransportIndicator;
                lhsGroundTransportIndicator = this.isGroundTransportIndicator();
                Boolean rhsGroundTransportIndicator;
                rhsGroundTransportIndicator = that.isGroundTransportIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "groundTransportIndicator", lhsGroundTransportIndicator), LocatorUtils.property(thatLocator, "groundTransportIndicator", rhsGroundTransportIndicator), lhsGroundTransportIndicator, rhsGroundTransportIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsDirectAndNonStopOnlyInd;
                lhsDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                Boolean rhsDirectAndNonStopOnlyInd;
                rhsDirectAndNonStopOnlyInd = that.isDirectAndNonStopOnlyInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "directAndNonStopOnlyInd", lhsDirectAndNonStopOnlyInd), LocatorUtils.property(thatLocator, "directAndNonStopOnlyInd", rhsDirectAndNonStopOnlyInd), lhsDirectAndNonStopOnlyInd, rhsDirectAndNonStopOnlyInd)) {
                    return false;
                }
            }
            {
                Boolean lhsNonStopsOnlyInd;
                lhsNonStopsOnlyInd = this.isNonStopsOnlyInd();
                Boolean rhsNonStopsOnlyInd;
                rhsNonStopsOnlyInd = that.isNonStopsOnlyInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nonStopsOnlyInd", lhsNonStopsOnlyInd), LocatorUtils.property(thatLocator, "nonStopsOnlyInd", rhsNonStopsOnlyInd), lhsNonStopsOnlyInd, rhsNonStopsOnlyInd)) {
                    return false;
                }
            }
            {
                Boolean lhsOnlineConnectionsOnlyInd;
                lhsOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                Boolean rhsOnlineConnectionsOnlyInd;
                rhsOnlineConnectionsOnlyInd = that.isOnlineConnectionsOnlyInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "onlineConnectionsOnlyInd", lhsOnlineConnectionsOnlyInd), LocatorUtils.property(thatLocator, "onlineConnectionsOnlyInd", rhsOnlineConnectionsOnlyInd), lhsOnlineConnectionsOnlyInd, rhsOnlineConnectionsOnlyInd)) {
                    return false;
                }
            }
            {
                String lhsRoutingType;
                lhsRoutingType = this.getRoutingType();
                String rhsRoutingType;
                rhsRoutingType = that.getRoutingType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "routingType", lhsRoutingType), LocatorUtils.property(thatLocator, "routingType", rhsRoutingType), lhsRoutingType, rhsRoutingType)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                FlightTypeType theFlightType;
                theFlightType = this.getFlightType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightType", theFlightType), currentHashCode, theFlightType);
            }
            {
                BigInteger theMaxConnections;
                theMaxConnections = this.getMaxConnections();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxConnections", theMaxConnections), currentHashCode, theMaxConnections);
            }
            {
                String theNonScheduledFltInfo;
                theNonScheduledFltInfo = this.getNonScheduledFltInfo();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nonScheduledFltInfo", theNonScheduledFltInfo), currentHashCode, theNonScheduledFltInfo);
            }
            {
                Boolean theBackhaulIndicator;
                theBackhaulIndicator = this.isBackhaulIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "backhaulIndicator", theBackhaulIndicator), currentHashCode, theBackhaulIndicator);
            }
            {
                Boolean theGroundTransportIndicator;
                theGroundTransportIndicator = this.isGroundTransportIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groundTransportIndicator", theGroundTransportIndicator), currentHashCode, theGroundTransportIndicator);
            }
            {
                Boolean theDirectAndNonStopOnlyInd;
                theDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directAndNonStopOnlyInd", theDirectAndNonStopOnlyInd), currentHashCode, theDirectAndNonStopOnlyInd);
            }
            {
                Boolean theNonStopsOnlyInd;
                theNonStopsOnlyInd = this.isNonStopsOnlyInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nonStopsOnlyInd", theNonStopsOnlyInd), currentHashCode, theNonStopsOnlyInd);
            }
            {
                Boolean theOnlineConnectionsOnlyInd;
                theOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onlineConnectionsOnlyInd", theOnlineConnectionsOnlyInd), currentHashCode, theOnlineConnectionsOnlyInd);
            }
            {
                String theRoutingType;
                theRoutingType = this.getRoutingType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routingType", theRoutingType), currentHashCode, theRoutingType);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirlinePrefType.FlightTypePref) {
                final AirlinePrefType.FlightTypePref copy = ((AirlinePrefType.FlightTypePref) draftCopy);
                if (this.flightType!= null) {
                    FlightTypeType sourceFlightType;
                    sourceFlightType = this.getFlightType();
                    FlightTypeType copyFlightType = ((FlightTypeType) strategy.copy(LocatorUtils.property(locator, "flightType", sourceFlightType), sourceFlightType));
                    copy.setFlightType(copyFlightType);
                } else {
                    copy.flightType = null;
                }
                if (this.maxConnections!= null) {
                    BigInteger sourceMaxConnections;
                    sourceMaxConnections = this.getMaxConnections();
                    BigInteger copyMaxConnections = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxConnections", sourceMaxConnections), sourceMaxConnections));
                    copy.setMaxConnections(copyMaxConnections);
                } else {
                    copy.maxConnections = null;
                }
                if (this.nonScheduledFltInfo!= null) {
                    String sourceNonScheduledFltInfo;
                    sourceNonScheduledFltInfo = this.getNonScheduledFltInfo();
                    String copyNonScheduledFltInfo = ((String) strategy.copy(LocatorUtils.property(locator, "nonScheduledFltInfo", sourceNonScheduledFltInfo), sourceNonScheduledFltInfo));
                    copy.setNonScheduledFltInfo(copyNonScheduledFltInfo);
                } else {
                    copy.nonScheduledFltInfo = null;
                }
                if (this.backhaulIndicator!= null) {
                    Boolean sourceBackhaulIndicator;
                    sourceBackhaulIndicator = this.isBackhaulIndicator();
                    Boolean copyBackhaulIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "backhaulIndicator", sourceBackhaulIndicator), sourceBackhaulIndicator));
                    copy.setBackhaulIndicator(copyBackhaulIndicator);
                } else {
                    copy.backhaulIndicator = null;
                }
                if (this.groundTransportIndicator!= null) {
                    Boolean sourceGroundTransportIndicator;
                    sourceGroundTransportIndicator = this.isGroundTransportIndicator();
                    Boolean copyGroundTransportIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "groundTransportIndicator", sourceGroundTransportIndicator), sourceGroundTransportIndicator));
                    copy.setGroundTransportIndicator(copyGroundTransportIndicator);
                } else {
                    copy.groundTransportIndicator = null;
                }
                if (this.directAndNonStopOnlyInd!= null) {
                    Boolean sourceDirectAndNonStopOnlyInd;
                    sourceDirectAndNonStopOnlyInd = this.isDirectAndNonStopOnlyInd();
                    Boolean copyDirectAndNonStopOnlyInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "directAndNonStopOnlyInd", sourceDirectAndNonStopOnlyInd), sourceDirectAndNonStopOnlyInd));
                    copy.setDirectAndNonStopOnlyInd(copyDirectAndNonStopOnlyInd);
                } else {
                    copy.directAndNonStopOnlyInd = null;
                }
                if (this.nonStopsOnlyInd!= null) {
                    Boolean sourceNonStopsOnlyInd;
                    sourceNonStopsOnlyInd = this.isNonStopsOnlyInd();
                    Boolean copyNonStopsOnlyInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "nonStopsOnlyInd", sourceNonStopsOnlyInd), sourceNonStopsOnlyInd));
                    copy.setNonStopsOnlyInd(copyNonStopsOnlyInd);
                } else {
                    copy.nonStopsOnlyInd = null;
                }
                if (this.onlineConnectionsOnlyInd!= null) {
                    Boolean sourceOnlineConnectionsOnlyInd;
                    sourceOnlineConnectionsOnlyInd = this.isOnlineConnectionsOnlyInd();
                    Boolean copyOnlineConnectionsOnlyInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "onlineConnectionsOnlyInd", sourceOnlineConnectionsOnlyInd), sourceOnlineConnectionsOnlyInd));
                    copy.setOnlineConnectionsOnlyInd(copyOnlineConnectionsOnlyInd);
                } else {
                    copy.onlineConnectionsOnlyInd = null;
                }
                if (this.routingType!= null) {
                    String sourceRoutingType;
                    sourceRoutingType = this.getRoutingType();
                    String copyRoutingType = ((String) strategy.copy(LocatorUtils.property(locator, "routingType", sourceRoutingType), sourceRoutingType));
                    copy.setRoutingType(copyRoutingType);
                } else {
                    copy.routingType = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirlinePrefType.FlightTypePref();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SeatPrefGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class SeatPref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "SeatNumber")
        protected String seatNumber;
        @XmlAttribute(name = "SeatPreference")
        protected String seatPreference;
        @XmlAttribute(name = "SmokingAllowed")
        protected Boolean smokingAllowed;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the seatNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSeatNumber() {
            return seatNumber;
        }

        /**
         * Sets the value of the seatNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSeatNumber(String value) {
            this.seatNumber = value;
        }

        /**
         * Gets the value of the seatPreference property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSeatPreference() {
            return seatPreference;
        }

        /**
         * Sets the value of the seatPreference property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSeatPreference(String value) {
            this.seatPreference = value;
        }

        /**
         * Gets the value of the smokingAllowed property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isSmokingAllowed() {
            if (smokingAllowed == null) {
                return false;
            } else {
                return smokingAllowed;
            }
        }

        /**
         * Sets the value of the smokingAllowed property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setSmokingAllowed(Boolean value) {
            this.smokingAllowed = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theSeatNumber;
                theSeatNumber = this.getSeatNumber();
                strategy.appendField(locator, this, "seatNumber", buffer, theSeatNumber);
            }
            {
                String theSeatPreference;
                theSeatPreference = this.getSeatPreference();
                strategy.appendField(locator, this, "seatPreference", buffer, theSeatPreference);
            }
            {
                boolean theSmokingAllowed;
                theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
                strategy.appendField(locator, this, "smokingAllowed", buffer, theSmokingAllowed);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirlinePrefType.SeatPref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirlinePrefType.SeatPref that = ((AirlinePrefType.SeatPref) object);
            {
                String lhsSeatNumber;
                lhsSeatNumber = this.getSeatNumber();
                String rhsSeatNumber;
                rhsSeatNumber = that.getSeatNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "seatNumber", lhsSeatNumber), LocatorUtils.property(thatLocator, "seatNumber", rhsSeatNumber), lhsSeatNumber, rhsSeatNumber)) {
                    return false;
                }
            }
            {
                String lhsSeatPreference;
                lhsSeatPreference = this.getSeatPreference();
                String rhsSeatPreference;
                rhsSeatPreference = that.getSeatPreference();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "seatPreference", lhsSeatPreference), LocatorUtils.property(thatLocator, "seatPreference", rhsSeatPreference), lhsSeatPreference, rhsSeatPreference)) {
                    return false;
                }
            }
            {
                boolean lhsSmokingAllowed;
                lhsSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
                boolean rhsSmokingAllowed;
                rhsSmokingAllowed = ((that.smokingAllowed!= null)?that.isSmokingAllowed():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "smokingAllowed", lhsSmokingAllowed), LocatorUtils.property(thatLocator, "smokingAllowed", rhsSmokingAllowed), lhsSmokingAllowed, rhsSmokingAllowed)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theSeatNumber;
                theSeatNumber = this.getSeatNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatNumber", theSeatNumber), currentHashCode, theSeatNumber);
            }
            {
                String theSeatPreference;
                theSeatPreference = this.getSeatPreference();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatPreference", theSeatPreference), currentHashCode, theSeatPreference);
            }
            {
                boolean theSmokingAllowed;
                theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smokingAllowed", theSmokingAllowed), currentHashCode, theSmokingAllowed);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirlinePrefType.SeatPref) {
                final AirlinePrefType.SeatPref copy = ((AirlinePrefType.SeatPref) draftCopy);
                if (this.seatNumber!= null) {
                    String sourceSeatNumber;
                    sourceSeatNumber = this.getSeatNumber();
                    String copySeatNumber = ((String) strategy.copy(LocatorUtils.property(locator, "seatNumber", sourceSeatNumber), sourceSeatNumber));
                    copy.setSeatNumber(copySeatNumber);
                } else {
                    copy.seatNumber = null;
                }
                if (this.seatPreference!= null) {
                    String sourceSeatPreference;
                    sourceSeatPreference = this.getSeatPreference();
                    String copySeatPreference = ((String) strategy.copy(LocatorUtils.property(locator, "seatPreference", sourceSeatPreference), sourceSeatPreference));
                    copy.setSeatPreference(copySeatPreference);
                } else {
                    copy.seatPreference = null;
                }
                if (this.smokingAllowed!= null) {
                    boolean sourceSmokingAllowed;
                    sourceSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
                    boolean copySmokingAllowed = strategy.copy(LocatorUtils.property(locator, "smokingAllowed", sourceSmokingAllowed), sourceSmokingAllowed);
                    copy.setSmokingAllowed(copySmokingAllowed);
                } else {
                    copy.smokingAllowed = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirlinePrefType.SeatPref();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SSR_PrefGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class SSRPref
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "SSR_Code")
        protected String ssrCode;
        @XmlAttribute(name = "PreferLevel")
        protected PreferLevelType preferLevel;

        /**
         * Gets the value of the ssrCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSSRCode() {
            return ssrCode;
        }

        /**
         * Sets the value of the ssrCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSSRCode(String value) {
            this.ssrCode = value;
        }

        /**
         * Gets the value of the preferLevel property.
         * 
         * @return
         *     possible object is
         *     {@link PreferLevelType }
         *     
         */
        public PreferLevelType getPreferLevel() {
            if (preferLevel == null) {
                return PreferLevelType.PREFERRED;
            } else {
                return preferLevel;
            }
        }

        /**
         * Sets the value of the preferLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link PreferLevelType }
         *     
         */
        public void setPreferLevel(PreferLevelType value) {
            this.preferLevel = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theSSRCode;
                theSSRCode = this.getSSRCode();
                strategy.appendField(locator, this, "ssrCode", buffer, theSSRCode);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                strategy.appendField(locator, this, "preferLevel", buffer, thePreferLevel);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirlinePrefType.SSRPref)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirlinePrefType.SSRPref that = ((AirlinePrefType.SSRPref) object);
            {
                String lhsSSRCode;
                lhsSSRCode = this.getSSRCode();
                String rhsSSRCode;
                rhsSSRCode = that.getSSRCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ssrCode", lhsSSRCode), LocatorUtils.property(thatLocator, "ssrCode", rhsSSRCode), lhsSSRCode, rhsSSRCode)) {
                    return false;
                }
            }
            {
                PreferLevelType lhsPreferLevel;
                lhsPreferLevel = this.getPreferLevel();
                PreferLevelType rhsPreferLevel;
                rhsPreferLevel = that.getPreferLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "preferLevel", lhsPreferLevel), LocatorUtils.property(thatLocator, "preferLevel", rhsPreferLevel), lhsPreferLevel, rhsPreferLevel)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theSSRCode;
                theSSRCode = this.getSSRCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ssrCode", theSSRCode), currentHashCode, theSSRCode);
            }
            {
                PreferLevelType thePreferLevel;
                thePreferLevel = this.getPreferLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferLevel", thePreferLevel), currentHashCode, thePreferLevel);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirlinePrefType.SSRPref) {
                final AirlinePrefType.SSRPref copy = ((AirlinePrefType.SSRPref) draftCopy);
                if (this.ssrCode!= null) {
                    String sourceSSRCode;
                    sourceSSRCode = this.getSSRCode();
                    String copySSRCode = ((String) strategy.copy(LocatorUtils.property(locator, "ssrCode", sourceSSRCode), sourceSSRCode));
                    copy.setSSRCode(copySSRCode);
                } else {
                    copy.ssrCode = null;
                }
                if (this.preferLevel!= null) {
                    PreferLevelType sourcePreferLevel;
                    sourcePreferLevel = this.getPreferLevel();
                    PreferLevelType copyPreferLevel = ((PreferLevelType) strategy.copy(LocatorUtils.property(locator, "preferLevel", sourcePreferLevel), sourcePreferLevel));
                    copy.setPreferLevel(copyPreferLevel);
                } else {
                    copy.preferLevel = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirlinePrefType.SSRPref();
        }

    }

}
