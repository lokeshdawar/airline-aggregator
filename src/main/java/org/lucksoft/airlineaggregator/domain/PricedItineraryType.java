//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Itinerary with pricing information.
 * 
 * <p>Java class for PricedItineraryType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PricedItineraryType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="AirItinerary" type="{http://www.opentravel.org/OTA/2003/05}AirItineraryType" minOccurs="0"/&gt;
 *         &lt;element name="AirItineraryPricingInfo" type="{http://www.opentravel.org/OTA/2003/05}AirItineraryPricingInfoType" minOccurs="0"/&gt;
 *         &lt;element name="Notes" type="{http://www.opentravel.org/OTA/2003/05}FreeTextType" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="TicketingInfo" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}TicketingInfoRS_Type"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="DeliveryInfo" maxOccurs="5" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                           &lt;attribute name="DistribType" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="PaymentType" type="{http://www.opentravel.org/OTA/2003/05}ListOfOTA_CodeType" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="SequenceNumber" use="required" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PricedItineraryType", propOrder = {
    "airItinerary",
    "airItineraryPricingInfo",
    "notes",
    "ticketingInfo"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.PricedItinerariesType.PricedItinerary.class
})
public class PricedItineraryType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AirItinerary")
    protected AirItineraryType airItinerary;
    @XmlElement(name = "AirItineraryPricingInfo")
    protected AirItineraryPricingInfoType airItineraryPricingInfo;
    @XmlElement(name = "Notes")
    protected List<FreeTextType> notes;
    @XmlElement(name = "TicketingInfo")
    protected PricedItineraryType.TicketingInfo ticketingInfo;
    @XmlAttribute(name = "SequenceNumber", required = true)
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger sequenceNumber;

    /**
     * Gets the value of the airItinerary property.
     * 
     * @return
     *     possible object is
     *     {@link AirItineraryType }
     *     
     */
    public AirItineraryType getAirItinerary() {
        return airItinerary;
    }

    /**
     * Sets the value of the airItinerary property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirItineraryType }
     *     
     */
    public void setAirItinerary(AirItineraryType value) {
        this.airItinerary = value;
    }

    /**
     * Gets the value of the airItineraryPricingInfo property.
     * 
     * @return
     *     possible object is
     *     {@link AirItineraryPricingInfoType }
     *     
     */
    public AirItineraryPricingInfoType getAirItineraryPricingInfo() {
        return airItineraryPricingInfo;
    }

    /**
     * Sets the value of the airItineraryPricingInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirItineraryPricingInfoType }
     *     
     */
    public void setAirItineraryPricingInfo(AirItineraryPricingInfoType value) {
        this.airItineraryPricingInfo = value;
    }

    /**
     * Gets the value of the notes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the notes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNotes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FreeTextType }
     * 
     * 
     */
    public List<FreeTextType> getNotes() {
        if (notes == null) {
            notes = new ArrayList<FreeTextType>();
        }
        return this.notes;
    }

    /**
     * Gets the value of the ticketingInfo property.
     * 
     * @return
     *     possible object is
     *     {@link PricedItineraryType.TicketingInfo }
     *     
     */
    public PricedItineraryType.TicketingInfo getTicketingInfo() {
        return ticketingInfo;
    }

    /**
     * Sets the value of the ticketingInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link PricedItineraryType.TicketingInfo }
     *     
     */
    public void setTicketingInfo(PricedItineraryType.TicketingInfo value) {
        this.ticketingInfo = value;
    }

    /**
     * Gets the value of the sequenceNumber property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getSequenceNumber() {
        return sequenceNumber;
    }

    /**
     * Sets the value of the sequenceNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setSequenceNumber(BigInteger value) {
        this.sequenceNumber = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AirItineraryType theAirItinerary;
            theAirItinerary = this.getAirItinerary();
            strategy.appendField(locator, this, "airItinerary", buffer, theAirItinerary);
        }
        {
            AirItineraryPricingInfoType theAirItineraryPricingInfo;
            theAirItineraryPricingInfo = this.getAirItineraryPricingInfo();
            strategy.appendField(locator, this, "airItineraryPricingInfo", buffer, theAirItineraryPricingInfo);
        }
        {
            List<FreeTextType> theNotes;
            theNotes = (((this.notes!= null)&&(!this.notes.isEmpty()))?this.getNotes():null);
            strategy.appendField(locator, this, "notes", buffer, theNotes);
        }
        {
            PricedItineraryType.TicketingInfo theTicketingInfo;
            theTicketingInfo = this.getTicketingInfo();
            strategy.appendField(locator, this, "ticketingInfo", buffer, theTicketingInfo);
        }
        {
            BigInteger theSequenceNumber;
            theSequenceNumber = this.getSequenceNumber();
            strategy.appendField(locator, this, "sequenceNumber", buffer, theSequenceNumber);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PricedItineraryType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PricedItineraryType that = ((PricedItineraryType) object);
        {
            AirItineraryType lhsAirItinerary;
            lhsAirItinerary = this.getAirItinerary();
            AirItineraryType rhsAirItinerary;
            rhsAirItinerary = that.getAirItinerary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airItinerary", lhsAirItinerary), LocatorUtils.property(thatLocator, "airItinerary", rhsAirItinerary), lhsAirItinerary, rhsAirItinerary)) {
                return false;
            }
        }
        {
            AirItineraryPricingInfoType lhsAirItineraryPricingInfo;
            lhsAirItineraryPricingInfo = this.getAirItineraryPricingInfo();
            AirItineraryPricingInfoType rhsAirItineraryPricingInfo;
            rhsAirItineraryPricingInfo = that.getAirItineraryPricingInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airItineraryPricingInfo", lhsAirItineraryPricingInfo), LocatorUtils.property(thatLocator, "airItineraryPricingInfo", rhsAirItineraryPricingInfo), lhsAirItineraryPricingInfo, rhsAirItineraryPricingInfo)) {
                return false;
            }
        }
        {
            List<FreeTextType> lhsNotes;
            lhsNotes = (((this.notes!= null)&&(!this.notes.isEmpty()))?this.getNotes():null);
            List<FreeTextType> rhsNotes;
            rhsNotes = (((that.notes!= null)&&(!that.notes.isEmpty()))?that.getNotes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "notes", lhsNotes), LocatorUtils.property(thatLocator, "notes", rhsNotes), lhsNotes, rhsNotes)) {
                return false;
            }
        }
        {
            PricedItineraryType.TicketingInfo lhsTicketingInfo;
            lhsTicketingInfo = this.getTicketingInfo();
            PricedItineraryType.TicketingInfo rhsTicketingInfo;
            rhsTicketingInfo = that.getTicketingInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketingInfo", lhsTicketingInfo), LocatorUtils.property(thatLocator, "ticketingInfo", rhsTicketingInfo), lhsTicketingInfo, rhsTicketingInfo)) {
                return false;
            }
        }
        {
            BigInteger lhsSequenceNumber;
            lhsSequenceNumber = this.getSequenceNumber();
            BigInteger rhsSequenceNumber;
            rhsSequenceNumber = that.getSequenceNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sequenceNumber", lhsSequenceNumber), LocatorUtils.property(thatLocator, "sequenceNumber", rhsSequenceNumber), lhsSequenceNumber, rhsSequenceNumber)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AirItineraryType theAirItinerary;
            theAirItinerary = this.getAirItinerary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airItinerary", theAirItinerary), currentHashCode, theAirItinerary);
        }
        {
            AirItineraryPricingInfoType theAirItineraryPricingInfo;
            theAirItineraryPricingInfo = this.getAirItineraryPricingInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airItineraryPricingInfo", theAirItineraryPricingInfo), currentHashCode, theAirItineraryPricingInfo);
        }
        {
            List<FreeTextType> theNotes;
            theNotes = (((this.notes!= null)&&(!this.notes.isEmpty()))?this.getNotes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notes", theNotes), currentHashCode, theNotes);
        }
        {
            PricedItineraryType.TicketingInfo theTicketingInfo;
            theTicketingInfo = this.getTicketingInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketingInfo", theTicketingInfo), currentHashCode, theTicketingInfo);
        }
        {
            BigInteger theSequenceNumber;
            theSequenceNumber = this.getSequenceNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sequenceNumber", theSequenceNumber), currentHashCode, theSequenceNumber);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PricedItineraryType) {
            final PricedItineraryType copy = ((PricedItineraryType) draftCopy);
            if (this.airItinerary!= null) {
                AirItineraryType sourceAirItinerary;
                sourceAirItinerary = this.getAirItinerary();
                AirItineraryType copyAirItinerary = ((AirItineraryType) strategy.copy(LocatorUtils.property(locator, "airItinerary", sourceAirItinerary), sourceAirItinerary));
                copy.setAirItinerary(copyAirItinerary);
            } else {
                copy.airItinerary = null;
            }
            if (this.airItineraryPricingInfo!= null) {
                AirItineraryPricingInfoType sourceAirItineraryPricingInfo;
                sourceAirItineraryPricingInfo = this.getAirItineraryPricingInfo();
                AirItineraryPricingInfoType copyAirItineraryPricingInfo = ((AirItineraryPricingInfoType) strategy.copy(LocatorUtils.property(locator, "airItineraryPricingInfo", sourceAirItineraryPricingInfo), sourceAirItineraryPricingInfo));
                copy.setAirItineraryPricingInfo(copyAirItineraryPricingInfo);
            } else {
                copy.airItineraryPricingInfo = null;
            }
            if ((this.notes!= null)&&(!this.notes.isEmpty())) {
                List<FreeTextType> sourceNotes;
                sourceNotes = (((this.notes!= null)&&(!this.notes.isEmpty()))?this.getNotes():null);
                @SuppressWarnings("unchecked")
                List<FreeTextType> copyNotes = ((List<FreeTextType> ) strategy.copy(LocatorUtils.property(locator, "notes", sourceNotes), sourceNotes));
                copy.notes = null;
                if (copyNotes!= null) {
                    List<FreeTextType> uniqueNotesl = copy.getNotes();
                    uniqueNotesl.addAll(copyNotes);
                }
            } else {
                copy.notes = null;
            }
            if (this.ticketingInfo!= null) {
                PricedItineraryType.TicketingInfo sourceTicketingInfo;
                sourceTicketingInfo = this.getTicketingInfo();
                PricedItineraryType.TicketingInfo copyTicketingInfo = ((PricedItineraryType.TicketingInfo) strategy.copy(LocatorUtils.property(locator, "ticketingInfo", sourceTicketingInfo), sourceTicketingInfo));
                copy.setTicketingInfo(copyTicketingInfo);
            } else {
                copy.ticketingInfo = null;
            }
            if (this.sequenceNumber!= null) {
                BigInteger sourceSequenceNumber;
                sourceSequenceNumber = this.getSequenceNumber();
                BigInteger copySequenceNumber = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "sequenceNumber", sourceSequenceNumber), sourceSequenceNumber));
                copy.setSequenceNumber(copySequenceNumber);
            } else {
                copy.sequenceNumber = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PricedItineraryType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}TicketingInfoRS_Type"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="DeliveryInfo" maxOccurs="5" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *                 &lt;attribute name="DistribType" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="PaymentType" type="{http://www.opentravel.org/OTA/2003/05}ListOfOTA_CodeType" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "deliveryInfo"
    })
    public static class TicketingInfo
        extends TicketingInfoRSType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "DeliveryInfo")
        protected List<PricedItineraryType.TicketingInfo.DeliveryInfo> deliveryInfo;
        @XmlAttribute(name = "PaymentType")
        protected List<String> paymentType;

        /**
         * Gets the value of the deliveryInfo property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the deliveryInfo property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getDeliveryInfo().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link PricedItineraryType.TicketingInfo.DeliveryInfo }
         * 
         * 
         */
        public List<PricedItineraryType.TicketingInfo.DeliveryInfo> getDeliveryInfo() {
            if (deliveryInfo == null) {
                deliveryInfo = new ArrayList<PricedItineraryType.TicketingInfo.DeliveryInfo>();
            }
            return this.deliveryInfo;
        }

        /**
         * Gets the value of the paymentType property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the paymentType property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPaymentType().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getPaymentType() {
            if (paymentType == null) {
                paymentType = new ArrayList<String>();
            }
            return this.paymentType;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                List<PricedItineraryType.TicketingInfo.DeliveryInfo> theDeliveryInfo;
                theDeliveryInfo = (((this.deliveryInfo!= null)&&(!this.deliveryInfo.isEmpty()))?this.getDeliveryInfo():null);
                strategy.appendField(locator, this, "deliveryInfo", buffer, theDeliveryInfo);
            }
            {
                List<String> thePaymentType;
                thePaymentType = (((this.paymentType!= null)&&(!this.paymentType.isEmpty()))?this.getPaymentType():null);
                strategy.appendField(locator, this, "paymentType", buffer, thePaymentType);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PricedItineraryType.TicketingInfo)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final PricedItineraryType.TicketingInfo that = ((PricedItineraryType.TicketingInfo) object);
            {
                List<PricedItineraryType.TicketingInfo.DeliveryInfo> lhsDeliveryInfo;
                lhsDeliveryInfo = (((this.deliveryInfo!= null)&&(!this.deliveryInfo.isEmpty()))?this.getDeliveryInfo():null);
                List<PricedItineraryType.TicketingInfo.DeliveryInfo> rhsDeliveryInfo;
                rhsDeliveryInfo = (((that.deliveryInfo!= null)&&(!that.deliveryInfo.isEmpty()))?that.getDeliveryInfo():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "deliveryInfo", lhsDeliveryInfo), LocatorUtils.property(thatLocator, "deliveryInfo", rhsDeliveryInfo), lhsDeliveryInfo, rhsDeliveryInfo)) {
                    return false;
                }
            }
            {
                List<String> lhsPaymentType;
                lhsPaymentType = (((this.paymentType!= null)&&(!this.paymentType.isEmpty()))?this.getPaymentType():null);
                List<String> rhsPaymentType;
                rhsPaymentType = (((that.paymentType!= null)&&(!that.paymentType.isEmpty()))?that.getPaymentType():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentType", lhsPaymentType), LocatorUtils.property(thatLocator, "paymentType", rhsPaymentType), lhsPaymentType, rhsPaymentType)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                List<PricedItineraryType.TicketingInfo.DeliveryInfo> theDeliveryInfo;
                theDeliveryInfo = (((this.deliveryInfo!= null)&&(!this.deliveryInfo.isEmpty()))?this.getDeliveryInfo():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deliveryInfo", theDeliveryInfo), currentHashCode, theDeliveryInfo);
            }
            {
                List<String> thePaymentType;
                thePaymentType = (((this.paymentType!= null)&&(!this.paymentType.isEmpty()))?this.getPaymentType():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentType", thePaymentType), currentHashCode, thePaymentType);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof PricedItineraryType.TicketingInfo) {
                final PricedItineraryType.TicketingInfo copy = ((PricedItineraryType.TicketingInfo) draftCopy);
                if ((this.deliveryInfo!= null)&&(!this.deliveryInfo.isEmpty())) {
                    List<PricedItineraryType.TicketingInfo.DeliveryInfo> sourceDeliveryInfo;
                    sourceDeliveryInfo = (((this.deliveryInfo!= null)&&(!this.deliveryInfo.isEmpty()))?this.getDeliveryInfo():null);
                    @SuppressWarnings("unchecked")
                    List<PricedItineraryType.TicketingInfo.DeliveryInfo> copyDeliveryInfo = ((List<PricedItineraryType.TicketingInfo.DeliveryInfo> ) strategy.copy(LocatorUtils.property(locator, "deliveryInfo", sourceDeliveryInfo), sourceDeliveryInfo));
                    copy.deliveryInfo = null;
                    if (copyDeliveryInfo!= null) {
                        List<PricedItineraryType.TicketingInfo.DeliveryInfo> uniqueDeliveryInfol = copy.getDeliveryInfo();
                        uniqueDeliveryInfol.addAll(copyDeliveryInfo);
                    }
                } else {
                    copy.deliveryInfo = null;
                }
                if ((this.paymentType!= null)&&(!this.paymentType.isEmpty())) {
                    List<String> sourcePaymentType;
                    sourcePaymentType = (((this.paymentType!= null)&&(!this.paymentType.isEmpty()))?this.getPaymentType():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyPaymentType = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "paymentType", sourcePaymentType), sourcePaymentType));
                    copy.paymentType = null;
                    if (copyPaymentType!= null) {
                        List<String> uniquePaymentTypel = copy.getPaymentType();
                        uniquePaymentTypel.addAll(copyPaymentType);
                    }
                } else {
                    copy.paymentType = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PricedItineraryType.TicketingInfo();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
         *       &lt;attribute name="DistribType" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class DeliveryInfo
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "DistribType")
            protected String distribType;
            @XmlAttribute(name = "Amount")
            protected BigDecimal amount;
            @XmlAttribute(name = "CurrencyCode")
            protected String currencyCode;
            @XmlAttribute(name = "DecimalPlaces")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger decimalPlaces;

            /**
             * Gets the value of the distribType property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDistribType() {
                return distribType;
            }

            /**
             * Sets the value of the distribType property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setDistribType(String value) {
                this.distribType = value;
            }

            /**
             * Gets the value of the amount property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getAmount() {
                return amount;
            }

            /**
             * Sets the value of the amount property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setAmount(BigDecimal value) {
                this.amount = value;
            }

            /**
             * Gets the value of the currencyCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCurrencyCode() {
                return currencyCode;
            }

            /**
             * Sets the value of the currencyCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCurrencyCode(String value) {
                this.currencyCode = value;
            }

            /**
             * Gets the value of the decimalPlaces property.
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getDecimalPlaces() {
                return decimalPlaces;
            }

            /**
             * Sets the value of the decimalPlaces property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             */
            public void setDecimalPlaces(BigInteger value) {
                this.decimalPlaces = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theDistribType;
                    theDistribType = this.getDistribType();
                    strategy.appendField(locator, this, "distribType", buffer, theDistribType);
                }
                {
                    BigDecimal theAmount;
                    theAmount = this.getAmount();
                    strategy.appendField(locator, this, "amount", buffer, theAmount);
                }
                {
                    String theCurrencyCode;
                    theCurrencyCode = this.getCurrencyCode();
                    strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
                }
                {
                    BigInteger theDecimalPlaces;
                    theDecimalPlaces = this.getDecimalPlaces();
                    strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof PricedItineraryType.TicketingInfo.DeliveryInfo)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final PricedItineraryType.TicketingInfo.DeliveryInfo that = ((PricedItineraryType.TicketingInfo.DeliveryInfo) object);
                {
                    String lhsDistribType;
                    lhsDistribType = this.getDistribType();
                    String rhsDistribType;
                    rhsDistribType = that.getDistribType();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "distribType", lhsDistribType), LocatorUtils.property(thatLocator, "distribType", rhsDistribType), lhsDistribType, rhsDistribType)) {
                        return false;
                    }
                }
                {
                    BigDecimal lhsAmount;
                    lhsAmount = this.getAmount();
                    BigDecimal rhsAmount;
                    rhsAmount = that.getAmount();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                        return false;
                    }
                }
                {
                    String lhsCurrencyCode;
                    lhsCurrencyCode = this.getCurrencyCode();
                    String rhsCurrencyCode;
                    rhsCurrencyCode = that.getCurrencyCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                        return false;
                    }
                }
                {
                    BigInteger lhsDecimalPlaces;
                    lhsDecimalPlaces = this.getDecimalPlaces();
                    BigInteger rhsDecimalPlaces;
                    rhsDecimalPlaces = that.getDecimalPlaces();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theDistribType;
                    theDistribType = this.getDistribType();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distribType", theDistribType), currentHashCode, theDistribType);
                }
                {
                    BigDecimal theAmount;
                    theAmount = this.getAmount();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
                }
                {
                    String theCurrencyCode;
                    theCurrencyCode = this.getCurrencyCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
                }
                {
                    BigInteger theDecimalPlaces;
                    theDecimalPlaces = this.getDecimalPlaces();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof PricedItineraryType.TicketingInfo.DeliveryInfo) {
                    final PricedItineraryType.TicketingInfo.DeliveryInfo copy = ((PricedItineraryType.TicketingInfo.DeliveryInfo) draftCopy);
                    if (this.distribType!= null) {
                        String sourceDistribType;
                        sourceDistribType = this.getDistribType();
                        String copyDistribType = ((String) strategy.copy(LocatorUtils.property(locator, "distribType", sourceDistribType), sourceDistribType));
                        copy.setDistribType(copyDistribType);
                    } else {
                        copy.distribType = null;
                    }
                    if (this.amount!= null) {
                        BigDecimal sourceAmount;
                        sourceAmount = this.getAmount();
                        BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                        copy.setAmount(copyAmount);
                    } else {
                        copy.amount = null;
                    }
                    if (this.currencyCode!= null) {
                        String sourceCurrencyCode;
                        sourceCurrencyCode = this.getCurrencyCode();
                        String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                        copy.setCurrencyCode(copyCurrencyCode);
                    } else {
                        copy.currencyCode = null;
                    }
                    if (this.decimalPlaces!= null) {
                        BigInteger sourceDecimalPlaces;
                        sourceDecimalPlaces = this.getDecimalPlaces();
                        BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                        copy.setDecimalPlaces(copyDecimalPlaces);
                    } else {
                        copy.decimalPlaces = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new PricedItineraryType.TicketingInfo.DeliveryInfo();
            }

        }

    }

}
