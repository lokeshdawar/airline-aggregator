//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 *  Contains all booking response information pertaining to a completed reservation.
 * 
 * <p>Java class for AirReservationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AirReservationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="AirItinerary" type="{http://www.opentravel.org/OTA/2003/05}AirItineraryType" minOccurs="0"/&gt;
 *         &lt;element name="PriceInfo" type="{http://www.opentravel.org/OTA/2003/05}BookingPriceInfoType" minOccurs="0"/&gt;
 *         &lt;element name="TravelerInfo" type="{http://www.opentravel.org/OTA/2003/05}TravelerInfoType" minOccurs="0"/&gt;
 *         &lt;element name="Fulfillment" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="PaymentDetails" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="PaymentDetail" type="{http://www.opentravel.org/OTA/2003/05}PaymentDetailType" maxOccurs="99"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="DeliveryAddress" type="{http://www.opentravel.org/OTA/2003/05}AddressType" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Ticketing" type="{http://www.opentravel.org/OTA/2003/05}TicketingInfoType" maxOccurs="99" minOccurs="0"/&gt;
 *         &lt;element name="Queues" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Queue" maxOccurs="10"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}QueueGroup"/&gt;
 *                           &lt;attribute name="DateTime" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *                           &lt;attribute name="Text" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *                           &lt;attribute name="CarrierCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="BookingReferenceID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type" maxOccurs="9" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="LastModified" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AirReservationType", propOrder = {
    "airItinerary",
    "priceInfo",
    "travelerInfo",
    "fulfillment",
    "ticketing",
    "queues",
    "bookingReferenceID"
})
public class AirReservationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AirItinerary")
    protected AirItineraryType airItinerary;
    @XmlElement(name = "PriceInfo")
    protected BookingPriceInfoType priceInfo;
    @XmlElement(name = "TravelerInfo")
    protected TravelerInfoType travelerInfo;
    @XmlElement(name = "Fulfillment")
    protected AirReservationType.Fulfillment fulfillment;
    @XmlElement(name = "Ticketing")
    protected List<TicketingInfoType> ticketing;
    @XmlElement(name = "Queues")
    protected AirReservationType.Queues queues;
    @XmlElement(name = "BookingReferenceID")
    protected List<UniqueIDType> bookingReferenceID;
    @XmlAttribute(name = "LastModified")
    protected String lastModified;

    /**
     * Gets the value of the airItinerary property.
     * 
     * @return
     *     possible object is
     *     {@link AirItineraryType }
     *     
     */
    public AirItineraryType getAirItinerary() {
        return airItinerary;
    }

    /**
     * Sets the value of the airItinerary property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirItineraryType }
     *     
     */
    public void setAirItinerary(AirItineraryType value) {
        this.airItinerary = value;
    }

    /**
     * Gets the value of the priceInfo property.
     * 
     * @return
     *     possible object is
     *     {@link BookingPriceInfoType }
     *     
     */
    public BookingPriceInfoType getPriceInfo() {
        return priceInfo;
    }

    /**
     * Sets the value of the priceInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link BookingPriceInfoType }
     *     
     */
    public void setPriceInfo(BookingPriceInfoType value) {
        this.priceInfo = value;
    }

    /**
     * Gets the value of the travelerInfo property.
     * 
     * @return
     *     possible object is
     *     {@link TravelerInfoType }
     *     
     */
    public TravelerInfoType getTravelerInfo() {
        return travelerInfo;
    }

    /**
     * Sets the value of the travelerInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link TravelerInfoType }
     *     
     */
    public void setTravelerInfo(TravelerInfoType value) {
        this.travelerInfo = value;
    }

    /**
     * Gets the value of the fulfillment property.
     * 
     * @return
     *     possible object is
     *     {@link AirReservationType.Fulfillment }
     *     
     */
    public AirReservationType.Fulfillment getFulfillment() {
        return fulfillment;
    }

    /**
     * Sets the value of the fulfillment property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirReservationType.Fulfillment }
     *     
     */
    public void setFulfillment(AirReservationType.Fulfillment value) {
        this.fulfillment = value;
    }

    /**
     * Gets the value of the ticketing property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ticketing property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTicketing().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TicketingInfoType }
     * 
     * 
     */
    public List<TicketingInfoType> getTicketing() {
        if (ticketing == null) {
            ticketing = new ArrayList<TicketingInfoType>();
        }
        return this.ticketing;
    }

    /**
     * Gets the value of the queues property.
     * 
     * @return
     *     possible object is
     *     {@link AirReservationType.Queues }
     *     
     */
    public AirReservationType.Queues getQueues() {
        return queues;
    }

    /**
     * Sets the value of the queues property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirReservationType.Queues }
     *     
     */
    public void setQueues(AirReservationType.Queues value) {
        this.queues = value;
    }

    /**
     * Gets the value of the bookingReferenceID property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the bookingReferenceID property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBookingReferenceID().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UniqueIDType }
     * 
     * 
     */
    public List<UniqueIDType> getBookingReferenceID() {
        if (bookingReferenceID == null) {
            bookingReferenceID = new ArrayList<UniqueIDType>();
        }
        return this.bookingReferenceID;
    }

    /**
     * Gets the value of the lastModified property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLastModified() {
        return lastModified;
    }

    /**
     * Sets the value of the lastModified property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLastModified(String value) {
        this.lastModified = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AirItineraryType theAirItinerary;
            theAirItinerary = this.getAirItinerary();
            strategy.appendField(locator, this, "airItinerary", buffer, theAirItinerary);
        }
        {
            BookingPriceInfoType thePriceInfo;
            thePriceInfo = this.getPriceInfo();
            strategy.appendField(locator, this, "priceInfo", buffer, thePriceInfo);
        }
        {
            TravelerInfoType theTravelerInfo;
            theTravelerInfo = this.getTravelerInfo();
            strategy.appendField(locator, this, "travelerInfo", buffer, theTravelerInfo);
        }
        {
            AirReservationType.Fulfillment theFulfillment;
            theFulfillment = this.getFulfillment();
            strategy.appendField(locator, this, "fulfillment", buffer, theFulfillment);
        }
        {
            List<TicketingInfoType> theTicketing;
            theTicketing = (((this.ticketing!= null)&&(!this.ticketing.isEmpty()))?this.getTicketing():null);
            strategy.appendField(locator, this, "ticketing", buffer, theTicketing);
        }
        {
            AirReservationType.Queues theQueues;
            theQueues = this.getQueues();
            strategy.appendField(locator, this, "queues", buffer, theQueues);
        }
        {
            List<UniqueIDType> theBookingReferenceID;
            theBookingReferenceID = (((this.bookingReferenceID!= null)&&(!this.bookingReferenceID.isEmpty()))?this.getBookingReferenceID():null);
            strategy.appendField(locator, this, "bookingReferenceID", buffer, theBookingReferenceID);
        }
        {
            String theLastModified;
            theLastModified = this.getLastModified();
            strategy.appendField(locator, this, "lastModified", buffer, theLastModified);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AirReservationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AirReservationType that = ((AirReservationType) object);
        {
            AirItineraryType lhsAirItinerary;
            lhsAirItinerary = this.getAirItinerary();
            AirItineraryType rhsAirItinerary;
            rhsAirItinerary = that.getAirItinerary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airItinerary", lhsAirItinerary), LocatorUtils.property(thatLocator, "airItinerary", rhsAirItinerary), lhsAirItinerary, rhsAirItinerary)) {
                return false;
            }
        }
        {
            BookingPriceInfoType lhsPriceInfo;
            lhsPriceInfo = this.getPriceInfo();
            BookingPriceInfoType rhsPriceInfo;
            rhsPriceInfo = that.getPriceInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priceInfo", lhsPriceInfo), LocatorUtils.property(thatLocator, "priceInfo", rhsPriceInfo), lhsPriceInfo, rhsPriceInfo)) {
                return false;
            }
        }
        {
            TravelerInfoType lhsTravelerInfo;
            lhsTravelerInfo = this.getTravelerInfo();
            TravelerInfoType rhsTravelerInfo;
            rhsTravelerInfo = that.getTravelerInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerInfo", lhsTravelerInfo), LocatorUtils.property(thatLocator, "travelerInfo", rhsTravelerInfo), lhsTravelerInfo, rhsTravelerInfo)) {
                return false;
            }
        }
        {
            AirReservationType.Fulfillment lhsFulfillment;
            lhsFulfillment = this.getFulfillment();
            AirReservationType.Fulfillment rhsFulfillment;
            rhsFulfillment = that.getFulfillment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fulfillment", lhsFulfillment), LocatorUtils.property(thatLocator, "fulfillment", rhsFulfillment), lhsFulfillment, rhsFulfillment)) {
                return false;
            }
        }
        {
            List<TicketingInfoType> lhsTicketing;
            lhsTicketing = (((this.ticketing!= null)&&(!this.ticketing.isEmpty()))?this.getTicketing():null);
            List<TicketingInfoType> rhsTicketing;
            rhsTicketing = (((that.ticketing!= null)&&(!that.ticketing.isEmpty()))?that.getTicketing():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketing", lhsTicketing), LocatorUtils.property(thatLocator, "ticketing", rhsTicketing), lhsTicketing, rhsTicketing)) {
                return false;
            }
        }
        {
            AirReservationType.Queues lhsQueues;
            lhsQueues = this.getQueues();
            AirReservationType.Queues rhsQueues;
            rhsQueues = that.getQueues();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "queues", lhsQueues), LocatorUtils.property(thatLocator, "queues", rhsQueues), lhsQueues, rhsQueues)) {
                return false;
            }
        }
        {
            List<UniqueIDType> lhsBookingReferenceID;
            lhsBookingReferenceID = (((this.bookingReferenceID!= null)&&(!this.bookingReferenceID.isEmpty()))?this.getBookingReferenceID():null);
            List<UniqueIDType> rhsBookingReferenceID;
            rhsBookingReferenceID = (((that.bookingReferenceID!= null)&&(!that.bookingReferenceID.isEmpty()))?that.getBookingReferenceID():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bookingReferenceID", lhsBookingReferenceID), LocatorUtils.property(thatLocator, "bookingReferenceID", rhsBookingReferenceID), lhsBookingReferenceID, rhsBookingReferenceID)) {
                return false;
            }
        }
        {
            String lhsLastModified;
            lhsLastModified = this.getLastModified();
            String rhsLastModified;
            rhsLastModified = that.getLastModified();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastModified", lhsLastModified), LocatorUtils.property(thatLocator, "lastModified", rhsLastModified), lhsLastModified, rhsLastModified)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AirItineraryType theAirItinerary;
            theAirItinerary = this.getAirItinerary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airItinerary", theAirItinerary), currentHashCode, theAirItinerary);
        }
        {
            BookingPriceInfoType thePriceInfo;
            thePriceInfo = this.getPriceInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priceInfo", thePriceInfo), currentHashCode, thePriceInfo);
        }
        {
            TravelerInfoType theTravelerInfo;
            theTravelerInfo = this.getTravelerInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerInfo", theTravelerInfo), currentHashCode, theTravelerInfo);
        }
        {
            AirReservationType.Fulfillment theFulfillment;
            theFulfillment = this.getFulfillment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fulfillment", theFulfillment), currentHashCode, theFulfillment);
        }
        {
            List<TicketingInfoType> theTicketing;
            theTicketing = (((this.ticketing!= null)&&(!this.ticketing.isEmpty()))?this.getTicketing():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketing", theTicketing), currentHashCode, theTicketing);
        }
        {
            AirReservationType.Queues theQueues;
            theQueues = this.getQueues();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "queues", theQueues), currentHashCode, theQueues);
        }
        {
            List<UniqueIDType> theBookingReferenceID;
            theBookingReferenceID = (((this.bookingReferenceID!= null)&&(!this.bookingReferenceID.isEmpty()))?this.getBookingReferenceID():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bookingReferenceID", theBookingReferenceID), currentHashCode, theBookingReferenceID);
        }
        {
            String theLastModified;
            theLastModified = this.getLastModified();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastModified", theLastModified), currentHashCode, theLastModified);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AirReservationType) {
            final AirReservationType copy = ((AirReservationType) draftCopy);
            if (this.airItinerary!= null) {
                AirItineraryType sourceAirItinerary;
                sourceAirItinerary = this.getAirItinerary();
                AirItineraryType copyAirItinerary = ((AirItineraryType) strategy.copy(LocatorUtils.property(locator, "airItinerary", sourceAirItinerary), sourceAirItinerary));
                copy.setAirItinerary(copyAirItinerary);
            } else {
                copy.airItinerary = null;
            }
            if (this.priceInfo!= null) {
                BookingPriceInfoType sourcePriceInfo;
                sourcePriceInfo = this.getPriceInfo();
                BookingPriceInfoType copyPriceInfo = ((BookingPriceInfoType) strategy.copy(LocatorUtils.property(locator, "priceInfo", sourcePriceInfo), sourcePriceInfo));
                copy.setPriceInfo(copyPriceInfo);
            } else {
                copy.priceInfo = null;
            }
            if (this.travelerInfo!= null) {
                TravelerInfoType sourceTravelerInfo;
                sourceTravelerInfo = this.getTravelerInfo();
                TravelerInfoType copyTravelerInfo = ((TravelerInfoType) strategy.copy(LocatorUtils.property(locator, "travelerInfo", sourceTravelerInfo), sourceTravelerInfo));
                copy.setTravelerInfo(copyTravelerInfo);
            } else {
                copy.travelerInfo = null;
            }
            if (this.fulfillment!= null) {
                AirReservationType.Fulfillment sourceFulfillment;
                sourceFulfillment = this.getFulfillment();
                AirReservationType.Fulfillment copyFulfillment = ((AirReservationType.Fulfillment) strategy.copy(LocatorUtils.property(locator, "fulfillment", sourceFulfillment), sourceFulfillment));
                copy.setFulfillment(copyFulfillment);
            } else {
                copy.fulfillment = null;
            }
            if ((this.ticketing!= null)&&(!this.ticketing.isEmpty())) {
                List<TicketingInfoType> sourceTicketing;
                sourceTicketing = (((this.ticketing!= null)&&(!this.ticketing.isEmpty()))?this.getTicketing():null);
                @SuppressWarnings("unchecked")
                List<TicketingInfoType> copyTicketing = ((List<TicketingInfoType> ) strategy.copy(LocatorUtils.property(locator, "ticketing", sourceTicketing), sourceTicketing));
                copy.ticketing = null;
                if (copyTicketing!= null) {
                    List<TicketingInfoType> uniqueTicketingl = copy.getTicketing();
                    uniqueTicketingl.addAll(copyTicketing);
                }
            } else {
                copy.ticketing = null;
            }
            if (this.queues!= null) {
                AirReservationType.Queues sourceQueues;
                sourceQueues = this.getQueues();
                AirReservationType.Queues copyQueues = ((AirReservationType.Queues) strategy.copy(LocatorUtils.property(locator, "queues", sourceQueues), sourceQueues));
                copy.setQueues(copyQueues);
            } else {
                copy.queues = null;
            }
            if ((this.bookingReferenceID!= null)&&(!this.bookingReferenceID.isEmpty())) {
                List<UniqueIDType> sourceBookingReferenceID;
                sourceBookingReferenceID = (((this.bookingReferenceID!= null)&&(!this.bookingReferenceID.isEmpty()))?this.getBookingReferenceID():null);
                @SuppressWarnings("unchecked")
                List<UniqueIDType> copyBookingReferenceID = ((List<UniqueIDType> ) strategy.copy(LocatorUtils.property(locator, "bookingReferenceID", sourceBookingReferenceID), sourceBookingReferenceID));
                copy.bookingReferenceID = null;
                if (copyBookingReferenceID!= null) {
                    List<UniqueIDType> uniqueBookingReferenceIDl = copy.getBookingReferenceID();
                    uniqueBookingReferenceIDl.addAll(copyBookingReferenceID);
                }
            } else {
                copy.bookingReferenceID = null;
            }
            if (this.lastModified!= null) {
                String sourceLastModified;
                sourceLastModified = this.getLastModified();
                String copyLastModified = ((String) strategy.copy(LocatorUtils.property(locator, "lastModified", sourceLastModified), sourceLastModified));
                copy.setLastModified(copyLastModified);
            } else {
                copy.lastModified = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AirReservationType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="PaymentDetails" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="PaymentDetail" type="{http://www.opentravel.org/OTA/2003/05}PaymentDetailType" maxOccurs="99"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="DeliveryAddress" type="{http://www.opentravel.org/OTA/2003/05}AddressType" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "paymentDetails",
        "deliveryAddress"
    })
    public static class Fulfillment
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "PaymentDetails")
        protected AirReservationType.Fulfillment.PaymentDetails paymentDetails;
        @XmlElement(name = "DeliveryAddress")
        protected AddressType deliveryAddress;

        /**
         * Gets the value of the paymentDetails property.
         * 
         * @return
         *     possible object is
         *     {@link AirReservationType.Fulfillment.PaymentDetails }
         *     
         */
        public AirReservationType.Fulfillment.PaymentDetails getPaymentDetails() {
            return paymentDetails;
        }

        /**
         * Sets the value of the paymentDetails property.
         * 
         * @param value
         *     allowed object is
         *     {@link AirReservationType.Fulfillment.PaymentDetails }
         *     
         */
        public void setPaymentDetails(AirReservationType.Fulfillment.PaymentDetails value) {
            this.paymentDetails = value;
        }

        /**
         * Gets the value of the deliveryAddress property.
         * 
         * @return
         *     possible object is
         *     {@link AddressType }
         *     
         */
        public AddressType getDeliveryAddress() {
            return deliveryAddress;
        }

        /**
         * Sets the value of the deliveryAddress property.
         * 
         * @param value
         *     allowed object is
         *     {@link AddressType }
         *     
         */
        public void setDeliveryAddress(AddressType value) {
            this.deliveryAddress = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                AirReservationType.Fulfillment.PaymentDetails thePaymentDetails;
                thePaymentDetails = this.getPaymentDetails();
                strategy.appendField(locator, this, "paymentDetails", buffer, thePaymentDetails);
            }
            {
                AddressType theDeliveryAddress;
                theDeliveryAddress = this.getDeliveryAddress();
                strategy.appendField(locator, this, "deliveryAddress", buffer, theDeliveryAddress);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirReservationType.Fulfillment)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirReservationType.Fulfillment that = ((AirReservationType.Fulfillment) object);
            {
                AirReservationType.Fulfillment.PaymentDetails lhsPaymentDetails;
                lhsPaymentDetails = this.getPaymentDetails();
                AirReservationType.Fulfillment.PaymentDetails rhsPaymentDetails;
                rhsPaymentDetails = that.getPaymentDetails();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentDetails", lhsPaymentDetails), LocatorUtils.property(thatLocator, "paymentDetails", rhsPaymentDetails), lhsPaymentDetails, rhsPaymentDetails)) {
                    return false;
                }
            }
            {
                AddressType lhsDeliveryAddress;
                lhsDeliveryAddress = this.getDeliveryAddress();
                AddressType rhsDeliveryAddress;
                rhsDeliveryAddress = that.getDeliveryAddress();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "deliveryAddress", lhsDeliveryAddress), LocatorUtils.property(thatLocator, "deliveryAddress", rhsDeliveryAddress), lhsDeliveryAddress, rhsDeliveryAddress)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                AirReservationType.Fulfillment.PaymentDetails thePaymentDetails;
                thePaymentDetails = this.getPaymentDetails();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentDetails", thePaymentDetails), currentHashCode, thePaymentDetails);
            }
            {
                AddressType theDeliveryAddress;
                theDeliveryAddress = this.getDeliveryAddress();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deliveryAddress", theDeliveryAddress), currentHashCode, theDeliveryAddress);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirReservationType.Fulfillment) {
                final AirReservationType.Fulfillment copy = ((AirReservationType.Fulfillment) draftCopy);
                if (this.paymentDetails!= null) {
                    AirReservationType.Fulfillment.PaymentDetails sourcePaymentDetails;
                    sourcePaymentDetails = this.getPaymentDetails();
                    AirReservationType.Fulfillment.PaymentDetails copyPaymentDetails = ((AirReservationType.Fulfillment.PaymentDetails) strategy.copy(LocatorUtils.property(locator, "paymentDetails", sourcePaymentDetails), sourcePaymentDetails));
                    copy.setPaymentDetails(copyPaymentDetails);
                } else {
                    copy.paymentDetails = null;
                }
                if (this.deliveryAddress!= null) {
                    AddressType sourceDeliveryAddress;
                    sourceDeliveryAddress = this.getDeliveryAddress();
                    AddressType copyDeliveryAddress = ((AddressType) strategy.copy(LocatorUtils.property(locator, "deliveryAddress", sourceDeliveryAddress), sourceDeliveryAddress));
                    copy.setDeliveryAddress(copyDeliveryAddress);
                } else {
                    copy.deliveryAddress = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirReservationType.Fulfillment();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="PaymentDetail" type="{http://www.opentravel.org/OTA/2003/05}PaymentDetailType" maxOccurs="99"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "paymentDetail"
        })
        public static class PaymentDetails
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElement(name = "PaymentDetail", required = true)
            protected List<PaymentDetailType> paymentDetail;

            /**
             * Gets the value of the paymentDetail property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the paymentDetail property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getPaymentDetail().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link PaymentDetailType }
             * 
             * 
             */
            public List<PaymentDetailType> getPaymentDetail() {
                if (paymentDetail == null) {
                    paymentDetail = new ArrayList<PaymentDetailType>();
                }
                return this.paymentDetail;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<PaymentDetailType> thePaymentDetail;
                    thePaymentDetail = (((this.paymentDetail!= null)&&(!this.paymentDetail.isEmpty()))?this.getPaymentDetail():null);
                    strategy.appendField(locator, this, "paymentDetail", buffer, thePaymentDetail);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof AirReservationType.Fulfillment.PaymentDetails)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final AirReservationType.Fulfillment.PaymentDetails that = ((AirReservationType.Fulfillment.PaymentDetails) object);
                {
                    List<PaymentDetailType> lhsPaymentDetail;
                    lhsPaymentDetail = (((this.paymentDetail!= null)&&(!this.paymentDetail.isEmpty()))?this.getPaymentDetail():null);
                    List<PaymentDetailType> rhsPaymentDetail;
                    rhsPaymentDetail = (((that.paymentDetail!= null)&&(!that.paymentDetail.isEmpty()))?that.getPaymentDetail():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentDetail", lhsPaymentDetail), LocatorUtils.property(thatLocator, "paymentDetail", rhsPaymentDetail), lhsPaymentDetail, rhsPaymentDetail)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<PaymentDetailType> thePaymentDetail;
                    thePaymentDetail = (((this.paymentDetail!= null)&&(!this.paymentDetail.isEmpty()))?this.getPaymentDetail():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentDetail", thePaymentDetail), currentHashCode, thePaymentDetail);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof AirReservationType.Fulfillment.PaymentDetails) {
                    final AirReservationType.Fulfillment.PaymentDetails copy = ((AirReservationType.Fulfillment.PaymentDetails) draftCopy);
                    if ((this.paymentDetail!= null)&&(!this.paymentDetail.isEmpty())) {
                        List<PaymentDetailType> sourcePaymentDetail;
                        sourcePaymentDetail = (((this.paymentDetail!= null)&&(!this.paymentDetail.isEmpty()))?this.getPaymentDetail():null);
                        @SuppressWarnings("unchecked")
                        List<PaymentDetailType> copyPaymentDetail = ((List<PaymentDetailType> ) strategy.copy(LocatorUtils.property(locator, "paymentDetail", sourcePaymentDetail), sourcePaymentDetail));
                        copy.paymentDetail = null;
                        if (copyPaymentDetail!= null) {
                            List<PaymentDetailType> uniquePaymentDetaill = copy.getPaymentDetail();
                            uniquePaymentDetaill.addAll(copyPaymentDetail);
                        }
                    } else {
                        copy.paymentDetail = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new AirReservationType.Fulfillment.PaymentDetails();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Queue" maxOccurs="10"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}QueueGroup"/&gt;
     *                 &lt;attribute name="DateTime" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
     *                 &lt;attribute name="Text" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *                 &lt;attribute name="CarrierCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "queue"
    })
    public static class Queues
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "Queue", required = true)
        protected List<AirReservationType.Queues.Queue> queue;

        /**
         * Gets the value of the queue property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the queue property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getQueue().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AirReservationType.Queues.Queue }
         * 
         * 
         */
        public List<AirReservationType.Queues.Queue> getQueue() {
            if (queue == null) {
                queue = new ArrayList<AirReservationType.Queues.Queue>();
            }
            return this.queue;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AirReservationType.Queues.Queue> theQueue;
                theQueue = (((this.queue!= null)&&(!this.queue.isEmpty()))?this.getQueue():null);
                strategy.appendField(locator, this, "queue", buffer, theQueue);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirReservationType.Queues)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirReservationType.Queues that = ((AirReservationType.Queues) object);
            {
                List<AirReservationType.Queues.Queue> lhsQueue;
                lhsQueue = (((this.queue!= null)&&(!this.queue.isEmpty()))?this.getQueue():null);
                List<AirReservationType.Queues.Queue> rhsQueue;
                rhsQueue = (((that.queue!= null)&&(!that.queue.isEmpty()))?that.getQueue():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "queue", lhsQueue), LocatorUtils.property(thatLocator, "queue", rhsQueue), lhsQueue, rhsQueue)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AirReservationType.Queues.Queue> theQueue;
                theQueue = (((this.queue!= null)&&(!this.queue.isEmpty()))?this.getQueue():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "queue", theQueue), currentHashCode, theQueue);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirReservationType.Queues) {
                final AirReservationType.Queues copy = ((AirReservationType.Queues) draftCopy);
                if ((this.queue!= null)&&(!this.queue.isEmpty())) {
                    List<AirReservationType.Queues.Queue> sourceQueue;
                    sourceQueue = (((this.queue!= null)&&(!this.queue.isEmpty()))?this.getQueue():null);
                    @SuppressWarnings("unchecked")
                    List<AirReservationType.Queues.Queue> copyQueue = ((List<AirReservationType.Queues.Queue> ) strategy.copy(LocatorUtils.property(locator, "queue", sourceQueue), sourceQueue));
                    copy.queue = null;
                    if (copyQueue!= null) {
                        List<AirReservationType.Queues.Queue> uniqueQueuel = copy.getQueue();
                        uniqueQueuel.addAll(copyQueue);
                    }
                } else {
                    copy.queue = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirReservationType.Queues();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}QueueGroup"/&gt;
         *       &lt;attribute name="DateTime" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
         *       &lt;attribute name="Text" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
         *       &lt;attribute name="CarrierCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Queue
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "DateTime")
            protected String dateTime;
            @XmlAttribute(name = "Text")
            protected String text;
            @XmlAttribute(name = "CarrierCode")
            protected String carrierCode;
            @XmlAttribute(name = "PseudoCityCode")
            protected String pseudoCityCode;
            @XmlAttribute(name = "QueueNumber")
            protected String queueNumber;
            @XmlAttribute(name = "QueueCategory")
            protected String queueCategory;
            @XmlAttribute(name = "SystemCode")
            protected String systemCode;
            @XmlAttribute(name = "QueueID")
            protected String queueID;

            /**
             * Gets the value of the dateTime property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDateTime() {
                return dateTime;
            }

            /**
             * Sets the value of the dateTime property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setDateTime(String value) {
                this.dateTime = value;
            }

            /**
             * Gets the value of the text property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getText() {
                return text;
            }

            /**
             * Sets the value of the text property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setText(String value) {
                this.text = value;
            }

            /**
             * Gets the value of the carrierCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCarrierCode() {
                return carrierCode;
            }

            /**
             * Sets the value of the carrierCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCarrierCode(String value) {
                this.carrierCode = value;
            }

            /**
             * Gets the value of the pseudoCityCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPseudoCityCode() {
                return pseudoCityCode;
            }

            /**
             * Sets the value of the pseudoCityCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setPseudoCityCode(String value) {
                this.pseudoCityCode = value;
            }

            /**
             * Gets the value of the queueNumber property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getQueueNumber() {
                return queueNumber;
            }

            /**
             * Sets the value of the queueNumber property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setQueueNumber(String value) {
                this.queueNumber = value;
            }

            /**
             * Gets the value of the queueCategory property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getQueueCategory() {
                return queueCategory;
            }

            /**
             * Sets the value of the queueCategory property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setQueueCategory(String value) {
                this.queueCategory = value;
            }

            /**
             * Gets the value of the systemCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getSystemCode() {
                return systemCode;
            }

            /**
             * Sets the value of the systemCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setSystemCode(String value) {
                this.systemCode = value;
            }

            /**
             * Gets the value of the queueID property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getQueueID() {
                return queueID;
            }

            /**
             * Sets the value of the queueID property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setQueueID(String value) {
                this.queueID = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theDateTime;
                    theDateTime = this.getDateTime();
                    strategy.appendField(locator, this, "dateTime", buffer, theDateTime);
                }
                {
                    String theText;
                    theText = this.getText();
                    strategy.appendField(locator, this, "text", buffer, theText);
                }
                {
                    String theCarrierCode;
                    theCarrierCode = this.getCarrierCode();
                    strategy.appendField(locator, this, "carrierCode", buffer, theCarrierCode);
                }
                {
                    String thePseudoCityCode;
                    thePseudoCityCode = this.getPseudoCityCode();
                    strategy.appendField(locator, this, "pseudoCityCode", buffer, thePseudoCityCode);
                }
                {
                    String theQueueNumber;
                    theQueueNumber = this.getQueueNumber();
                    strategy.appendField(locator, this, "queueNumber", buffer, theQueueNumber);
                }
                {
                    String theQueueCategory;
                    theQueueCategory = this.getQueueCategory();
                    strategy.appendField(locator, this, "queueCategory", buffer, theQueueCategory);
                }
                {
                    String theSystemCode;
                    theSystemCode = this.getSystemCode();
                    strategy.appendField(locator, this, "systemCode", buffer, theSystemCode);
                }
                {
                    String theQueueID;
                    theQueueID = this.getQueueID();
                    strategy.appendField(locator, this, "queueID", buffer, theQueueID);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof AirReservationType.Queues.Queue)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final AirReservationType.Queues.Queue that = ((AirReservationType.Queues.Queue) object);
                {
                    String lhsDateTime;
                    lhsDateTime = this.getDateTime();
                    String rhsDateTime;
                    rhsDateTime = that.getDateTime();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "dateTime", lhsDateTime), LocatorUtils.property(thatLocator, "dateTime", rhsDateTime), lhsDateTime, rhsDateTime)) {
                        return false;
                    }
                }
                {
                    String lhsText;
                    lhsText = this.getText();
                    String rhsText;
                    rhsText = that.getText();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                        return false;
                    }
                }
                {
                    String lhsCarrierCode;
                    lhsCarrierCode = this.getCarrierCode();
                    String rhsCarrierCode;
                    rhsCarrierCode = that.getCarrierCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "carrierCode", lhsCarrierCode), LocatorUtils.property(thatLocator, "carrierCode", rhsCarrierCode), lhsCarrierCode, rhsCarrierCode)) {
                        return false;
                    }
                }
                {
                    String lhsPseudoCityCode;
                    lhsPseudoCityCode = this.getPseudoCityCode();
                    String rhsPseudoCityCode;
                    rhsPseudoCityCode = that.getPseudoCityCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "pseudoCityCode", lhsPseudoCityCode), LocatorUtils.property(thatLocator, "pseudoCityCode", rhsPseudoCityCode), lhsPseudoCityCode, rhsPseudoCityCode)) {
                        return false;
                    }
                }
                {
                    String lhsQueueNumber;
                    lhsQueueNumber = this.getQueueNumber();
                    String rhsQueueNumber;
                    rhsQueueNumber = that.getQueueNumber();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "queueNumber", lhsQueueNumber), LocatorUtils.property(thatLocator, "queueNumber", rhsQueueNumber), lhsQueueNumber, rhsQueueNumber)) {
                        return false;
                    }
                }
                {
                    String lhsQueueCategory;
                    lhsQueueCategory = this.getQueueCategory();
                    String rhsQueueCategory;
                    rhsQueueCategory = that.getQueueCategory();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "queueCategory", lhsQueueCategory), LocatorUtils.property(thatLocator, "queueCategory", rhsQueueCategory), lhsQueueCategory, rhsQueueCategory)) {
                        return false;
                    }
                }
                {
                    String lhsSystemCode;
                    lhsSystemCode = this.getSystemCode();
                    String rhsSystemCode;
                    rhsSystemCode = that.getSystemCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "systemCode", lhsSystemCode), LocatorUtils.property(thatLocator, "systemCode", rhsSystemCode), lhsSystemCode, rhsSystemCode)) {
                        return false;
                    }
                }
                {
                    String lhsQueueID;
                    lhsQueueID = this.getQueueID();
                    String rhsQueueID;
                    rhsQueueID = that.getQueueID();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "queueID", lhsQueueID), LocatorUtils.property(thatLocator, "queueID", rhsQueueID), lhsQueueID, rhsQueueID)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theDateTime;
                    theDateTime = this.getDateTime();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateTime", theDateTime), currentHashCode, theDateTime);
                }
                {
                    String theText;
                    theText = this.getText();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
                }
                {
                    String theCarrierCode;
                    theCarrierCode = this.getCarrierCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "carrierCode", theCarrierCode), currentHashCode, theCarrierCode);
                }
                {
                    String thePseudoCityCode;
                    thePseudoCityCode = this.getPseudoCityCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pseudoCityCode", thePseudoCityCode), currentHashCode, thePseudoCityCode);
                }
                {
                    String theQueueNumber;
                    theQueueNumber = this.getQueueNumber();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "queueNumber", theQueueNumber), currentHashCode, theQueueNumber);
                }
                {
                    String theQueueCategory;
                    theQueueCategory = this.getQueueCategory();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "queueCategory", theQueueCategory), currentHashCode, theQueueCategory);
                }
                {
                    String theSystemCode;
                    theSystemCode = this.getSystemCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "systemCode", theSystemCode), currentHashCode, theSystemCode);
                }
                {
                    String theQueueID;
                    theQueueID = this.getQueueID();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "queueID", theQueueID), currentHashCode, theQueueID);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof AirReservationType.Queues.Queue) {
                    final AirReservationType.Queues.Queue copy = ((AirReservationType.Queues.Queue) draftCopy);
                    if (this.dateTime!= null) {
                        String sourceDateTime;
                        sourceDateTime = this.getDateTime();
                        String copyDateTime = ((String) strategy.copy(LocatorUtils.property(locator, "dateTime", sourceDateTime), sourceDateTime));
                        copy.setDateTime(copyDateTime);
                    } else {
                        copy.dateTime = null;
                    }
                    if (this.text!= null) {
                        String sourceText;
                        sourceText = this.getText();
                        String copyText = ((String) strategy.copy(LocatorUtils.property(locator, "text", sourceText), sourceText));
                        copy.setText(copyText);
                    } else {
                        copy.text = null;
                    }
                    if (this.carrierCode!= null) {
                        String sourceCarrierCode;
                        sourceCarrierCode = this.getCarrierCode();
                        String copyCarrierCode = ((String) strategy.copy(LocatorUtils.property(locator, "carrierCode", sourceCarrierCode), sourceCarrierCode));
                        copy.setCarrierCode(copyCarrierCode);
                    } else {
                        copy.carrierCode = null;
                    }
                    if (this.pseudoCityCode!= null) {
                        String sourcePseudoCityCode;
                        sourcePseudoCityCode = this.getPseudoCityCode();
                        String copyPseudoCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "pseudoCityCode", sourcePseudoCityCode), sourcePseudoCityCode));
                        copy.setPseudoCityCode(copyPseudoCityCode);
                    } else {
                        copy.pseudoCityCode = null;
                    }
                    if (this.queueNumber!= null) {
                        String sourceQueueNumber;
                        sourceQueueNumber = this.getQueueNumber();
                        String copyQueueNumber = ((String) strategy.copy(LocatorUtils.property(locator, "queueNumber", sourceQueueNumber), sourceQueueNumber));
                        copy.setQueueNumber(copyQueueNumber);
                    } else {
                        copy.queueNumber = null;
                    }
                    if (this.queueCategory!= null) {
                        String sourceQueueCategory;
                        sourceQueueCategory = this.getQueueCategory();
                        String copyQueueCategory = ((String) strategy.copy(LocatorUtils.property(locator, "queueCategory", sourceQueueCategory), sourceQueueCategory));
                        copy.setQueueCategory(copyQueueCategory);
                    } else {
                        copy.queueCategory = null;
                    }
                    if (this.systemCode!= null) {
                        String sourceSystemCode;
                        sourceSystemCode = this.getSystemCode();
                        String copySystemCode = ((String) strategy.copy(LocatorUtils.property(locator, "systemCode", sourceSystemCode), sourceSystemCode));
                        copy.setSystemCode(copySystemCode);
                    } else {
                        copy.systemCode = null;
                    }
                    if (this.queueID!= null) {
                        String sourceQueueID;
                        sourceQueueID = this.getQueueID();
                        String copyQueueID = ((String) strategy.copy(LocatorUtils.property(locator, "queueID", sourceQueueID), sourceQueueID));
                        copy.setQueueID(copyQueueID);
                    } else {
                        copy.queueID = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new AirReservationType.Queues.Queue();
            }

        }

    }

}
