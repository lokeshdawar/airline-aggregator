//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Ways of providing funds for travel by the individual.
 * 
 * <p>Java class for PaymentFormType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PaymentFormType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice minOccurs="0"&gt;
 *         &lt;element name="PaymentCard" type="{http://www.opentravel.org/OTA/2003/05}PaymentCardType"/&gt;
 *         &lt;element name="BankAcct" type="{http://www.opentravel.org/OTA/2003/05}BankAcctType"/&gt;
 *         &lt;element name="DirectBill" type="{http://www.opentravel.org/OTA/2003/05}DirectBillType"/&gt;
 *         &lt;element name="Voucher"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}VoucherGroup"/&gt;
 *                 &lt;attribute name="BillingNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *                 &lt;attribute name="SupplierIdentifier" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *                 &lt;attribute name="Identifier" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *                 &lt;attribute name="ValueType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *                 &lt;attribute name="ElectronicIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="LoyaltyRedemption"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="LoyaltyCertificate" maxOccurs="9" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LoyaltyCertificateGroup"/&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PromotionCodeGroup"/&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LoyaltyCertificateNumberGroup"/&gt;
 *                 &lt;attribute name="RedemptionQuantity" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="MiscChargeOrder"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attribute name="TicketNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Cash"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attribute name="CashIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/choice&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PrivacyGroup"/&gt;
 *       &lt;attribute name="CostCenterID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *       &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *       &lt;attribute name="PaymentTransactionTypeCode"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *             &lt;enumeration value="charge"/&gt;
 *             &lt;enumeration value="reserve"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PaymentFormType", propOrder = {
    "paymentCard",
    "bankAcct",
    "directBill",
    "voucher",
    "loyaltyRedemption",
    "miscChargeOrder",
    "cash"
})
@XmlSeeAlso({
    PaymentDetailType.class
})
public class PaymentFormType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "PaymentCard")
    protected PaymentCardType paymentCard;
    @XmlElement(name = "BankAcct")
    protected BankAcctType bankAcct;
    @XmlElement(name = "DirectBill")
    protected DirectBillType directBill;
    @XmlElement(name = "Voucher")
    protected PaymentFormType.Voucher voucher;
    @XmlElement(name = "LoyaltyRedemption")
    protected PaymentFormType.LoyaltyRedemption loyaltyRedemption;
    @XmlElement(name = "MiscChargeOrder")
    protected PaymentFormType.MiscChargeOrder miscChargeOrder;
    @XmlElement(name = "Cash")
    protected PaymentFormType.Cash cash;
    @XmlAttribute(name = "CostCenterID")
    protected String costCenterID;
    @XmlAttribute(name = "RPH")
    protected String rph;
    @XmlAttribute(name = "PaymentTransactionTypeCode")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String paymentTransactionTypeCode;
    @XmlAttribute(name = "ShareSynchInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareSynchInd;
    @XmlAttribute(name = "ShareMarketInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareMarketInd;

    /**
     * Gets the value of the paymentCard property.
     * 
     * @return
     *     possible object is
     *     {@link PaymentCardType }
     *     
     */
    public PaymentCardType getPaymentCard() {
        return paymentCard;
    }

    /**
     * Sets the value of the paymentCard property.
     * 
     * @param value
     *     allowed object is
     *     {@link PaymentCardType }
     *     
     */
    public void setPaymentCard(PaymentCardType value) {
        this.paymentCard = value;
    }

    /**
     * Gets the value of the bankAcct property.
     * 
     * @return
     *     possible object is
     *     {@link BankAcctType }
     *     
     */
    public BankAcctType getBankAcct() {
        return bankAcct;
    }

    /**
     * Sets the value of the bankAcct property.
     * 
     * @param value
     *     allowed object is
     *     {@link BankAcctType }
     *     
     */
    public void setBankAcct(BankAcctType value) {
        this.bankAcct = value;
    }

    /**
     * Gets the value of the directBill property.
     * 
     * @return
     *     possible object is
     *     {@link DirectBillType }
     *     
     */
    public DirectBillType getDirectBill() {
        return directBill;
    }

    /**
     * Sets the value of the directBill property.
     * 
     * @param value
     *     allowed object is
     *     {@link DirectBillType }
     *     
     */
    public void setDirectBill(DirectBillType value) {
        this.directBill = value;
    }

    /**
     * Gets the value of the voucher property.
     * 
     * @return
     *     possible object is
     *     {@link PaymentFormType.Voucher }
     *     
     */
    public PaymentFormType.Voucher getVoucher() {
        return voucher;
    }

    /**
     * Sets the value of the voucher property.
     * 
     * @param value
     *     allowed object is
     *     {@link PaymentFormType.Voucher }
     *     
     */
    public void setVoucher(PaymentFormType.Voucher value) {
        this.voucher = value;
    }

    /**
     * Gets the value of the loyaltyRedemption property.
     * 
     * @return
     *     possible object is
     *     {@link PaymentFormType.LoyaltyRedemption }
     *     
     */
    public PaymentFormType.LoyaltyRedemption getLoyaltyRedemption() {
        return loyaltyRedemption;
    }

    /**
     * Sets the value of the loyaltyRedemption property.
     * 
     * @param value
     *     allowed object is
     *     {@link PaymentFormType.LoyaltyRedemption }
     *     
     */
    public void setLoyaltyRedemption(PaymentFormType.LoyaltyRedemption value) {
        this.loyaltyRedemption = value;
    }

    /**
     * Gets the value of the miscChargeOrder property.
     * 
     * @return
     *     possible object is
     *     {@link PaymentFormType.MiscChargeOrder }
     *     
     */
    public PaymentFormType.MiscChargeOrder getMiscChargeOrder() {
        return miscChargeOrder;
    }

    /**
     * Sets the value of the miscChargeOrder property.
     * 
     * @param value
     *     allowed object is
     *     {@link PaymentFormType.MiscChargeOrder }
     *     
     */
    public void setMiscChargeOrder(PaymentFormType.MiscChargeOrder value) {
        this.miscChargeOrder = value;
    }

    /**
     * Gets the value of the cash property.
     * 
     * @return
     *     possible object is
     *     {@link PaymentFormType.Cash }
     *     
     */
    public PaymentFormType.Cash getCash() {
        return cash;
    }

    /**
     * Sets the value of the cash property.
     * 
     * @param value
     *     allowed object is
     *     {@link PaymentFormType.Cash }
     *     
     */
    public void setCash(PaymentFormType.Cash value) {
        this.cash = value;
    }

    /**
     * Gets the value of the costCenterID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCostCenterID() {
        return costCenterID;
    }

    /**
     * Sets the value of the costCenterID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCostCenterID(String value) {
        this.costCenterID = value;
    }

    /**
     * Gets the value of the rph property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRPH() {
        return rph;
    }

    /**
     * Sets the value of the rph property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRPH(String value) {
        this.rph = value;
    }

    /**
     * Gets the value of the paymentTransactionTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPaymentTransactionTypeCode() {
        return paymentTransactionTypeCode;
    }

    /**
     * Sets the value of the paymentTransactionTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPaymentTransactionTypeCode(String value) {
        this.paymentTransactionTypeCode = value;
    }

    /**
     * Gets the value of the shareSynchInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareSynchInd() {
        return shareSynchInd;
    }

    /**
     * Sets the value of the shareSynchInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareSynchInd(String value) {
        this.shareSynchInd = value;
    }

    /**
     * Gets the value of the shareMarketInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareMarketInd() {
        return shareMarketInd;
    }

    /**
     * Sets the value of the shareMarketInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareMarketInd(String value) {
        this.shareMarketInd = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            PaymentCardType thePaymentCard;
            thePaymentCard = this.getPaymentCard();
            strategy.appendField(locator, this, "paymentCard", buffer, thePaymentCard);
        }
        {
            BankAcctType theBankAcct;
            theBankAcct = this.getBankAcct();
            strategy.appendField(locator, this, "bankAcct", buffer, theBankAcct);
        }
        {
            DirectBillType theDirectBill;
            theDirectBill = this.getDirectBill();
            strategy.appendField(locator, this, "directBill", buffer, theDirectBill);
        }
        {
            PaymentFormType.Voucher theVoucher;
            theVoucher = this.getVoucher();
            strategy.appendField(locator, this, "voucher", buffer, theVoucher);
        }
        {
            PaymentFormType.LoyaltyRedemption theLoyaltyRedemption;
            theLoyaltyRedemption = this.getLoyaltyRedemption();
            strategy.appendField(locator, this, "loyaltyRedemption", buffer, theLoyaltyRedemption);
        }
        {
            PaymentFormType.MiscChargeOrder theMiscChargeOrder;
            theMiscChargeOrder = this.getMiscChargeOrder();
            strategy.appendField(locator, this, "miscChargeOrder", buffer, theMiscChargeOrder);
        }
        {
            PaymentFormType.Cash theCash;
            theCash = this.getCash();
            strategy.appendField(locator, this, "cash", buffer, theCash);
        }
        {
            String theCostCenterID;
            theCostCenterID = this.getCostCenterID();
            strategy.appendField(locator, this, "costCenterID", buffer, theCostCenterID);
        }
        {
            String theRPH;
            theRPH = this.getRPH();
            strategy.appendField(locator, this, "rph", buffer, theRPH);
        }
        {
            String thePaymentTransactionTypeCode;
            thePaymentTransactionTypeCode = this.getPaymentTransactionTypeCode();
            strategy.appendField(locator, this, "paymentTransactionTypeCode", buffer, thePaymentTransactionTypeCode);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PaymentFormType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PaymentFormType that = ((PaymentFormType) object);
        {
            PaymentCardType lhsPaymentCard;
            lhsPaymentCard = this.getPaymentCard();
            PaymentCardType rhsPaymentCard;
            rhsPaymentCard = that.getPaymentCard();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentCard", lhsPaymentCard), LocatorUtils.property(thatLocator, "paymentCard", rhsPaymentCard), lhsPaymentCard, rhsPaymentCard)) {
                return false;
            }
        }
        {
            BankAcctType lhsBankAcct;
            lhsBankAcct = this.getBankAcct();
            BankAcctType rhsBankAcct;
            rhsBankAcct = that.getBankAcct();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bankAcct", lhsBankAcct), LocatorUtils.property(thatLocator, "bankAcct", rhsBankAcct), lhsBankAcct, rhsBankAcct)) {
                return false;
            }
        }
        {
            DirectBillType lhsDirectBill;
            lhsDirectBill = this.getDirectBill();
            DirectBillType rhsDirectBill;
            rhsDirectBill = that.getDirectBill();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directBill", lhsDirectBill), LocatorUtils.property(thatLocator, "directBill", rhsDirectBill), lhsDirectBill, rhsDirectBill)) {
                return false;
            }
        }
        {
            PaymentFormType.Voucher lhsVoucher;
            lhsVoucher = this.getVoucher();
            PaymentFormType.Voucher rhsVoucher;
            rhsVoucher = that.getVoucher();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "voucher", lhsVoucher), LocatorUtils.property(thatLocator, "voucher", rhsVoucher), lhsVoucher, rhsVoucher)) {
                return false;
            }
        }
        {
            PaymentFormType.LoyaltyRedemption lhsLoyaltyRedemption;
            lhsLoyaltyRedemption = this.getLoyaltyRedemption();
            PaymentFormType.LoyaltyRedemption rhsLoyaltyRedemption;
            rhsLoyaltyRedemption = that.getLoyaltyRedemption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "loyaltyRedemption", lhsLoyaltyRedemption), LocatorUtils.property(thatLocator, "loyaltyRedemption", rhsLoyaltyRedemption), lhsLoyaltyRedemption, rhsLoyaltyRedemption)) {
                return false;
            }
        }
        {
            PaymentFormType.MiscChargeOrder lhsMiscChargeOrder;
            lhsMiscChargeOrder = this.getMiscChargeOrder();
            PaymentFormType.MiscChargeOrder rhsMiscChargeOrder;
            rhsMiscChargeOrder = that.getMiscChargeOrder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "miscChargeOrder", lhsMiscChargeOrder), LocatorUtils.property(thatLocator, "miscChargeOrder", rhsMiscChargeOrder), lhsMiscChargeOrder, rhsMiscChargeOrder)) {
                return false;
            }
        }
        {
            PaymentFormType.Cash lhsCash;
            lhsCash = this.getCash();
            PaymentFormType.Cash rhsCash;
            rhsCash = that.getCash();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cash", lhsCash), LocatorUtils.property(thatLocator, "cash", rhsCash), lhsCash, rhsCash)) {
                return false;
            }
        }
        {
            String lhsCostCenterID;
            lhsCostCenterID = this.getCostCenterID();
            String rhsCostCenterID;
            rhsCostCenterID = that.getCostCenterID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "costCenterID", lhsCostCenterID), LocatorUtils.property(thatLocator, "costCenterID", rhsCostCenterID), lhsCostCenterID, rhsCostCenterID)) {
                return false;
            }
        }
        {
            String lhsRPH;
            lhsRPH = this.getRPH();
            String rhsRPH;
            rhsRPH = that.getRPH();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                return false;
            }
        }
        {
            String lhsPaymentTransactionTypeCode;
            lhsPaymentTransactionTypeCode = this.getPaymentTransactionTypeCode();
            String rhsPaymentTransactionTypeCode;
            rhsPaymentTransactionTypeCode = that.getPaymentTransactionTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentTransactionTypeCode", lhsPaymentTransactionTypeCode), LocatorUtils.property(thatLocator, "paymentTransactionTypeCode", rhsPaymentTransactionTypeCode), lhsPaymentTransactionTypeCode, rhsPaymentTransactionTypeCode)) {
                return false;
            }
        }
        {
            String lhsShareSynchInd;
            lhsShareSynchInd = this.getShareSynchInd();
            String rhsShareSynchInd;
            rhsShareSynchInd = that.getShareSynchInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                return false;
            }
        }
        {
            String lhsShareMarketInd;
            lhsShareMarketInd = this.getShareMarketInd();
            String rhsShareMarketInd;
            rhsShareMarketInd = that.getShareMarketInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            PaymentCardType thePaymentCard;
            thePaymentCard = this.getPaymentCard();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentCard", thePaymentCard), currentHashCode, thePaymentCard);
        }
        {
            BankAcctType theBankAcct;
            theBankAcct = this.getBankAcct();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bankAcct", theBankAcct), currentHashCode, theBankAcct);
        }
        {
            DirectBillType theDirectBill;
            theDirectBill = this.getDirectBill();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directBill", theDirectBill), currentHashCode, theDirectBill);
        }
        {
            PaymentFormType.Voucher theVoucher;
            theVoucher = this.getVoucher();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "voucher", theVoucher), currentHashCode, theVoucher);
        }
        {
            PaymentFormType.LoyaltyRedemption theLoyaltyRedemption;
            theLoyaltyRedemption = this.getLoyaltyRedemption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loyaltyRedemption", theLoyaltyRedemption), currentHashCode, theLoyaltyRedemption);
        }
        {
            PaymentFormType.MiscChargeOrder theMiscChargeOrder;
            theMiscChargeOrder = this.getMiscChargeOrder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "miscChargeOrder", theMiscChargeOrder), currentHashCode, theMiscChargeOrder);
        }
        {
            PaymentFormType.Cash theCash;
            theCash = this.getCash();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cash", theCash), currentHashCode, theCash);
        }
        {
            String theCostCenterID;
            theCostCenterID = this.getCostCenterID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "costCenterID", theCostCenterID), currentHashCode, theCostCenterID);
        }
        {
            String theRPH;
            theRPH = this.getRPH();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
        }
        {
            String thePaymentTransactionTypeCode;
            thePaymentTransactionTypeCode = this.getPaymentTransactionTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentTransactionTypeCode", thePaymentTransactionTypeCode), currentHashCode, thePaymentTransactionTypeCode);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PaymentFormType) {
            final PaymentFormType copy = ((PaymentFormType) draftCopy);
            if (this.paymentCard!= null) {
                PaymentCardType sourcePaymentCard;
                sourcePaymentCard = this.getPaymentCard();
                PaymentCardType copyPaymentCard = ((PaymentCardType) strategy.copy(LocatorUtils.property(locator, "paymentCard", sourcePaymentCard), sourcePaymentCard));
                copy.setPaymentCard(copyPaymentCard);
            } else {
                copy.paymentCard = null;
            }
            if (this.bankAcct!= null) {
                BankAcctType sourceBankAcct;
                sourceBankAcct = this.getBankAcct();
                BankAcctType copyBankAcct = ((BankAcctType) strategy.copy(LocatorUtils.property(locator, "bankAcct", sourceBankAcct), sourceBankAcct));
                copy.setBankAcct(copyBankAcct);
            } else {
                copy.bankAcct = null;
            }
            if (this.directBill!= null) {
                DirectBillType sourceDirectBill;
                sourceDirectBill = this.getDirectBill();
                DirectBillType copyDirectBill = ((DirectBillType) strategy.copy(LocatorUtils.property(locator, "directBill", sourceDirectBill), sourceDirectBill));
                copy.setDirectBill(copyDirectBill);
            } else {
                copy.directBill = null;
            }
            if (this.voucher!= null) {
                PaymentFormType.Voucher sourceVoucher;
                sourceVoucher = this.getVoucher();
                PaymentFormType.Voucher copyVoucher = ((PaymentFormType.Voucher) strategy.copy(LocatorUtils.property(locator, "voucher", sourceVoucher), sourceVoucher));
                copy.setVoucher(copyVoucher);
            } else {
                copy.voucher = null;
            }
            if (this.loyaltyRedemption!= null) {
                PaymentFormType.LoyaltyRedemption sourceLoyaltyRedemption;
                sourceLoyaltyRedemption = this.getLoyaltyRedemption();
                PaymentFormType.LoyaltyRedemption copyLoyaltyRedemption = ((PaymentFormType.LoyaltyRedemption) strategy.copy(LocatorUtils.property(locator, "loyaltyRedemption", sourceLoyaltyRedemption), sourceLoyaltyRedemption));
                copy.setLoyaltyRedemption(copyLoyaltyRedemption);
            } else {
                copy.loyaltyRedemption = null;
            }
            if (this.miscChargeOrder!= null) {
                PaymentFormType.MiscChargeOrder sourceMiscChargeOrder;
                sourceMiscChargeOrder = this.getMiscChargeOrder();
                PaymentFormType.MiscChargeOrder copyMiscChargeOrder = ((PaymentFormType.MiscChargeOrder) strategy.copy(LocatorUtils.property(locator, "miscChargeOrder", sourceMiscChargeOrder), sourceMiscChargeOrder));
                copy.setMiscChargeOrder(copyMiscChargeOrder);
            } else {
                copy.miscChargeOrder = null;
            }
            if (this.cash!= null) {
                PaymentFormType.Cash sourceCash;
                sourceCash = this.getCash();
                PaymentFormType.Cash copyCash = ((PaymentFormType.Cash) strategy.copy(LocatorUtils.property(locator, "cash", sourceCash), sourceCash));
                copy.setCash(copyCash);
            } else {
                copy.cash = null;
            }
            if (this.costCenterID!= null) {
                String sourceCostCenterID;
                sourceCostCenterID = this.getCostCenterID();
                String copyCostCenterID = ((String) strategy.copy(LocatorUtils.property(locator, "costCenterID", sourceCostCenterID), sourceCostCenterID));
                copy.setCostCenterID(copyCostCenterID);
            } else {
                copy.costCenterID = null;
            }
            if (this.rph!= null) {
                String sourceRPH;
                sourceRPH = this.getRPH();
                String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                copy.setRPH(copyRPH);
            } else {
                copy.rph = null;
            }
            if (this.paymentTransactionTypeCode!= null) {
                String sourcePaymentTransactionTypeCode;
                sourcePaymentTransactionTypeCode = this.getPaymentTransactionTypeCode();
                String copyPaymentTransactionTypeCode = ((String) strategy.copy(LocatorUtils.property(locator, "paymentTransactionTypeCode", sourcePaymentTransactionTypeCode), sourcePaymentTransactionTypeCode));
                copy.setPaymentTransactionTypeCode(copyPaymentTransactionTypeCode);
            } else {
                copy.paymentTransactionTypeCode = null;
            }
            if (this.shareSynchInd!= null) {
                String sourceShareSynchInd;
                sourceShareSynchInd = this.getShareSynchInd();
                String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                copy.setShareSynchInd(copyShareSynchInd);
            } else {
                copy.shareSynchInd = null;
            }
            if (this.shareMarketInd!= null) {
                String sourceShareMarketInd;
                sourceShareMarketInd = this.getShareMarketInd();
                String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                copy.setShareMarketInd(copyShareMarketInd);
            } else {
                copy.shareMarketInd = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PaymentFormType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attribute name="CashIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Cash
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "CashIndicator")
        protected Boolean cashIndicator;

        /**
         * Gets the value of the cashIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isCashIndicator() {
            if (cashIndicator == null) {
                return true;
            } else {
                return cashIndicator;
            }
        }

        /**
         * Sets the value of the cashIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setCashIndicator(Boolean value) {
            this.cashIndicator = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                boolean theCashIndicator;
                theCashIndicator = ((this.cashIndicator!= null)?this.isCashIndicator():false);
                strategy.appendField(locator, this, "cashIndicator", buffer, theCashIndicator);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentFormType.Cash)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentFormType.Cash that = ((PaymentFormType.Cash) object);
            {
                boolean lhsCashIndicator;
                lhsCashIndicator = ((this.cashIndicator!= null)?this.isCashIndicator():false);
                boolean rhsCashIndicator;
                rhsCashIndicator = ((that.cashIndicator!= null)?that.isCashIndicator():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "cashIndicator", lhsCashIndicator), LocatorUtils.property(thatLocator, "cashIndicator", rhsCashIndicator), lhsCashIndicator, rhsCashIndicator)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                boolean theCashIndicator;
                theCashIndicator = ((this.cashIndicator!= null)?this.isCashIndicator():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cashIndicator", theCashIndicator), currentHashCode, theCashIndicator);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PaymentFormType.Cash) {
                final PaymentFormType.Cash copy = ((PaymentFormType.Cash) draftCopy);
                if (this.cashIndicator!= null) {
                    boolean sourceCashIndicator;
                    sourceCashIndicator = ((this.cashIndicator!= null)?this.isCashIndicator():false);
                    boolean copyCashIndicator = strategy.copy(LocatorUtils.property(locator, "cashIndicator", sourceCashIndicator), sourceCashIndicator);
                    copy.setCashIndicator(copyCashIndicator);
                } else {
                    copy.cashIndicator = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PaymentFormType.Cash();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="LoyaltyCertificate" maxOccurs="9" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LoyaltyCertificateGroup"/&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PromotionCodeGroup"/&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LoyaltyCertificateNumberGroup"/&gt;
     *       &lt;attribute name="RedemptionQuantity" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "loyaltyCertificate"
    })
    public static class LoyaltyRedemption
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "LoyaltyCertificate")
        protected List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> loyaltyCertificate;
        @XmlAttribute(name = "RedemptionQuantity")
        @XmlSchemaType(name = "positiveInteger")
        protected BigInteger redemptionQuantity;
        @XmlAttribute(name = "PromotionCode")
        protected String promotionCode;
        @XmlAttribute(name = "PromotionVendorCode")
        protected List<String> promotionVendorCode;
        @XmlAttribute(name = "CertificateNumber")
        protected String certificateNumber;
        @XmlAttribute(name = "MemberNumber")
        protected String memberNumber;
        @XmlAttribute(name = "ProgramName")
        protected String programName;

        /**
         * Gets the value of the loyaltyCertificate property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the loyaltyCertificate property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getLoyaltyCertificate().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link PaymentFormType.LoyaltyRedemption.LoyaltyCertificate }
         * 
         * 
         */
        public List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> getLoyaltyCertificate() {
            if (loyaltyCertificate == null) {
                loyaltyCertificate = new ArrayList<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate>();
            }
            return this.loyaltyCertificate;
        }

        /**
         * Gets the value of the redemptionQuantity property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getRedemptionQuantity() {
            return redemptionQuantity;
        }

        /**
         * Sets the value of the redemptionQuantity property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setRedemptionQuantity(BigInteger value) {
            this.redemptionQuantity = value;
        }

        /**
         * Gets the value of the promotionCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPromotionCode() {
            return promotionCode;
        }

        /**
         * Sets the value of the promotionCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPromotionCode(String value) {
            this.promotionCode = value;
        }

        /**
         * Gets the value of the promotionVendorCode property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the promotionVendorCode property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPromotionVendorCode().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getPromotionVendorCode() {
            if (promotionVendorCode == null) {
                promotionVendorCode = new ArrayList<String>();
            }
            return this.promotionVendorCode;
        }

        /**
         * Gets the value of the certificateNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCertificateNumber() {
            return certificateNumber;
        }

        /**
         * Sets the value of the certificateNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCertificateNumber(String value) {
            this.certificateNumber = value;
        }

        /**
         * Gets the value of the memberNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMemberNumber() {
            return memberNumber;
        }

        /**
         * Sets the value of the memberNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setMemberNumber(String value) {
            this.memberNumber = value;
        }

        /**
         * Gets the value of the programName property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getProgramName() {
            return programName;
        }

        /**
         * Sets the value of the programName property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setProgramName(String value) {
            this.programName = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> theLoyaltyCertificate;
                theLoyaltyCertificate = (((this.loyaltyCertificate!= null)&&(!this.loyaltyCertificate.isEmpty()))?this.getLoyaltyCertificate():null);
                strategy.appendField(locator, this, "loyaltyCertificate", buffer, theLoyaltyCertificate);
            }
            {
                BigInteger theRedemptionQuantity;
                theRedemptionQuantity = this.getRedemptionQuantity();
                strategy.appendField(locator, this, "redemptionQuantity", buffer, theRedemptionQuantity);
            }
            {
                String thePromotionCode;
                thePromotionCode = this.getPromotionCode();
                strategy.appendField(locator, this, "promotionCode", buffer, thePromotionCode);
            }
            {
                List<String> thePromotionVendorCode;
                thePromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
                strategy.appendField(locator, this, "promotionVendorCode", buffer, thePromotionVendorCode);
            }
            {
                String theCertificateNumber;
                theCertificateNumber = this.getCertificateNumber();
                strategy.appendField(locator, this, "certificateNumber", buffer, theCertificateNumber);
            }
            {
                String theMemberNumber;
                theMemberNumber = this.getMemberNumber();
                strategy.appendField(locator, this, "memberNumber", buffer, theMemberNumber);
            }
            {
                String theProgramName;
                theProgramName = this.getProgramName();
                strategy.appendField(locator, this, "programName", buffer, theProgramName);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentFormType.LoyaltyRedemption)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentFormType.LoyaltyRedemption that = ((PaymentFormType.LoyaltyRedemption) object);
            {
                List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> lhsLoyaltyCertificate;
                lhsLoyaltyCertificate = (((this.loyaltyCertificate!= null)&&(!this.loyaltyCertificate.isEmpty()))?this.getLoyaltyCertificate():null);
                List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> rhsLoyaltyCertificate;
                rhsLoyaltyCertificate = (((that.loyaltyCertificate!= null)&&(!that.loyaltyCertificate.isEmpty()))?that.getLoyaltyCertificate():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "loyaltyCertificate", lhsLoyaltyCertificate), LocatorUtils.property(thatLocator, "loyaltyCertificate", rhsLoyaltyCertificate), lhsLoyaltyCertificate, rhsLoyaltyCertificate)) {
                    return false;
                }
            }
            {
                BigInteger lhsRedemptionQuantity;
                lhsRedemptionQuantity = this.getRedemptionQuantity();
                BigInteger rhsRedemptionQuantity;
                rhsRedemptionQuantity = that.getRedemptionQuantity();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "redemptionQuantity", lhsRedemptionQuantity), LocatorUtils.property(thatLocator, "redemptionQuantity", rhsRedemptionQuantity), lhsRedemptionQuantity, rhsRedemptionQuantity)) {
                    return false;
                }
            }
            {
                String lhsPromotionCode;
                lhsPromotionCode = this.getPromotionCode();
                String rhsPromotionCode;
                rhsPromotionCode = that.getPromotionCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "promotionCode", lhsPromotionCode), LocatorUtils.property(thatLocator, "promotionCode", rhsPromotionCode), lhsPromotionCode, rhsPromotionCode)) {
                    return false;
                }
            }
            {
                List<String> lhsPromotionVendorCode;
                lhsPromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
                List<String> rhsPromotionVendorCode;
                rhsPromotionVendorCode = (((that.promotionVendorCode!= null)&&(!that.promotionVendorCode.isEmpty()))?that.getPromotionVendorCode():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "promotionVendorCode", lhsPromotionVendorCode), LocatorUtils.property(thatLocator, "promotionVendorCode", rhsPromotionVendorCode), lhsPromotionVendorCode, rhsPromotionVendorCode)) {
                    return false;
                }
            }
            {
                String lhsCertificateNumber;
                lhsCertificateNumber = this.getCertificateNumber();
                String rhsCertificateNumber;
                rhsCertificateNumber = that.getCertificateNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "certificateNumber", lhsCertificateNumber), LocatorUtils.property(thatLocator, "certificateNumber", rhsCertificateNumber), lhsCertificateNumber, rhsCertificateNumber)) {
                    return false;
                }
            }
            {
                String lhsMemberNumber;
                lhsMemberNumber = this.getMemberNumber();
                String rhsMemberNumber;
                rhsMemberNumber = that.getMemberNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "memberNumber", lhsMemberNumber), LocatorUtils.property(thatLocator, "memberNumber", rhsMemberNumber), lhsMemberNumber, rhsMemberNumber)) {
                    return false;
                }
            }
            {
                String lhsProgramName;
                lhsProgramName = this.getProgramName();
                String rhsProgramName;
                rhsProgramName = that.getProgramName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "programName", lhsProgramName), LocatorUtils.property(thatLocator, "programName", rhsProgramName), lhsProgramName, rhsProgramName)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> theLoyaltyCertificate;
                theLoyaltyCertificate = (((this.loyaltyCertificate!= null)&&(!this.loyaltyCertificate.isEmpty()))?this.getLoyaltyCertificate():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loyaltyCertificate", theLoyaltyCertificate), currentHashCode, theLoyaltyCertificate);
            }
            {
                BigInteger theRedemptionQuantity;
                theRedemptionQuantity = this.getRedemptionQuantity();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "redemptionQuantity", theRedemptionQuantity), currentHashCode, theRedemptionQuantity);
            }
            {
                String thePromotionCode;
                thePromotionCode = this.getPromotionCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "promotionCode", thePromotionCode), currentHashCode, thePromotionCode);
            }
            {
                List<String> thePromotionVendorCode;
                thePromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "promotionVendorCode", thePromotionVendorCode), currentHashCode, thePromotionVendorCode);
            }
            {
                String theCertificateNumber;
                theCertificateNumber = this.getCertificateNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "certificateNumber", theCertificateNumber), currentHashCode, theCertificateNumber);
            }
            {
                String theMemberNumber;
                theMemberNumber = this.getMemberNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "memberNumber", theMemberNumber), currentHashCode, theMemberNumber);
            }
            {
                String theProgramName;
                theProgramName = this.getProgramName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "programName", theProgramName), currentHashCode, theProgramName);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PaymentFormType.LoyaltyRedemption) {
                final PaymentFormType.LoyaltyRedemption copy = ((PaymentFormType.LoyaltyRedemption) draftCopy);
                if ((this.loyaltyCertificate!= null)&&(!this.loyaltyCertificate.isEmpty())) {
                    List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> sourceLoyaltyCertificate;
                    sourceLoyaltyCertificate = (((this.loyaltyCertificate!= null)&&(!this.loyaltyCertificate.isEmpty()))?this.getLoyaltyCertificate():null);
                    @SuppressWarnings("unchecked")
                    List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> copyLoyaltyCertificate = ((List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> ) strategy.copy(LocatorUtils.property(locator, "loyaltyCertificate", sourceLoyaltyCertificate), sourceLoyaltyCertificate));
                    copy.loyaltyCertificate = null;
                    if (copyLoyaltyCertificate!= null) {
                        List<PaymentFormType.LoyaltyRedemption.LoyaltyCertificate> uniqueLoyaltyCertificatel = copy.getLoyaltyCertificate();
                        uniqueLoyaltyCertificatel.addAll(copyLoyaltyCertificate);
                    }
                } else {
                    copy.loyaltyCertificate = null;
                }
                if (this.redemptionQuantity!= null) {
                    BigInteger sourceRedemptionQuantity;
                    sourceRedemptionQuantity = this.getRedemptionQuantity();
                    BigInteger copyRedemptionQuantity = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "redemptionQuantity", sourceRedemptionQuantity), sourceRedemptionQuantity));
                    copy.setRedemptionQuantity(copyRedemptionQuantity);
                } else {
                    copy.redemptionQuantity = null;
                }
                if (this.promotionCode!= null) {
                    String sourcePromotionCode;
                    sourcePromotionCode = this.getPromotionCode();
                    String copyPromotionCode = ((String) strategy.copy(LocatorUtils.property(locator, "promotionCode", sourcePromotionCode), sourcePromotionCode));
                    copy.setPromotionCode(copyPromotionCode);
                } else {
                    copy.promotionCode = null;
                }
                if ((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty())) {
                    List<String> sourcePromotionVendorCode;
                    sourcePromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyPromotionVendorCode = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "promotionVendorCode", sourcePromotionVendorCode), sourcePromotionVendorCode));
                    copy.promotionVendorCode = null;
                    if (copyPromotionVendorCode!= null) {
                        List<String> uniquePromotionVendorCodel = copy.getPromotionVendorCode();
                        uniquePromotionVendorCodel.addAll(copyPromotionVendorCode);
                    }
                } else {
                    copy.promotionVendorCode = null;
                }
                if (this.certificateNumber!= null) {
                    String sourceCertificateNumber;
                    sourceCertificateNumber = this.getCertificateNumber();
                    String copyCertificateNumber = ((String) strategy.copy(LocatorUtils.property(locator, "certificateNumber", sourceCertificateNumber), sourceCertificateNumber));
                    copy.setCertificateNumber(copyCertificateNumber);
                } else {
                    copy.certificateNumber = null;
                }
                if (this.memberNumber!= null) {
                    String sourceMemberNumber;
                    sourceMemberNumber = this.getMemberNumber();
                    String copyMemberNumber = ((String) strategy.copy(LocatorUtils.property(locator, "memberNumber", sourceMemberNumber), sourceMemberNumber));
                    copy.setMemberNumber(copyMemberNumber);
                } else {
                    copy.memberNumber = null;
                }
                if (this.programName!= null) {
                    String sourceProgramName;
                    sourceProgramName = this.getProgramName();
                    String copyProgramName = ((String) strategy.copy(LocatorUtils.property(locator, "programName", sourceProgramName), sourceProgramName));
                    copy.setProgramName(copyProgramName);
                } else {
                    copy.programName = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PaymentFormType.LoyaltyRedemption();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LoyaltyCertificateGroup"/&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class LoyaltyCertificate
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "ID_Context")
            protected String idContext;
            @XmlAttribute(name = "NmbrOfNights")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger nmbrOfNights;
            @XmlAttribute(name = "Format")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            protected String format;
            @XmlAttribute(name = "Status")
            protected String status;
            @XmlAttribute(name = "EffectiveDate")
            @XmlSchemaType(name = "date")
            protected XMLGregorianCalendar effectiveDate;
            @XmlAttribute(name = "ExpireDate")
            @XmlSchemaType(name = "date")
            protected XMLGregorianCalendar expireDate;
            @XmlAttribute(name = "ID")
            protected String id;
            @XmlAttribute(name = "CertificateNumber")
            protected String certificateNumber;
            @XmlAttribute(name = "MemberNumber")
            protected String memberNumber;
            @XmlAttribute(name = "ProgramName")
            protected String programName;

            /**
             * Gets the value of the idContext property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getIDContext() {
                return idContext;
            }

            /**
             * Sets the value of the idContext property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setIDContext(String value) {
                this.idContext = value;
            }

            /**
             * Gets the value of the nmbrOfNights property.
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getNmbrOfNights() {
                return nmbrOfNights;
            }

            /**
             * Sets the value of the nmbrOfNights property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             */
            public void setNmbrOfNights(BigInteger value) {
                this.nmbrOfNights = value;
            }

            /**
             * Gets the value of the format property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getFormat() {
                return format;
            }

            /**
             * Sets the value of the format property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setFormat(String value) {
                this.format = value;
            }

            /**
             * Gets the value of the status property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getStatus() {
                return status;
            }

            /**
             * Sets the value of the status property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setStatus(String value) {
                this.status = value;
            }

            /**
             * Gets the value of the effectiveDate property.
             * 
             * @return
             *     possible object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public XMLGregorianCalendar getEffectiveDate() {
                return effectiveDate;
            }

            /**
             * Sets the value of the effectiveDate property.
             * 
             * @param value
             *     allowed object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public void setEffectiveDate(XMLGregorianCalendar value) {
                this.effectiveDate = value;
            }

            /**
             * Gets the value of the expireDate property.
             * 
             * @return
             *     possible object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public XMLGregorianCalendar getExpireDate() {
                return expireDate;
            }

            /**
             * Sets the value of the expireDate property.
             * 
             * @param value
             *     allowed object is
             *     {@link XMLGregorianCalendar }
             *     
             */
            public void setExpireDate(XMLGregorianCalendar value) {
                this.expireDate = value;
            }

            /**
             * Gets the value of the id property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getID() {
                return id;
            }

            /**
             * Sets the value of the id property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setID(String value) {
                this.id = value;
            }

            /**
             * Gets the value of the certificateNumber property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCertificateNumber() {
                return certificateNumber;
            }

            /**
             * Sets the value of the certificateNumber property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCertificateNumber(String value) {
                this.certificateNumber = value;
            }

            /**
             * Gets the value of the memberNumber property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getMemberNumber() {
                return memberNumber;
            }

            /**
             * Sets the value of the memberNumber property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setMemberNumber(String value) {
                this.memberNumber = value;
            }

            /**
             * Gets the value of the programName property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getProgramName() {
                return programName;
            }

            /**
             * Sets the value of the programName property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setProgramName(String value) {
                this.programName = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theIDContext;
                    theIDContext = this.getIDContext();
                    strategy.appendField(locator, this, "idContext", buffer, theIDContext);
                }
                {
                    BigInteger theNmbrOfNights;
                    theNmbrOfNights = this.getNmbrOfNights();
                    strategy.appendField(locator, this, "nmbrOfNights", buffer, theNmbrOfNights);
                }
                {
                    String theFormat;
                    theFormat = this.getFormat();
                    strategy.appendField(locator, this, "format", buffer, theFormat);
                }
                {
                    String theStatus;
                    theStatus = this.getStatus();
                    strategy.appendField(locator, this, "status", buffer, theStatus);
                }
                {
                    XMLGregorianCalendar theEffectiveDate;
                    theEffectiveDate = this.getEffectiveDate();
                    strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
                }
                {
                    XMLGregorianCalendar theExpireDate;
                    theExpireDate = this.getExpireDate();
                    strategy.appendField(locator, this, "expireDate", buffer, theExpireDate);
                }
                {
                    String theID;
                    theID = this.getID();
                    strategy.appendField(locator, this, "id", buffer, theID);
                }
                {
                    String theCertificateNumber;
                    theCertificateNumber = this.getCertificateNumber();
                    strategy.appendField(locator, this, "certificateNumber", buffer, theCertificateNumber);
                }
                {
                    String theMemberNumber;
                    theMemberNumber = this.getMemberNumber();
                    strategy.appendField(locator, this, "memberNumber", buffer, theMemberNumber);
                }
                {
                    String theProgramName;
                    theProgramName = this.getProgramName();
                    strategy.appendField(locator, this, "programName", buffer, theProgramName);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof PaymentFormType.LoyaltyRedemption.LoyaltyCertificate)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final PaymentFormType.LoyaltyRedemption.LoyaltyCertificate that = ((PaymentFormType.LoyaltyRedemption.LoyaltyCertificate) object);
                {
                    String lhsIDContext;
                    lhsIDContext = this.getIDContext();
                    String rhsIDContext;
                    rhsIDContext = that.getIDContext();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "idContext", lhsIDContext), LocatorUtils.property(thatLocator, "idContext", rhsIDContext), lhsIDContext, rhsIDContext)) {
                        return false;
                    }
                }
                {
                    BigInteger lhsNmbrOfNights;
                    lhsNmbrOfNights = this.getNmbrOfNights();
                    BigInteger rhsNmbrOfNights;
                    rhsNmbrOfNights = that.getNmbrOfNights();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "nmbrOfNights", lhsNmbrOfNights), LocatorUtils.property(thatLocator, "nmbrOfNights", rhsNmbrOfNights), lhsNmbrOfNights, rhsNmbrOfNights)) {
                        return false;
                    }
                }
                {
                    String lhsFormat;
                    lhsFormat = this.getFormat();
                    String rhsFormat;
                    rhsFormat = that.getFormat();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "format", lhsFormat), LocatorUtils.property(thatLocator, "format", rhsFormat), lhsFormat, rhsFormat)) {
                        return false;
                    }
                }
                {
                    String lhsStatus;
                    lhsStatus = this.getStatus();
                    String rhsStatus;
                    rhsStatus = that.getStatus();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                        return false;
                    }
                }
                {
                    XMLGregorianCalendar lhsEffectiveDate;
                    lhsEffectiveDate = this.getEffectiveDate();
                    XMLGregorianCalendar rhsEffectiveDate;
                    rhsEffectiveDate = that.getEffectiveDate();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                        return false;
                    }
                }
                {
                    XMLGregorianCalendar lhsExpireDate;
                    lhsExpireDate = this.getExpireDate();
                    XMLGregorianCalendar rhsExpireDate;
                    rhsExpireDate = that.getExpireDate();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "expireDate", lhsExpireDate), LocatorUtils.property(thatLocator, "expireDate", rhsExpireDate), lhsExpireDate, rhsExpireDate)) {
                        return false;
                    }
                }
                {
                    String lhsID;
                    lhsID = this.getID();
                    String rhsID;
                    rhsID = that.getID();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsID), LocatorUtils.property(thatLocator, "id", rhsID), lhsID, rhsID)) {
                        return false;
                    }
                }
                {
                    String lhsCertificateNumber;
                    lhsCertificateNumber = this.getCertificateNumber();
                    String rhsCertificateNumber;
                    rhsCertificateNumber = that.getCertificateNumber();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "certificateNumber", lhsCertificateNumber), LocatorUtils.property(thatLocator, "certificateNumber", rhsCertificateNumber), lhsCertificateNumber, rhsCertificateNumber)) {
                        return false;
                    }
                }
                {
                    String lhsMemberNumber;
                    lhsMemberNumber = this.getMemberNumber();
                    String rhsMemberNumber;
                    rhsMemberNumber = that.getMemberNumber();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "memberNumber", lhsMemberNumber), LocatorUtils.property(thatLocator, "memberNumber", rhsMemberNumber), lhsMemberNumber, rhsMemberNumber)) {
                        return false;
                    }
                }
                {
                    String lhsProgramName;
                    lhsProgramName = this.getProgramName();
                    String rhsProgramName;
                    rhsProgramName = that.getProgramName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "programName", lhsProgramName), LocatorUtils.property(thatLocator, "programName", rhsProgramName), lhsProgramName, rhsProgramName)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theIDContext;
                    theIDContext = this.getIDContext();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "idContext", theIDContext), currentHashCode, theIDContext);
                }
                {
                    BigInteger theNmbrOfNights;
                    theNmbrOfNights = this.getNmbrOfNights();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nmbrOfNights", theNmbrOfNights), currentHashCode, theNmbrOfNights);
                }
                {
                    String theFormat;
                    theFormat = this.getFormat();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "format", theFormat), currentHashCode, theFormat);
                }
                {
                    String theStatus;
                    theStatus = this.getStatus();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
                }
                {
                    XMLGregorianCalendar theEffectiveDate;
                    theEffectiveDate = this.getEffectiveDate();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
                }
                {
                    XMLGregorianCalendar theExpireDate;
                    theExpireDate = this.getExpireDate();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expireDate", theExpireDate), currentHashCode, theExpireDate);
                }
                {
                    String theID;
                    theID = this.getID();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theID), currentHashCode, theID);
                }
                {
                    String theCertificateNumber;
                    theCertificateNumber = this.getCertificateNumber();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "certificateNumber", theCertificateNumber), currentHashCode, theCertificateNumber);
                }
                {
                    String theMemberNumber;
                    theMemberNumber = this.getMemberNumber();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "memberNumber", theMemberNumber), currentHashCode, theMemberNumber);
                }
                {
                    String theProgramName;
                    theProgramName = this.getProgramName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "programName", theProgramName), currentHashCode, theProgramName);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof PaymentFormType.LoyaltyRedemption.LoyaltyCertificate) {
                    final PaymentFormType.LoyaltyRedemption.LoyaltyCertificate copy = ((PaymentFormType.LoyaltyRedemption.LoyaltyCertificate) draftCopy);
                    if (this.idContext!= null) {
                        String sourceIDContext;
                        sourceIDContext = this.getIDContext();
                        String copyIDContext = ((String) strategy.copy(LocatorUtils.property(locator, "idContext", sourceIDContext), sourceIDContext));
                        copy.setIDContext(copyIDContext);
                    } else {
                        copy.idContext = null;
                    }
                    if (this.nmbrOfNights!= null) {
                        BigInteger sourceNmbrOfNights;
                        sourceNmbrOfNights = this.getNmbrOfNights();
                        BigInteger copyNmbrOfNights = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "nmbrOfNights", sourceNmbrOfNights), sourceNmbrOfNights));
                        copy.setNmbrOfNights(copyNmbrOfNights);
                    } else {
                        copy.nmbrOfNights = null;
                    }
                    if (this.format!= null) {
                        String sourceFormat;
                        sourceFormat = this.getFormat();
                        String copyFormat = ((String) strategy.copy(LocatorUtils.property(locator, "format", sourceFormat), sourceFormat));
                        copy.setFormat(copyFormat);
                    } else {
                        copy.format = null;
                    }
                    if (this.status!= null) {
                        String sourceStatus;
                        sourceStatus = this.getStatus();
                        String copyStatus = ((String) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                        copy.setStatus(copyStatus);
                    } else {
                        copy.status = null;
                    }
                    if (this.effectiveDate!= null) {
                        XMLGregorianCalendar sourceEffectiveDate;
                        sourceEffectiveDate = this.getEffectiveDate();
                        XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                        copy.setEffectiveDate(copyEffectiveDate);
                    } else {
                        copy.effectiveDate = null;
                    }
                    if (this.expireDate!= null) {
                        XMLGregorianCalendar sourceExpireDate;
                        sourceExpireDate = this.getExpireDate();
                        XMLGregorianCalendar copyExpireDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "expireDate", sourceExpireDate), sourceExpireDate));
                        copy.setExpireDate(copyExpireDate);
                    } else {
                        copy.expireDate = null;
                    }
                    if (this.id!= null) {
                        String sourceID;
                        sourceID = this.getID();
                        String copyID = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceID), sourceID));
                        copy.setID(copyID);
                    } else {
                        copy.id = null;
                    }
                    if (this.certificateNumber!= null) {
                        String sourceCertificateNumber;
                        sourceCertificateNumber = this.getCertificateNumber();
                        String copyCertificateNumber = ((String) strategy.copy(LocatorUtils.property(locator, "certificateNumber", sourceCertificateNumber), sourceCertificateNumber));
                        copy.setCertificateNumber(copyCertificateNumber);
                    } else {
                        copy.certificateNumber = null;
                    }
                    if (this.memberNumber!= null) {
                        String sourceMemberNumber;
                        sourceMemberNumber = this.getMemberNumber();
                        String copyMemberNumber = ((String) strategy.copy(LocatorUtils.property(locator, "memberNumber", sourceMemberNumber), sourceMemberNumber));
                        copy.setMemberNumber(copyMemberNumber);
                    } else {
                        copy.memberNumber = null;
                    }
                    if (this.programName!= null) {
                        String sourceProgramName;
                        sourceProgramName = this.getProgramName();
                        String copyProgramName = ((String) strategy.copy(LocatorUtils.property(locator, "programName", sourceProgramName), sourceProgramName));
                        copy.setProgramName(copyProgramName);
                    } else {
                        copy.programName = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new PaymentFormType.LoyaltyRedemption.LoyaltyCertificate();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attribute name="TicketNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class MiscChargeOrder
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "TicketNumber")
        protected String ticketNumber;

        /**
         * Gets the value of the ticketNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTicketNumber() {
            return ticketNumber;
        }

        /**
         * Sets the value of the ticketNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTicketNumber(String value) {
            this.ticketNumber = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theTicketNumber;
                theTicketNumber = this.getTicketNumber();
                strategy.appendField(locator, this, "ticketNumber", buffer, theTicketNumber);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentFormType.MiscChargeOrder)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentFormType.MiscChargeOrder that = ((PaymentFormType.MiscChargeOrder) object);
            {
                String lhsTicketNumber;
                lhsTicketNumber = this.getTicketNumber();
                String rhsTicketNumber;
                rhsTicketNumber = that.getTicketNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketNumber", lhsTicketNumber), LocatorUtils.property(thatLocator, "ticketNumber", rhsTicketNumber), lhsTicketNumber, rhsTicketNumber)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theTicketNumber;
                theTicketNumber = this.getTicketNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketNumber", theTicketNumber), currentHashCode, theTicketNumber);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PaymentFormType.MiscChargeOrder) {
                final PaymentFormType.MiscChargeOrder copy = ((PaymentFormType.MiscChargeOrder) draftCopy);
                if (this.ticketNumber!= null) {
                    String sourceTicketNumber;
                    sourceTicketNumber = this.getTicketNumber();
                    String copyTicketNumber = ((String) strategy.copy(LocatorUtils.property(locator, "ticketNumber", sourceTicketNumber), sourceTicketNumber));
                    copy.setTicketNumber(copyTicketNumber);
                } else {
                    copy.ticketNumber = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PaymentFormType.MiscChargeOrder();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}VoucherGroup"/&gt;
     *       &lt;attribute name="BillingNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *       &lt;attribute name="SupplierIdentifier" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *       &lt;attribute name="Identifier" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *       &lt;attribute name="ValueType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *       &lt;attribute name="ElectronicIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Voucher
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "BillingNumber")
        protected String billingNumber;
        @XmlAttribute(name = "SupplierIdentifier")
        protected String supplierIdentifier;
        @XmlAttribute(name = "Identifier")
        protected String identifier;
        @XmlAttribute(name = "ValueType")
        protected String valueType;
        @XmlAttribute(name = "ElectronicIndicator")
        protected Boolean electronicIndicator;
        @XmlAttribute(name = "SeriesCode")
        protected String seriesCode;
        @XmlAttribute(name = "EffectiveDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar effectiveDate;
        @XmlAttribute(name = "ExpireDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar expireDate;

        /**
         * Gets the value of the billingNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getBillingNumber() {
            return billingNumber;
        }

        /**
         * Sets the value of the billingNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setBillingNumber(String value) {
            this.billingNumber = value;
        }

        /**
         * Gets the value of the supplierIdentifier property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSupplierIdentifier() {
            return supplierIdentifier;
        }

        /**
         * Sets the value of the supplierIdentifier property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSupplierIdentifier(String value) {
            this.supplierIdentifier = value;
        }

        /**
         * Gets the value of the identifier property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getIdentifier() {
            return identifier;
        }

        /**
         * Sets the value of the identifier property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setIdentifier(String value) {
            this.identifier = value;
        }

        /**
         * Gets the value of the valueType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValueType() {
            return valueType;
        }

        /**
         * Sets the value of the valueType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValueType(String value) {
            this.valueType = value;
        }

        /**
         * Gets the value of the electronicIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isElectronicIndicator() {
            return electronicIndicator;
        }

        /**
         * Sets the value of the electronicIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setElectronicIndicator(Boolean value) {
            this.electronicIndicator = value;
        }

        /**
         * Gets the value of the seriesCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSeriesCode() {
            return seriesCode;
        }

        /**
         * Sets the value of the seriesCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSeriesCode(String value) {
            this.seriesCode = value;
        }

        /**
         * Gets the value of the effectiveDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getEffectiveDate() {
            return effectiveDate;
        }

        /**
         * Sets the value of the effectiveDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setEffectiveDate(XMLGregorianCalendar value) {
            this.effectiveDate = value;
        }

        /**
         * Gets the value of the expireDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getExpireDate() {
            return expireDate;
        }

        /**
         * Sets the value of the expireDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setExpireDate(XMLGregorianCalendar value) {
            this.expireDate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theBillingNumber;
                theBillingNumber = this.getBillingNumber();
                strategy.appendField(locator, this, "billingNumber", buffer, theBillingNumber);
            }
            {
                String theSupplierIdentifier;
                theSupplierIdentifier = this.getSupplierIdentifier();
                strategy.appendField(locator, this, "supplierIdentifier", buffer, theSupplierIdentifier);
            }
            {
                String theIdentifier;
                theIdentifier = this.getIdentifier();
                strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
            }
            {
                String theValueType;
                theValueType = this.getValueType();
                strategy.appendField(locator, this, "valueType", buffer, theValueType);
            }
            {
                Boolean theElectronicIndicator;
                theElectronicIndicator = this.isElectronicIndicator();
                strategy.appendField(locator, this, "electronicIndicator", buffer, theElectronicIndicator);
            }
            {
                String theSeriesCode;
                theSeriesCode = this.getSeriesCode();
                strategy.appendField(locator, this, "seriesCode", buffer, theSeriesCode);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                strategy.appendField(locator, this, "expireDate", buffer, theExpireDate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentFormType.Voucher)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentFormType.Voucher that = ((PaymentFormType.Voucher) object);
            {
                String lhsBillingNumber;
                lhsBillingNumber = this.getBillingNumber();
                String rhsBillingNumber;
                rhsBillingNumber = that.getBillingNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "billingNumber", lhsBillingNumber), LocatorUtils.property(thatLocator, "billingNumber", rhsBillingNumber), lhsBillingNumber, rhsBillingNumber)) {
                    return false;
                }
            }
            {
                String lhsSupplierIdentifier;
                lhsSupplierIdentifier = this.getSupplierIdentifier();
                String rhsSupplierIdentifier;
                rhsSupplierIdentifier = that.getSupplierIdentifier();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "supplierIdentifier", lhsSupplierIdentifier), LocatorUtils.property(thatLocator, "supplierIdentifier", rhsSupplierIdentifier), lhsSupplierIdentifier, rhsSupplierIdentifier)) {
                    return false;
                }
            }
            {
                String lhsIdentifier;
                lhsIdentifier = this.getIdentifier();
                String rhsIdentifier;
                rhsIdentifier = that.getIdentifier();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                    return false;
                }
            }
            {
                String lhsValueType;
                lhsValueType = this.getValueType();
                String rhsValueType;
                rhsValueType = that.getValueType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "valueType", lhsValueType), LocatorUtils.property(thatLocator, "valueType", rhsValueType), lhsValueType, rhsValueType)) {
                    return false;
                }
            }
            {
                Boolean lhsElectronicIndicator;
                lhsElectronicIndicator = this.isElectronicIndicator();
                Boolean rhsElectronicIndicator;
                rhsElectronicIndicator = that.isElectronicIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "electronicIndicator", lhsElectronicIndicator), LocatorUtils.property(thatLocator, "electronicIndicator", rhsElectronicIndicator), lhsElectronicIndicator, rhsElectronicIndicator)) {
                    return false;
                }
            }
            {
                String lhsSeriesCode;
                lhsSeriesCode = this.getSeriesCode();
                String rhsSeriesCode;
                rhsSeriesCode = that.getSeriesCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "seriesCode", lhsSeriesCode), LocatorUtils.property(thatLocator, "seriesCode", rhsSeriesCode), lhsSeriesCode, rhsSeriesCode)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsEffectiveDate;
                lhsEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar rhsEffectiveDate;
                rhsEffectiveDate = that.getEffectiveDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsExpireDate;
                lhsExpireDate = this.getExpireDate();
                XMLGregorianCalendar rhsExpireDate;
                rhsExpireDate = that.getExpireDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "expireDate", lhsExpireDate), LocatorUtils.property(thatLocator, "expireDate", rhsExpireDate), lhsExpireDate, rhsExpireDate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theBillingNumber;
                theBillingNumber = this.getBillingNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "billingNumber", theBillingNumber), currentHashCode, theBillingNumber);
            }
            {
                String theSupplierIdentifier;
                theSupplierIdentifier = this.getSupplierIdentifier();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplierIdentifier", theSupplierIdentifier), currentHashCode, theSupplierIdentifier);
            }
            {
                String theIdentifier;
                theIdentifier = this.getIdentifier();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
            }
            {
                String theValueType;
                theValueType = this.getValueType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueType", theValueType), currentHashCode, theValueType);
            }
            {
                Boolean theElectronicIndicator;
                theElectronicIndicator = this.isElectronicIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "electronicIndicator", theElectronicIndicator), currentHashCode, theElectronicIndicator);
            }
            {
                String theSeriesCode;
                theSeriesCode = this.getSeriesCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seriesCode", theSeriesCode), currentHashCode, theSeriesCode);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expireDate", theExpireDate), currentHashCode, theExpireDate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PaymentFormType.Voucher) {
                final PaymentFormType.Voucher copy = ((PaymentFormType.Voucher) draftCopy);
                if (this.billingNumber!= null) {
                    String sourceBillingNumber;
                    sourceBillingNumber = this.getBillingNumber();
                    String copyBillingNumber = ((String) strategy.copy(LocatorUtils.property(locator, "billingNumber", sourceBillingNumber), sourceBillingNumber));
                    copy.setBillingNumber(copyBillingNumber);
                } else {
                    copy.billingNumber = null;
                }
                if (this.supplierIdentifier!= null) {
                    String sourceSupplierIdentifier;
                    sourceSupplierIdentifier = this.getSupplierIdentifier();
                    String copySupplierIdentifier = ((String) strategy.copy(LocatorUtils.property(locator, "supplierIdentifier", sourceSupplierIdentifier), sourceSupplierIdentifier));
                    copy.setSupplierIdentifier(copySupplierIdentifier);
                } else {
                    copy.supplierIdentifier = null;
                }
                if (this.identifier!= null) {
                    String sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    String copyIdentifier = ((String) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    copy.identifier = null;
                }
                if (this.valueType!= null) {
                    String sourceValueType;
                    sourceValueType = this.getValueType();
                    String copyValueType = ((String) strategy.copy(LocatorUtils.property(locator, "valueType", sourceValueType), sourceValueType));
                    copy.setValueType(copyValueType);
                } else {
                    copy.valueType = null;
                }
                if (this.electronicIndicator!= null) {
                    Boolean sourceElectronicIndicator;
                    sourceElectronicIndicator = this.isElectronicIndicator();
                    Boolean copyElectronicIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "electronicIndicator", sourceElectronicIndicator), sourceElectronicIndicator));
                    copy.setElectronicIndicator(copyElectronicIndicator);
                } else {
                    copy.electronicIndicator = null;
                }
                if (this.seriesCode!= null) {
                    String sourceSeriesCode;
                    sourceSeriesCode = this.getSeriesCode();
                    String copySeriesCode = ((String) strategy.copy(LocatorUtils.property(locator, "seriesCode", sourceSeriesCode), sourceSeriesCode));
                    copy.setSeriesCode(copySeriesCode);
                } else {
                    copy.seriesCode = null;
                }
                if (this.effectiveDate!= null) {
                    XMLGregorianCalendar sourceEffectiveDate;
                    sourceEffectiveDate = this.getEffectiveDate();
                    XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                    copy.setEffectiveDate(copyEffectiveDate);
                } else {
                    copy.effectiveDate = null;
                }
                if (this.expireDate!= null) {
                    XMLGregorianCalendar sourceExpireDate;
                    sourceExpireDate = this.getExpireDate();
                    XMLGregorianCalendar copyExpireDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "expireDate", sourceExpireDate), sourceExpireDate));
                    copy.setExpireDate(copyExpireDate);
                } else {
                    copy.expireDate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PaymentFormType.Voucher();
        }

    }

}
