//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Provides the details of one or more orders.
 * 
 * <p>Java class for OrdersType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="OrdersType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="Order" maxOccurs="99" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Products" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="Product" maxOccurs="99" minOccurs="0"&gt;
 *                               &lt;complexType&gt;
 *                                 &lt;complexContent&gt;
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                                     &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                                     &lt;attribute name="ProductIssueDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *                                     &lt;attribute name="ProductID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *                                     &lt;attribute name="ProductType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *                                     &lt;attribute name="ProductQuantity" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
 *                                     &lt;attribute name="ProductSerialNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *                                     &lt;attribute name="DiscountCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                                     &lt;attribute name="Status"&gt;
 *                                       &lt;simpleType&gt;
 *                                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                                           &lt;enumeration value="OrderPending"/&gt;
 *                                           &lt;enumeration value="BackOrder"/&gt;
 *                                           &lt;enumeration value="Unavailable"/&gt;
 *                                           &lt;enumeration value="Confirmed"/&gt;
 *                                         &lt;/restriction&gt;
 *                                       &lt;/simpleType&gt;
 *                                     &lt;/attribute&gt;
 *                                     &lt;attribute name="ListOfRecipientRPH" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *                                   &lt;/restriction&gt;
 *                                 &lt;/complexContent&gt;
 *                               &lt;/complexType&gt;
 *                             &lt;/element&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="OrderType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                 &lt;attribute name="OrderID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *                 &lt;attribute name="ListOfRecipientRPH" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="OrderType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *       &lt;attribute name="DiscountCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *       &lt;attribute name="VendorPurchaseOrderID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *       &lt;attribute name="OrderID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OrdersType", propOrder = {
    "order"
})
public class OrdersType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "Order")
    protected List<OrdersType.Order> order;
    @XmlAttribute(name = "OrderType")
    protected String orderType;
    @XmlAttribute(name = "DiscountCode")
    protected String discountCode;
    @XmlAttribute(name = "VendorPurchaseOrderID")
    protected String vendorPurchaseOrderID;
    @XmlAttribute(name = "OrderID")
    protected String orderID;

    /**
     * Gets the value of the order property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the order property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOrder().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OrdersType.Order }
     * 
     * 
     */
    public List<OrdersType.Order> getOrder() {
        if (order == null) {
            order = new ArrayList<OrdersType.Order>();
        }
        return this.order;
    }

    /**
     * Gets the value of the orderType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOrderType() {
        return orderType;
    }

    /**
     * Sets the value of the orderType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOrderType(String value) {
        this.orderType = value;
    }

    /**
     * Gets the value of the discountCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDiscountCode() {
        return discountCode;
    }

    /**
     * Sets the value of the discountCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDiscountCode(String value) {
        this.discountCode = value;
    }

    /**
     * Gets the value of the vendorPurchaseOrderID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVendorPurchaseOrderID() {
        return vendorPurchaseOrderID;
    }

    /**
     * Sets the value of the vendorPurchaseOrderID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVendorPurchaseOrderID(String value) {
        this.vendorPurchaseOrderID = value;
    }

    /**
     * Gets the value of the orderID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOrderID() {
        return orderID;
    }

    /**
     * Sets the value of the orderID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOrderID(String value) {
        this.orderID = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<OrdersType.Order> theOrder;
            theOrder = (((this.order!= null)&&(!this.order.isEmpty()))?this.getOrder():null);
            strategy.appendField(locator, this, "order", buffer, theOrder);
        }
        {
            String theOrderType;
            theOrderType = this.getOrderType();
            strategy.appendField(locator, this, "orderType", buffer, theOrderType);
        }
        {
            String theDiscountCode;
            theDiscountCode = this.getDiscountCode();
            strategy.appendField(locator, this, "discountCode", buffer, theDiscountCode);
        }
        {
            String theVendorPurchaseOrderID;
            theVendorPurchaseOrderID = this.getVendorPurchaseOrderID();
            strategy.appendField(locator, this, "vendorPurchaseOrderID", buffer, theVendorPurchaseOrderID);
        }
        {
            String theOrderID;
            theOrderID = this.getOrderID();
            strategy.appendField(locator, this, "orderID", buffer, theOrderID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof OrdersType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final OrdersType that = ((OrdersType) object);
        {
            List<OrdersType.Order> lhsOrder;
            lhsOrder = (((this.order!= null)&&(!this.order.isEmpty()))?this.getOrder():null);
            List<OrdersType.Order> rhsOrder;
            rhsOrder = (((that.order!= null)&&(!that.order.isEmpty()))?that.getOrder():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "order", lhsOrder), LocatorUtils.property(thatLocator, "order", rhsOrder), lhsOrder, rhsOrder)) {
                return false;
            }
        }
        {
            String lhsOrderType;
            lhsOrderType = this.getOrderType();
            String rhsOrderType;
            rhsOrderType = that.getOrderType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderType", lhsOrderType), LocatorUtils.property(thatLocator, "orderType", rhsOrderType), lhsOrderType, rhsOrderType)) {
                return false;
            }
        }
        {
            String lhsDiscountCode;
            lhsDiscountCode = this.getDiscountCode();
            String rhsDiscountCode;
            rhsDiscountCode = that.getDiscountCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "discountCode", lhsDiscountCode), LocatorUtils.property(thatLocator, "discountCode", rhsDiscountCode), lhsDiscountCode, rhsDiscountCode)) {
                return false;
            }
        }
        {
            String lhsVendorPurchaseOrderID;
            lhsVendorPurchaseOrderID = this.getVendorPurchaseOrderID();
            String rhsVendorPurchaseOrderID;
            rhsVendorPurchaseOrderID = that.getVendorPurchaseOrderID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vendorPurchaseOrderID", lhsVendorPurchaseOrderID), LocatorUtils.property(thatLocator, "vendorPurchaseOrderID", rhsVendorPurchaseOrderID), lhsVendorPurchaseOrderID, rhsVendorPurchaseOrderID)) {
                return false;
            }
        }
        {
            String lhsOrderID;
            lhsOrderID = this.getOrderID();
            String rhsOrderID;
            rhsOrderID = that.getOrderID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderID", lhsOrderID), LocatorUtils.property(thatLocator, "orderID", rhsOrderID), lhsOrderID, rhsOrderID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<OrdersType.Order> theOrder;
            theOrder = (((this.order!= null)&&(!this.order.isEmpty()))?this.getOrder():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "order", theOrder), currentHashCode, theOrder);
        }
        {
            String theOrderType;
            theOrderType = this.getOrderType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderType", theOrderType), currentHashCode, theOrderType);
        }
        {
            String theDiscountCode;
            theDiscountCode = this.getDiscountCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "discountCode", theDiscountCode), currentHashCode, theDiscountCode);
        }
        {
            String theVendorPurchaseOrderID;
            theVendorPurchaseOrderID = this.getVendorPurchaseOrderID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vendorPurchaseOrderID", theVendorPurchaseOrderID), currentHashCode, theVendorPurchaseOrderID);
        }
        {
            String theOrderID;
            theOrderID = this.getOrderID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderID", theOrderID), currentHashCode, theOrderID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof OrdersType) {
            final OrdersType copy = ((OrdersType) draftCopy);
            if ((this.order!= null)&&(!this.order.isEmpty())) {
                List<OrdersType.Order> sourceOrder;
                sourceOrder = (((this.order!= null)&&(!this.order.isEmpty()))?this.getOrder():null);
                @SuppressWarnings("unchecked")
                List<OrdersType.Order> copyOrder = ((List<OrdersType.Order> ) strategy.copy(LocatorUtils.property(locator, "order", sourceOrder), sourceOrder));
                copy.order = null;
                if (copyOrder!= null) {
                    List<OrdersType.Order> uniqueOrderl = copy.getOrder();
                    uniqueOrderl.addAll(copyOrder);
                }
            } else {
                copy.order = null;
            }
            if (this.orderType!= null) {
                String sourceOrderType;
                sourceOrderType = this.getOrderType();
                String copyOrderType = ((String) strategy.copy(LocatorUtils.property(locator, "orderType", sourceOrderType), sourceOrderType));
                copy.setOrderType(copyOrderType);
            } else {
                copy.orderType = null;
            }
            if (this.discountCode!= null) {
                String sourceDiscountCode;
                sourceDiscountCode = this.getDiscountCode();
                String copyDiscountCode = ((String) strategy.copy(LocatorUtils.property(locator, "discountCode", sourceDiscountCode), sourceDiscountCode));
                copy.setDiscountCode(copyDiscountCode);
            } else {
                copy.discountCode = null;
            }
            if (this.vendorPurchaseOrderID!= null) {
                String sourceVendorPurchaseOrderID;
                sourceVendorPurchaseOrderID = this.getVendorPurchaseOrderID();
                String copyVendorPurchaseOrderID = ((String) strategy.copy(LocatorUtils.property(locator, "vendorPurchaseOrderID", sourceVendorPurchaseOrderID), sourceVendorPurchaseOrderID));
                copy.setVendorPurchaseOrderID(copyVendorPurchaseOrderID);
            } else {
                copy.vendorPurchaseOrderID = null;
            }
            if (this.orderID!= null) {
                String sourceOrderID;
                sourceOrderID = this.getOrderID();
                String copyOrderID = ((String) strategy.copy(LocatorUtils.property(locator, "orderID", sourceOrderID), sourceOrderID));
                copy.setOrderID(copyOrderID);
            } else {
                copy.orderID = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new OrdersType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Products" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="Product" maxOccurs="99" minOccurs="0"&gt;
     *                     &lt;complexType&gt;
     *                       &lt;complexContent&gt;
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *                           &lt;attribute name="ProductIssueDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
     *                           &lt;attribute name="ProductID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *                           &lt;attribute name="ProductType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *                           &lt;attribute name="ProductQuantity" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
     *                           &lt;attribute name="ProductSerialNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *                           &lt;attribute name="DiscountCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *                           &lt;attribute name="Status"&gt;
     *                             &lt;simpleType&gt;
     *                               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *                                 &lt;enumeration value="OrderPending"/&gt;
     *                                 &lt;enumeration value="BackOrder"/&gt;
     *                                 &lt;enumeration value="Unavailable"/&gt;
     *                                 &lt;enumeration value="Confirmed"/&gt;
     *                               &lt;/restriction&gt;
     *                             &lt;/simpleType&gt;
     *                           &lt;/attribute&gt;
     *                           &lt;attribute name="ListOfRecipientRPH" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
     *                         &lt;/restriction&gt;
     *                       &lt;/complexContent&gt;
     *                     &lt;/complexType&gt;
     *                   &lt;/element&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="OrderType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *       &lt;attribute name="OrderID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *       &lt;attribute name="ListOfRecipientRPH" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "products"
    })
    public static class Order
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "Products")
        protected OrdersType.Order.Products products;
        @XmlAttribute(name = "OrderType")
        protected String orderType;
        @XmlAttribute(name = "OrderID")
        protected String orderID;
        @XmlAttribute(name = "ListOfRecipientRPH")
        protected List<String> listOfRecipientRPH;

        /**
         * Gets the value of the products property.
         * 
         * @return
         *     possible object is
         *     {@link OrdersType.Order.Products }
         *     
         */
        public OrdersType.Order.Products getProducts() {
            return products;
        }

        /**
         * Sets the value of the products property.
         * 
         * @param value
         *     allowed object is
         *     {@link OrdersType.Order.Products }
         *     
         */
        public void setProducts(OrdersType.Order.Products value) {
            this.products = value;
        }

        /**
         * Gets the value of the orderType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getOrderType() {
            return orderType;
        }

        /**
         * Sets the value of the orderType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setOrderType(String value) {
            this.orderType = value;
        }

        /**
         * Gets the value of the orderID property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getOrderID() {
            return orderID;
        }

        /**
         * Sets the value of the orderID property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setOrderID(String value) {
            this.orderID = value;
        }

        /**
         * Gets the value of the listOfRecipientRPH property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the listOfRecipientRPH property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getListOfRecipientRPH().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getListOfRecipientRPH() {
            if (listOfRecipientRPH == null) {
                listOfRecipientRPH = new ArrayList<String>();
            }
            return this.listOfRecipientRPH;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                OrdersType.Order.Products theProducts;
                theProducts = this.getProducts();
                strategy.appendField(locator, this, "products", buffer, theProducts);
            }
            {
                String theOrderType;
                theOrderType = this.getOrderType();
                strategy.appendField(locator, this, "orderType", buffer, theOrderType);
            }
            {
                String theOrderID;
                theOrderID = this.getOrderID();
                strategy.appendField(locator, this, "orderID", buffer, theOrderID);
            }
            {
                List<String> theListOfRecipientRPH;
                theListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                strategy.appendField(locator, this, "listOfRecipientRPH", buffer, theListOfRecipientRPH);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof OrdersType.Order)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final OrdersType.Order that = ((OrdersType.Order) object);
            {
                OrdersType.Order.Products lhsProducts;
                lhsProducts = this.getProducts();
                OrdersType.Order.Products rhsProducts;
                rhsProducts = that.getProducts();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "products", lhsProducts), LocatorUtils.property(thatLocator, "products", rhsProducts), lhsProducts, rhsProducts)) {
                    return false;
                }
            }
            {
                String lhsOrderType;
                lhsOrderType = this.getOrderType();
                String rhsOrderType;
                rhsOrderType = that.getOrderType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "orderType", lhsOrderType), LocatorUtils.property(thatLocator, "orderType", rhsOrderType), lhsOrderType, rhsOrderType)) {
                    return false;
                }
            }
            {
                String lhsOrderID;
                lhsOrderID = this.getOrderID();
                String rhsOrderID;
                rhsOrderID = that.getOrderID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "orderID", lhsOrderID), LocatorUtils.property(thatLocator, "orderID", rhsOrderID), lhsOrderID, rhsOrderID)) {
                    return false;
                }
            }
            {
                List<String> lhsListOfRecipientRPH;
                lhsListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                List<String> rhsListOfRecipientRPH;
                rhsListOfRecipientRPH = (((that.listOfRecipientRPH!= null)&&(!that.listOfRecipientRPH.isEmpty()))?that.getListOfRecipientRPH():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "listOfRecipientRPH", lhsListOfRecipientRPH), LocatorUtils.property(thatLocator, "listOfRecipientRPH", rhsListOfRecipientRPH), lhsListOfRecipientRPH, rhsListOfRecipientRPH)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                OrdersType.Order.Products theProducts;
                theProducts = this.getProducts();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "products", theProducts), currentHashCode, theProducts);
            }
            {
                String theOrderType;
                theOrderType = this.getOrderType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderType", theOrderType), currentHashCode, theOrderType);
            }
            {
                String theOrderID;
                theOrderID = this.getOrderID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderID", theOrderID), currentHashCode, theOrderID);
            }
            {
                List<String> theListOfRecipientRPH;
                theListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "listOfRecipientRPH", theListOfRecipientRPH), currentHashCode, theListOfRecipientRPH);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof OrdersType.Order) {
                final OrdersType.Order copy = ((OrdersType.Order) draftCopy);
                if (this.products!= null) {
                    OrdersType.Order.Products sourceProducts;
                    sourceProducts = this.getProducts();
                    OrdersType.Order.Products copyProducts = ((OrdersType.Order.Products) strategy.copy(LocatorUtils.property(locator, "products", sourceProducts), sourceProducts));
                    copy.setProducts(copyProducts);
                } else {
                    copy.products = null;
                }
                if (this.orderType!= null) {
                    String sourceOrderType;
                    sourceOrderType = this.getOrderType();
                    String copyOrderType = ((String) strategy.copy(LocatorUtils.property(locator, "orderType", sourceOrderType), sourceOrderType));
                    copy.setOrderType(copyOrderType);
                } else {
                    copy.orderType = null;
                }
                if (this.orderID!= null) {
                    String sourceOrderID;
                    sourceOrderID = this.getOrderID();
                    String copyOrderID = ((String) strategy.copy(LocatorUtils.property(locator, "orderID", sourceOrderID), sourceOrderID));
                    copy.setOrderID(copyOrderID);
                } else {
                    copy.orderID = null;
                }
                if ((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty())) {
                    List<String> sourceListOfRecipientRPH;
                    sourceListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyListOfRecipientRPH = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "listOfRecipientRPH", sourceListOfRecipientRPH), sourceListOfRecipientRPH));
                    copy.listOfRecipientRPH = null;
                    if (copyListOfRecipientRPH!= null) {
                        List<String> uniqueListOfRecipientRPHl = copy.getListOfRecipientRPH();
                        uniqueListOfRecipientRPHl.addAll(copyListOfRecipientRPH);
                    }
                } else {
                    copy.listOfRecipientRPH = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new OrdersType.Order();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="Product" maxOccurs="99" minOccurs="0"&gt;
         *           &lt;complexType&gt;
         *             &lt;complexContent&gt;
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
         *                 &lt;attribute name="ProductIssueDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
         *                 &lt;attribute name="ProductID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
         *                 &lt;attribute name="ProductType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
         *                 &lt;attribute name="ProductQuantity" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
         *                 &lt;attribute name="ProductSerialNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
         *                 &lt;attribute name="DiscountCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
         *                 &lt;attribute name="Status"&gt;
         *                   &lt;simpleType&gt;
         *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
         *                       &lt;enumeration value="OrderPending"/&gt;
         *                       &lt;enumeration value="BackOrder"/&gt;
         *                       &lt;enumeration value="Unavailable"/&gt;
         *                       &lt;enumeration value="Confirmed"/&gt;
         *                     &lt;/restriction&gt;
         *                   &lt;/simpleType&gt;
         *                 &lt;/attribute&gt;
         *                 &lt;attribute name="ListOfRecipientRPH" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
         *               &lt;/restriction&gt;
         *             &lt;/complexContent&gt;
         *           &lt;/complexType&gt;
         *         &lt;/element&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "product"
        })
        public static class Products
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElement(name = "Product")
            protected List<OrdersType.Order.Products.Product> product;

            /**
             * Gets the value of the product property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the product property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getProduct().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link OrdersType.Order.Products.Product }
             * 
             * 
             */
            public List<OrdersType.Order.Products.Product> getProduct() {
                if (product == null) {
                    product = new ArrayList<OrdersType.Order.Products.Product>();
                }
                return this.product;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<OrdersType.Order.Products.Product> theProduct;
                    theProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
                    strategy.appendField(locator, this, "product", buffer, theProduct);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof OrdersType.Order.Products)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final OrdersType.Order.Products that = ((OrdersType.Order.Products) object);
                {
                    List<OrdersType.Order.Products.Product> lhsProduct;
                    lhsProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
                    List<OrdersType.Order.Products.Product> rhsProduct;
                    rhsProduct = (((that.product!= null)&&(!that.product.isEmpty()))?that.getProduct():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "product", lhsProduct), LocatorUtils.property(thatLocator, "product", rhsProduct), lhsProduct, rhsProduct)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<OrdersType.Order.Products.Product> theProduct;
                    theProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "product", theProduct), currentHashCode, theProduct);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof OrdersType.Order.Products) {
                    final OrdersType.Order.Products copy = ((OrdersType.Order.Products) draftCopy);
                    if ((this.product!= null)&&(!this.product.isEmpty())) {
                        List<OrdersType.Order.Products.Product> sourceProduct;
                        sourceProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
                        @SuppressWarnings("unchecked")
                        List<OrdersType.Order.Products.Product> copyProduct = ((List<OrdersType.Order.Products.Product> ) strategy.copy(LocatorUtils.property(locator, "product", sourceProduct), sourceProduct));
                        copy.product = null;
                        if (copyProduct!= null) {
                            List<OrdersType.Order.Products.Product> uniqueProductl = copy.getProduct();
                            uniqueProductl.addAll(copyProduct);
                        }
                    } else {
                        copy.product = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new OrdersType.Order.Products();
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType&gt;
             *   &lt;complexContent&gt;
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
             *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
             *       &lt;attribute name="ProductIssueDate" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
             *       &lt;attribute name="ProductID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
             *       &lt;attribute name="ProductType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
             *       &lt;attribute name="ProductQuantity" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
             *       &lt;attribute name="ProductSerialNumber" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
             *       &lt;attribute name="DiscountCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
             *       &lt;attribute name="Status"&gt;
             *         &lt;simpleType&gt;
             *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
             *             &lt;enumeration value="OrderPending"/&gt;
             *             &lt;enumeration value="BackOrder"/&gt;
             *             &lt;enumeration value="Unavailable"/&gt;
             *             &lt;enumeration value="Confirmed"/&gt;
             *           &lt;/restriction&gt;
             *         &lt;/simpleType&gt;
             *       &lt;/attribute&gt;
             *       &lt;attribute name="ListOfRecipientRPH" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
             *     &lt;/restriction&gt;
             *   &lt;/complexContent&gt;
             * &lt;/complexType&gt;
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "")
            public static class Product
                implements Cloneable, CopyTo, Equals, HashCode, ToString
            {

                @XmlAttribute(name = "ProductIssueDate")
                protected String productIssueDate;
                @XmlAttribute(name = "ProductID")
                protected String productID;
                @XmlAttribute(name = "ProductType")
                protected String productType;
                @XmlAttribute(name = "ProductQuantity")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger productQuantity;
                @XmlAttribute(name = "ProductSerialNumber")
                protected String productSerialNumber;
                @XmlAttribute(name = "DiscountCode")
                protected String discountCode;
                @XmlAttribute(name = "Status")
                @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
                protected String status;
                @XmlAttribute(name = "ListOfRecipientRPH")
                protected List<String> listOfRecipientRPH;
                @XmlAttribute(name = "Amount")
                protected BigDecimal amount;
                @XmlAttribute(name = "CurrencyCode")
                protected String currencyCode;
                @XmlAttribute(name = "DecimalPlaces")
                @XmlSchemaType(name = "nonNegativeInteger")
                protected BigInteger decimalPlaces;

                /**
                 * Gets the value of the productIssueDate property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getProductIssueDate() {
                    return productIssueDate;
                }

                /**
                 * Sets the value of the productIssueDate property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setProductIssueDate(String value) {
                    this.productIssueDate = value;
                }

                /**
                 * Gets the value of the productID property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getProductID() {
                    return productID;
                }

                /**
                 * Sets the value of the productID property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setProductID(String value) {
                    this.productID = value;
                }

                /**
                 * Gets the value of the productType property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getProductType() {
                    return productType;
                }

                /**
                 * Sets the value of the productType property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setProductType(String value) {
                    this.productType = value;
                }

                /**
                 * Gets the value of the productQuantity property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getProductQuantity() {
                    return productQuantity;
                }

                /**
                 * Sets the value of the productQuantity property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 */
                public void setProductQuantity(BigInteger value) {
                    this.productQuantity = value;
                }

                /**
                 * Gets the value of the productSerialNumber property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getProductSerialNumber() {
                    return productSerialNumber;
                }

                /**
                 * Sets the value of the productSerialNumber property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setProductSerialNumber(String value) {
                    this.productSerialNumber = value;
                }

                /**
                 * Gets the value of the discountCode property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getDiscountCode() {
                    return discountCode;
                }

                /**
                 * Sets the value of the discountCode property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setDiscountCode(String value) {
                    this.discountCode = value;
                }

                /**
                 * Gets the value of the status property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getStatus() {
                    return status;
                }

                /**
                 * Sets the value of the status property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setStatus(String value) {
                    this.status = value;
                }

                /**
                 * Gets the value of the listOfRecipientRPH property.
                 * 
                 * <p>
                 * This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the listOfRecipientRPH property.
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * <pre>
                 *    getListOfRecipientRPH().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link String }
                 * 
                 * 
                 */
                public List<String> getListOfRecipientRPH() {
                    if (listOfRecipientRPH == null) {
                        listOfRecipientRPH = new ArrayList<String>();
                    }
                    return this.listOfRecipientRPH;
                }

                /**
                 * Gets the value of the amount property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigDecimal }
                 *     
                 */
                public BigDecimal getAmount() {
                    return amount;
                }

                /**
                 * Sets the value of the amount property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigDecimal }
                 *     
                 */
                public void setAmount(BigDecimal value) {
                    this.amount = value;
                }

                /**
                 * Gets the value of the currencyCode property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link String }
                 *     
                 */
                public String getCurrencyCode() {
                    return currencyCode;
                }

                /**
                 * Sets the value of the currencyCode property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link String }
                 *     
                 */
                public void setCurrencyCode(String value) {
                    this.currencyCode = value;
                }

                /**
                 * Gets the value of the decimalPlaces property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link BigInteger }
                 *     
                 */
                public BigInteger getDecimalPlaces() {
                    return decimalPlaces;
                }

                /**
                 * Sets the value of the decimalPlaces property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link BigInteger }
                 *     
                 */
                public void setDecimalPlaces(BigInteger value) {
                    this.decimalPlaces = value;
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        String theProductIssueDate;
                        theProductIssueDate = this.getProductIssueDate();
                        strategy.appendField(locator, this, "productIssueDate", buffer, theProductIssueDate);
                    }
                    {
                        String theProductID;
                        theProductID = this.getProductID();
                        strategy.appendField(locator, this, "productID", buffer, theProductID);
                    }
                    {
                        String theProductType;
                        theProductType = this.getProductType();
                        strategy.appendField(locator, this, "productType", buffer, theProductType);
                    }
                    {
                        BigInteger theProductQuantity;
                        theProductQuantity = this.getProductQuantity();
                        strategy.appendField(locator, this, "productQuantity", buffer, theProductQuantity);
                    }
                    {
                        String theProductSerialNumber;
                        theProductSerialNumber = this.getProductSerialNumber();
                        strategy.appendField(locator, this, "productSerialNumber", buffer, theProductSerialNumber);
                    }
                    {
                        String theDiscountCode;
                        theDiscountCode = this.getDiscountCode();
                        strategy.appendField(locator, this, "discountCode", buffer, theDiscountCode);
                    }
                    {
                        String theStatus;
                        theStatus = this.getStatus();
                        strategy.appendField(locator, this, "status", buffer, theStatus);
                    }
                    {
                        List<String> theListOfRecipientRPH;
                        theListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                        strategy.appendField(locator, this, "listOfRecipientRPH", buffer, theListOfRecipientRPH);
                    }
                    {
                        BigDecimal theAmount;
                        theAmount = this.getAmount();
                        strategy.appendField(locator, this, "amount", buffer, theAmount);
                    }
                    {
                        String theCurrencyCode;
                        theCurrencyCode = this.getCurrencyCode();
                        strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
                    }
                    {
                        BigInteger theDecimalPlaces;
                        theDecimalPlaces = this.getDecimalPlaces();
                        strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
                    }
                    return buffer;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof OrdersType.Order.Products.Product)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final OrdersType.Order.Products.Product that = ((OrdersType.Order.Products.Product) object);
                    {
                        String lhsProductIssueDate;
                        lhsProductIssueDate = this.getProductIssueDate();
                        String rhsProductIssueDate;
                        rhsProductIssueDate = that.getProductIssueDate();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "productIssueDate", lhsProductIssueDate), LocatorUtils.property(thatLocator, "productIssueDate", rhsProductIssueDate), lhsProductIssueDate, rhsProductIssueDate)) {
                            return false;
                        }
                    }
                    {
                        String lhsProductID;
                        lhsProductID = this.getProductID();
                        String rhsProductID;
                        rhsProductID = that.getProductID();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "productID", lhsProductID), LocatorUtils.property(thatLocator, "productID", rhsProductID), lhsProductID, rhsProductID)) {
                            return false;
                        }
                    }
                    {
                        String lhsProductType;
                        lhsProductType = this.getProductType();
                        String rhsProductType;
                        rhsProductType = that.getProductType();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "productType", lhsProductType), LocatorUtils.property(thatLocator, "productType", rhsProductType), lhsProductType, rhsProductType)) {
                            return false;
                        }
                    }
                    {
                        BigInteger lhsProductQuantity;
                        lhsProductQuantity = this.getProductQuantity();
                        BigInteger rhsProductQuantity;
                        rhsProductQuantity = that.getProductQuantity();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "productQuantity", lhsProductQuantity), LocatorUtils.property(thatLocator, "productQuantity", rhsProductQuantity), lhsProductQuantity, rhsProductQuantity)) {
                            return false;
                        }
                    }
                    {
                        String lhsProductSerialNumber;
                        lhsProductSerialNumber = this.getProductSerialNumber();
                        String rhsProductSerialNumber;
                        rhsProductSerialNumber = that.getProductSerialNumber();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "productSerialNumber", lhsProductSerialNumber), LocatorUtils.property(thatLocator, "productSerialNumber", rhsProductSerialNumber), lhsProductSerialNumber, rhsProductSerialNumber)) {
                            return false;
                        }
                    }
                    {
                        String lhsDiscountCode;
                        lhsDiscountCode = this.getDiscountCode();
                        String rhsDiscountCode;
                        rhsDiscountCode = that.getDiscountCode();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "discountCode", lhsDiscountCode), LocatorUtils.property(thatLocator, "discountCode", rhsDiscountCode), lhsDiscountCode, rhsDiscountCode)) {
                            return false;
                        }
                    }
                    {
                        String lhsStatus;
                        lhsStatus = this.getStatus();
                        String rhsStatus;
                        rhsStatus = that.getStatus();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                            return false;
                        }
                    }
                    {
                        List<String> lhsListOfRecipientRPH;
                        lhsListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                        List<String> rhsListOfRecipientRPH;
                        rhsListOfRecipientRPH = (((that.listOfRecipientRPH!= null)&&(!that.listOfRecipientRPH.isEmpty()))?that.getListOfRecipientRPH():null);
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "listOfRecipientRPH", lhsListOfRecipientRPH), LocatorUtils.property(thatLocator, "listOfRecipientRPH", rhsListOfRecipientRPH), lhsListOfRecipientRPH, rhsListOfRecipientRPH)) {
                            return false;
                        }
                    }
                    {
                        BigDecimal lhsAmount;
                        lhsAmount = this.getAmount();
                        BigDecimal rhsAmount;
                        rhsAmount = that.getAmount();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                            return false;
                        }
                    }
                    {
                        String lhsCurrencyCode;
                        lhsCurrencyCode = this.getCurrencyCode();
                        String rhsCurrencyCode;
                        rhsCurrencyCode = that.getCurrencyCode();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                            return false;
                        }
                    }
                    {
                        BigInteger lhsDecimalPlaces;
                        lhsDecimalPlaces = this.getDecimalPlaces();
                        BigInteger rhsDecimalPlaces;
                        rhsDecimalPlaces = that.getDecimalPlaces();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        String theProductIssueDate;
                        theProductIssueDate = this.getProductIssueDate();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productIssueDate", theProductIssueDate), currentHashCode, theProductIssueDate);
                    }
                    {
                        String theProductID;
                        theProductID = this.getProductID();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productID", theProductID), currentHashCode, theProductID);
                    }
                    {
                        String theProductType;
                        theProductType = this.getProductType();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productType", theProductType), currentHashCode, theProductType);
                    }
                    {
                        BigInteger theProductQuantity;
                        theProductQuantity = this.getProductQuantity();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productQuantity", theProductQuantity), currentHashCode, theProductQuantity);
                    }
                    {
                        String theProductSerialNumber;
                        theProductSerialNumber = this.getProductSerialNumber();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productSerialNumber", theProductSerialNumber), currentHashCode, theProductSerialNumber);
                    }
                    {
                        String theDiscountCode;
                        theDiscountCode = this.getDiscountCode();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "discountCode", theDiscountCode), currentHashCode, theDiscountCode);
                    }
                    {
                        String theStatus;
                        theStatus = this.getStatus();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
                    }
                    {
                        List<String> theListOfRecipientRPH;
                        theListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "listOfRecipientRPH", theListOfRecipientRPH), currentHashCode, theListOfRecipientRPH);
                    }
                    {
                        BigDecimal theAmount;
                        theAmount = this.getAmount();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
                    }
                    {
                        String theCurrencyCode;
                        theCurrencyCode = this.getCurrencyCode();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
                    }
                    {
                        BigInteger theDecimalPlaces;
                        theDecimalPlaces = this.getDecimalPlaces();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public Object clone() {
                    return copyTo(createNewInstance());
                }

                public Object copyTo(Object target) {
                    final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                    return copyTo(null, target, strategy);
                }

                public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                    final Object draftCopy = ((target == null)?createNewInstance():target);
                    if (draftCopy instanceof OrdersType.Order.Products.Product) {
                        final OrdersType.Order.Products.Product copy = ((OrdersType.Order.Products.Product) draftCopy);
                        if (this.productIssueDate!= null) {
                            String sourceProductIssueDate;
                            sourceProductIssueDate = this.getProductIssueDate();
                            String copyProductIssueDate = ((String) strategy.copy(LocatorUtils.property(locator, "productIssueDate", sourceProductIssueDate), sourceProductIssueDate));
                            copy.setProductIssueDate(copyProductIssueDate);
                        } else {
                            copy.productIssueDate = null;
                        }
                        if (this.productID!= null) {
                            String sourceProductID;
                            sourceProductID = this.getProductID();
                            String copyProductID = ((String) strategy.copy(LocatorUtils.property(locator, "productID", sourceProductID), sourceProductID));
                            copy.setProductID(copyProductID);
                        } else {
                            copy.productID = null;
                        }
                        if (this.productType!= null) {
                            String sourceProductType;
                            sourceProductType = this.getProductType();
                            String copyProductType = ((String) strategy.copy(LocatorUtils.property(locator, "productType", sourceProductType), sourceProductType));
                            copy.setProductType(copyProductType);
                        } else {
                            copy.productType = null;
                        }
                        if (this.productQuantity!= null) {
                            BigInteger sourceProductQuantity;
                            sourceProductQuantity = this.getProductQuantity();
                            BigInteger copyProductQuantity = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "productQuantity", sourceProductQuantity), sourceProductQuantity));
                            copy.setProductQuantity(copyProductQuantity);
                        } else {
                            copy.productQuantity = null;
                        }
                        if (this.productSerialNumber!= null) {
                            String sourceProductSerialNumber;
                            sourceProductSerialNumber = this.getProductSerialNumber();
                            String copyProductSerialNumber = ((String) strategy.copy(LocatorUtils.property(locator, "productSerialNumber", sourceProductSerialNumber), sourceProductSerialNumber));
                            copy.setProductSerialNumber(copyProductSerialNumber);
                        } else {
                            copy.productSerialNumber = null;
                        }
                        if (this.discountCode!= null) {
                            String sourceDiscountCode;
                            sourceDiscountCode = this.getDiscountCode();
                            String copyDiscountCode = ((String) strategy.copy(LocatorUtils.property(locator, "discountCode", sourceDiscountCode), sourceDiscountCode));
                            copy.setDiscountCode(copyDiscountCode);
                        } else {
                            copy.discountCode = null;
                        }
                        if (this.status!= null) {
                            String sourceStatus;
                            sourceStatus = this.getStatus();
                            String copyStatus = ((String) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                            copy.setStatus(copyStatus);
                        } else {
                            copy.status = null;
                        }
                        if ((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty())) {
                            List<String> sourceListOfRecipientRPH;
                            sourceListOfRecipientRPH = (((this.listOfRecipientRPH!= null)&&(!this.listOfRecipientRPH.isEmpty()))?this.getListOfRecipientRPH():null);
                            @SuppressWarnings("unchecked")
                            List<String> copyListOfRecipientRPH = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "listOfRecipientRPH", sourceListOfRecipientRPH), sourceListOfRecipientRPH));
                            copy.listOfRecipientRPH = null;
                            if (copyListOfRecipientRPH!= null) {
                                List<String> uniqueListOfRecipientRPHl = copy.getListOfRecipientRPH();
                                uniqueListOfRecipientRPHl.addAll(copyListOfRecipientRPH);
                            }
                        } else {
                            copy.listOfRecipientRPH = null;
                        }
                        if (this.amount!= null) {
                            BigDecimal sourceAmount;
                            sourceAmount = this.getAmount();
                            BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                            copy.setAmount(copyAmount);
                        } else {
                            copy.amount = null;
                        }
                        if (this.currencyCode!= null) {
                            String sourceCurrencyCode;
                            sourceCurrencyCode = this.getCurrencyCode();
                            String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                            copy.setCurrencyCode(copyCurrencyCode);
                        } else {
                            copy.currencyCode = null;
                        }
                        if (this.decimalPlaces!= null) {
                            BigInteger sourceDecimalPlaces;
                            sourceDecimalPlaces = this.getDecimalPlaces();
                            BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                            copy.setDecimalPlaces(copyDecimalPlaces);
                        } else {
                            copy.decimalPlaces = null;
                        }
                    }
                    return draftCopy;
                }

                public Object createNewInstance() {
                    return new OrdersType.Order.Products.Product();
                }

            }

        }

    }

}
