//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Identifies passenger(s) who will travel on the reservation.
 * 
 * <p>Java class for TravelerInfoType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TravelerInfoType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="AirTraveler" type="{http://www.opentravel.org/OTA/2003/05}AirTravelerType" maxOccurs="99" minOccurs="0"/&gt;
 *         &lt;element name="SpecialReqDetails" type="{http://www.opentravel.org/OTA/2003/05}SpecialReqDetailsType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TravelerInfoType", propOrder = {
    "airTraveler",
    "specialReqDetails"
})
public class TravelerInfoType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AirTraveler")
    protected List<AirTravelerType> airTraveler;
    @XmlElement(name = "SpecialReqDetails")
    protected List<SpecialReqDetailsType> specialReqDetails;

    /**
     * Gets the value of the airTraveler property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the airTraveler property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAirTraveler().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirTravelerType }
     * 
     * 
     */
    public List<AirTravelerType> getAirTraveler() {
        if (airTraveler == null) {
            airTraveler = new ArrayList<AirTravelerType>();
        }
        return this.airTraveler;
    }

    /**
     * Gets the value of the specialReqDetails property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specialReqDetails property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecialReqDetails().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpecialReqDetailsType }
     * 
     * 
     */
    public List<SpecialReqDetailsType> getSpecialReqDetails() {
        if (specialReqDetails == null) {
            specialReqDetails = new ArrayList<SpecialReqDetailsType>();
        }
        return this.specialReqDetails;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<AirTravelerType> theAirTraveler;
            theAirTraveler = (((this.airTraveler!= null)&&(!this.airTraveler.isEmpty()))?this.getAirTraveler():null);
            strategy.appendField(locator, this, "airTraveler", buffer, theAirTraveler);
        }
        {
            List<SpecialReqDetailsType> theSpecialReqDetails;
            theSpecialReqDetails = (((this.specialReqDetails!= null)&&(!this.specialReqDetails.isEmpty()))?this.getSpecialReqDetails():null);
            strategy.appendField(locator, this, "specialReqDetails", buffer, theSpecialReqDetails);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TravelerInfoType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TravelerInfoType that = ((TravelerInfoType) object);
        {
            List<AirTravelerType> lhsAirTraveler;
            lhsAirTraveler = (((this.airTraveler!= null)&&(!this.airTraveler.isEmpty()))?this.getAirTraveler():null);
            List<AirTravelerType> rhsAirTraveler;
            rhsAirTraveler = (((that.airTraveler!= null)&&(!that.airTraveler.isEmpty()))?that.getAirTraveler():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airTraveler", lhsAirTraveler), LocatorUtils.property(thatLocator, "airTraveler", rhsAirTraveler), lhsAirTraveler, rhsAirTraveler)) {
                return false;
            }
        }
        {
            List<SpecialReqDetailsType> lhsSpecialReqDetails;
            lhsSpecialReqDetails = (((this.specialReqDetails!= null)&&(!this.specialReqDetails.isEmpty()))?this.getSpecialReqDetails():null);
            List<SpecialReqDetailsType> rhsSpecialReqDetails;
            rhsSpecialReqDetails = (((that.specialReqDetails!= null)&&(!that.specialReqDetails.isEmpty()))?that.getSpecialReqDetails():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialReqDetails", lhsSpecialReqDetails), LocatorUtils.property(thatLocator, "specialReqDetails", rhsSpecialReqDetails), lhsSpecialReqDetails, rhsSpecialReqDetails)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<AirTravelerType> theAirTraveler;
            theAirTraveler = (((this.airTraveler!= null)&&(!this.airTraveler.isEmpty()))?this.getAirTraveler():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airTraveler", theAirTraveler), currentHashCode, theAirTraveler);
        }
        {
            List<SpecialReqDetailsType> theSpecialReqDetails;
            theSpecialReqDetails = (((this.specialReqDetails!= null)&&(!this.specialReqDetails.isEmpty()))?this.getSpecialReqDetails():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialReqDetails", theSpecialReqDetails), currentHashCode, theSpecialReqDetails);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TravelerInfoType) {
            final TravelerInfoType copy = ((TravelerInfoType) draftCopy);
            if ((this.airTraveler!= null)&&(!this.airTraveler.isEmpty())) {
                List<AirTravelerType> sourceAirTraveler;
                sourceAirTraveler = (((this.airTraveler!= null)&&(!this.airTraveler.isEmpty()))?this.getAirTraveler():null);
                @SuppressWarnings("unchecked")
                List<AirTravelerType> copyAirTraveler = ((List<AirTravelerType> ) strategy.copy(LocatorUtils.property(locator, "airTraveler", sourceAirTraveler), sourceAirTraveler));
                copy.airTraveler = null;
                if (copyAirTraveler!= null) {
                    List<AirTravelerType> uniqueAirTravelerl = copy.getAirTraveler();
                    uniqueAirTravelerl.addAll(copyAirTraveler);
                }
            } else {
                copy.airTraveler = null;
            }
            if ((this.specialReqDetails!= null)&&(!this.specialReqDetails.isEmpty())) {
                List<SpecialReqDetailsType> sourceSpecialReqDetails;
                sourceSpecialReqDetails = (((this.specialReqDetails!= null)&&(!this.specialReqDetails.isEmpty()))?this.getSpecialReqDetails():null);
                @SuppressWarnings("unchecked")
                List<SpecialReqDetailsType> copySpecialReqDetails = ((List<SpecialReqDetailsType> ) strategy.copy(LocatorUtils.property(locator, "specialReqDetails", sourceSpecialReqDetails), sourceSpecialReqDetails));
                copy.specialReqDetails = null;
                if (copySpecialReqDetails!= null) {
                    List<SpecialReqDetailsType> uniqueSpecialReqDetailsl = copy.getSpecialReqDetails();
                    uniqueSpecialReqDetailsl.addAll(copySpecialReqDetails);
                }
            } else {
                copy.specialReqDetails = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TravelerInfoType();
    }

}
