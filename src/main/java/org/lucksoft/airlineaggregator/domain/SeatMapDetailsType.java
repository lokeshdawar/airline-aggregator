//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Details of a seat map for a particular aircraft
 * 
 * <p>Java class for SeatMapDetailsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SeatMapDetailsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="CabinClass" type="{http://www.opentravel.org/OTA/2003/05}CabinClassType" maxOccurs="5"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="TravelerRefNumberRPHs" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SeatMapDetailsType", propOrder = {
    "cabinClass"
})
public class SeatMapDetailsType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "CabinClass", required = true)
    protected List<CabinClassType> cabinClass;
    @XmlAttribute(name = "TravelerRefNumberRPHs")
    protected List<String> travelerRefNumberRPHs;

    /**
     * Gets the value of the cabinClass property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cabinClass property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCabinClass().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CabinClassType }
     * 
     * 
     */
    public List<CabinClassType> getCabinClass() {
        if (cabinClass == null) {
            cabinClass = new ArrayList<CabinClassType>();
        }
        return this.cabinClass;
    }

    /**
     * Gets the value of the travelerRefNumberRPHs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the travelerRefNumberRPHs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTravelerRefNumberRPHs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getTravelerRefNumberRPHs() {
        if (travelerRefNumberRPHs == null) {
            travelerRefNumberRPHs = new ArrayList<String>();
        }
        return this.travelerRefNumberRPHs;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<CabinClassType> theCabinClass;
            theCabinClass = (((this.cabinClass!= null)&&(!this.cabinClass.isEmpty()))?this.getCabinClass():null);
            strategy.appendField(locator, this, "cabinClass", buffer, theCabinClass);
        }
        {
            List<String> theTravelerRefNumberRPHs;
            theTravelerRefNumberRPHs = (((this.travelerRefNumberRPHs!= null)&&(!this.travelerRefNumberRPHs.isEmpty()))?this.getTravelerRefNumberRPHs():null);
            strategy.appendField(locator, this, "travelerRefNumberRPHs", buffer, theTravelerRefNumberRPHs);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SeatMapDetailsType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SeatMapDetailsType that = ((SeatMapDetailsType) object);
        {
            List<CabinClassType> lhsCabinClass;
            lhsCabinClass = (((this.cabinClass!= null)&&(!this.cabinClass.isEmpty()))?this.getCabinClass():null);
            List<CabinClassType> rhsCabinClass;
            rhsCabinClass = (((that.cabinClass!= null)&&(!that.cabinClass.isEmpty()))?that.getCabinClass():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cabinClass", lhsCabinClass), LocatorUtils.property(thatLocator, "cabinClass", rhsCabinClass), lhsCabinClass, rhsCabinClass)) {
                return false;
            }
        }
        {
            List<String> lhsTravelerRefNumberRPHs;
            lhsTravelerRefNumberRPHs = (((this.travelerRefNumberRPHs!= null)&&(!this.travelerRefNumberRPHs.isEmpty()))?this.getTravelerRefNumberRPHs():null);
            List<String> rhsTravelerRefNumberRPHs;
            rhsTravelerRefNumberRPHs = (((that.travelerRefNumberRPHs!= null)&&(!that.travelerRefNumberRPHs.isEmpty()))?that.getTravelerRefNumberRPHs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerRefNumberRPHs", lhsTravelerRefNumberRPHs), LocatorUtils.property(thatLocator, "travelerRefNumberRPHs", rhsTravelerRefNumberRPHs), lhsTravelerRefNumberRPHs, rhsTravelerRefNumberRPHs)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<CabinClassType> theCabinClass;
            theCabinClass = (((this.cabinClass!= null)&&(!this.cabinClass.isEmpty()))?this.getCabinClass():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cabinClass", theCabinClass), currentHashCode, theCabinClass);
        }
        {
            List<String> theTravelerRefNumberRPHs;
            theTravelerRefNumberRPHs = (((this.travelerRefNumberRPHs!= null)&&(!this.travelerRefNumberRPHs.isEmpty()))?this.getTravelerRefNumberRPHs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerRefNumberRPHs", theTravelerRefNumberRPHs), currentHashCode, theTravelerRefNumberRPHs);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SeatMapDetailsType) {
            final SeatMapDetailsType copy = ((SeatMapDetailsType) draftCopy);
            if ((this.cabinClass!= null)&&(!this.cabinClass.isEmpty())) {
                List<CabinClassType> sourceCabinClass;
                sourceCabinClass = (((this.cabinClass!= null)&&(!this.cabinClass.isEmpty()))?this.getCabinClass():null);
                @SuppressWarnings("unchecked")
                List<CabinClassType> copyCabinClass = ((List<CabinClassType> ) strategy.copy(LocatorUtils.property(locator, "cabinClass", sourceCabinClass), sourceCabinClass));
                copy.cabinClass = null;
                if (copyCabinClass!= null) {
                    List<CabinClassType> uniqueCabinClassl = copy.getCabinClass();
                    uniqueCabinClassl.addAll(copyCabinClass);
                }
            } else {
                copy.cabinClass = null;
            }
            if ((this.travelerRefNumberRPHs!= null)&&(!this.travelerRefNumberRPHs.isEmpty())) {
                List<String> sourceTravelerRefNumberRPHs;
                sourceTravelerRefNumberRPHs = (((this.travelerRefNumberRPHs!= null)&&(!this.travelerRefNumberRPHs.isEmpty()))?this.getTravelerRefNumberRPHs():null);
                @SuppressWarnings("unchecked")
                List<String> copyTravelerRefNumberRPHs = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "travelerRefNumberRPHs", sourceTravelerRefNumberRPHs), sourceTravelerRefNumberRPHs));
                copy.travelerRefNumberRPHs = null;
                if (copyTravelerRefNumberRPHs!= null) {
                    List<String> uniqueTravelerRefNumberRPHsl = copy.getTravelerRefNumberRPHs();
                    uniqueTravelerRefNumberRPHsl.addAll(copyTravelerRefNumberRPHs);
                }
            } else {
                copy.travelerRefNumberRPHs = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SeatMapDetailsType();
    }

}
