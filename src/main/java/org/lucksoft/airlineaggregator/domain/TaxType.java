//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Applicable tax element.  This element allows for both percentages and flat amounts. If one field is used, the other should be zero since logically, taxes should be calculated in only one of the two ways.
 * 
 * <p>Java class for TaxType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TaxType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="TaxDescription" type="{http://www.opentravel.org/OTA/2003/05}ParagraphType" maxOccurs="5" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}EffectiveExpireOptionalDateGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}ChargeUnitGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FeeTaxGroup"/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TaxType", propOrder = {
    "taxDescription"
})
public class TaxType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "TaxDescription")
    protected List<ParagraphType> taxDescription;
    @XmlAttribute(name = "EffectiveDate")
    @XmlSchemaType(name = "date")
    protected XMLGregorianCalendar effectiveDate;
    @XmlAttribute(name = "ExpireDate")
    @XmlSchemaType(name = "date")
    protected XMLGregorianCalendar expireDate;
    @XmlAttribute(name = "ChargeUnit")
    protected String chargeUnit;
    @XmlAttribute(name = "ChargeFrequency")
    protected String chargeFrequency;
    @XmlAttribute(name = "ChargeUnitExempt")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger chargeUnitExempt;
    @XmlAttribute(name = "ChargeFrequencyExempt")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger chargeFrequencyExempt;
    @XmlAttribute(name = "MaxChargeUnitApplies")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger maxChargeUnitApplies;
    @XmlAttribute(name = "MaxChargeFrequencyApplies")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger maxChargeFrequencyApplies;
    @XmlAttribute(name = "Type")
    protected AmountDeterminationType type;
    @XmlAttribute(name = "Code")
    protected String code;
    @XmlAttribute(name = "Percent")
    protected BigDecimal percent;
    @XmlAttribute(name = "Amount")
    protected BigDecimal amount;
    @XmlAttribute(name = "CurrencyCode")
    protected String currencyCode;
    @XmlAttribute(name = "DecimalPlaces")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger decimalPlaces;

    /**
     * Gets the value of the taxDescription property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the taxDescription property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTaxDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ParagraphType }
     * 
     * 
     */
    public List<ParagraphType> getTaxDescription() {
        if (taxDescription == null) {
            taxDescription = new ArrayList<ParagraphType>();
        }
        return this.taxDescription;
    }

    /**
     * Gets the value of the effectiveDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getEffectiveDate() {
        return effectiveDate;
    }

    /**
     * Sets the value of the effectiveDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEffectiveDate(XMLGregorianCalendar value) {
        this.effectiveDate = value;
    }

    /**
     * Gets the value of the expireDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getExpireDate() {
        return expireDate;
    }

    /**
     * Sets the value of the expireDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setExpireDate(XMLGregorianCalendar value) {
        this.expireDate = value;
    }

    /**
     * Gets the value of the chargeUnit property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getChargeUnit() {
        return chargeUnit;
    }

    /**
     * Sets the value of the chargeUnit property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setChargeUnit(String value) {
        this.chargeUnit = value;
    }

    /**
     * Gets the value of the chargeFrequency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getChargeFrequency() {
        return chargeFrequency;
    }

    /**
     * Sets the value of the chargeFrequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setChargeFrequency(String value) {
        this.chargeFrequency = value;
    }

    /**
     * Gets the value of the chargeUnitExempt property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getChargeUnitExempt() {
        return chargeUnitExempt;
    }

    /**
     * Sets the value of the chargeUnitExempt property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setChargeUnitExempt(BigInteger value) {
        this.chargeUnitExempt = value;
    }

    /**
     * Gets the value of the chargeFrequencyExempt property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getChargeFrequencyExempt() {
        return chargeFrequencyExempt;
    }

    /**
     * Sets the value of the chargeFrequencyExempt property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setChargeFrequencyExempt(BigInteger value) {
        this.chargeFrequencyExempt = value;
    }

    /**
     * Gets the value of the maxChargeUnitApplies property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxChargeUnitApplies() {
        return maxChargeUnitApplies;
    }

    /**
     * Sets the value of the maxChargeUnitApplies property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxChargeUnitApplies(BigInteger value) {
        this.maxChargeUnitApplies = value;
    }

    /**
     * Gets the value of the maxChargeFrequencyApplies property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxChargeFrequencyApplies() {
        return maxChargeFrequencyApplies;
    }

    /**
     * Sets the value of the maxChargeFrequencyApplies property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxChargeFrequencyApplies(BigInteger value) {
        this.maxChargeFrequencyApplies = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link AmountDeterminationType }
     *     
     */
    public AmountDeterminationType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link AmountDeterminationType }
     *     
     */
    public void setType(AmountDeterminationType value) {
        this.type = value;
    }

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCode(String value) {
        this.code = value;
    }

    /**
     * Gets the value of the percent property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getPercent() {
        return percent;
    }

    /**
     * Sets the value of the percent property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setPercent(BigDecimal value) {
        this.percent = value;
    }

    /**
     * Gets the value of the amount property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getAmount() {
        return amount;
    }

    /**
     * Sets the value of the amount property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setAmount(BigDecimal value) {
        this.amount = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the decimalPlaces property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDecimalPlaces() {
        return decimalPlaces;
    }

    /**
     * Sets the value of the decimalPlaces property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDecimalPlaces(BigInteger value) {
        this.decimalPlaces = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<ParagraphType> theTaxDescription;
            theTaxDescription = (((this.taxDescription!= null)&&(!this.taxDescription.isEmpty()))?this.getTaxDescription():null);
            strategy.appendField(locator, this, "taxDescription", buffer, theTaxDescription);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExpireDate;
            theExpireDate = this.getExpireDate();
            strategy.appendField(locator, this, "expireDate", buffer, theExpireDate);
        }
        {
            String theChargeUnit;
            theChargeUnit = this.getChargeUnit();
            strategy.appendField(locator, this, "chargeUnit", buffer, theChargeUnit);
        }
        {
            String theChargeFrequency;
            theChargeFrequency = this.getChargeFrequency();
            strategy.appendField(locator, this, "chargeFrequency", buffer, theChargeFrequency);
        }
        {
            BigInteger theChargeUnitExempt;
            theChargeUnitExempt = this.getChargeUnitExempt();
            strategy.appendField(locator, this, "chargeUnitExempt", buffer, theChargeUnitExempt);
        }
        {
            BigInteger theChargeFrequencyExempt;
            theChargeFrequencyExempt = this.getChargeFrequencyExempt();
            strategy.appendField(locator, this, "chargeFrequencyExempt", buffer, theChargeFrequencyExempt);
        }
        {
            BigInteger theMaxChargeUnitApplies;
            theMaxChargeUnitApplies = this.getMaxChargeUnitApplies();
            strategy.appendField(locator, this, "maxChargeUnitApplies", buffer, theMaxChargeUnitApplies);
        }
        {
            BigInteger theMaxChargeFrequencyApplies;
            theMaxChargeFrequencyApplies = this.getMaxChargeFrequencyApplies();
            strategy.appendField(locator, this, "maxChargeFrequencyApplies", buffer, theMaxChargeFrequencyApplies);
        }
        {
            AmountDeterminationType theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            String theCode;
            theCode = this.getCode();
            strategy.appendField(locator, this, "code", buffer, theCode);
        }
        {
            BigDecimal thePercent;
            thePercent = this.getPercent();
            strategy.appendField(locator, this, "percent", buffer, thePercent);
        }
        {
            BigDecimal theAmount;
            theAmount = this.getAmount();
            strategy.appendField(locator, this, "amount", buffer, theAmount);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TaxType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TaxType that = ((TaxType) object);
        {
            List<ParagraphType> lhsTaxDescription;
            lhsTaxDescription = (((this.taxDescription!= null)&&(!this.taxDescription.isEmpty()))?this.getTaxDescription():null);
            List<ParagraphType> rhsTaxDescription;
            rhsTaxDescription = (((that.taxDescription!= null)&&(!that.taxDescription.isEmpty()))?that.getTaxDescription():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "taxDescription", lhsTaxDescription), LocatorUtils.property(thatLocator, "taxDescription", rhsTaxDescription), lhsTaxDescription, rhsTaxDescription)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEffectiveDate;
            lhsEffectiveDate = this.getEffectiveDate();
            XMLGregorianCalendar rhsEffectiveDate;
            rhsEffectiveDate = that.getEffectiveDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsExpireDate;
            lhsExpireDate = this.getExpireDate();
            XMLGregorianCalendar rhsExpireDate;
            rhsExpireDate = that.getExpireDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expireDate", lhsExpireDate), LocatorUtils.property(thatLocator, "expireDate", rhsExpireDate), lhsExpireDate, rhsExpireDate)) {
                return false;
            }
        }
        {
            String lhsChargeUnit;
            lhsChargeUnit = this.getChargeUnit();
            String rhsChargeUnit;
            rhsChargeUnit = that.getChargeUnit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "chargeUnit", lhsChargeUnit), LocatorUtils.property(thatLocator, "chargeUnit", rhsChargeUnit), lhsChargeUnit, rhsChargeUnit)) {
                return false;
            }
        }
        {
            String lhsChargeFrequency;
            lhsChargeFrequency = this.getChargeFrequency();
            String rhsChargeFrequency;
            rhsChargeFrequency = that.getChargeFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "chargeFrequency", lhsChargeFrequency), LocatorUtils.property(thatLocator, "chargeFrequency", rhsChargeFrequency), lhsChargeFrequency, rhsChargeFrequency)) {
                return false;
            }
        }
        {
            BigInteger lhsChargeUnitExempt;
            lhsChargeUnitExempt = this.getChargeUnitExempt();
            BigInteger rhsChargeUnitExempt;
            rhsChargeUnitExempt = that.getChargeUnitExempt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "chargeUnitExempt", lhsChargeUnitExempt), LocatorUtils.property(thatLocator, "chargeUnitExempt", rhsChargeUnitExempt), lhsChargeUnitExempt, rhsChargeUnitExempt)) {
                return false;
            }
        }
        {
            BigInteger lhsChargeFrequencyExempt;
            lhsChargeFrequencyExempt = this.getChargeFrequencyExempt();
            BigInteger rhsChargeFrequencyExempt;
            rhsChargeFrequencyExempt = that.getChargeFrequencyExempt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "chargeFrequencyExempt", lhsChargeFrequencyExempt), LocatorUtils.property(thatLocator, "chargeFrequencyExempt", rhsChargeFrequencyExempt), lhsChargeFrequencyExempt, rhsChargeFrequencyExempt)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxChargeUnitApplies;
            lhsMaxChargeUnitApplies = this.getMaxChargeUnitApplies();
            BigInteger rhsMaxChargeUnitApplies;
            rhsMaxChargeUnitApplies = that.getMaxChargeUnitApplies();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxChargeUnitApplies", lhsMaxChargeUnitApplies), LocatorUtils.property(thatLocator, "maxChargeUnitApplies", rhsMaxChargeUnitApplies), lhsMaxChargeUnitApplies, rhsMaxChargeUnitApplies)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxChargeFrequencyApplies;
            lhsMaxChargeFrequencyApplies = this.getMaxChargeFrequencyApplies();
            BigInteger rhsMaxChargeFrequencyApplies;
            rhsMaxChargeFrequencyApplies = that.getMaxChargeFrequencyApplies();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxChargeFrequencyApplies", lhsMaxChargeFrequencyApplies), LocatorUtils.property(thatLocator, "maxChargeFrequencyApplies", rhsMaxChargeFrequencyApplies), lhsMaxChargeFrequencyApplies, rhsMaxChargeFrequencyApplies)) {
                return false;
            }
        }
        {
            AmountDeterminationType lhsType;
            lhsType = this.getType();
            AmountDeterminationType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            String lhsCode;
            lhsCode = this.getCode();
            String rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            BigDecimal lhsPercent;
            lhsPercent = this.getPercent();
            BigDecimal rhsPercent;
            rhsPercent = that.getPercent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "percent", lhsPercent), LocatorUtils.property(thatLocator, "percent", rhsPercent), lhsPercent, rhsPercent)) {
                return false;
            }
        }
        {
            BigDecimal lhsAmount;
            lhsAmount = this.getAmount();
            BigDecimal rhsAmount;
            rhsAmount = that.getAmount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                return false;
            }
        }
        {
            String lhsCurrencyCode;
            lhsCurrencyCode = this.getCurrencyCode();
            String rhsCurrencyCode;
            rhsCurrencyCode = that.getCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                return false;
            }
        }
        {
            BigInteger lhsDecimalPlaces;
            lhsDecimalPlaces = this.getDecimalPlaces();
            BigInteger rhsDecimalPlaces;
            rhsDecimalPlaces = that.getDecimalPlaces();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<ParagraphType> theTaxDescription;
            theTaxDescription = (((this.taxDescription!= null)&&(!this.taxDescription.isEmpty()))?this.getTaxDescription():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxDescription", theTaxDescription), currentHashCode, theTaxDescription);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExpireDate;
            theExpireDate = this.getExpireDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expireDate", theExpireDate), currentHashCode, theExpireDate);
        }
        {
            String theChargeUnit;
            theChargeUnit = this.getChargeUnit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chargeUnit", theChargeUnit), currentHashCode, theChargeUnit);
        }
        {
            String theChargeFrequency;
            theChargeFrequency = this.getChargeFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chargeFrequency", theChargeFrequency), currentHashCode, theChargeFrequency);
        }
        {
            BigInteger theChargeUnitExempt;
            theChargeUnitExempt = this.getChargeUnitExempt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chargeUnitExempt", theChargeUnitExempt), currentHashCode, theChargeUnitExempt);
        }
        {
            BigInteger theChargeFrequencyExempt;
            theChargeFrequencyExempt = this.getChargeFrequencyExempt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chargeFrequencyExempt", theChargeFrequencyExempt), currentHashCode, theChargeFrequencyExempt);
        }
        {
            BigInteger theMaxChargeUnitApplies;
            theMaxChargeUnitApplies = this.getMaxChargeUnitApplies();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxChargeUnitApplies", theMaxChargeUnitApplies), currentHashCode, theMaxChargeUnitApplies);
        }
        {
            BigInteger theMaxChargeFrequencyApplies;
            theMaxChargeFrequencyApplies = this.getMaxChargeFrequencyApplies();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxChargeFrequencyApplies", theMaxChargeFrequencyApplies), currentHashCode, theMaxChargeFrequencyApplies);
        }
        {
            AmountDeterminationType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            String theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            BigDecimal thePercent;
            thePercent = this.getPercent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "percent", thePercent), currentHashCode, thePercent);
        }
        {
            BigDecimal theAmount;
            theAmount = this.getAmount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TaxType) {
            final TaxType copy = ((TaxType) draftCopy);
            if ((this.taxDescription!= null)&&(!this.taxDescription.isEmpty())) {
                List<ParagraphType> sourceTaxDescription;
                sourceTaxDescription = (((this.taxDescription!= null)&&(!this.taxDescription.isEmpty()))?this.getTaxDescription():null);
                @SuppressWarnings("unchecked")
                List<ParagraphType> copyTaxDescription = ((List<ParagraphType> ) strategy.copy(LocatorUtils.property(locator, "taxDescription", sourceTaxDescription), sourceTaxDescription));
                copy.taxDescription = null;
                if (copyTaxDescription!= null) {
                    List<ParagraphType> uniqueTaxDescriptionl = copy.getTaxDescription();
                    uniqueTaxDescriptionl.addAll(copyTaxDescription);
                }
            } else {
                copy.taxDescription = null;
            }
            if (this.effectiveDate!= null) {
                XMLGregorianCalendar sourceEffectiveDate;
                sourceEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                copy.setEffectiveDate(copyEffectiveDate);
            } else {
                copy.effectiveDate = null;
            }
            if (this.expireDate!= null) {
                XMLGregorianCalendar sourceExpireDate;
                sourceExpireDate = this.getExpireDate();
                XMLGregorianCalendar copyExpireDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "expireDate", sourceExpireDate), sourceExpireDate));
                copy.setExpireDate(copyExpireDate);
            } else {
                copy.expireDate = null;
            }
            if (this.chargeUnit!= null) {
                String sourceChargeUnit;
                sourceChargeUnit = this.getChargeUnit();
                String copyChargeUnit = ((String) strategy.copy(LocatorUtils.property(locator, "chargeUnit", sourceChargeUnit), sourceChargeUnit));
                copy.setChargeUnit(copyChargeUnit);
            } else {
                copy.chargeUnit = null;
            }
            if (this.chargeFrequency!= null) {
                String sourceChargeFrequency;
                sourceChargeFrequency = this.getChargeFrequency();
                String copyChargeFrequency = ((String) strategy.copy(LocatorUtils.property(locator, "chargeFrequency", sourceChargeFrequency), sourceChargeFrequency));
                copy.setChargeFrequency(copyChargeFrequency);
            } else {
                copy.chargeFrequency = null;
            }
            if (this.chargeUnitExempt!= null) {
                BigInteger sourceChargeUnitExempt;
                sourceChargeUnitExempt = this.getChargeUnitExempt();
                BigInteger copyChargeUnitExempt = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "chargeUnitExempt", sourceChargeUnitExempt), sourceChargeUnitExempt));
                copy.setChargeUnitExempt(copyChargeUnitExempt);
            } else {
                copy.chargeUnitExempt = null;
            }
            if (this.chargeFrequencyExempt!= null) {
                BigInteger sourceChargeFrequencyExempt;
                sourceChargeFrequencyExempt = this.getChargeFrequencyExempt();
                BigInteger copyChargeFrequencyExempt = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "chargeFrequencyExempt", sourceChargeFrequencyExempt), sourceChargeFrequencyExempt));
                copy.setChargeFrequencyExempt(copyChargeFrequencyExempt);
            } else {
                copy.chargeFrequencyExempt = null;
            }
            if (this.maxChargeUnitApplies!= null) {
                BigInteger sourceMaxChargeUnitApplies;
                sourceMaxChargeUnitApplies = this.getMaxChargeUnitApplies();
                BigInteger copyMaxChargeUnitApplies = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxChargeUnitApplies", sourceMaxChargeUnitApplies), sourceMaxChargeUnitApplies));
                copy.setMaxChargeUnitApplies(copyMaxChargeUnitApplies);
            } else {
                copy.maxChargeUnitApplies = null;
            }
            if (this.maxChargeFrequencyApplies!= null) {
                BigInteger sourceMaxChargeFrequencyApplies;
                sourceMaxChargeFrequencyApplies = this.getMaxChargeFrequencyApplies();
                BigInteger copyMaxChargeFrequencyApplies = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxChargeFrequencyApplies", sourceMaxChargeFrequencyApplies), sourceMaxChargeFrequencyApplies));
                copy.setMaxChargeFrequencyApplies(copyMaxChargeFrequencyApplies);
            } else {
                copy.maxChargeFrequencyApplies = null;
            }
            if (this.type!= null) {
                AmountDeterminationType sourceType;
                sourceType = this.getType();
                AmountDeterminationType copyType = ((AmountDeterminationType) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
            if (this.code!= null) {
                String sourceCode;
                sourceCode = this.getCode();
                String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                copy.setCode(copyCode);
            } else {
                copy.code = null;
            }
            if (this.percent!= null) {
                BigDecimal sourcePercent;
                sourcePercent = this.getPercent();
                BigDecimal copyPercent = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "percent", sourcePercent), sourcePercent));
                copy.setPercent(copyPercent);
            } else {
                copy.percent = null;
            }
            if (this.amount!= null) {
                BigDecimal sourceAmount;
                sourceAmount = this.getAmount();
                BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                copy.setAmount(copyAmount);
            } else {
                copy.amount = null;
            }
            if (this.currencyCode!= null) {
                String sourceCurrencyCode;
                sourceCurrencyCode = this.getCurrencyCode();
                String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                copy.setCurrencyCode(copyCurrencyCode);
            } else {
                copy.currencyCode = null;
            }
            if (this.decimalPlaces!= null) {
                BigInteger sourceDecimalPlaces;
                sourceDecimalPlaces = this.getDecimalPlaces();
                BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                copy.setDecimalPlaces(copyDecimalPlaces);
            } else {
                copy.decimalPlaces = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TaxType();
    }

}
