//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about one or more recipients.
 * 
 * <p>Java class for RecipientInfosType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RecipientInfosType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="RecipientInfo" maxOccurs="99"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}ContactPersonType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="ReservationID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type" maxOccurs="2" minOccurs="0"/&gt;
 *                   &lt;element name="ShippingInfo" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                           &lt;attribute name="ShippingType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                           &lt;attribute name="ShippingCarrier" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="Comments" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element name="Comment" type="{http://www.opentravel.org/OTA/2003/05}ParagraphType" maxOccurs="99"/&gt;
 *                           &lt;/sequence&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RecipientInfosType", propOrder = {
    "recipientInfo"
})
public class RecipientInfosType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "RecipientInfo", required = true)
    protected List<RecipientInfosType.RecipientInfo> recipientInfo;

    /**
     * Gets the value of the recipientInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recipientInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecipientInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RecipientInfosType.RecipientInfo }
     * 
     * 
     */
    public List<RecipientInfosType.RecipientInfo> getRecipientInfo() {
        if (recipientInfo == null) {
            recipientInfo = new ArrayList<RecipientInfosType.RecipientInfo>();
        }
        return this.recipientInfo;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<RecipientInfosType.RecipientInfo> theRecipientInfo;
            theRecipientInfo = (((this.recipientInfo!= null)&&(!this.recipientInfo.isEmpty()))?this.getRecipientInfo():null);
            strategy.appendField(locator, this, "recipientInfo", buffer, theRecipientInfo);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RecipientInfosType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RecipientInfosType that = ((RecipientInfosType) object);
        {
            List<RecipientInfosType.RecipientInfo> lhsRecipientInfo;
            lhsRecipientInfo = (((this.recipientInfo!= null)&&(!this.recipientInfo.isEmpty()))?this.getRecipientInfo():null);
            List<RecipientInfosType.RecipientInfo> rhsRecipientInfo;
            rhsRecipientInfo = (((that.recipientInfo!= null)&&(!that.recipientInfo.isEmpty()))?that.getRecipientInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recipientInfo", lhsRecipientInfo), LocatorUtils.property(thatLocator, "recipientInfo", rhsRecipientInfo), lhsRecipientInfo, rhsRecipientInfo)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<RecipientInfosType.RecipientInfo> theRecipientInfo;
            theRecipientInfo = (((this.recipientInfo!= null)&&(!this.recipientInfo.isEmpty()))?this.getRecipientInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recipientInfo", theRecipientInfo), currentHashCode, theRecipientInfo);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof RecipientInfosType) {
            final RecipientInfosType copy = ((RecipientInfosType) draftCopy);
            if ((this.recipientInfo!= null)&&(!this.recipientInfo.isEmpty())) {
                List<RecipientInfosType.RecipientInfo> sourceRecipientInfo;
                sourceRecipientInfo = (((this.recipientInfo!= null)&&(!this.recipientInfo.isEmpty()))?this.getRecipientInfo():null);
                @SuppressWarnings("unchecked")
                List<RecipientInfosType.RecipientInfo> copyRecipientInfo = ((List<RecipientInfosType.RecipientInfo> ) strategy.copy(LocatorUtils.property(locator, "recipientInfo", sourceRecipientInfo), sourceRecipientInfo));
                copy.recipientInfo = null;
                if (copyRecipientInfo!= null) {
                    List<RecipientInfosType.RecipientInfo> uniqueRecipientInfol = copy.getRecipientInfo();
                    uniqueRecipientInfol.addAll(copyRecipientInfo);
                }
            } else {
                copy.recipientInfo = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RecipientInfosType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}ContactPersonType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="ReservationID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type" maxOccurs="2" minOccurs="0"/&gt;
     *         &lt;element name="ShippingInfo" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *                 &lt;attribute name="ShippingType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *                 &lt;attribute name="ShippingCarrier" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="Comments" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element name="Comment" type="{http://www.opentravel.org/OTA/2003/05}ParagraphType" maxOccurs="99"/&gt;
     *                 &lt;/sequence&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "reservationID",
        "shippingInfo",
        "comments"
    })
    public static class RecipientInfo
        extends ContactPersonType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "ReservationID")
        protected List<UniqueIDType> reservationID;
        @XmlElement(name = "ShippingInfo")
        protected RecipientInfosType.RecipientInfo.ShippingInfo shippingInfo;
        @XmlElement(name = "Comments")
        protected RecipientInfosType.RecipientInfo.Comments comments;

        /**
         * Gets the value of the reservationID property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the reservationID property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getReservationID().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link UniqueIDType }
         * 
         * 
         */
        public List<UniqueIDType> getReservationID() {
            if (reservationID == null) {
                reservationID = new ArrayList<UniqueIDType>();
            }
            return this.reservationID;
        }

        /**
         * Gets the value of the shippingInfo property.
         * 
         * @return
         *     possible object is
         *     {@link RecipientInfosType.RecipientInfo.ShippingInfo }
         *     
         */
        public RecipientInfosType.RecipientInfo.ShippingInfo getShippingInfo() {
            return shippingInfo;
        }

        /**
         * Sets the value of the shippingInfo property.
         * 
         * @param value
         *     allowed object is
         *     {@link RecipientInfosType.RecipientInfo.ShippingInfo }
         *     
         */
        public void setShippingInfo(RecipientInfosType.RecipientInfo.ShippingInfo value) {
            this.shippingInfo = value;
        }

        /**
         * Gets the value of the comments property.
         * 
         * @return
         *     possible object is
         *     {@link RecipientInfosType.RecipientInfo.Comments }
         *     
         */
        public RecipientInfosType.RecipientInfo.Comments getComments() {
            return comments;
        }

        /**
         * Sets the value of the comments property.
         * 
         * @param value
         *     allowed object is
         *     {@link RecipientInfosType.RecipientInfo.Comments }
         *     
         */
        public void setComments(RecipientInfosType.RecipientInfo.Comments value) {
            this.comments = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                List<UniqueIDType> theReservationID;
                theReservationID = (((this.reservationID!= null)&&(!this.reservationID.isEmpty()))?this.getReservationID():null);
                strategy.appendField(locator, this, "reservationID", buffer, theReservationID);
            }
            {
                RecipientInfosType.RecipientInfo.ShippingInfo theShippingInfo;
                theShippingInfo = this.getShippingInfo();
                strategy.appendField(locator, this, "shippingInfo", buffer, theShippingInfo);
            }
            {
                RecipientInfosType.RecipientInfo.Comments theComments;
                theComments = this.getComments();
                strategy.appendField(locator, this, "comments", buffer, theComments);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RecipientInfosType.RecipientInfo)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final RecipientInfosType.RecipientInfo that = ((RecipientInfosType.RecipientInfo) object);
            {
                List<UniqueIDType> lhsReservationID;
                lhsReservationID = (((this.reservationID!= null)&&(!this.reservationID.isEmpty()))?this.getReservationID():null);
                List<UniqueIDType> rhsReservationID;
                rhsReservationID = (((that.reservationID!= null)&&(!that.reservationID.isEmpty()))?that.getReservationID():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "reservationID", lhsReservationID), LocatorUtils.property(thatLocator, "reservationID", rhsReservationID), lhsReservationID, rhsReservationID)) {
                    return false;
                }
            }
            {
                RecipientInfosType.RecipientInfo.ShippingInfo lhsShippingInfo;
                lhsShippingInfo = this.getShippingInfo();
                RecipientInfosType.RecipientInfo.ShippingInfo rhsShippingInfo;
                rhsShippingInfo = that.getShippingInfo();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingInfo", lhsShippingInfo), LocatorUtils.property(thatLocator, "shippingInfo", rhsShippingInfo), lhsShippingInfo, rhsShippingInfo)) {
                    return false;
                }
            }
            {
                RecipientInfosType.RecipientInfo.Comments lhsComments;
                lhsComments = this.getComments();
                RecipientInfosType.RecipientInfo.Comments rhsComments;
                rhsComments = that.getComments();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "comments", lhsComments), LocatorUtils.property(thatLocator, "comments", rhsComments), lhsComments, rhsComments)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                List<UniqueIDType> theReservationID;
                theReservationID = (((this.reservationID!= null)&&(!this.reservationID.isEmpty()))?this.getReservationID():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reservationID", theReservationID), currentHashCode, theReservationID);
            }
            {
                RecipientInfosType.RecipientInfo.ShippingInfo theShippingInfo;
                theShippingInfo = this.getShippingInfo();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingInfo", theShippingInfo), currentHashCode, theShippingInfo);
            }
            {
                RecipientInfosType.RecipientInfo.Comments theComments;
                theComments = this.getComments();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comments", theComments), currentHashCode, theComments);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof RecipientInfosType.RecipientInfo) {
                final RecipientInfosType.RecipientInfo copy = ((RecipientInfosType.RecipientInfo) draftCopy);
                if ((this.reservationID!= null)&&(!this.reservationID.isEmpty())) {
                    List<UniqueIDType> sourceReservationID;
                    sourceReservationID = (((this.reservationID!= null)&&(!this.reservationID.isEmpty()))?this.getReservationID():null);
                    @SuppressWarnings("unchecked")
                    List<UniqueIDType> copyReservationID = ((List<UniqueIDType> ) strategy.copy(LocatorUtils.property(locator, "reservationID", sourceReservationID), sourceReservationID));
                    copy.reservationID = null;
                    if (copyReservationID!= null) {
                        List<UniqueIDType> uniqueReservationIDl = copy.getReservationID();
                        uniqueReservationIDl.addAll(copyReservationID);
                    }
                } else {
                    copy.reservationID = null;
                }
                if (this.shippingInfo!= null) {
                    RecipientInfosType.RecipientInfo.ShippingInfo sourceShippingInfo;
                    sourceShippingInfo = this.getShippingInfo();
                    RecipientInfosType.RecipientInfo.ShippingInfo copyShippingInfo = ((RecipientInfosType.RecipientInfo.ShippingInfo) strategy.copy(LocatorUtils.property(locator, "shippingInfo", sourceShippingInfo), sourceShippingInfo));
                    copy.setShippingInfo(copyShippingInfo);
                } else {
                    copy.shippingInfo = null;
                }
                if (this.comments!= null) {
                    RecipientInfosType.RecipientInfo.Comments sourceComments;
                    sourceComments = this.getComments();
                    RecipientInfosType.RecipientInfo.Comments copyComments = ((RecipientInfosType.RecipientInfo.Comments) strategy.copy(LocatorUtils.property(locator, "comments", sourceComments), sourceComments));
                    copy.setComments(copyComments);
                } else {
                    copy.comments = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RecipientInfosType.RecipientInfo();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element name="Comment" type="{http://www.opentravel.org/OTA/2003/05}ParagraphType" maxOccurs="99"/&gt;
         *       &lt;/sequence&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "comment"
        })
        public static class Comments
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElement(name = "Comment", required = true)
            protected List<ParagraphType> comment;

            /**
             * Gets the value of the comment property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the comment property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getComment().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link ParagraphType }
             * 
             * 
             */
            public List<ParagraphType> getComment() {
                if (comment == null) {
                    comment = new ArrayList<ParagraphType>();
                }
                return this.comment;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<ParagraphType> theComment;
                    theComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
                    strategy.appendField(locator, this, "comment", buffer, theComment);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof RecipientInfosType.RecipientInfo.Comments)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final RecipientInfosType.RecipientInfo.Comments that = ((RecipientInfosType.RecipientInfo.Comments) object);
                {
                    List<ParagraphType> lhsComment;
                    lhsComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
                    List<ParagraphType> rhsComment;
                    rhsComment = (((that.comment!= null)&&(!that.comment.isEmpty()))?that.getComment():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "comment", lhsComment), LocatorUtils.property(thatLocator, "comment", rhsComment), lhsComment, rhsComment)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<ParagraphType> theComment;
                    theComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comment", theComment), currentHashCode, theComment);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof RecipientInfosType.RecipientInfo.Comments) {
                    final RecipientInfosType.RecipientInfo.Comments copy = ((RecipientInfosType.RecipientInfo.Comments) draftCopy);
                    if ((this.comment!= null)&&(!this.comment.isEmpty())) {
                        List<ParagraphType> sourceComment;
                        sourceComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
                        @SuppressWarnings("unchecked")
                        List<ParagraphType> copyComment = ((List<ParagraphType> ) strategy.copy(LocatorUtils.property(locator, "comment", sourceComment), sourceComment));
                        copy.comment = null;
                        if (copyComment!= null) {
                            List<ParagraphType> uniqueCommentl = copy.getComment();
                            uniqueCommentl.addAll(copyComment);
                        }
                    } else {
                        copy.comment = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new RecipientInfosType.RecipientInfo.Comments();
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
         *       &lt;attribute name="ShippingType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
         *       &lt;attribute name="ShippingCarrier" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class ShippingInfo
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "ShippingType")
            protected String shippingType;
            @XmlAttribute(name = "ShippingCarrier")
            protected String shippingCarrier;
            @XmlAttribute(name = "Amount")
            protected BigDecimal amount;
            @XmlAttribute(name = "CurrencyCode")
            protected String currencyCode;
            @XmlAttribute(name = "DecimalPlaces")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger decimalPlaces;

            /**
             * Gets the value of the shippingType property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getShippingType() {
                return shippingType;
            }

            /**
             * Sets the value of the shippingType property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setShippingType(String value) {
                this.shippingType = value;
            }

            /**
             * Gets the value of the shippingCarrier property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getShippingCarrier() {
                return shippingCarrier;
            }

            /**
             * Sets the value of the shippingCarrier property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setShippingCarrier(String value) {
                this.shippingCarrier = value;
            }

            /**
             * Gets the value of the amount property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getAmount() {
                return amount;
            }

            /**
             * Sets the value of the amount property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setAmount(BigDecimal value) {
                this.amount = value;
            }

            /**
             * Gets the value of the currencyCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCurrencyCode() {
                return currencyCode;
            }

            /**
             * Sets the value of the currencyCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCurrencyCode(String value) {
                this.currencyCode = value;
            }

            /**
             * Gets the value of the decimalPlaces property.
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getDecimalPlaces() {
                return decimalPlaces;
            }

            /**
             * Sets the value of the decimalPlaces property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             */
            public void setDecimalPlaces(BigInteger value) {
                this.decimalPlaces = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theShippingType;
                    theShippingType = this.getShippingType();
                    strategy.appendField(locator, this, "shippingType", buffer, theShippingType);
                }
                {
                    String theShippingCarrier;
                    theShippingCarrier = this.getShippingCarrier();
                    strategy.appendField(locator, this, "shippingCarrier", buffer, theShippingCarrier);
                }
                {
                    BigDecimal theAmount;
                    theAmount = this.getAmount();
                    strategy.appendField(locator, this, "amount", buffer, theAmount);
                }
                {
                    String theCurrencyCode;
                    theCurrencyCode = this.getCurrencyCode();
                    strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
                }
                {
                    BigInteger theDecimalPlaces;
                    theDecimalPlaces = this.getDecimalPlaces();
                    strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof RecipientInfosType.RecipientInfo.ShippingInfo)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final RecipientInfosType.RecipientInfo.ShippingInfo that = ((RecipientInfosType.RecipientInfo.ShippingInfo) object);
                {
                    String lhsShippingType;
                    lhsShippingType = this.getShippingType();
                    String rhsShippingType;
                    rhsShippingType = that.getShippingType();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingType", lhsShippingType), LocatorUtils.property(thatLocator, "shippingType", rhsShippingType), lhsShippingType, rhsShippingType)) {
                        return false;
                    }
                }
                {
                    String lhsShippingCarrier;
                    lhsShippingCarrier = this.getShippingCarrier();
                    String rhsShippingCarrier;
                    rhsShippingCarrier = that.getShippingCarrier();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingCarrier", lhsShippingCarrier), LocatorUtils.property(thatLocator, "shippingCarrier", rhsShippingCarrier), lhsShippingCarrier, rhsShippingCarrier)) {
                        return false;
                    }
                }
                {
                    BigDecimal lhsAmount;
                    lhsAmount = this.getAmount();
                    BigDecimal rhsAmount;
                    rhsAmount = that.getAmount();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                        return false;
                    }
                }
                {
                    String lhsCurrencyCode;
                    lhsCurrencyCode = this.getCurrencyCode();
                    String rhsCurrencyCode;
                    rhsCurrencyCode = that.getCurrencyCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                        return false;
                    }
                }
                {
                    BigInteger lhsDecimalPlaces;
                    lhsDecimalPlaces = this.getDecimalPlaces();
                    BigInteger rhsDecimalPlaces;
                    rhsDecimalPlaces = that.getDecimalPlaces();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theShippingType;
                    theShippingType = this.getShippingType();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingType", theShippingType), currentHashCode, theShippingType);
                }
                {
                    String theShippingCarrier;
                    theShippingCarrier = this.getShippingCarrier();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingCarrier", theShippingCarrier), currentHashCode, theShippingCarrier);
                }
                {
                    BigDecimal theAmount;
                    theAmount = this.getAmount();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
                }
                {
                    String theCurrencyCode;
                    theCurrencyCode = this.getCurrencyCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
                }
                {
                    BigInteger theDecimalPlaces;
                    theDecimalPlaces = this.getDecimalPlaces();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof RecipientInfosType.RecipientInfo.ShippingInfo) {
                    final RecipientInfosType.RecipientInfo.ShippingInfo copy = ((RecipientInfosType.RecipientInfo.ShippingInfo) draftCopy);
                    if (this.shippingType!= null) {
                        String sourceShippingType;
                        sourceShippingType = this.getShippingType();
                        String copyShippingType = ((String) strategy.copy(LocatorUtils.property(locator, "shippingType", sourceShippingType), sourceShippingType));
                        copy.setShippingType(copyShippingType);
                    } else {
                        copy.shippingType = null;
                    }
                    if (this.shippingCarrier!= null) {
                        String sourceShippingCarrier;
                        sourceShippingCarrier = this.getShippingCarrier();
                        String copyShippingCarrier = ((String) strategy.copy(LocatorUtils.property(locator, "shippingCarrier", sourceShippingCarrier), sourceShippingCarrier));
                        copy.setShippingCarrier(copyShippingCarrier);
                    } else {
                        copy.shippingCarrier = null;
                    }
                    if (this.amount!= null) {
                        BigDecimal sourceAmount;
                        sourceAmount = this.getAmount();
                        BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                        copy.setAmount(copyAmount);
                    } else {
                        copy.amount = null;
                    }
                    if (this.currencyCode!= null) {
                        String sourceCurrencyCode;
                        sourceCurrencyCode = this.getCurrencyCode();
                        String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                        copy.setCurrencyCode(copyCurrencyCode);
                    } else {
                        copy.currencyCode = null;
                    }
                    if (this.decimalPlaces!= null) {
                        BigInteger sourceDecimalPlaces;
                        sourceDecimalPlaces = this.getDecimalPlaces();
                        BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                        copy.setDecimalPlaces(copyDecimalPlaces);
                    } else {
                        copy.decimalPlaces = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new RecipientInfosType.RecipientInfo.ShippingInfo();
            }

        }

    }

}
