//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Remarks, OSIs, Seat Requests etc.
 * 
 * <p>Java class for SpecialReqDetailsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SpecialReqDetailsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="SeatRequests" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="SeatRequest" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SeatRequestType"&gt;
 *                           &lt;attribute name="TravelerRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *                           &lt;attribute name="FlightRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *                           &lt;attribute name="PartialSeatingInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="SpecialServiceRequests" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="SpecialServiceRequest" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SpecialServiceRequestType"&gt;
 *                           &lt;attribute name="TravelerRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *                           &lt;attribute name="FlightRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="OtherServiceInformations" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="OtherServiceInformation" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;extension base="{http://www.opentravel.org/OTA/2003/05}OtherServiceInfoType"&gt;
 *                           &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *                           &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Remarks" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Remark" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;simpleContent&gt;
 *                         &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength1to128"&gt;
 *                           &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *                           &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/simpleContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="SpecialRemarks" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="SpecialRemark" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SpecialRemarkType"&gt;
 *                           &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *                           &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SpecialReqDetailsType", propOrder = {
    "seatRequests",
    "specialServiceRequests",
    "otherServiceInformations",
    "remarks",
    "specialRemarks"
})
public class SpecialReqDetailsType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "SeatRequests")
    protected SpecialReqDetailsType.SeatRequests seatRequests;
    @XmlElement(name = "SpecialServiceRequests")
    protected SpecialReqDetailsType.SpecialServiceRequests specialServiceRequests;
    @XmlElement(name = "OtherServiceInformations")
    protected SpecialReqDetailsType.OtherServiceInformations otherServiceInformations;
    @XmlElement(name = "Remarks")
    protected SpecialReqDetailsType.Remarks remarks;
    @XmlElement(name = "SpecialRemarks")
    protected SpecialReqDetailsType.SpecialRemarks specialRemarks;

    /**
     * Gets the value of the seatRequests property.
     * 
     * @return
     *     possible object is
     *     {@link SpecialReqDetailsType.SeatRequests }
     *     
     */
    public SpecialReqDetailsType.SeatRequests getSeatRequests() {
        return seatRequests;
    }

    /**
     * Sets the value of the seatRequests property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpecialReqDetailsType.SeatRequests }
     *     
     */
    public void setSeatRequests(SpecialReqDetailsType.SeatRequests value) {
        this.seatRequests = value;
    }

    /**
     * Gets the value of the specialServiceRequests property.
     * 
     * @return
     *     possible object is
     *     {@link SpecialReqDetailsType.SpecialServiceRequests }
     *     
     */
    public SpecialReqDetailsType.SpecialServiceRequests getSpecialServiceRequests() {
        return specialServiceRequests;
    }

    /**
     * Sets the value of the specialServiceRequests property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpecialReqDetailsType.SpecialServiceRequests }
     *     
     */
    public void setSpecialServiceRequests(SpecialReqDetailsType.SpecialServiceRequests value) {
        this.specialServiceRequests = value;
    }

    /**
     * Gets the value of the otherServiceInformations property.
     * 
     * @return
     *     possible object is
     *     {@link SpecialReqDetailsType.OtherServiceInformations }
     *     
     */
    public SpecialReqDetailsType.OtherServiceInformations getOtherServiceInformations() {
        return otherServiceInformations;
    }

    /**
     * Sets the value of the otherServiceInformations property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpecialReqDetailsType.OtherServiceInformations }
     *     
     */
    public void setOtherServiceInformations(SpecialReqDetailsType.OtherServiceInformations value) {
        this.otherServiceInformations = value;
    }

    /**
     * Gets the value of the remarks property.
     * 
     * @return
     *     possible object is
     *     {@link SpecialReqDetailsType.Remarks }
     *     
     */
    public SpecialReqDetailsType.Remarks getRemarks() {
        return remarks;
    }

    /**
     * Sets the value of the remarks property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpecialReqDetailsType.Remarks }
     *     
     */
    public void setRemarks(SpecialReqDetailsType.Remarks value) {
        this.remarks = value;
    }

    /**
     * Gets the value of the specialRemarks property.
     * 
     * @return
     *     possible object is
     *     {@link SpecialReqDetailsType.SpecialRemarks }
     *     
     */
    public SpecialReqDetailsType.SpecialRemarks getSpecialRemarks() {
        return specialRemarks;
    }

    /**
     * Sets the value of the specialRemarks property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpecialReqDetailsType.SpecialRemarks }
     *     
     */
    public void setSpecialRemarks(SpecialReqDetailsType.SpecialRemarks value) {
        this.specialRemarks = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            SpecialReqDetailsType.SeatRequests theSeatRequests;
            theSeatRequests = this.getSeatRequests();
            strategy.appendField(locator, this, "seatRequests", buffer, theSeatRequests);
        }
        {
            SpecialReqDetailsType.SpecialServiceRequests theSpecialServiceRequests;
            theSpecialServiceRequests = this.getSpecialServiceRequests();
            strategy.appendField(locator, this, "specialServiceRequests", buffer, theSpecialServiceRequests);
        }
        {
            SpecialReqDetailsType.OtherServiceInformations theOtherServiceInformations;
            theOtherServiceInformations = this.getOtherServiceInformations();
            strategy.appendField(locator, this, "otherServiceInformations", buffer, theOtherServiceInformations);
        }
        {
            SpecialReqDetailsType.Remarks theRemarks;
            theRemarks = this.getRemarks();
            strategy.appendField(locator, this, "remarks", buffer, theRemarks);
        }
        {
            SpecialReqDetailsType.SpecialRemarks theSpecialRemarks;
            theSpecialRemarks = this.getSpecialRemarks();
            strategy.appendField(locator, this, "specialRemarks", buffer, theSpecialRemarks);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpecialReqDetailsType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SpecialReqDetailsType that = ((SpecialReqDetailsType) object);
        {
            SpecialReqDetailsType.SeatRequests lhsSeatRequests;
            lhsSeatRequests = this.getSeatRequests();
            SpecialReqDetailsType.SeatRequests rhsSeatRequests;
            rhsSeatRequests = that.getSeatRequests();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seatRequests", lhsSeatRequests), LocatorUtils.property(thatLocator, "seatRequests", rhsSeatRequests), lhsSeatRequests, rhsSeatRequests)) {
                return false;
            }
        }
        {
            SpecialReqDetailsType.SpecialServiceRequests lhsSpecialServiceRequests;
            lhsSpecialServiceRequests = this.getSpecialServiceRequests();
            SpecialReqDetailsType.SpecialServiceRequests rhsSpecialServiceRequests;
            rhsSpecialServiceRequests = that.getSpecialServiceRequests();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialServiceRequests", lhsSpecialServiceRequests), LocatorUtils.property(thatLocator, "specialServiceRequests", rhsSpecialServiceRequests), lhsSpecialServiceRequests, rhsSpecialServiceRequests)) {
                return false;
            }
        }
        {
            SpecialReqDetailsType.OtherServiceInformations lhsOtherServiceInformations;
            lhsOtherServiceInformations = this.getOtherServiceInformations();
            SpecialReqDetailsType.OtherServiceInformations rhsOtherServiceInformations;
            rhsOtherServiceInformations = that.getOtherServiceInformations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherServiceInformations", lhsOtherServiceInformations), LocatorUtils.property(thatLocator, "otherServiceInformations", rhsOtherServiceInformations), lhsOtherServiceInformations, rhsOtherServiceInformations)) {
                return false;
            }
        }
        {
            SpecialReqDetailsType.Remarks lhsRemarks;
            lhsRemarks = this.getRemarks();
            SpecialReqDetailsType.Remarks rhsRemarks;
            rhsRemarks = that.getRemarks();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "remarks", lhsRemarks), LocatorUtils.property(thatLocator, "remarks", rhsRemarks), lhsRemarks, rhsRemarks)) {
                return false;
            }
        }
        {
            SpecialReqDetailsType.SpecialRemarks lhsSpecialRemarks;
            lhsSpecialRemarks = this.getSpecialRemarks();
            SpecialReqDetailsType.SpecialRemarks rhsSpecialRemarks;
            rhsSpecialRemarks = that.getSpecialRemarks();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialRemarks", lhsSpecialRemarks), LocatorUtils.property(thatLocator, "specialRemarks", rhsSpecialRemarks), lhsSpecialRemarks, rhsSpecialRemarks)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            SpecialReqDetailsType.SeatRequests theSeatRequests;
            theSeatRequests = this.getSeatRequests();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatRequests", theSeatRequests), currentHashCode, theSeatRequests);
        }
        {
            SpecialReqDetailsType.SpecialServiceRequests theSpecialServiceRequests;
            theSpecialServiceRequests = this.getSpecialServiceRequests();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialServiceRequests", theSpecialServiceRequests), currentHashCode, theSpecialServiceRequests);
        }
        {
            SpecialReqDetailsType.OtherServiceInformations theOtherServiceInformations;
            theOtherServiceInformations = this.getOtherServiceInformations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherServiceInformations", theOtherServiceInformations), currentHashCode, theOtherServiceInformations);
        }
        {
            SpecialReqDetailsType.Remarks theRemarks;
            theRemarks = this.getRemarks();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remarks", theRemarks), currentHashCode, theRemarks);
        }
        {
            SpecialReqDetailsType.SpecialRemarks theSpecialRemarks;
            theSpecialRemarks = this.getSpecialRemarks();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialRemarks", theSpecialRemarks), currentHashCode, theSpecialRemarks);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SpecialReqDetailsType) {
            final SpecialReqDetailsType copy = ((SpecialReqDetailsType) draftCopy);
            if (this.seatRequests!= null) {
                SpecialReqDetailsType.SeatRequests sourceSeatRequests;
                sourceSeatRequests = this.getSeatRequests();
                SpecialReqDetailsType.SeatRequests copySeatRequests = ((SpecialReqDetailsType.SeatRequests) strategy.copy(LocatorUtils.property(locator, "seatRequests", sourceSeatRequests), sourceSeatRequests));
                copy.setSeatRequests(copySeatRequests);
            } else {
                copy.seatRequests = null;
            }
            if (this.specialServiceRequests!= null) {
                SpecialReqDetailsType.SpecialServiceRequests sourceSpecialServiceRequests;
                sourceSpecialServiceRequests = this.getSpecialServiceRequests();
                SpecialReqDetailsType.SpecialServiceRequests copySpecialServiceRequests = ((SpecialReqDetailsType.SpecialServiceRequests) strategy.copy(LocatorUtils.property(locator, "specialServiceRequests", sourceSpecialServiceRequests), sourceSpecialServiceRequests));
                copy.setSpecialServiceRequests(copySpecialServiceRequests);
            } else {
                copy.specialServiceRequests = null;
            }
            if (this.otherServiceInformations!= null) {
                SpecialReqDetailsType.OtherServiceInformations sourceOtherServiceInformations;
                sourceOtherServiceInformations = this.getOtherServiceInformations();
                SpecialReqDetailsType.OtherServiceInformations copyOtherServiceInformations = ((SpecialReqDetailsType.OtherServiceInformations) strategy.copy(LocatorUtils.property(locator, "otherServiceInformations", sourceOtherServiceInformations), sourceOtherServiceInformations));
                copy.setOtherServiceInformations(copyOtherServiceInformations);
            } else {
                copy.otherServiceInformations = null;
            }
            if (this.remarks!= null) {
                SpecialReqDetailsType.Remarks sourceRemarks;
                sourceRemarks = this.getRemarks();
                SpecialReqDetailsType.Remarks copyRemarks = ((SpecialReqDetailsType.Remarks) strategy.copy(LocatorUtils.property(locator, "remarks", sourceRemarks), sourceRemarks));
                copy.setRemarks(copyRemarks);
            } else {
                copy.remarks = null;
            }
            if (this.specialRemarks!= null) {
                SpecialReqDetailsType.SpecialRemarks sourceSpecialRemarks;
                sourceSpecialRemarks = this.getSpecialRemarks();
                SpecialReqDetailsType.SpecialRemarks copySpecialRemarks = ((SpecialReqDetailsType.SpecialRemarks) strategy.copy(LocatorUtils.property(locator, "specialRemarks", sourceSpecialRemarks), sourceSpecialRemarks));
                copy.setSpecialRemarks(copySpecialRemarks);
            } else {
                copy.specialRemarks = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SpecialReqDetailsType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="OtherServiceInformation" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}OtherServiceInfoType"&gt;
     *                 &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
     *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "otherServiceInformation"
    })
    public static class OtherServiceInformations
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "OtherServiceInformation", required = true)
        protected List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> otherServiceInformation;

        /**
         * Gets the value of the otherServiceInformation property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the otherServiceInformation property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getOtherServiceInformation().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation }
         * 
         * 
         */
        public List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> getOtherServiceInformation() {
            if (otherServiceInformation == null) {
                otherServiceInformation = new ArrayList<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation>();
            }
            return this.otherServiceInformation;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> theOtherServiceInformation;
                theOtherServiceInformation = (((this.otherServiceInformation!= null)&&(!this.otherServiceInformation.isEmpty()))?this.getOtherServiceInformation():null);
                strategy.appendField(locator, this, "otherServiceInformation", buffer, theOtherServiceInformation);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialReqDetailsType.OtherServiceInformations)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialReqDetailsType.OtherServiceInformations that = ((SpecialReqDetailsType.OtherServiceInformations) object);
            {
                List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> lhsOtherServiceInformation;
                lhsOtherServiceInformation = (((this.otherServiceInformation!= null)&&(!this.otherServiceInformation.isEmpty()))?this.getOtherServiceInformation():null);
                List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> rhsOtherServiceInformation;
                rhsOtherServiceInformation = (((that.otherServiceInformation!= null)&&(!that.otherServiceInformation.isEmpty()))?that.getOtherServiceInformation():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "otherServiceInformation", lhsOtherServiceInformation), LocatorUtils.property(thatLocator, "otherServiceInformation", rhsOtherServiceInformation), lhsOtherServiceInformation, rhsOtherServiceInformation)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> theOtherServiceInformation;
                theOtherServiceInformation = (((this.otherServiceInformation!= null)&&(!this.otherServiceInformation.isEmpty()))?this.getOtherServiceInformation():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherServiceInformation", theOtherServiceInformation), currentHashCode, theOtherServiceInformation);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialReqDetailsType.OtherServiceInformations) {
                final SpecialReqDetailsType.OtherServiceInformations copy = ((SpecialReqDetailsType.OtherServiceInformations) draftCopy);
                if ((this.otherServiceInformation!= null)&&(!this.otherServiceInformation.isEmpty())) {
                    List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> sourceOtherServiceInformation;
                    sourceOtherServiceInformation = (((this.otherServiceInformation!= null)&&(!this.otherServiceInformation.isEmpty()))?this.getOtherServiceInformation():null);
                    @SuppressWarnings("unchecked")
                    List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> copyOtherServiceInformation = ((List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> ) strategy.copy(LocatorUtils.property(locator, "otherServiceInformation", sourceOtherServiceInformation), sourceOtherServiceInformation));
                    copy.otherServiceInformation = null;
                    if (copyOtherServiceInformation!= null) {
                        List<SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation> uniqueOtherServiceInformationl = copy.getOtherServiceInformation();
                        uniqueOtherServiceInformationl.addAll(copyOtherServiceInformation);
                    }
                } else {
                    copy.otherServiceInformation = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialReqDetailsType.OtherServiceInformations();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}OtherServiceInfoType"&gt;
         *       &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
         *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class OtherServiceInformation
            extends OtherServiceInfoType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "RPH")
            protected String rph;
            @XmlAttribute(name = "Operation")
            protected ActionType operation;

            /**
             * Gets the value of the rph property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getRPH() {
                return rph;
            }

            /**
             * Sets the value of the rph property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setRPH(String value) {
                this.rph = value;
            }

            /**
             * Gets the value of the operation property.
             * 
             * @return
             *     possible object is
             *     {@link ActionType }
             *     
             */
            public ActionType getOperation() {
                return operation;
            }

            /**
             * Sets the value of the operation property.
             * 
             * @param value
             *     allowed object is
             *     {@link ActionType }
             *     
             */
            public void setOperation(ActionType value) {
                this.operation = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    strategy.appendField(locator, this, "rph", buffer, theRPH);
                }
                {
                    ActionType theOperation;
                    theOperation = this.getOperation();
                    strategy.appendField(locator, this, "operation", buffer, theOperation);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                final SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation that = ((SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation) object);
                {
                    String lhsRPH;
                    lhsRPH = this.getRPH();
                    String rhsRPH;
                    rhsRPH = that.getRPH();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                        return false;
                    }
                }
                {
                    ActionType lhsOperation;
                    lhsOperation = this.getOperation();
                    ActionType rhsOperation;
                    rhsOperation = that.getOperation();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
                }
                {
                    ActionType theOperation;
                    theOperation = this.getOperation();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                if (draftCopy instanceof SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation) {
                    final SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation copy = ((SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation) draftCopy);
                    if (this.rph!= null) {
                        String sourceRPH;
                        sourceRPH = this.getRPH();
                        String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                        copy.setRPH(copyRPH);
                    } else {
                        copy.rph = null;
                    }
                    if (this.operation!= null) {
                        ActionType sourceOperation;
                        sourceOperation = this.getOperation();
                        ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                        copy.setOperation(copyOperation);
                    } else {
                        copy.operation = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SpecialReqDetailsType.OtherServiceInformations.OtherServiceInformation();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Remark" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;simpleContent&gt;
     *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength1to128"&gt;
     *                 &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
     *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/simpleContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "remark"
    })
    public static class Remarks
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "Remark", required = true)
        protected List<SpecialReqDetailsType.Remarks.Remark> remark;

        /**
         * Gets the value of the remark property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the remark property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getRemark().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link SpecialReqDetailsType.Remarks.Remark }
         * 
         * 
         */
        public List<SpecialReqDetailsType.Remarks.Remark> getRemark() {
            if (remark == null) {
                remark = new ArrayList<SpecialReqDetailsType.Remarks.Remark>();
            }
            return this.remark;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<SpecialReqDetailsType.Remarks.Remark> theRemark;
                theRemark = (((this.remark!= null)&&(!this.remark.isEmpty()))?this.getRemark():null);
                strategy.appendField(locator, this, "remark", buffer, theRemark);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialReqDetailsType.Remarks)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialReqDetailsType.Remarks that = ((SpecialReqDetailsType.Remarks) object);
            {
                List<SpecialReqDetailsType.Remarks.Remark> lhsRemark;
                lhsRemark = (((this.remark!= null)&&(!this.remark.isEmpty()))?this.getRemark():null);
                List<SpecialReqDetailsType.Remarks.Remark> rhsRemark;
                rhsRemark = (((that.remark!= null)&&(!that.remark.isEmpty()))?that.getRemark():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "remark", lhsRemark), LocatorUtils.property(thatLocator, "remark", rhsRemark), lhsRemark, rhsRemark)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<SpecialReqDetailsType.Remarks.Remark> theRemark;
                theRemark = (((this.remark!= null)&&(!this.remark.isEmpty()))?this.getRemark():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remark", theRemark), currentHashCode, theRemark);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialReqDetailsType.Remarks) {
                final SpecialReqDetailsType.Remarks copy = ((SpecialReqDetailsType.Remarks) draftCopy);
                if ((this.remark!= null)&&(!this.remark.isEmpty())) {
                    List<SpecialReqDetailsType.Remarks.Remark> sourceRemark;
                    sourceRemark = (((this.remark!= null)&&(!this.remark.isEmpty()))?this.getRemark():null);
                    @SuppressWarnings("unchecked")
                    List<SpecialReqDetailsType.Remarks.Remark> copyRemark = ((List<SpecialReqDetailsType.Remarks.Remark> ) strategy.copy(LocatorUtils.property(locator, "remark", sourceRemark), sourceRemark));
                    copy.remark = null;
                    if (copyRemark!= null) {
                        List<SpecialReqDetailsType.Remarks.Remark> uniqueRemarkl = copy.getRemark();
                        uniqueRemarkl.addAll(copyRemark);
                    }
                } else {
                    copy.remark = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialReqDetailsType.Remarks();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;simpleContent&gt;
         *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength1to128"&gt;
         *       &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
         *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/simpleContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "value"
        })
        public static class Remark
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlValue
            protected String value;
            @XmlAttribute(name = "RPH")
            protected String rph;
            @XmlAttribute(name = "Operation")
            protected ActionType operation;

            /**
             * Used for Character Strings, length 1 to 128
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getValue() {
                return value;
            }

            /**
             * Sets the value of the value property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setValue(String value) {
                this.value = value;
            }

            /**
             * Gets the value of the rph property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getRPH() {
                return rph;
            }

            /**
             * Sets the value of the rph property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setRPH(String value) {
                this.rph = value;
            }

            /**
             * Gets the value of the operation property.
             * 
             * @return
             *     possible object is
             *     {@link ActionType }
             *     
             */
            public ActionType getOperation() {
                return operation;
            }

            /**
             * Sets the value of the operation property.
             * 
             * @param value
             *     allowed object is
             *     {@link ActionType }
             *     
             */
            public void setOperation(ActionType value) {
                this.operation = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theValue;
                    theValue = this.getValue();
                    strategy.appendField(locator, this, "value", buffer, theValue);
                }
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    strategy.appendField(locator, this, "rph", buffer, theRPH);
                }
                {
                    ActionType theOperation;
                    theOperation = this.getOperation();
                    strategy.appendField(locator, this, "operation", buffer, theOperation);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof SpecialReqDetailsType.Remarks.Remark)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final SpecialReqDetailsType.Remarks.Remark that = ((SpecialReqDetailsType.Remarks.Remark) object);
                {
                    String lhsValue;
                    lhsValue = this.getValue();
                    String rhsValue;
                    rhsValue = that.getValue();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                        return false;
                    }
                }
                {
                    String lhsRPH;
                    lhsRPH = this.getRPH();
                    String rhsRPH;
                    rhsRPH = that.getRPH();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                        return false;
                    }
                }
                {
                    ActionType lhsOperation;
                    lhsOperation = this.getOperation();
                    ActionType rhsOperation;
                    rhsOperation = that.getOperation();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theValue;
                    theValue = this.getValue();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
                }
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
                }
                {
                    ActionType theOperation;
                    theOperation = this.getOperation();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof SpecialReqDetailsType.Remarks.Remark) {
                    final SpecialReqDetailsType.Remarks.Remark copy = ((SpecialReqDetailsType.Remarks.Remark) draftCopy);
                    if (this.value!= null) {
                        String sourceValue;
                        sourceValue = this.getValue();
                        String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                        copy.setValue(copyValue);
                    } else {
                        copy.value = null;
                    }
                    if (this.rph!= null) {
                        String sourceRPH;
                        sourceRPH = this.getRPH();
                        String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                        copy.setRPH(copyRPH);
                    } else {
                        copy.rph = null;
                    }
                    if (this.operation!= null) {
                        ActionType sourceOperation;
                        sourceOperation = this.getOperation();
                        ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                        copy.setOperation(copyOperation);
                    } else {
                        copy.operation = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SpecialReqDetailsType.Remarks.Remark();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="SeatRequest" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SeatRequestType"&gt;
     *                 &lt;attribute name="TravelerRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
     *                 &lt;attribute name="FlightRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
     *                 &lt;attribute name="PartialSeatingInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "seatRequest"
    })
    public static class SeatRequests
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "SeatRequest", required = true)
        protected List<SpecialReqDetailsType.SeatRequests.SeatRequest> seatRequest;

        /**
         * Gets the value of the seatRequest property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the seatRequest property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSeatRequest().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link SpecialReqDetailsType.SeatRequests.SeatRequest }
         * 
         * 
         */
        public List<SpecialReqDetailsType.SeatRequests.SeatRequest> getSeatRequest() {
            if (seatRequest == null) {
                seatRequest = new ArrayList<SpecialReqDetailsType.SeatRequests.SeatRequest>();
            }
            return this.seatRequest;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<SpecialReqDetailsType.SeatRequests.SeatRequest> theSeatRequest;
                theSeatRequest = (((this.seatRequest!= null)&&(!this.seatRequest.isEmpty()))?this.getSeatRequest():null);
                strategy.appendField(locator, this, "seatRequest", buffer, theSeatRequest);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialReqDetailsType.SeatRequests)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialReqDetailsType.SeatRequests that = ((SpecialReqDetailsType.SeatRequests) object);
            {
                List<SpecialReqDetailsType.SeatRequests.SeatRequest> lhsSeatRequest;
                lhsSeatRequest = (((this.seatRequest!= null)&&(!this.seatRequest.isEmpty()))?this.getSeatRequest():null);
                List<SpecialReqDetailsType.SeatRequests.SeatRequest> rhsSeatRequest;
                rhsSeatRequest = (((that.seatRequest!= null)&&(!that.seatRequest.isEmpty()))?that.getSeatRequest():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "seatRequest", lhsSeatRequest), LocatorUtils.property(thatLocator, "seatRequest", rhsSeatRequest), lhsSeatRequest, rhsSeatRequest)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<SpecialReqDetailsType.SeatRequests.SeatRequest> theSeatRequest;
                theSeatRequest = (((this.seatRequest!= null)&&(!this.seatRequest.isEmpty()))?this.getSeatRequest():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatRequest", theSeatRequest), currentHashCode, theSeatRequest);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialReqDetailsType.SeatRequests) {
                final SpecialReqDetailsType.SeatRequests copy = ((SpecialReqDetailsType.SeatRequests) draftCopy);
                if ((this.seatRequest!= null)&&(!this.seatRequest.isEmpty())) {
                    List<SpecialReqDetailsType.SeatRequests.SeatRequest> sourceSeatRequest;
                    sourceSeatRequest = (((this.seatRequest!= null)&&(!this.seatRequest.isEmpty()))?this.getSeatRequest():null);
                    @SuppressWarnings("unchecked")
                    List<SpecialReqDetailsType.SeatRequests.SeatRequest> copySeatRequest = ((List<SpecialReqDetailsType.SeatRequests.SeatRequest> ) strategy.copy(LocatorUtils.property(locator, "seatRequest", sourceSeatRequest), sourceSeatRequest));
                    copy.seatRequest = null;
                    if (copySeatRequest!= null) {
                        List<SpecialReqDetailsType.SeatRequests.SeatRequest> uniqueSeatRequestl = copy.getSeatRequest();
                        uniqueSeatRequestl.addAll(copySeatRequest);
                    }
                } else {
                    copy.seatRequest = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialReqDetailsType.SeatRequests();
        }


        /**
         *  AWG to revisit.
         * 
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SeatRequestType"&gt;
         *       &lt;attribute name="TravelerRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
         *       &lt;attribute name="FlightRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
         *       &lt;attribute name="PartialSeatingInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class SeatRequest
            extends SeatRequestType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "TravelerRefNumberRPHList")
            protected List<String> travelerRefNumberRPHList;
            @XmlAttribute(name = "FlightRefNumberRPHList")
            protected List<String> flightRefNumberRPHList;
            @XmlAttribute(name = "PartialSeatingInd")
            protected Boolean partialSeatingInd;

            /**
             * Gets the value of the travelerRefNumberRPHList property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the travelerRefNumberRPHList property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getTravelerRefNumberRPHList().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * 
             * 
             */
            public List<String> getTravelerRefNumberRPHList() {
                if (travelerRefNumberRPHList == null) {
                    travelerRefNumberRPHList = new ArrayList<String>();
                }
                return this.travelerRefNumberRPHList;
            }

            /**
             * Gets the value of the flightRefNumberRPHList property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the flightRefNumberRPHList property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getFlightRefNumberRPHList().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * 
             * 
             */
            public List<String> getFlightRefNumberRPHList() {
                if (flightRefNumberRPHList == null) {
                    flightRefNumberRPHList = new ArrayList<String>();
                }
                return this.flightRefNumberRPHList;
            }

            /**
             * Gets the value of the partialSeatingInd property.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public Boolean isPartialSeatingInd() {
                return partialSeatingInd;
            }

            /**
             * Sets the value of the partialSeatingInd property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             */
            public void setPartialSeatingInd(Boolean value) {
                this.partialSeatingInd = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                {
                    List<String> theTravelerRefNumberRPHList;
                    theTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                    strategy.appendField(locator, this, "travelerRefNumberRPHList", buffer, theTravelerRefNumberRPHList);
                }
                {
                    List<String> theFlightRefNumberRPHList;
                    theFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                    strategy.appendField(locator, this, "flightRefNumberRPHList", buffer, theFlightRefNumberRPHList);
                }
                {
                    Boolean thePartialSeatingInd;
                    thePartialSeatingInd = this.isPartialSeatingInd();
                    strategy.appendField(locator, this, "partialSeatingInd", buffer, thePartialSeatingInd);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof SpecialReqDetailsType.SeatRequests.SeatRequest)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                final SpecialReqDetailsType.SeatRequests.SeatRequest that = ((SpecialReqDetailsType.SeatRequests.SeatRequest) object);
                {
                    List<String> lhsTravelerRefNumberRPHList;
                    lhsTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                    List<String> rhsTravelerRefNumberRPHList;
                    rhsTravelerRefNumberRPHList = (((that.travelerRefNumberRPHList!= null)&&(!that.travelerRefNumberRPHList.isEmpty()))?that.getTravelerRefNumberRPHList():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerRefNumberRPHList", lhsTravelerRefNumberRPHList), LocatorUtils.property(thatLocator, "travelerRefNumberRPHList", rhsTravelerRefNumberRPHList), lhsTravelerRefNumberRPHList, rhsTravelerRefNumberRPHList)) {
                        return false;
                    }
                }
                {
                    List<String> lhsFlightRefNumberRPHList;
                    lhsFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                    List<String> rhsFlightRefNumberRPHList;
                    rhsFlightRefNumberRPHList = (((that.flightRefNumberRPHList!= null)&&(!that.flightRefNumberRPHList.isEmpty()))?that.getFlightRefNumberRPHList():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "flightRefNumberRPHList", lhsFlightRefNumberRPHList), LocatorUtils.property(thatLocator, "flightRefNumberRPHList", rhsFlightRefNumberRPHList), lhsFlightRefNumberRPHList, rhsFlightRefNumberRPHList)) {
                        return false;
                    }
                }
                {
                    Boolean lhsPartialSeatingInd;
                    lhsPartialSeatingInd = this.isPartialSeatingInd();
                    Boolean rhsPartialSeatingInd;
                    rhsPartialSeatingInd = that.isPartialSeatingInd();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "partialSeatingInd", lhsPartialSeatingInd), LocatorUtils.property(thatLocator, "partialSeatingInd", rhsPartialSeatingInd), lhsPartialSeatingInd, rhsPartialSeatingInd)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                {
                    List<String> theTravelerRefNumberRPHList;
                    theTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerRefNumberRPHList", theTravelerRefNumberRPHList), currentHashCode, theTravelerRefNumberRPHList);
                }
                {
                    List<String> theFlightRefNumberRPHList;
                    theFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightRefNumberRPHList", theFlightRefNumberRPHList), currentHashCode, theFlightRefNumberRPHList);
                }
                {
                    Boolean thePartialSeatingInd;
                    thePartialSeatingInd = this.isPartialSeatingInd();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "partialSeatingInd", thePartialSeatingInd), currentHashCode, thePartialSeatingInd);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                if (draftCopy instanceof SpecialReqDetailsType.SeatRequests.SeatRequest) {
                    final SpecialReqDetailsType.SeatRequests.SeatRequest copy = ((SpecialReqDetailsType.SeatRequests.SeatRequest) draftCopy);
                    if ((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty())) {
                        List<String> sourceTravelerRefNumberRPHList;
                        sourceTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                        @SuppressWarnings("unchecked")
                        List<String> copyTravelerRefNumberRPHList = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "travelerRefNumberRPHList", sourceTravelerRefNumberRPHList), sourceTravelerRefNumberRPHList));
                        copy.travelerRefNumberRPHList = null;
                        if (copyTravelerRefNumberRPHList!= null) {
                            List<String> uniqueTravelerRefNumberRPHListl = copy.getTravelerRefNumberRPHList();
                            uniqueTravelerRefNumberRPHListl.addAll(copyTravelerRefNumberRPHList);
                        }
                    } else {
                        copy.travelerRefNumberRPHList = null;
                    }
                    if ((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty())) {
                        List<String> sourceFlightRefNumberRPHList;
                        sourceFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                        @SuppressWarnings("unchecked")
                        List<String> copyFlightRefNumberRPHList = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "flightRefNumberRPHList", sourceFlightRefNumberRPHList), sourceFlightRefNumberRPHList));
                        copy.flightRefNumberRPHList = null;
                        if (copyFlightRefNumberRPHList!= null) {
                            List<String> uniqueFlightRefNumberRPHListl = copy.getFlightRefNumberRPHList();
                            uniqueFlightRefNumberRPHListl.addAll(copyFlightRefNumberRPHList);
                        }
                    } else {
                        copy.flightRefNumberRPHList = null;
                    }
                    if (this.partialSeatingInd!= null) {
                        Boolean sourcePartialSeatingInd;
                        sourcePartialSeatingInd = this.isPartialSeatingInd();
                        Boolean copyPartialSeatingInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "partialSeatingInd", sourcePartialSeatingInd), sourcePartialSeatingInd));
                        copy.setPartialSeatingInd(copyPartialSeatingInd);
                    } else {
                        copy.partialSeatingInd = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SpecialReqDetailsType.SeatRequests.SeatRequest();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="SpecialRemark" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SpecialRemarkType"&gt;
     *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *                 &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "specialRemark"
    })
    public static class SpecialRemarks
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "SpecialRemark", required = true)
        protected List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> specialRemark;

        /**
         * Gets the value of the specialRemark property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the specialRemark property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSpecialRemark().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link SpecialReqDetailsType.SpecialRemarks.SpecialRemark }
         * 
         * 
         */
        public List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> getSpecialRemark() {
            if (specialRemark == null) {
                specialRemark = new ArrayList<SpecialReqDetailsType.SpecialRemarks.SpecialRemark>();
            }
            return this.specialRemark;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> theSpecialRemark;
                theSpecialRemark = (((this.specialRemark!= null)&&(!this.specialRemark.isEmpty()))?this.getSpecialRemark():null);
                strategy.appendField(locator, this, "specialRemark", buffer, theSpecialRemark);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialReqDetailsType.SpecialRemarks)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialReqDetailsType.SpecialRemarks that = ((SpecialReqDetailsType.SpecialRemarks) object);
            {
                List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> lhsSpecialRemark;
                lhsSpecialRemark = (((this.specialRemark!= null)&&(!this.specialRemark.isEmpty()))?this.getSpecialRemark():null);
                List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> rhsSpecialRemark;
                rhsSpecialRemark = (((that.specialRemark!= null)&&(!that.specialRemark.isEmpty()))?that.getSpecialRemark():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "specialRemark", lhsSpecialRemark), LocatorUtils.property(thatLocator, "specialRemark", rhsSpecialRemark), lhsSpecialRemark, rhsSpecialRemark)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> theSpecialRemark;
                theSpecialRemark = (((this.specialRemark!= null)&&(!this.specialRemark.isEmpty()))?this.getSpecialRemark():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialRemark", theSpecialRemark), currentHashCode, theSpecialRemark);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialReqDetailsType.SpecialRemarks) {
                final SpecialReqDetailsType.SpecialRemarks copy = ((SpecialReqDetailsType.SpecialRemarks) draftCopy);
                if ((this.specialRemark!= null)&&(!this.specialRemark.isEmpty())) {
                    List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> sourceSpecialRemark;
                    sourceSpecialRemark = (((this.specialRemark!= null)&&(!this.specialRemark.isEmpty()))?this.getSpecialRemark():null);
                    @SuppressWarnings("unchecked")
                    List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> copySpecialRemark = ((List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> ) strategy.copy(LocatorUtils.property(locator, "specialRemark", sourceSpecialRemark), sourceSpecialRemark));
                    copy.specialRemark = null;
                    if (copySpecialRemark!= null) {
                        List<SpecialReqDetailsType.SpecialRemarks.SpecialRemark> uniqueSpecialRemarkl = copy.getSpecialRemark();
                        uniqueSpecialRemarkl.addAll(copySpecialRemark);
                    }
                } else {
                    copy.specialRemark = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialReqDetailsType.SpecialRemarks();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SpecialRemarkType"&gt;
         *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
         *       &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class SpecialRemark
            extends SpecialRemarkType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "Operation")
            protected ActionType operation;
            @XmlAttribute(name = "RPH")
            protected String rph;

            /**
             * Gets the value of the operation property.
             * 
             * @return
             *     possible object is
             *     {@link ActionType }
             *     
             */
            public ActionType getOperation() {
                return operation;
            }

            /**
             * Sets the value of the operation property.
             * 
             * @param value
             *     allowed object is
             *     {@link ActionType }
             *     
             */
            public void setOperation(ActionType value) {
                this.operation = value;
            }

            /**
             * Gets the value of the rph property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getRPH() {
                return rph;
            }

            /**
             * Sets the value of the rph property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setRPH(String value) {
                this.rph = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                {
                    ActionType theOperation;
                    theOperation = this.getOperation();
                    strategy.appendField(locator, this, "operation", buffer, theOperation);
                }
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    strategy.appendField(locator, this, "rph", buffer, theRPH);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof SpecialReqDetailsType.SpecialRemarks.SpecialRemark)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                final SpecialReqDetailsType.SpecialRemarks.SpecialRemark that = ((SpecialReqDetailsType.SpecialRemarks.SpecialRemark) object);
                {
                    ActionType lhsOperation;
                    lhsOperation = this.getOperation();
                    ActionType rhsOperation;
                    rhsOperation = that.getOperation();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                        return false;
                    }
                }
                {
                    String lhsRPH;
                    lhsRPH = this.getRPH();
                    String rhsRPH;
                    rhsRPH = that.getRPH();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                {
                    ActionType theOperation;
                    theOperation = this.getOperation();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
                }
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                if (draftCopy instanceof SpecialReqDetailsType.SpecialRemarks.SpecialRemark) {
                    final SpecialReqDetailsType.SpecialRemarks.SpecialRemark copy = ((SpecialReqDetailsType.SpecialRemarks.SpecialRemark) draftCopy);
                    if (this.operation!= null) {
                        ActionType sourceOperation;
                        sourceOperation = this.getOperation();
                        ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                        copy.setOperation(copyOperation);
                    } else {
                        copy.operation = null;
                    }
                    if (this.rph!= null) {
                        String sourceRPH;
                        sourceRPH = this.getRPH();
                        String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                        copy.setRPH(copyRPH);
                    } else {
                        copy.rph = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SpecialReqDetailsType.SpecialRemarks.SpecialRemark();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="SpecialServiceRequest" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SpecialServiceRequestType"&gt;
     *                 &lt;attribute name="TravelerRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
     *                 &lt;attribute name="FlightRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "specialServiceRequest"
    })
    public static class SpecialServiceRequests
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "SpecialServiceRequest", required = true)
        protected List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> specialServiceRequest;

        /**
         * Gets the value of the specialServiceRequest property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the specialServiceRequest property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSpecialServiceRequest().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest }
         * 
         * 
         */
        public List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> getSpecialServiceRequest() {
            if (specialServiceRequest == null) {
                specialServiceRequest = new ArrayList<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest>();
            }
            return this.specialServiceRequest;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> theSpecialServiceRequest;
                theSpecialServiceRequest = (((this.specialServiceRequest!= null)&&(!this.specialServiceRequest.isEmpty()))?this.getSpecialServiceRequest():null);
                strategy.appendField(locator, this, "specialServiceRequest", buffer, theSpecialServiceRequest);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SpecialReqDetailsType.SpecialServiceRequests)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SpecialReqDetailsType.SpecialServiceRequests that = ((SpecialReqDetailsType.SpecialServiceRequests) object);
            {
                List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> lhsSpecialServiceRequest;
                lhsSpecialServiceRequest = (((this.specialServiceRequest!= null)&&(!this.specialServiceRequest.isEmpty()))?this.getSpecialServiceRequest():null);
                List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> rhsSpecialServiceRequest;
                rhsSpecialServiceRequest = (((that.specialServiceRequest!= null)&&(!that.specialServiceRequest.isEmpty()))?that.getSpecialServiceRequest():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "specialServiceRequest", lhsSpecialServiceRequest), LocatorUtils.property(thatLocator, "specialServiceRequest", rhsSpecialServiceRequest), lhsSpecialServiceRequest, rhsSpecialServiceRequest)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> theSpecialServiceRequest;
                theSpecialServiceRequest = (((this.specialServiceRequest!= null)&&(!this.specialServiceRequest.isEmpty()))?this.getSpecialServiceRequest():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialServiceRequest", theSpecialServiceRequest), currentHashCode, theSpecialServiceRequest);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SpecialReqDetailsType.SpecialServiceRequests) {
                final SpecialReqDetailsType.SpecialServiceRequests copy = ((SpecialReqDetailsType.SpecialServiceRequests) draftCopy);
                if ((this.specialServiceRequest!= null)&&(!this.specialServiceRequest.isEmpty())) {
                    List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> sourceSpecialServiceRequest;
                    sourceSpecialServiceRequest = (((this.specialServiceRequest!= null)&&(!this.specialServiceRequest.isEmpty()))?this.getSpecialServiceRequest():null);
                    @SuppressWarnings("unchecked")
                    List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> copySpecialServiceRequest = ((List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> ) strategy.copy(LocatorUtils.property(locator, "specialServiceRequest", sourceSpecialServiceRequest), sourceSpecialServiceRequest));
                    copy.specialServiceRequest = null;
                    if (copySpecialServiceRequest!= null) {
                        List<SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest> uniqueSpecialServiceRequestl = copy.getSpecialServiceRequest();
                        uniqueSpecialServiceRequestl.addAll(copySpecialServiceRequest);
                    }
                } else {
                    copy.specialServiceRequest = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SpecialReqDetailsType.SpecialServiceRequests();
        }


        /**
         *  AWG to revisit.
         * 
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}SpecialServiceRequestType"&gt;
         *       &lt;attribute name="TravelerRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
         *       &lt;attribute name="FlightRefNumberRPHList" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class SpecialServiceRequest
            extends SpecialServiceRequestType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "TravelerRefNumberRPHList")
            protected List<String> travelerRefNumberRPHList;
            @XmlAttribute(name = "FlightRefNumberRPHList")
            protected List<String> flightRefNumberRPHList;

            /**
             * Gets the value of the travelerRefNumberRPHList property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the travelerRefNumberRPHList property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getTravelerRefNumberRPHList().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * 
             * 
             */
            public List<String> getTravelerRefNumberRPHList() {
                if (travelerRefNumberRPHList == null) {
                    travelerRefNumberRPHList = new ArrayList<String>();
                }
                return this.travelerRefNumberRPHList;
            }

            /**
             * Gets the value of the flightRefNumberRPHList property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the flightRefNumberRPHList property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getFlightRefNumberRPHList().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * 
             * 
             */
            public List<String> getFlightRefNumberRPHList() {
                if (flightRefNumberRPHList == null) {
                    flightRefNumberRPHList = new ArrayList<String>();
                }
                return this.flightRefNumberRPHList;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                {
                    List<String> theTravelerRefNumberRPHList;
                    theTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                    strategy.appendField(locator, this, "travelerRefNumberRPHList", buffer, theTravelerRefNumberRPHList);
                }
                {
                    List<String> theFlightRefNumberRPHList;
                    theFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                    strategy.appendField(locator, this, "flightRefNumberRPHList", buffer, theFlightRefNumberRPHList);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                final SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest that = ((SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest) object);
                {
                    List<String> lhsTravelerRefNumberRPHList;
                    lhsTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                    List<String> rhsTravelerRefNumberRPHList;
                    rhsTravelerRefNumberRPHList = (((that.travelerRefNumberRPHList!= null)&&(!that.travelerRefNumberRPHList.isEmpty()))?that.getTravelerRefNumberRPHList():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerRefNumberRPHList", lhsTravelerRefNumberRPHList), LocatorUtils.property(thatLocator, "travelerRefNumberRPHList", rhsTravelerRefNumberRPHList), lhsTravelerRefNumberRPHList, rhsTravelerRefNumberRPHList)) {
                        return false;
                    }
                }
                {
                    List<String> lhsFlightRefNumberRPHList;
                    lhsFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                    List<String> rhsFlightRefNumberRPHList;
                    rhsFlightRefNumberRPHList = (((that.flightRefNumberRPHList!= null)&&(!that.flightRefNumberRPHList.isEmpty()))?that.getFlightRefNumberRPHList():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "flightRefNumberRPHList", lhsFlightRefNumberRPHList), LocatorUtils.property(thatLocator, "flightRefNumberRPHList", rhsFlightRefNumberRPHList), lhsFlightRefNumberRPHList, rhsFlightRefNumberRPHList)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                {
                    List<String> theTravelerRefNumberRPHList;
                    theTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerRefNumberRPHList", theTravelerRefNumberRPHList), currentHashCode, theTravelerRefNumberRPHList);
                }
                {
                    List<String> theFlightRefNumberRPHList;
                    theFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightRefNumberRPHList", theFlightRefNumberRPHList), currentHashCode, theFlightRefNumberRPHList);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                if (draftCopy instanceof SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest) {
                    final SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest copy = ((SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest) draftCopy);
                    if ((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty())) {
                        List<String> sourceTravelerRefNumberRPHList;
                        sourceTravelerRefNumberRPHList = (((this.travelerRefNumberRPHList!= null)&&(!this.travelerRefNumberRPHList.isEmpty()))?this.getTravelerRefNumberRPHList():null);
                        @SuppressWarnings("unchecked")
                        List<String> copyTravelerRefNumberRPHList = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "travelerRefNumberRPHList", sourceTravelerRefNumberRPHList), sourceTravelerRefNumberRPHList));
                        copy.travelerRefNumberRPHList = null;
                        if (copyTravelerRefNumberRPHList!= null) {
                            List<String> uniqueTravelerRefNumberRPHListl = copy.getTravelerRefNumberRPHList();
                            uniqueTravelerRefNumberRPHListl.addAll(copyTravelerRefNumberRPHList);
                        }
                    } else {
                        copy.travelerRefNumberRPHList = null;
                    }
                    if ((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty())) {
                        List<String> sourceFlightRefNumberRPHList;
                        sourceFlightRefNumberRPHList = (((this.flightRefNumberRPHList!= null)&&(!this.flightRefNumberRPHList.isEmpty()))?this.getFlightRefNumberRPHList():null);
                        @SuppressWarnings("unchecked")
                        List<String> copyFlightRefNumberRPHList = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "flightRefNumberRPHList", sourceFlightRefNumberRPHList), sourceFlightRefNumberRPHList));
                        copy.flightRefNumberRPHList = null;
                        if (copyFlightRefNumberRPHList!= null) {
                            List<String> uniqueFlightRefNumberRPHListl = copy.getFlightRefNumberRPHList();
                            uniqueFlightRefNumberRPHListl.addAll(copyFlightRefNumberRPHList);
                        }
                    } else {
                        copy.flightRefNumberRPHList = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new SpecialReqDetailsType.SpecialServiceRequests.SpecialServiceRequest();
            }

        }

    }

}
