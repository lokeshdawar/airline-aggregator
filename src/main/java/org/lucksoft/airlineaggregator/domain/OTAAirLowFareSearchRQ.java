//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="POS" type="{http://www.opentravel.org/OTA/2003/05}POS_Type"/&gt;
 *         &lt;element name="ProcessingInfo" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AirProcessingInfoGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="OriginDestinationInformation" maxOccurs="10"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}OriginDestinationInformationType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="AlternateLocationInfo" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attribute name="OriginLocation" type="{http://www.opentravel.org/OTA/2003/05}ListOfStringLength1to8" /&gt;
 *                           &lt;attribute name="DestinationLocation" type="{http://www.opentravel.org/OTA/2003/05}ListOfStringLength1to8" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element ref="{http://www.opentravel.org/OTA/2003/05}TPA_Extensions" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *                 &lt;attribute name="RefNumber" type="{http://www.opentravel.org/OTA/2003/05}Numeric1to99" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="SpecificFlightInfo" type="{http://www.opentravel.org/OTA/2003/05}SpecificFlightInfoType" minOccurs="0"/&gt;
 *         &lt;element name="TravelPreferences" maxOccurs="10" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AirSearchPrefsType"&gt;
 *                 &lt;attribute name="FlexDatePref"&gt;
 *                   &lt;simpleType&gt;
 *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                       &lt;enumeration value="Outbound"/&gt;
 *                       &lt;enumeration value="Return"/&gt;
 *                       &lt;enumeration value="Both"/&gt;
 *                     &lt;/restriction&gt;
 *                   &lt;/simpleType&gt;
 *                 &lt;/attribute&gt;
 *                 &lt;attribute name="FlexWeekendIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="FlexLevelIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="NoFareBreakIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="OriginDestinationRPHs" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="TravelerInfoSummary"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}TravelerInfoSummaryType"&gt;
 *                 &lt;attribute name="TicketingCountryCode" type="{http://www.opentravel.org/OTA/2003/05}ISO3166" /&gt;
 *                 &lt;attribute name="SpecificPTC_Indicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}MaxResponsesGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}OTA_PayloadStdAttributes"/&gt;
 *       &lt;attribute name="DirectFlightsOnly" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="AvailableFlightsOnly" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "pos",
    "processingInfo",
    "originDestinationInformation",
    "specificFlightInfo",
    "travelPreferences",
    "travelerInfoSummary"
})
@XmlRootElement(name = "OTA_AirLowFareSearchRQ")
public class OTAAirLowFareSearchRQ
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "POS", required = true)
    protected POSType pos;
    @XmlElement(name = "ProcessingInfo")
    protected OTAAirLowFareSearchRQ.ProcessingInfo processingInfo;
    @XmlElement(name = "OriginDestinationInformation", required = true)
    protected List<OTAAirLowFareSearchRQ.OriginDestinationInformation> originDestinationInformation;
    @XmlElement(name = "SpecificFlightInfo")
    protected SpecificFlightInfoType specificFlightInfo;
    @XmlElement(name = "TravelPreferences")
    protected List<OTAAirLowFareSearchRQ.TravelPreferences> travelPreferences;
    @XmlElement(name = "TravelerInfoSummary", required = true)
    protected OTAAirLowFareSearchRQ.TravelerInfoSummary travelerInfoSummary;
    @XmlAttribute(name = "DirectFlightsOnly")
    protected Boolean directFlightsOnly;
    @XmlAttribute(name = "AvailableFlightsOnly")
    protected Boolean availableFlightsOnly;
    @XmlAttribute(name = "MaxResponses")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger maxResponses;
    @XmlAttribute(name = "EchoToken")
    protected String echoToken;
    @XmlAttribute(name = "TimeStamp")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar timeStamp;
    @XmlAttribute(name = "Target")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String target;
    @XmlAttribute(name = "Version", required = true)
    protected BigDecimal version;
    @XmlAttribute(name = "TransactionIdentifier")
    protected String transactionIdentifier;
    @XmlAttribute(name = "SequenceNmbr")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger sequenceNmbr;
    @XmlAttribute(name = "TransactionStatusCode")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String transactionStatusCode;
    @XmlAttribute(name = "RetransmissionIndicator")
    protected Boolean retransmissionIndicator;
    @XmlAttribute(name = "PrimaryLangID")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String primaryLangID;
    @XmlAttribute(name = "AltLangID")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String altLangID;

    /**
     * Gets the value of the pos property.
     * 
     * @return
     *     possible object is
     *     {@link POSType }
     *     
     */
    public POSType getPOS() {
        return pos;
    }

    /**
     * Sets the value of the pos property.
     * 
     * @param value
     *     allowed object is
     *     {@link POSType }
     *     
     */
    public void setPOS(POSType value) {
        this.pos = value;
    }

    /**
     * Gets the value of the processingInfo property.
     * 
     * @return
     *     possible object is
     *     {@link OTAAirLowFareSearchRQ.ProcessingInfo }
     *     
     */
    public OTAAirLowFareSearchRQ.ProcessingInfo getProcessingInfo() {
        return processingInfo;
    }

    /**
     * Sets the value of the processingInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link OTAAirLowFareSearchRQ.ProcessingInfo }
     *     
     */
    public void setProcessingInfo(OTAAirLowFareSearchRQ.ProcessingInfo value) {
        this.processingInfo = value;
    }

    /**
     * Gets the value of the originDestinationInformation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the originDestinationInformation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOriginDestinationInformation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OTAAirLowFareSearchRQ.OriginDestinationInformation }
     * 
     * 
     */
    public List<OTAAirLowFareSearchRQ.OriginDestinationInformation> getOriginDestinationInformation() {
        if (originDestinationInformation == null) {
            originDestinationInformation = new ArrayList<OTAAirLowFareSearchRQ.OriginDestinationInformation>();
        }
        return this.originDestinationInformation;
    }

    /**
     * Gets the value of the specificFlightInfo property.
     * 
     * @return
     *     possible object is
     *     {@link SpecificFlightInfoType }
     *     
     */
    public SpecificFlightInfoType getSpecificFlightInfo() {
        return specificFlightInfo;
    }

    /**
     * Sets the value of the specificFlightInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpecificFlightInfoType }
     *     
     */
    public void setSpecificFlightInfo(SpecificFlightInfoType value) {
        this.specificFlightInfo = value;
    }

    /**
     * Gets the value of the travelPreferences property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the travelPreferences property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTravelPreferences().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OTAAirLowFareSearchRQ.TravelPreferences }
     * 
     * 
     */
    public List<OTAAirLowFareSearchRQ.TravelPreferences> getTravelPreferences() {
        if (travelPreferences == null) {
            travelPreferences = new ArrayList<OTAAirLowFareSearchRQ.TravelPreferences>();
        }
        return this.travelPreferences;
    }

    /**
     * Gets the value of the travelerInfoSummary property.
     * 
     * @return
     *     possible object is
     *     {@link OTAAirLowFareSearchRQ.TravelerInfoSummary }
     *     
     */
    public OTAAirLowFareSearchRQ.TravelerInfoSummary getTravelerInfoSummary() {
        return travelerInfoSummary;
    }

    /**
     * Sets the value of the travelerInfoSummary property.
     * 
     * @param value
     *     allowed object is
     *     {@link OTAAirLowFareSearchRQ.TravelerInfoSummary }
     *     
     */
    public void setTravelerInfoSummary(OTAAirLowFareSearchRQ.TravelerInfoSummary value) {
        this.travelerInfoSummary = value;
    }

    /**
     * Gets the value of the directFlightsOnly property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isDirectFlightsOnly() {
        if (directFlightsOnly == null) {
            return false;
        } else {
            return directFlightsOnly;
        }
    }

    /**
     * Sets the value of the directFlightsOnly property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setDirectFlightsOnly(Boolean value) {
        this.directFlightsOnly = value;
    }

    /**
     * Gets the value of the availableFlightsOnly property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAvailableFlightsOnly() {
        return availableFlightsOnly;
    }

    /**
     * Sets the value of the availableFlightsOnly property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAvailableFlightsOnly(Boolean value) {
        this.availableFlightsOnly = value;
    }

    /**
     * Gets the value of the maxResponses property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxResponses() {
        return maxResponses;
    }

    /**
     * Sets the value of the maxResponses property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxResponses(BigInteger value) {
        this.maxResponses = value;
    }

    /**
     * Gets the value of the echoToken property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEchoToken() {
        return echoToken;
    }

    /**
     * Sets the value of the echoToken property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEchoToken(String value) {
        this.echoToken = value;
    }

    /**
     * Gets the value of the timeStamp property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getTimeStamp() {
        return timeStamp;
    }

    /**
     * Sets the value of the timeStamp property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setTimeStamp(XMLGregorianCalendar value) {
        this.timeStamp = value;
    }

    /**
     * Gets the value of the target property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTarget() {
        if (target == null) {
            return "Production";
        } else {
            return target;
        }
    }

    /**
     * Sets the value of the target property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTarget(String value) {
        this.target = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setVersion(BigDecimal value) {
        this.version = value;
    }

    /**
     * Gets the value of the transactionIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTransactionIdentifier() {
        return transactionIdentifier;
    }

    /**
     * Sets the value of the transactionIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTransactionIdentifier(String value) {
        this.transactionIdentifier = value;
    }

    /**
     * Gets the value of the sequenceNmbr property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getSequenceNmbr() {
        return sequenceNmbr;
    }

    /**
     * Sets the value of the sequenceNmbr property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setSequenceNmbr(BigInteger value) {
        this.sequenceNmbr = value;
    }

    /**
     * Gets the value of the transactionStatusCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTransactionStatusCode() {
        return transactionStatusCode;
    }

    /**
     * Sets the value of the transactionStatusCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTransactionStatusCode(String value) {
        this.transactionStatusCode = value;
    }

    /**
     * Gets the value of the retransmissionIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isRetransmissionIndicator() {
        return retransmissionIndicator;
    }

    /**
     * Sets the value of the retransmissionIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setRetransmissionIndicator(Boolean value) {
        this.retransmissionIndicator = value;
    }

    /**
     * Gets the value of the primaryLangID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrimaryLangID() {
        return primaryLangID;
    }

    /**
     * Sets the value of the primaryLangID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrimaryLangID(String value) {
        this.primaryLangID = value;
    }

    /**
     * Gets the value of the altLangID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAltLangID() {
        return altLangID;
    }

    /**
     * Sets the value of the altLangID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAltLangID(String value) {
        this.altLangID = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            POSType thePOS;
            thePOS = this.getPOS();
            strategy.appendField(locator, this, "pos", buffer, thePOS);
        }
        {
            OTAAirLowFareSearchRQ.ProcessingInfo theProcessingInfo;
            theProcessingInfo = this.getProcessingInfo();
            strategy.appendField(locator, this, "processingInfo", buffer, theProcessingInfo);
        }
        {
            List<OTAAirLowFareSearchRQ.OriginDestinationInformation> theOriginDestinationInformation;
            theOriginDestinationInformation = (((this.originDestinationInformation!= null)&&(!this.originDestinationInformation.isEmpty()))?this.getOriginDestinationInformation():null);
            strategy.appendField(locator, this, "originDestinationInformation", buffer, theOriginDestinationInformation);
        }
        {
            SpecificFlightInfoType theSpecificFlightInfo;
            theSpecificFlightInfo = this.getSpecificFlightInfo();
            strategy.appendField(locator, this, "specificFlightInfo", buffer, theSpecificFlightInfo);
        }
        {
            List<OTAAirLowFareSearchRQ.TravelPreferences> theTravelPreferences;
            theTravelPreferences = (((this.travelPreferences!= null)&&(!this.travelPreferences.isEmpty()))?this.getTravelPreferences():null);
            strategy.appendField(locator, this, "travelPreferences", buffer, theTravelPreferences);
        }
        {
            OTAAirLowFareSearchRQ.TravelerInfoSummary theTravelerInfoSummary;
            theTravelerInfoSummary = this.getTravelerInfoSummary();
            strategy.appendField(locator, this, "travelerInfoSummary", buffer, theTravelerInfoSummary);
        }
        {
            boolean theDirectFlightsOnly;
            theDirectFlightsOnly = ((this.directFlightsOnly!= null)?this.isDirectFlightsOnly():false);
            strategy.appendField(locator, this, "directFlightsOnly", buffer, theDirectFlightsOnly);
        }
        {
            Boolean theAvailableFlightsOnly;
            theAvailableFlightsOnly = this.isAvailableFlightsOnly();
            strategy.appendField(locator, this, "availableFlightsOnly", buffer, theAvailableFlightsOnly);
        }
        {
            BigInteger theMaxResponses;
            theMaxResponses = this.getMaxResponses();
            strategy.appendField(locator, this, "maxResponses", buffer, theMaxResponses);
        }
        {
            String theEchoToken;
            theEchoToken = this.getEchoToken();
            strategy.appendField(locator, this, "echoToken", buffer, theEchoToken);
        }
        {
            XMLGregorianCalendar theTimeStamp;
            theTimeStamp = this.getTimeStamp();
            strategy.appendField(locator, this, "timeStamp", buffer, theTimeStamp);
        }
        {
            String theTarget;
            theTarget = this.getTarget();
            strategy.appendField(locator, this, "target", buffer, theTarget);
        }
        {
            BigDecimal theVersion;
            theVersion = this.getVersion();
            strategy.appendField(locator, this, "version", buffer, theVersion);
        }
        {
            String theTransactionIdentifier;
            theTransactionIdentifier = this.getTransactionIdentifier();
            strategy.appendField(locator, this, "transactionIdentifier", buffer, theTransactionIdentifier);
        }
        {
            BigInteger theSequenceNmbr;
            theSequenceNmbr = this.getSequenceNmbr();
            strategy.appendField(locator, this, "sequenceNmbr", buffer, theSequenceNmbr);
        }
        {
            String theTransactionStatusCode;
            theTransactionStatusCode = this.getTransactionStatusCode();
            strategy.appendField(locator, this, "transactionStatusCode", buffer, theTransactionStatusCode);
        }
        {
            Boolean theRetransmissionIndicator;
            theRetransmissionIndicator = this.isRetransmissionIndicator();
            strategy.appendField(locator, this, "retransmissionIndicator", buffer, theRetransmissionIndicator);
        }
        {
            String thePrimaryLangID;
            thePrimaryLangID = this.getPrimaryLangID();
            strategy.appendField(locator, this, "primaryLangID", buffer, thePrimaryLangID);
        }
        {
            String theAltLangID;
            theAltLangID = this.getAltLangID();
            strategy.appendField(locator, this, "altLangID", buffer, theAltLangID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof OTAAirLowFareSearchRQ)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final OTAAirLowFareSearchRQ that = ((OTAAirLowFareSearchRQ) object);
        {
            POSType lhsPOS;
            lhsPOS = this.getPOS();
            POSType rhsPOS;
            rhsPOS = that.getPOS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pos", lhsPOS), LocatorUtils.property(thatLocator, "pos", rhsPOS), lhsPOS, rhsPOS)) {
                return false;
            }
        }
        {
            OTAAirLowFareSearchRQ.ProcessingInfo lhsProcessingInfo;
            lhsProcessingInfo = this.getProcessingInfo();
            OTAAirLowFareSearchRQ.ProcessingInfo rhsProcessingInfo;
            rhsProcessingInfo = that.getProcessingInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "processingInfo", lhsProcessingInfo), LocatorUtils.property(thatLocator, "processingInfo", rhsProcessingInfo), lhsProcessingInfo, rhsProcessingInfo)) {
                return false;
            }
        }
        {
            List<OTAAirLowFareSearchRQ.OriginDestinationInformation> lhsOriginDestinationInformation;
            lhsOriginDestinationInformation = (((this.originDestinationInformation!= null)&&(!this.originDestinationInformation.isEmpty()))?this.getOriginDestinationInformation():null);
            List<OTAAirLowFareSearchRQ.OriginDestinationInformation> rhsOriginDestinationInformation;
            rhsOriginDestinationInformation = (((that.originDestinationInformation!= null)&&(!that.originDestinationInformation.isEmpty()))?that.getOriginDestinationInformation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "originDestinationInformation", lhsOriginDestinationInformation), LocatorUtils.property(thatLocator, "originDestinationInformation", rhsOriginDestinationInformation), lhsOriginDestinationInformation, rhsOriginDestinationInformation)) {
                return false;
            }
        }
        {
            SpecificFlightInfoType lhsSpecificFlightInfo;
            lhsSpecificFlightInfo = this.getSpecificFlightInfo();
            SpecificFlightInfoType rhsSpecificFlightInfo;
            rhsSpecificFlightInfo = that.getSpecificFlightInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specificFlightInfo", lhsSpecificFlightInfo), LocatorUtils.property(thatLocator, "specificFlightInfo", rhsSpecificFlightInfo), lhsSpecificFlightInfo, rhsSpecificFlightInfo)) {
                return false;
            }
        }
        {
            List<OTAAirLowFareSearchRQ.TravelPreferences> lhsTravelPreferences;
            lhsTravelPreferences = (((this.travelPreferences!= null)&&(!this.travelPreferences.isEmpty()))?this.getTravelPreferences():null);
            List<OTAAirLowFareSearchRQ.TravelPreferences> rhsTravelPreferences;
            rhsTravelPreferences = (((that.travelPreferences!= null)&&(!that.travelPreferences.isEmpty()))?that.getTravelPreferences():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelPreferences", lhsTravelPreferences), LocatorUtils.property(thatLocator, "travelPreferences", rhsTravelPreferences), lhsTravelPreferences, rhsTravelPreferences)) {
                return false;
            }
        }
        {
            OTAAirLowFareSearchRQ.TravelerInfoSummary lhsTravelerInfoSummary;
            lhsTravelerInfoSummary = this.getTravelerInfoSummary();
            OTAAirLowFareSearchRQ.TravelerInfoSummary rhsTravelerInfoSummary;
            rhsTravelerInfoSummary = that.getTravelerInfoSummary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerInfoSummary", lhsTravelerInfoSummary), LocatorUtils.property(thatLocator, "travelerInfoSummary", rhsTravelerInfoSummary), lhsTravelerInfoSummary, rhsTravelerInfoSummary)) {
                return false;
            }
        }
        {
            boolean lhsDirectFlightsOnly;
            lhsDirectFlightsOnly = ((this.directFlightsOnly!= null)?this.isDirectFlightsOnly():false);
            boolean rhsDirectFlightsOnly;
            rhsDirectFlightsOnly = ((that.directFlightsOnly!= null)?that.isDirectFlightsOnly():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directFlightsOnly", lhsDirectFlightsOnly), LocatorUtils.property(thatLocator, "directFlightsOnly", rhsDirectFlightsOnly), lhsDirectFlightsOnly, rhsDirectFlightsOnly)) {
                return false;
            }
        }
        {
            Boolean lhsAvailableFlightsOnly;
            lhsAvailableFlightsOnly = this.isAvailableFlightsOnly();
            Boolean rhsAvailableFlightsOnly;
            rhsAvailableFlightsOnly = that.isAvailableFlightsOnly();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "availableFlightsOnly", lhsAvailableFlightsOnly), LocatorUtils.property(thatLocator, "availableFlightsOnly", rhsAvailableFlightsOnly), lhsAvailableFlightsOnly, rhsAvailableFlightsOnly)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxResponses;
            lhsMaxResponses = this.getMaxResponses();
            BigInteger rhsMaxResponses;
            rhsMaxResponses = that.getMaxResponses();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxResponses", lhsMaxResponses), LocatorUtils.property(thatLocator, "maxResponses", rhsMaxResponses), lhsMaxResponses, rhsMaxResponses)) {
                return false;
            }
        }
        {
            String lhsEchoToken;
            lhsEchoToken = this.getEchoToken();
            String rhsEchoToken;
            rhsEchoToken = that.getEchoToken();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "echoToken", lhsEchoToken), LocatorUtils.property(thatLocator, "echoToken", rhsEchoToken), lhsEchoToken, rhsEchoToken)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsTimeStamp;
            lhsTimeStamp = this.getTimeStamp();
            XMLGregorianCalendar rhsTimeStamp;
            rhsTimeStamp = that.getTimeStamp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timeStamp", lhsTimeStamp), LocatorUtils.property(thatLocator, "timeStamp", rhsTimeStamp), lhsTimeStamp, rhsTimeStamp)) {
                return false;
            }
        }
        {
            String lhsTarget;
            lhsTarget = this.getTarget();
            String rhsTarget;
            rhsTarget = that.getTarget();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "target", lhsTarget), LocatorUtils.property(thatLocator, "target", rhsTarget), lhsTarget, rhsTarget)) {
                return false;
            }
        }
        {
            BigDecimal lhsVersion;
            lhsVersion = this.getVersion();
            BigDecimal rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            String lhsTransactionIdentifier;
            lhsTransactionIdentifier = this.getTransactionIdentifier();
            String rhsTransactionIdentifier;
            rhsTransactionIdentifier = that.getTransactionIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transactionIdentifier", lhsTransactionIdentifier), LocatorUtils.property(thatLocator, "transactionIdentifier", rhsTransactionIdentifier), lhsTransactionIdentifier, rhsTransactionIdentifier)) {
                return false;
            }
        }
        {
            BigInteger lhsSequenceNmbr;
            lhsSequenceNmbr = this.getSequenceNmbr();
            BigInteger rhsSequenceNmbr;
            rhsSequenceNmbr = that.getSequenceNmbr();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sequenceNmbr", lhsSequenceNmbr), LocatorUtils.property(thatLocator, "sequenceNmbr", rhsSequenceNmbr), lhsSequenceNmbr, rhsSequenceNmbr)) {
                return false;
            }
        }
        {
            String lhsTransactionStatusCode;
            lhsTransactionStatusCode = this.getTransactionStatusCode();
            String rhsTransactionStatusCode;
            rhsTransactionStatusCode = that.getTransactionStatusCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transactionStatusCode", lhsTransactionStatusCode), LocatorUtils.property(thatLocator, "transactionStatusCode", rhsTransactionStatusCode), lhsTransactionStatusCode, rhsTransactionStatusCode)) {
                return false;
            }
        }
        {
            Boolean lhsRetransmissionIndicator;
            lhsRetransmissionIndicator = this.isRetransmissionIndicator();
            Boolean rhsRetransmissionIndicator;
            rhsRetransmissionIndicator = that.isRetransmissionIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "retransmissionIndicator", lhsRetransmissionIndicator), LocatorUtils.property(thatLocator, "retransmissionIndicator", rhsRetransmissionIndicator), lhsRetransmissionIndicator, rhsRetransmissionIndicator)) {
                return false;
            }
        }
        {
            String lhsPrimaryLangID;
            lhsPrimaryLangID = this.getPrimaryLangID();
            String rhsPrimaryLangID;
            rhsPrimaryLangID = that.getPrimaryLangID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "primaryLangID", lhsPrimaryLangID), LocatorUtils.property(thatLocator, "primaryLangID", rhsPrimaryLangID), lhsPrimaryLangID, rhsPrimaryLangID)) {
                return false;
            }
        }
        {
            String lhsAltLangID;
            lhsAltLangID = this.getAltLangID();
            String rhsAltLangID;
            rhsAltLangID = that.getAltLangID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "altLangID", lhsAltLangID), LocatorUtils.property(thatLocator, "altLangID", rhsAltLangID), lhsAltLangID, rhsAltLangID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            POSType thePOS;
            thePOS = this.getPOS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pos", thePOS), currentHashCode, thePOS);
        }
        {
            OTAAirLowFareSearchRQ.ProcessingInfo theProcessingInfo;
            theProcessingInfo = this.getProcessingInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "processingInfo", theProcessingInfo), currentHashCode, theProcessingInfo);
        }
        {
            List<OTAAirLowFareSearchRQ.OriginDestinationInformation> theOriginDestinationInformation;
            theOriginDestinationInformation = (((this.originDestinationInformation!= null)&&(!this.originDestinationInformation.isEmpty()))?this.getOriginDestinationInformation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originDestinationInformation", theOriginDestinationInformation), currentHashCode, theOriginDestinationInformation);
        }
        {
            SpecificFlightInfoType theSpecificFlightInfo;
            theSpecificFlightInfo = this.getSpecificFlightInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specificFlightInfo", theSpecificFlightInfo), currentHashCode, theSpecificFlightInfo);
        }
        {
            List<OTAAirLowFareSearchRQ.TravelPreferences> theTravelPreferences;
            theTravelPreferences = (((this.travelPreferences!= null)&&(!this.travelPreferences.isEmpty()))?this.getTravelPreferences():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelPreferences", theTravelPreferences), currentHashCode, theTravelPreferences);
        }
        {
            OTAAirLowFareSearchRQ.TravelerInfoSummary theTravelerInfoSummary;
            theTravelerInfoSummary = this.getTravelerInfoSummary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerInfoSummary", theTravelerInfoSummary), currentHashCode, theTravelerInfoSummary);
        }
        {
            boolean theDirectFlightsOnly;
            theDirectFlightsOnly = ((this.directFlightsOnly!= null)?this.isDirectFlightsOnly():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directFlightsOnly", theDirectFlightsOnly), currentHashCode, theDirectFlightsOnly);
        }
        {
            Boolean theAvailableFlightsOnly;
            theAvailableFlightsOnly = this.isAvailableFlightsOnly();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "availableFlightsOnly", theAvailableFlightsOnly), currentHashCode, theAvailableFlightsOnly);
        }
        {
            BigInteger theMaxResponses;
            theMaxResponses = this.getMaxResponses();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxResponses", theMaxResponses), currentHashCode, theMaxResponses);
        }
        {
            String theEchoToken;
            theEchoToken = this.getEchoToken();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "echoToken", theEchoToken), currentHashCode, theEchoToken);
        }
        {
            XMLGregorianCalendar theTimeStamp;
            theTimeStamp = this.getTimeStamp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timeStamp", theTimeStamp), currentHashCode, theTimeStamp);
        }
        {
            String theTarget;
            theTarget = this.getTarget();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "target", theTarget), currentHashCode, theTarget);
        }
        {
            BigDecimal theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            String theTransactionIdentifier;
            theTransactionIdentifier = this.getTransactionIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transactionIdentifier", theTransactionIdentifier), currentHashCode, theTransactionIdentifier);
        }
        {
            BigInteger theSequenceNmbr;
            theSequenceNmbr = this.getSequenceNmbr();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sequenceNmbr", theSequenceNmbr), currentHashCode, theSequenceNmbr);
        }
        {
            String theTransactionStatusCode;
            theTransactionStatusCode = this.getTransactionStatusCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transactionStatusCode", theTransactionStatusCode), currentHashCode, theTransactionStatusCode);
        }
        {
            Boolean theRetransmissionIndicator;
            theRetransmissionIndicator = this.isRetransmissionIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "retransmissionIndicator", theRetransmissionIndicator), currentHashCode, theRetransmissionIndicator);
        }
        {
            String thePrimaryLangID;
            thePrimaryLangID = this.getPrimaryLangID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "primaryLangID", thePrimaryLangID), currentHashCode, thePrimaryLangID);
        }
        {
            String theAltLangID;
            theAltLangID = this.getAltLangID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "altLangID", theAltLangID), currentHashCode, theAltLangID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof OTAAirLowFareSearchRQ) {
            final OTAAirLowFareSearchRQ copy = ((OTAAirLowFareSearchRQ) draftCopy);
            if (this.pos!= null) {
                POSType sourcePOS;
                sourcePOS = this.getPOS();
                POSType copyPOS = ((POSType) strategy.copy(LocatorUtils.property(locator, "pos", sourcePOS), sourcePOS));
                copy.setPOS(copyPOS);
            } else {
                copy.pos = null;
            }
            if (this.processingInfo!= null) {
                OTAAirLowFareSearchRQ.ProcessingInfo sourceProcessingInfo;
                sourceProcessingInfo = this.getProcessingInfo();
                OTAAirLowFareSearchRQ.ProcessingInfo copyProcessingInfo = ((OTAAirLowFareSearchRQ.ProcessingInfo) strategy.copy(LocatorUtils.property(locator, "processingInfo", sourceProcessingInfo), sourceProcessingInfo));
                copy.setProcessingInfo(copyProcessingInfo);
            } else {
                copy.processingInfo = null;
            }
            if ((this.originDestinationInformation!= null)&&(!this.originDestinationInformation.isEmpty())) {
                List<OTAAirLowFareSearchRQ.OriginDestinationInformation> sourceOriginDestinationInformation;
                sourceOriginDestinationInformation = (((this.originDestinationInformation!= null)&&(!this.originDestinationInformation.isEmpty()))?this.getOriginDestinationInformation():null);
                @SuppressWarnings("unchecked")
                List<OTAAirLowFareSearchRQ.OriginDestinationInformation> copyOriginDestinationInformation = ((List<OTAAirLowFareSearchRQ.OriginDestinationInformation> ) strategy.copy(LocatorUtils.property(locator, "originDestinationInformation", sourceOriginDestinationInformation), sourceOriginDestinationInformation));
                copy.originDestinationInformation = null;
                if (copyOriginDestinationInformation!= null) {
                    List<OTAAirLowFareSearchRQ.OriginDestinationInformation> uniqueOriginDestinationInformationl = copy.getOriginDestinationInformation();
                    uniqueOriginDestinationInformationl.addAll(copyOriginDestinationInformation);
                }
            } else {
                copy.originDestinationInformation = null;
            }
            if (this.specificFlightInfo!= null) {
                SpecificFlightInfoType sourceSpecificFlightInfo;
                sourceSpecificFlightInfo = this.getSpecificFlightInfo();
                SpecificFlightInfoType copySpecificFlightInfo = ((SpecificFlightInfoType) strategy.copy(LocatorUtils.property(locator, "specificFlightInfo", sourceSpecificFlightInfo), sourceSpecificFlightInfo));
                copy.setSpecificFlightInfo(copySpecificFlightInfo);
            } else {
                copy.specificFlightInfo = null;
            }
            if ((this.travelPreferences!= null)&&(!this.travelPreferences.isEmpty())) {
                List<OTAAirLowFareSearchRQ.TravelPreferences> sourceTravelPreferences;
                sourceTravelPreferences = (((this.travelPreferences!= null)&&(!this.travelPreferences.isEmpty()))?this.getTravelPreferences():null);
                @SuppressWarnings("unchecked")
                List<OTAAirLowFareSearchRQ.TravelPreferences> copyTravelPreferences = ((List<OTAAirLowFareSearchRQ.TravelPreferences> ) strategy.copy(LocatorUtils.property(locator, "travelPreferences", sourceTravelPreferences), sourceTravelPreferences));
                copy.travelPreferences = null;
                if (copyTravelPreferences!= null) {
                    List<OTAAirLowFareSearchRQ.TravelPreferences> uniqueTravelPreferencesl = copy.getTravelPreferences();
                    uniqueTravelPreferencesl.addAll(copyTravelPreferences);
                }
            } else {
                copy.travelPreferences = null;
            }
            if (this.travelerInfoSummary!= null) {
                OTAAirLowFareSearchRQ.TravelerInfoSummary sourceTravelerInfoSummary;
                sourceTravelerInfoSummary = this.getTravelerInfoSummary();
                OTAAirLowFareSearchRQ.TravelerInfoSummary copyTravelerInfoSummary = ((OTAAirLowFareSearchRQ.TravelerInfoSummary) strategy.copy(LocatorUtils.property(locator, "travelerInfoSummary", sourceTravelerInfoSummary), sourceTravelerInfoSummary));
                copy.setTravelerInfoSummary(copyTravelerInfoSummary);
            } else {
                copy.travelerInfoSummary = null;
            }
            if (this.directFlightsOnly!= null) {
                boolean sourceDirectFlightsOnly;
                sourceDirectFlightsOnly = ((this.directFlightsOnly!= null)?this.isDirectFlightsOnly():false);
                boolean copyDirectFlightsOnly = strategy.copy(LocatorUtils.property(locator, "directFlightsOnly", sourceDirectFlightsOnly), sourceDirectFlightsOnly);
                copy.setDirectFlightsOnly(copyDirectFlightsOnly);
            } else {
                copy.directFlightsOnly = null;
            }
            if (this.availableFlightsOnly!= null) {
                Boolean sourceAvailableFlightsOnly;
                sourceAvailableFlightsOnly = this.isAvailableFlightsOnly();
                Boolean copyAvailableFlightsOnly = ((Boolean) strategy.copy(LocatorUtils.property(locator, "availableFlightsOnly", sourceAvailableFlightsOnly), sourceAvailableFlightsOnly));
                copy.setAvailableFlightsOnly(copyAvailableFlightsOnly);
            } else {
                copy.availableFlightsOnly = null;
            }
            if (this.maxResponses!= null) {
                BigInteger sourceMaxResponses;
                sourceMaxResponses = this.getMaxResponses();
                BigInteger copyMaxResponses = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxResponses", sourceMaxResponses), sourceMaxResponses));
                copy.setMaxResponses(copyMaxResponses);
            } else {
                copy.maxResponses = null;
            }
            if (this.echoToken!= null) {
                String sourceEchoToken;
                sourceEchoToken = this.getEchoToken();
                String copyEchoToken = ((String) strategy.copy(LocatorUtils.property(locator, "echoToken", sourceEchoToken), sourceEchoToken));
                copy.setEchoToken(copyEchoToken);
            } else {
                copy.echoToken = null;
            }
            if (this.timeStamp!= null) {
                XMLGregorianCalendar sourceTimeStamp;
                sourceTimeStamp = this.getTimeStamp();
                XMLGregorianCalendar copyTimeStamp = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "timeStamp", sourceTimeStamp), sourceTimeStamp));
                copy.setTimeStamp(copyTimeStamp);
            } else {
                copy.timeStamp = null;
            }
            if (this.target!= null) {
                String sourceTarget;
                sourceTarget = this.getTarget();
                String copyTarget = ((String) strategy.copy(LocatorUtils.property(locator, "target", sourceTarget), sourceTarget));
                copy.setTarget(copyTarget);
            } else {
                copy.target = null;
            }
            if (this.version!= null) {
                BigDecimal sourceVersion;
                sourceVersion = this.getVersion();
                BigDecimal copyVersion = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "version", sourceVersion), sourceVersion));
                copy.setVersion(copyVersion);
            } else {
                copy.version = null;
            }
            if (this.transactionIdentifier!= null) {
                String sourceTransactionIdentifier;
                sourceTransactionIdentifier = this.getTransactionIdentifier();
                String copyTransactionIdentifier = ((String) strategy.copy(LocatorUtils.property(locator, "transactionIdentifier", sourceTransactionIdentifier), sourceTransactionIdentifier));
                copy.setTransactionIdentifier(copyTransactionIdentifier);
            } else {
                copy.transactionIdentifier = null;
            }
            if (this.sequenceNmbr!= null) {
                BigInteger sourceSequenceNmbr;
                sourceSequenceNmbr = this.getSequenceNmbr();
                BigInteger copySequenceNmbr = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "sequenceNmbr", sourceSequenceNmbr), sourceSequenceNmbr));
                copy.setSequenceNmbr(copySequenceNmbr);
            } else {
                copy.sequenceNmbr = null;
            }
            if (this.transactionStatusCode!= null) {
                String sourceTransactionStatusCode;
                sourceTransactionStatusCode = this.getTransactionStatusCode();
                String copyTransactionStatusCode = ((String) strategy.copy(LocatorUtils.property(locator, "transactionStatusCode", sourceTransactionStatusCode), sourceTransactionStatusCode));
                copy.setTransactionStatusCode(copyTransactionStatusCode);
            } else {
                copy.transactionStatusCode = null;
            }
            if (this.retransmissionIndicator!= null) {
                Boolean sourceRetransmissionIndicator;
                sourceRetransmissionIndicator = this.isRetransmissionIndicator();
                Boolean copyRetransmissionIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "retransmissionIndicator", sourceRetransmissionIndicator), sourceRetransmissionIndicator));
                copy.setRetransmissionIndicator(copyRetransmissionIndicator);
            } else {
                copy.retransmissionIndicator = null;
            }
            if (this.primaryLangID!= null) {
                String sourcePrimaryLangID;
                sourcePrimaryLangID = this.getPrimaryLangID();
                String copyPrimaryLangID = ((String) strategy.copy(LocatorUtils.property(locator, "primaryLangID", sourcePrimaryLangID), sourcePrimaryLangID));
                copy.setPrimaryLangID(copyPrimaryLangID);
            } else {
                copy.primaryLangID = null;
            }
            if (this.altLangID!= null) {
                String sourceAltLangID;
                sourceAltLangID = this.getAltLangID();
                String copyAltLangID = ((String) strategy.copy(LocatorUtils.property(locator, "altLangID", sourceAltLangID), sourceAltLangID));
                copy.setAltLangID(copyAltLangID);
            } else {
                copy.altLangID = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new OTAAirLowFareSearchRQ();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}OriginDestinationInformationType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="AlternateLocationInfo" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attribute name="OriginLocation" type="{http://www.opentravel.org/OTA/2003/05}ListOfStringLength1to8" /&gt;
     *                 &lt;attribute name="DestinationLocation" type="{http://www.opentravel.org/OTA/2003/05}ListOfStringLength1to8" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element ref="{http://www.opentravel.org/OTA/2003/05}TPA_Extensions" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
     *       &lt;attribute name="RefNumber" type="{http://www.opentravel.org/OTA/2003/05}Numeric1to99" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "alternateLocationInfo",
        "tpaExtensions"
    })
    public static class OriginDestinationInformation
        extends OriginDestinationInformationType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AlternateLocationInfo")
        protected OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo alternateLocationInfo;
        @XmlElement(name = "TPA_Extensions")
        protected TPAExtensionsType tpaExtensions;
        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "RefNumber")
        protected Integer refNumber;

        /**
         * Gets the value of the alternateLocationInfo property.
         * 
         * @return
         *     possible object is
         *     {@link OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo }
         *     
         */
        public OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo getAlternateLocationInfo() {
            return alternateLocationInfo;
        }

        /**
         * Sets the value of the alternateLocationInfo property.
         * 
         * @param value
         *     allowed object is
         *     {@link OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo }
         *     
         */
        public void setAlternateLocationInfo(OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo value) {
            this.alternateLocationInfo = value;
        }

        /**
         * Gets the value of the tpaExtensions property.
         * 
         * @return
         *     possible object is
         *     {@link TPAExtensionsType }
         *     
         */
        public TPAExtensionsType getTPAExtensions() {
            return tpaExtensions;
        }

        /**
         * Sets the value of the tpaExtensions property.
         * 
         * @param value
         *     allowed object is
         *     {@link TPAExtensionsType }
         *     
         */
        public void setTPAExtensions(TPAExtensionsType value) {
            this.tpaExtensions = value;
        }

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the refNumber property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public Integer getRefNumber() {
            return refNumber;
        }

        /**
         * Sets the value of the refNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setRefNumber(Integer value) {
            this.refNumber = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo theAlternateLocationInfo;
                theAlternateLocationInfo = this.getAlternateLocationInfo();
                strategy.appendField(locator, this, "alternateLocationInfo", buffer, theAlternateLocationInfo);
            }
            {
                TPAExtensionsType theTPAExtensions;
                theTPAExtensions = this.getTPAExtensions();
                strategy.appendField(locator, this, "tpaExtensions", buffer, theTPAExtensions);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                Integer theRefNumber;
                theRefNumber = this.getRefNumber();
                strategy.appendField(locator, this, "refNumber", buffer, theRefNumber);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof OTAAirLowFareSearchRQ.OriginDestinationInformation)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final OTAAirLowFareSearchRQ.OriginDestinationInformation that = ((OTAAirLowFareSearchRQ.OriginDestinationInformation) object);
            {
                OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo lhsAlternateLocationInfo;
                lhsAlternateLocationInfo = this.getAlternateLocationInfo();
                OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo rhsAlternateLocationInfo;
                rhsAlternateLocationInfo = that.getAlternateLocationInfo();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "alternateLocationInfo", lhsAlternateLocationInfo), LocatorUtils.property(thatLocator, "alternateLocationInfo", rhsAlternateLocationInfo), lhsAlternateLocationInfo, rhsAlternateLocationInfo)) {
                    return false;
                }
            }
            {
                TPAExtensionsType lhsTPAExtensions;
                lhsTPAExtensions = this.getTPAExtensions();
                TPAExtensionsType rhsTPAExtensions;
                rhsTPAExtensions = that.getTPAExtensions();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "tpaExtensions", lhsTPAExtensions), LocatorUtils.property(thatLocator, "tpaExtensions", rhsTPAExtensions), lhsTPAExtensions, rhsTPAExtensions)) {
                    return false;
                }
            }
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                Integer lhsRefNumber;
                lhsRefNumber = this.getRefNumber();
                Integer rhsRefNumber;
                rhsRefNumber = that.getRefNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "refNumber", lhsRefNumber), LocatorUtils.property(thatLocator, "refNumber", rhsRefNumber), lhsRefNumber, rhsRefNumber)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo theAlternateLocationInfo;
                theAlternateLocationInfo = this.getAlternateLocationInfo();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alternateLocationInfo", theAlternateLocationInfo), currentHashCode, theAlternateLocationInfo);
            }
            {
                TPAExtensionsType theTPAExtensions;
                theTPAExtensions = this.getTPAExtensions();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tpaExtensions", theTPAExtensions), currentHashCode, theTPAExtensions);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                Integer theRefNumber;
                theRefNumber = this.getRefNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refNumber", theRefNumber), currentHashCode, theRefNumber);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof OTAAirLowFareSearchRQ.OriginDestinationInformation) {
                final OTAAirLowFareSearchRQ.OriginDestinationInformation copy = ((OTAAirLowFareSearchRQ.OriginDestinationInformation) draftCopy);
                if (this.alternateLocationInfo!= null) {
                    OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo sourceAlternateLocationInfo;
                    sourceAlternateLocationInfo = this.getAlternateLocationInfo();
                    OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo copyAlternateLocationInfo = ((OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo) strategy.copy(LocatorUtils.property(locator, "alternateLocationInfo", sourceAlternateLocationInfo), sourceAlternateLocationInfo));
                    copy.setAlternateLocationInfo(copyAlternateLocationInfo);
                } else {
                    copy.alternateLocationInfo = null;
                }
                if (this.tpaExtensions!= null) {
                    TPAExtensionsType sourceTPAExtensions;
                    sourceTPAExtensions = this.getTPAExtensions();
                    TPAExtensionsType copyTPAExtensions = ((TPAExtensionsType) strategy.copy(LocatorUtils.property(locator, "tpaExtensions", sourceTPAExtensions), sourceTPAExtensions));
                    copy.setTPAExtensions(copyTPAExtensions);
                } else {
                    copy.tpaExtensions = null;
                }
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if (this.refNumber!= null) {
                    Integer sourceRefNumber;
                    sourceRefNumber = this.getRefNumber();
                    Integer copyRefNumber = ((Integer) strategy.copy(LocatorUtils.property(locator, "refNumber", sourceRefNumber), sourceRefNumber));
                    copy.setRefNumber(copyRefNumber);
                } else {
                    copy.refNumber = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new OTAAirLowFareSearchRQ.OriginDestinationInformation();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attribute name="OriginLocation" type="{http://www.opentravel.org/OTA/2003/05}ListOfStringLength1to8" /&gt;
         *       &lt;attribute name="DestinationLocation" type="{http://www.opentravel.org/OTA/2003/05}ListOfStringLength1to8" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class AlternateLocationInfo
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "OriginLocation")
            protected List<String> originLocation;
            @XmlAttribute(name = "DestinationLocation")
            protected List<String> destinationLocation;

            /**
             * Gets the value of the originLocation property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the originLocation property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getOriginLocation().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * 
             * 
             */
            public List<String> getOriginLocation() {
                if (originLocation == null) {
                    originLocation = new ArrayList<String>();
                }
                return this.originLocation;
            }

            /**
             * Gets the value of the destinationLocation property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the destinationLocation property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getDestinationLocation().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * 
             * 
             */
            public List<String> getDestinationLocation() {
                if (destinationLocation == null) {
                    destinationLocation = new ArrayList<String>();
                }
                return this.destinationLocation;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<String> theOriginLocation;
                    theOriginLocation = (((this.originLocation!= null)&&(!this.originLocation.isEmpty()))?this.getOriginLocation():null);
                    strategy.appendField(locator, this, "originLocation", buffer, theOriginLocation);
                }
                {
                    List<String> theDestinationLocation;
                    theDestinationLocation = (((this.destinationLocation!= null)&&(!this.destinationLocation.isEmpty()))?this.getDestinationLocation():null);
                    strategy.appendField(locator, this, "destinationLocation", buffer, theDestinationLocation);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo that = ((OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo) object);
                {
                    List<String> lhsOriginLocation;
                    lhsOriginLocation = (((this.originLocation!= null)&&(!this.originLocation.isEmpty()))?this.getOriginLocation():null);
                    List<String> rhsOriginLocation;
                    rhsOriginLocation = (((that.originLocation!= null)&&(!that.originLocation.isEmpty()))?that.getOriginLocation():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "originLocation", lhsOriginLocation), LocatorUtils.property(thatLocator, "originLocation", rhsOriginLocation), lhsOriginLocation, rhsOriginLocation)) {
                        return false;
                    }
                }
                {
                    List<String> lhsDestinationLocation;
                    lhsDestinationLocation = (((this.destinationLocation!= null)&&(!this.destinationLocation.isEmpty()))?this.getDestinationLocation():null);
                    List<String> rhsDestinationLocation;
                    rhsDestinationLocation = (((that.destinationLocation!= null)&&(!that.destinationLocation.isEmpty()))?that.getDestinationLocation():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "destinationLocation", lhsDestinationLocation), LocatorUtils.property(thatLocator, "destinationLocation", rhsDestinationLocation), lhsDestinationLocation, rhsDestinationLocation)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<String> theOriginLocation;
                    theOriginLocation = (((this.originLocation!= null)&&(!this.originLocation.isEmpty()))?this.getOriginLocation():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originLocation", theOriginLocation), currentHashCode, theOriginLocation);
                }
                {
                    List<String> theDestinationLocation;
                    theDestinationLocation = (((this.destinationLocation!= null)&&(!this.destinationLocation.isEmpty()))?this.getDestinationLocation():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destinationLocation", theDestinationLocation), currentHashCode, theDestinationLocation);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo) {
                    final OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo copy = ((OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo) draftCopy);
                    if ((this.originLocation!= null)&&(!this.originLocation.isEmpty())) {
                        List<String> sourceOriginLocation;
                        sourceOriginLocation = (((this.originLocation!= null)&&(!this.originLocation.isEmpty()))?this.getOriginLocation():null);
                        @SuppressWarnings("unchecked")
                        List<String> copyOriginLocation = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "originLocation", sourceOriginLocation), sourceOriginLocation));
                        copy.originLocation = null;
                        if (copyOriginLocation!= null) {
                            List<String> uniqueOriginLocationl = copy.getOriginLocation();
                            uniqueOriginLocationl.addAll(copyOriginLocation);
                        }
                    } else {
                        copy.originLocation = null;
                    }
                    if ((this.destinationLocation!= null)&&(!this.destinationLocation.isEmpty())) {
                        List<String> sourceDestinationLocation;
                        sourceDestinationLocation = (((this.destinationLocation!= null)&&(!this.destinationLocation.isEmpty()))?this.getDestinationLocation():null);
                        @SuppressWarnings("unchecked")
                        List<String> copyDestinationLocation = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "destinationLocation", sourceDestinationLocation), sourceDestinationLocation));
                        copy.destinationLocation = null;
                        if (copyDestinationLocation!= null) {
                            List<String> uniqueDestinationLocationl = copy.getDestinationLocation();
                            uniqueDestinationLocationl.addAll(copyDestinationLocation);
                        }
                    } else {
                        copy.destinationLocation = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new OTAAirLowFareSearchRQ.OriginDestinationInformation.AlternateLocationInfo();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AirProcessingInfoGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ProcessingInfo
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "TargetSource")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String targetSource;
        @XmlAttribute(name = "FlightSvcInfoIndicator")
        protected Boolean flightSvcInfoIndicator;
        @XmlAttribute(name = "DisplayOrder")
        protected DisplayOrderType displayOrder;
        @XmlAttribute(name = "ReducedDataIndicator")
        protected Boolean reducedDataIndicator;
        @XmlAttribute(name = "BaseFaresOnlyIndicator")
        protected Boolean baseFaresOnlyIndicator;
        @XmlAttribute(name = "SearchType")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String searchType;
        @XmlAttribute(name = "AvailabilityIndicator")
        protected Boolean availabilityIndicator;

        /**
         * Gets the value of the targetSource property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTargetSource() {
            return targetSource;
        }

        /**
         * Sets the value of the targetSource property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTargetSource(String value) {
            this.targetSource = value;
        }

        /**
         * Gets the value of the flightSvcInfoIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isFlightSvcInfoIndicator() {
            return flightSvcInfoIndicator;
        }

        /**
         * Sets the value of the flightSvcInfoIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setFlightSvcInfoIndicator(Boolean value) {
            this.flightSvcInfoIndicator = value;
        }

        /**
         * Gets the value of the displayOrder property.
         * 
         * @return
         *     possible object is
         *     {@link DisplayOrderType }
         *     
         */
        public DisplayOrderType getDisplayOrder() {
            return displayOrder;
        }

        /**
         * Sets the value of the displayOrder property.
         * 
         * @param value
         *     allowed object is
         *     {@link DisplayOrderType }
         *     
         */
        public void setDisplayOrder(DisplayOrderType value) {
            this.displayOrder = value;
        }

        /**
         * Gets the value of the reducedDataIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isReducedDataIndicator() {
            return reducedDataIndicator;
        }

        /**
         * Sets the value of the reducedDataIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setReducedDataIndicator(Boolean value) {
            this.reducedDataIndicator = value;
        }

        /**
         * Gets the value of the baseFaresOnlyIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isBaseFaresOnlyIndicator() {
            return baseFaresOnlyIndicator;
        }

        /**
         * Sets the value of the baseFaresOnlyIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setBaseFaresOnlyIndicator(Boolean value) {
            this.baseFaresOnlyIndicator = value;
        }

        /**
         * Gets the value of the searchType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSearchType() {
            return searchType;
        }

        /**
         * Sets the value of the searchType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSearchType(String value) {
            this.searchType = value;
        }

        /**
         * Gets the value of the availabilityIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isAvailabilityIndicator() {
            return availabilityIndicator;
        }

        /**
         * Sets the value of the availabilityIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setAvailabilityIndicator(Boolean value) {
            this.availabilityIndicator = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theTargetSource;
                theTargetSource = this.getTargetSource();
                strategy.appendField(locator, this, "targetSource", buffer, theTargetSource);
            }
            {
                Boolean theFlightSvcInfoIndicator;
                theFlightSvcInfoIndicator = this.isFlightSvcInfoIndicator();
                strategy.appendField(locator, this, "flightSvcInfoIndicator", buffer, theFlightSvcInfoIndicator);
            }
            {
                DisplayOrderType theDisplayOrder;
                theDisplayOrder = this.getDisplayOrder();
                strategy.appendField(locator, this, "displayOrder", buffer, theDisplayOrder);
            }
            {
                Boolean theReducedDataIndicator;
                theReducedDataIndicator = this.isReducedDataIndicator();
                strategy.appendField(locator, this, "reducedDataIndicator", buffer, theReducedDataIndicator);
            }
            {
                Boolean theBaseFaresOnlyIndicator;
                theBaseFaresOnlyIndicator = this.isBaseFaresOnlyIndicator();
                strategy.appendField(locator, this, "baseFaresOnlyIndicator", buffer, theBaseFaresOnlyIndicator);
            }
            {
                String theSearchType;
                theSearchType = this.getSearchType();
                strategy.appendField(locator, this, "searchType", buffer, theSearchType);
            }
            {
                Boolean theAvailabilityIndicator;
                theAvailabilityIndicator = this.isAvailabilityIndicator();
                strategy.appendField(locator, this, "availabilityIndicator", buffer, theAvailabilityIndicator);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof OTAAirLowFareSearchRQ.ProcessingInfo)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final OTAAirLowFareSearchRQ.ProcessingInfo that = ((OTAAirLowFareSearchRQ.ProcessingInfo) object);
            {
                String lhsTargetSource;
                lhsTargetSource = this.getTargetSource();
                String rhsTargetSource;
                rhsTargetSource = that.getTargetSource();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "targetSource", lhsTargetSource), LocatorUtils.property(thatLocator, "targetSource", rhsTargetSource), lhsTargetSource, rhsTargetSource)) {
                    return false;
                }
            }
            {
                Boolean lhsFlightSvcInfoIndicator;
                lhsFlightSvcInfoIndicator = this.isFlightSvcInfoIndicator();
                Boolean rhsFlightSvcInfoIndicator;
                rhsFlightSvcInfoIndicator = that.isFlightSvcInfoIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "flightSvcInfoIndicator", lhsFlightSvcInfoIndicator), LocatorUtils.property(thatLocator, "flightSvcInfoIndicator", rhsFlightSvcInfoIndicator), lhsFlightSvcInfoIndicator, rhsFlightSvcInfoIndicator)) {
                    return false;
                }
            }
            {
                DisplayOrderType lhsDisplayOrder;
                lhsDisplayOrder = this.getDisplayOrder();
                DisplayOrderType rhsDisplayOrder;
                rhsDisplayOrder = that.getDisplayOrder();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "displayOrder", lhsDisplayOrder), LocatorUtils.property(thatLocator, "displayOrder", rhsDisplayOrder), lhsDisplayOrder, rhsDisplayOrder)) {
                    return false;
                }
            }
            {
                Boolean lhsReducedDataIndicator;
                lhsReducedDataIndicator = this.isReducedDataIndicator();
                Boolean rhsReducedDataIndicator;
                rhsReducedDataIndicator = that.isReducedDataIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "reducedDataIndicator", lhsReducedDataIndicator), LocatorUtils.property(thatLocator, "reducedDataIndicator", rhsReducedDataIndicator), lhsReducedDataIndicator, rhsReducedDataIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsBaseFaresOnlyIndicator;
                lhsBaseFaresOnlyIndicator = this.isBaseFaresOnlyIndicator();
                Boolean rhsBaseFaresOnlyIndicator;
                rhsBaseFaresOnlyIndicator = that.isBaseFaresOnlyIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "baseFaresOnlyIndicator", lhsBaseFaresOnlyIndicator), LocatorUtils.property(thatLocator, "baseFaresOnlyIndicator", rhsBaseFaresOnlyIndicator), lhsBaseFaresOnlyIndicator, rhsBaseFaresOnlyIndicator)) {
                    return false;
                }
            }
            {
                String lhsSearchType;
                lhsSearchType = this.getSearchType();
                String rhsSearchType;
                rhsSearchType = that.getSearchType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "searchType", lhsSearchType), LocatorUtils.property(thatLocator, "searchType", rhsSearchType), lhsSearchType, rhsSearchType)) {
                    return false;
                }
            }
            {
                Boolean lhsAvailabilityIndicator;
                lhsAvailabilityIndicator = this.isAvailabilityIndicator();
                Boolean rhsAvailabilityIndicator;
                rhsAvailabilityIndicator = that.isAvailabilityIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "availabilityIndicator", lhsAvailabilityIndicator), LocatorUtils.property(thatLocator, "availabilityIndicator", rhsAvailabilityIndicator), lhsAvailabilityIndicator, rhsAvailabilityIndicator)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theTargetSource;
                theTargetSource = this.getTargetSource();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "targetSource", theTargetSource), currentHashCode, theTargetSource);
            }
            {
                Boolean theFlightSvcInfoIndicator;
                theFlightSvcInfoIndicator = this.isFlightSvcInfoIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightSvcInfoIndicator", theFlightSvcInfoIndicator), currentHashCode, theFlightSvcInfoIndicator);
            }
            {
                DisplayOrderType theDisplayOrder;
                theDisplayOrder = this.getDisplayOrder();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "displayOrder", theDisplayOrder), currentHashCode, theDisplayOrder);
            }
            {
                Boolean theReducedDataIndicator;
                theReducedDataIndicator = this.isReducedDataIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reducedDataIndicator", theReducedDataIndicator), currentHashCode, theReducedDataIndicator);
            }
            {
                Boolean theBaseFaresOnlyIndicator;
                theBaseFaresOnlyIndicator = this.isBaseFaresOnlyIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "baseFaresOnlyIndicator", theBaseFaresOnlyIndicator), currentHashCode, theBaseFaresOnlyIndicator);
            }
            {
                String theSearchType;
                theSearchType = this.getSearchType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchType", theSearchType), currentHashCode, theSearchType);
            }
            {
                Boolean theAvailabilityIndicator;
                theAvailabilityIndicator = this.isAvailabilityIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "availabilityIndicator", theAvailabilityIndicator), currentHashCode, theAvailabilityIndicator);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof OTAAirLowFareSearchRQ.ProcessingInfo) {
                final OTAAirLowFareSearchRQ.ProcessingInfo copy = ((OTAAirLowFareSearchRQ.ProcessingInfo) draftCopy);
                if (this.targetSource!= null) {
                    String sourceTargetSource;
                    sourceTargetSource = this.getTargetSource();
                    String copyTargetSource = ((String) strategy.copy(LocatorUtils.property(locator, "targetSource", sourceTargetSource), sourceTargetSource));
                    copy.setTargetSource(copyTargetSource);
                } else {
                    copy.targetSource = null;
                }
                if (this.flightSvcInfoIndicator!= null) {
                    Boolean sourceFlightSvcInfoIndicator;
                    sourceFlightSvcInfoIndicator = this.isFlightSvcInfoIndicator();
                    Boolean copyFlightSvcInfoIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "flightSvcInfoIndicator", sourceFlightSvcInfoIndicator), sourceFlightSvcInfoIndicator));
                    copy.setFlightSvcInfoIndicator(copyFlightSvcInfoIndicator);
                } else {
                    copy.flightSvcInfoIndicator = null;
                }
                if (this.displayOrder!= null) {
                    DisplayOrderType sourceDisplayOrder;
                    sourceDisplayOrder = this.getDisplayOrder();
                    DisplayOrderType copyDisplayOrder = ((DisplayOrderType) strategy.copy(LocatorUtils.property(locator, "displayOrder", sourceDisplayOrder), sourceDisplayOrder));
                    copy.setDisplayOrder(copyDisplayOrder);
                } else {
                    copy.displayOrder = null;
                }
                if (this.reducedDataIndicator!= null) {
                    Boolean sourceReducedDataIndicator;
                    sourceReducedDataIndicator = this.isReducedDataIndicator();
                    Boolean copyReducedDataIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "reducedDataIndicator", sourceReducedDataIndicator), sourceReducedDataIndicator));
                    copy.setReducedDataIndicator(copyReducedDataIndicator);
                } else {
                    copy.reducedDataIndicator = null;
                }
                if (this.baseFaresOnlyIndicator!= null) {
                    Boolean sourceBaseFaresOnlyIndicator;
                    sourceBaseFaresOnlyIndicator = this.isBaseFaresOnlyIndicator();
                    Boolean copyBaseFaresOnlyIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "baseFaresOnlyIndicator", sourceBaseFaresOnlyIndicator), sourceBaseFaresOnlyIndicator));
                    copy.setBaseFaresOnlyIndicator(copyBaseFaresOnlyIndicator);
                } else {
                    copy.baseFaresOnlyIndicator = null;
                }
                if (this.searchType!= null) {
                    String sourceSearchType;
                    sourceSearchType = this.getSearchType();
                    String copySearchType = ((String) strategy.copy(LocatorUtils.property(locator, "searchType", sourceSearchType), sourceSearchType));
                    copy.setSearchType(copySearchType);
                } else {
                    copy.searchType = null;
                }
                if (this.availabilityIndicator!= null) {
                    Boolean sourceAvailabilityIndicator;
                    sourceAvailabilityIndicator = this.isAvailabilityIndicator();
                    Boolean copyAvailabilityIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "availabilityIndicator", sourceAvailabilityIndicator), sourceAvailabilityIndicator));
                    copy.setAvailabilityIndicator(copyAvailabilityIndicator);
                } else {
                    copy.availabilityIndicator = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new OTAAirLowFareSearchRQ.ProcessingInfo();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}TravelerInfoSummaryType"&gt;
     *       &lt;attribute name="TicketingCountryCode" type="{http://www.opentravel.org/OTA/2003/05}ISO3166" /&gt;
     *       &lt;attribute name="SpecificPTC_Indicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TravelerInfoSummary
        extends TravelerInfoSummaryType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "TicketingCountryCode")
        protected String ticketingCountryCode;
        @XmlAttribute(name = "SpecificPTC_Indicator")
        protected Boolean specificPTCIndicator;

        /**
         * Gets the value of the ticketingCountryCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTicketingCountryCode() {
            return ticketingCountryCode;
        }

        /**
         * Sets the value of the ticketingCountryCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTicketingCountryCode(String value) {
            this.ticketingCountryCode = value;
        }

        /**
         * Gets the value of the specificPTCIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isSpecificPTCIndicator() {
            return specificPTCIndicator;
        }

        /**
         * Sets the value of the specificPTCIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setSpecificPTCIndicator(Boolean value) {
            this.specificPTCIndicator = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                String theTicketingCountryCode;
                theTicketingCountryCode = this.getTicketingCountryCode();
                strategy.appendField(locator, this, "ticketingCountryCode", buffer, theTicketingCountryCode);
            }
            {
                Boolean theSpecificPTCIndicator;
                theSpecificPTCIndicator = this.isSpecificPTCIndicator();
                strategy.appendField(locator, this, "specificPTCIndicator", buffer, theSpecificPTCIndicator);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof OTAAirLowFareSearchRQ.TravelerInfoSummary)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final OTAAirLowFareSearchRQ.TravelerInfoSummary that = ((OTAAirLowFareSearchRQ.TravelerInfoSummary) object);
            {
                String lhsTicketingCountryCode;
                lhsTicketingCountryCode = this.getTicketingCountryCode();
                String rhsTicketingCountryCode;
                rhsTicketingCountryCode = that.getTicketingCountryCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketingCountryCode", lhsTicketingCountryCode), LocatorUtils.property(thatLocator, "ticketingCountryCode", rhsTicketingCountryCode), lhsTicketingCountryCode, rhsTicketingCountryCode)) {
                    return false;
                }
            }
            {
                Boolean lhsSpecificPTCIndicator;
                lhsSpecificPTCIndicator = this.isSpecificPTCIndicator();
                Boolean rhsSpecificPTCIndicator;
                rhsSpecificPTCIndicator = that.isSpecificPTCIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "specificPTCIndicator", lhsSpecificPTCIndicator), LocatorUtils.property(thatLocator, "specificPTCIndicator", rhsSpecificPTCIndicator), lhsSpecificPTCIndicator, rhsSpecificPTCIndicator)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                String theTicketingCountryCode;
                theTicketingCountryCode = this.getTicketingCountryCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketingCountryCode", theTicketingCountryCode), currentHashCode, theTicketingCountryCode);
            }
            {
                Boolean theSpecificPTCIndicator;
                theSpecificPTCIndicator = this.isSpecificPTCIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specificPTCIndicator", theSpecificPTCIndicator), currentHashCode, theSpecificPTCIndicator);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof OTAAirLowFareSearchRQ.TravelerInfoSummary) {
                final OTAAirLowFareSearchRQ.TravelerInfoSummary copy = ((OTAAirLowFareSearchRQ.TravelerInfoSummary) draftCopy);
                if (this.ticketingCountryCode!= null) {
                    String sourceTicketingCountryCode;
                    sourceTicketingCountryCode = this.getTicketingCountryCode();
                    String copyTicketingCountryCode = ((String) strategy.copy(LocatorUtils.property(locator, "ticketingCountryCode", sourceTicketingCountryCode), sourceTicketingCountryCode));
                    copy.setTicketingCountryCode(copyTicketingCountryCode);
                } else {
                    copy.ticketingCountryCode = null;
                }
                if (this.specificPTCIndicator!= null) {
                    Boolean sourceSpecificPTCIndicator;
                    sourceSpecificPTCIndicator = this.isSpecificPTCIndicator();
                    Boolean copySpecificPTCIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "specificPTCIndicator", sourceSpecificPTCIndicator), sourceSpecificPTCIndicator));
                    copy.setSpecificPTCIndicator(copySpecificPTCIndicator);
                } else {
                    copy.specificPTCIndicator = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new OTAAirLowFareSearchRQ.TravelerInfoSummary();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AirSearchPrefsType"&gt;
     *       &lt;attribute name="FlexDatePref"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="Outbound"/&gt;
     *             &lt;enumeration value="Return"/&gt;
     *             &lt;enumeration value="Both"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="FlexWeekendIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="FlexLevelIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="NoFareBreakIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="OriginDestinationRPHs" type="{http://www.opentravel.org/OTA/2003/05}ListOfRPH" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TravelPreferences
        extends AirSearchPrefsType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "FlexDatePref")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String flexDatePref;
        @XmlAttribute(name = "FlexWeekendIndicator")
        protected Boolean flexWeekendIndicator;
        @XmlAttribute(name = "FlexLevelIndicator")
        protected Boolean flexLevelIndicator;
        @XmlAttribute(name = "NoFareBreakIndicator")
        protected Boolean noFareBreakIndicator;
        @XmlAttribute(name = "OriginDestinationRPHs")
        protected List<String> originDestinationRPHs;

        /**
         * Gets the value of the flexDatePref property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFlexDatePref() {
            return flexDatePref;
        }

        /**
         * Sets the value of the flexDatePref property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFlexDatePref(String value) {
            this.flexDatePref = value;
        }

        /**
         * Gets the value of the flexWeekendIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isFlexWeekendIndicator() {
            return flexWeekendIndicator;
        }

        /**
         * Sets the value of the flexWeekendIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setFlexWeekendIndicator(Boolean value) {
            this.flexWeekendIndicator = value;
        }

        /**
         * Gets the value of the flexLevelIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isFlexLevelIndicator() {
            return flexLevelIndicator;
        }

        /**
         * Sets the value of the flexLevelIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setFlexLevelIndicator(Boolean value) {
            this.flexLevelIndicator = value;
        }

        /**
         * Gets the value of the noFareBreakIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isNoFareBreakIndicator() {
            return noFareBreakIndicator;
        }

        /**
         * Sets the value of the noFareBreakIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setNoFareBreakIndicator(Boolean value) {
            this.noFareBreakIndicator = value;
        }

        /**
         * Gets the value of the originDestinationRPHs property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the originDestinationRPHs property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getOriginDestinationRPHs().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getOriginDestinationRPHs() {
            if (originDestinationRPHs == null) {
                originDestinationRPHs = new ArrayList<String>();
            }
            return this.originDestinationRPHs;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                String theFlexDatePref;
                theFlexDatePref = this.getFlexDatePref();
                strategy.appendField(locator, this, "flexDatePref", buffer, theFlexDatePref);
            }
            {
                Boolean theFlexWeekendIndicator;
                theFlexWeekendIndicator = this.isFlexWeekendIndicator();
                strategy.appendField(locator, this, "flexWeekendIndicator", buffer, theFlexWeekendIndicator);
            }
            {
                Boolean theFlexLevelIndicator;
                theFlexLevelIndicator = this.isFlexLevelIndicator();
                strategy.appendField(locator, this, "flexLevelIndicator", buffer, theFlexLevelIndicator);
            }
            {
                Boolean theNoFareBreakIndicator;
                theNoFareBreakIndicator = this.isNoFareBreakIndicator();
                strategy.appendField(locator, this, "noFareBreakIndicator", buffer, theNoFareBreakIndicator);
            }
            {
                List<String> theOriginDestinationRPHs;
                theOriginDestinationRPHs = (((this.originDestinationRPHs!= null)&&(!this.originDestinationRPHs.isEmpty()))?this.getOriginDestinationRPHs():null);
                strategy.appendField(locator, this, "originDestinationRPHs", buffer, theOriginDestinationRPHs);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof OTAAirLowFareSearchRQ.TravelPreferences)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final OTAAirLowFareSearchRQ.TravelPreferences that = ((OTAAirLowFareSearchRQ.TravelPreferences) object);
            {
                String lhsFlexDatePref;
                lhsFlexDatePref = this.getFlexDatePref();
                String rhsFlexDatePref;
                rhsFlexDatePref = that.getFlexDatePref();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "flexDatePref", lhsFlexDatePref), LocatorUtils.property(thatLocator, "flexDatePref", rhsFlexDatePref), lhsFlexDatePref, rhsFlexDatePref)) {
                    return false;
                }
            }
            {
                Boolean lhsFlexWeekendIndicator;
                lhsFlexWeekendIndicator = this.isFlexWeekendIndicator();
                Boolean rhsFlexWeekendIndicator;
                rhsFlexWeekendIndicator = that.isFlexWeekendIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "flexWeekendIndicator", lhsFlexWeekendIndicator), LocatorUtils.property(thatLocator, "flexWeekendIndicator", rhsFlexWeekendIndicator), lhsFlexWeekendIndicator, rhsFlexWeekendIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsFlexLevelIndicator;
                lhsFlexLevelIndicator = this.isFlexLevelIndicator();
                Boolean rhsFlexLevelIndicator;
                rhsFlexLevelIndicator = that.isFlexLevelIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "flexLevelIndicator", lhsFlexLevelIndicator), LocatorUtils.property(thatLocator, "flexLevelIndicator", rhsFlexLevelIndicator), lhsFlexLevelIndicator, rhsFlexLevelIndicator)) {
                    return false;
                }
            }
            {
                Boolean lhsNoFareBreakIndicator;
                lhsNoFareBreakIndicator = this.isNoFareBreakIndicator();
                Boolean rhsNoFareBreakIndicator;
                rhsNoFareBreakIndicator = that.isNoFareBreakIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "noFareBreakIndicator", lhsNoFareBreakIndicator), LocatorUtils.property(thatLocator, "noFareBreakIndicator", rhsNoFareBreakIndicator), lhsNoFareBreakIndicator, rhsNoFareBreakIndicator)) {
                    return false;
                }
            }
            {
                List<String> lhsOriginDestinationRPHs;
                lhsOriginDestinationRPHs = (((this.originDestinationRPHs!= null)&&(!this.originDestinationRPHs.isEmpty()))?this.getOriginDestinationRPHs():null);
                List<String> rhsOriginDestinationRPHs;
                rhsOriginDestinationRPHs = (((that.originDestinationRPHs!= null)&&(!that.originDestinationRPHs.isEmpty()))?that.getOriginDestinationRPHs():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "originDestinationRPHs", lhsOriginDestinationRPHs), LocatorUtils.property(thatLocator, "originDestinationRPHs", rhsOriginDestinationRPHs), lhsOriginDestinationRPHs, rhsOriginDestinationRPHs)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                String theFlexDatePref;
                theFlexDatePref = this.getFlexDatePref();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flexDatePref", theFlexDatePref), currentHashCode, theFlexDatePref);
            }
            {
                Boolean theFlexWeekendIndicator;
                theFlexWeekendIndicator = this.isFlexWeekendIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flexWeekendIndicator", theFlexWeekendIndicator), currentHashCode, theFlexWeekendIndicator);
            }
            {
                Boolean theFlexLevelIndicator;
                theFlexLevelIndicator = this.isFlexLevelIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flexLevelIndicator", theFlexLevelIndicator), currentHashCode, theFlexLevelIndicator);
            }
            {
                Boolean theNoFareBreakIndicator;
                theNoFareBreakIndicator = this.isNoFareBreakIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noFareBreakIndicator", theNoFareBreakIndicator), currentHashCode, theNoFareBreakIndicator);
            }
            {
                List<String> theOriginDestinationRPHs;
                theOriginDestinationRPHs = (((this.originDestinationRPHs!= null)&&(!this.originDestinationRPHs.isEmpty()))?this.getOriginDestinationRPHs():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originDestinationRPHs", theOriginDestinationRPHs), currentHashCode, theOriginDestinationRPHs);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof OTAAirLowFareSearchRQ.TravelPreferences) {
                final OTAAirLowFareSearchRQ.TravelPreferences copy = ((OTAAirLowFareSearchRQ.TravelPreferences) draftCopy);
                if (this.flexDatePref!= null) {
                    String sourceFlexDatePref;
                    sourceFlexDatePref = this.getFlexDatePref();
                    String copyFlexDatePref = ((String) strategy.copy(LocatorUtils.property(locator, "flexDatePref", sourceFlexDatePref), sourceFlexDatePref));
                    copy.setFlexDatePref(copyFlexDatePref);
                } else {
                    copy.flexDatePref = null;
                }
                if (this.flexWeekendIndicator!= null) {
                    Boolean sourceFlexWeekendIndicator;
                    sourceFlexWeekendIndicator = this.isFlexWeekendIndicator();
                    Boolean copyFlexWeekendIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "flexWeekendIndicator", sourceFlexWeekendIndicator), sourceFlexWeekendIndicator));
                    copy.setFlexWeekendIndicator(copyFlexWeekendIndicator);
                } else {
                    copy.flexWeekendIndicator = null;
                }
                if (this.flexLevelIndicator!= null) {
                    Boolean sourceFlexLevelIndicator;
                    sourceFlexLevelIndicator = this.isFlexLevelIndicator();
                    Boolean copyFlexLevelIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "flexLevelIndicator", sourceFlexLevelIndicator), sourceFlexLevelIndicator));
                    copy.setFlexLevelIndicator(copyFlexLevelIndicator);
                } else {
                    copy.flexLevelIndicator = null;
                }
                if (this.noFareBreakIndicator!= null) {
                    Boolean sourceNoFareBreakIndicator;
                    sourceNoFareBreakIndicator = this.isNoFareBreakIndicator();
                    Boolean copyNoFareBreakIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "noFareBreakIndicator", sourceNoFareBreakIndicator), sourceNoFareBreakIndicator));
                    copy.setNoFareBreakIndicator(copyNoFareBreakIndicator);
                } else {
                    copy.noFareBreakIndicator = null;
                }
                if ((this.originDestinationRPHs!= null)&&(!this.originDestinationRPHs.isEmpty())) {
                    List<String> sourceOriginDestinationRPHs;
                    sourceOriginDestinationRPHs = (((this.originDestinationRPHs!= null)&&(!this.originDestinationRPHs.isEmpty()))?this.getOriginDestinationRPHs():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyOriginDestinationRPHs = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "originDestinationRPHs", sourceOriginDestinationRPHs), sourceOriginDestinationRPHs));
                    copy.originDestinationRPHs = null;
                    if (copyOriginDestinationRPHs!= null) {
                        List<String> uniqueOriginDestinationRPHsl = copy.getOriginDestinationRPHs();
                        uniqueOriginDestinationRPHsl.addAll(copyOriginDestinationRPHs);
                    }
                } else {
                    copy.originDestinationRPHs = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new OTAAirLowFareSearchRQ.TravelPreferences();
        }

    }

}
