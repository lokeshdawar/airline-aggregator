//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 *  Pricing information for an itinerary.
 * 
 * <p>Java class for BookingPriceInfoType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="BookingPriceInfoType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AirItineraryPricingInfoType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PriceRequestInformation" type="{http://www.opentravel.org/OTA/2003/05}PriceRequestInformationType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="RepriceRequired" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BookingPriceInfoType", propOrder = {
    "priceRequestInformation"
})
public class BookingPriceInfoType
    extends AirItineraryPricingInfoType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "PriceRequestInformation")
    protected PriceRequestInformationType priceRequestInformation;
    @XmlAttribute(name = "RepriceRequired")
    protected Boolean repriceRequired;

    /**
     * Gets the value of the priceRequestInformation property.
     * 
     * @return
     *     possible object is
     *     {@link PriceRequestInformationType }
     *     
     */
    public PriceRequestInformationType getPriceRequestInformation() {
        return priceRequestInformation;
    }

    /**
     * Sets the value of the priceRequestInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link PriceRequestInformationType }
     *     
     */
    public void setPriceRequestInformation(PriceRequestInformationType value) {
        this.priceRequestInformation = value;
    }

    /**
     * Gets the value of the repriceRequired property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isRepriceRequired() {
        if (repriceRequired == null) {
            return false;
        } else {
            return repriceRequired;
        }
    }

    /**
     * Sets the value of the repriceRequired property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setRepriceRequired(Boolean value) {
        this.repriceRequired = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            PriceRequestInformationType thePriceRequestInformation;
            thePriceRequestInformation = this.getPriceRequestInformation();
            strategy.appendField(locator, this, "priceRequestInformation", buffer, thePriceRequestInformation);
        }
        {
            boolean theRepriceRequired;
            theRepriceRequired = ((this.repriceRequired!= null)?this.isRepriceRequired():false);
            strategy.appendField(locator, this, "repriceRequired", buffer, theRepriceRequired);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof BookingPriceInfoType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final BookingPriceInfoType that = ((BookingPriceInfoType) object);
        {
            PriceRequestInformationType lhsPriceRequestInformation;
            lhsPriceRequestInformation = this.getPriceRequestInformation();
            PriceRequestInformationType rhsPriceRequestInformation;
            rhsPriceRequestInformation = that.getPriceRequestInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priceRequestInformation", lhsPriceRequestInformation), LocatorUtils.property(thatLocator, "priceRequestInformation", rhsPriceRequestInformation), lhsPriceRequestInformation, rhsPriceRequestInformation)) {
                return false;
            }
        }
        {
            boolean lhsRepriceRequired;
            lhsRepriceRequired = ((this.repriceRequired!= null)?this.isRepriceRequired():false);
            boolean rhsRepriceRequired;
            rhsRepriceRequired = ((that.repriceRequired!= null)?that.isRepriceRequired():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "repriceRequired", lhsRepriceRequired), LocatorUtils.property(thatLocator, "repriceRequired", rhsRepriceRequired), lhsRepriceRequired, rhsRepriceRequired)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            PriceRequestInformationType thePriceRequestInformation;
            thePriceRequestInformation = this.getPriceRequestInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priceRequestInformation", thePriceRequestInformation), currentHashCode, thePriceRequestInformation);
        }
        {
            boolean theRepriceRequired;
            theRepriceRequired = ((this.repriceRequired!= null)?this.isRepriceRequired():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "repriceRequired", theRepriceRequired), currentHashCode, theRepriceRequired);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof BookingPriceInfoType) {
            final BookingPriceInfoType copy = ((BookingPriceInfoType) draftCopy);
            if (this.priceRequestInformation!= null) {
                PriceRequestInformationType sourcePriceRequestInformation;
                sourcePriceRequestInformation = this.getPriceRequestInformation();
                PriceRequestInformationType copyPriceRequestInformation = ((PriceRequestInformationType) strategy.copy(LocatorUtils.property(locator, "priceRequestInformation", sourcePriceRequestInformation), sourcePriceRequestInformation));
                copy.setPriceRequestInformation(copyPriceRequestInformation);
            } else {
                copy.priceRequestInformation = null;
            }
            if (this.repriceRequired!= null) {
                boolean sourceRepriceRequired;
                sourceRepriceRequired = ((this.repriceRequired!= null)?this.isRepriceRequired():false);
                boolean copyRepriceRequired = strategy.copy(LocatorUtils.property(locator, "repriceRequired", sourceRepriceRequired), sourceRepriceRequired);
                copy.setRepriceRequired(copyRepriceRequired);
            } else {
                copy.repriceRequired = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new BookingPriceInfoType();
    }

}
