//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the person traveling. Gender - the gender of the customer, if needed. BirthDate - Date of Birth. Currency - the preferred currency in which monetary amounts should be returned.
 * 
 * <p>Java class for AirTravelerType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AirTravelerType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="ProfileRef" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="UniqueID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="PersonName" type="{http://www.opentravel.org/OTA/2003/05}PersonNameType" minOccurs="0"/&gt;
 *         &lt;element name="Telephone" maxOccurs="20" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TelephoneInfoGroup"/&gt;
 *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *                 &lt;attribute name="LocationCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Email" maxOccurs="3" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;EmailType"&gt;
 *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Address" maxOccurs="5" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AddressType"&gt;
 *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="CustLoyalty" maxOccurs="5" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CustomerLoyaltyGroup"/&gt;
 *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Document" maxOccurs="10" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}DocumentType"&gt;
 *                 &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="PassengerTypeQuantity" type="{http://www.opentravel.org/OTA/2003/05}PassengerTypeQuantityType" minOccurs="0"/&gt;
 *         &lt;element name="TravelerRefNumber"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TravelerRefNumberGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FlightSegmentRPHs" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="FlightSegmentRPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" maxOccurs="99"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PrivacyGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}GenderGroup"/&gt;
 *       &lt;attribute name="BirthDate" type="{http://www.w3.org/2001/XMLSchema}date" /&gt;
 *       &lt;attribute name="CurrencyCode" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *       &lt;attribute name="PassengerTypeCode" use="required" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *       &lt;attribute name="AccompaniedByInfant" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AirTravelerType", propOrder = {
    "profileRef",
    "personName",
    "telephone",
    "email",
    "address",
    "custLoyalty",
    "document",
    "passengerTypeQuantity",
    "travelerRefNumber",
    "flightSegmentRPHs"
})
public class AirTravelerType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "ProfileRef")
    protected AirTravelerType.ProfileRef profileRef;
    @XmlElement(name = "PersonName")
    protected PersonNameType personName;
    @XmlElement(name = "Telephone")
    protected List<AirTravelerType.Telephone> telephone;
    @XmlElement(name = "Email")
    protected List<AirTravelerType.Email> email;
    @XmlElement(name = "Address")
    protected List<AirTravelerType.Address> address;
    @XmlElement(name = "CustLoyalty")
    protected List<AirTravelerType.CustLoyalty> custLoyalty;
    @XmlElement(name = "Document")
    protected List<AirTravelerType.Document> document;
    @XmlElement(name = "PassengerTypeQuantity")
    protected PassengerTypeQuantityType passengerTypeQuantity;
    @XmlElement(name = "TravelerRefNumber", required = true)
    protected AirTravelerType.TravelerRefNumber travelerRefNumber;
    @XmlElement(name = "FlightSegmentRPHs")
    protected AirTravelerType.FlightSegmentRPHs flightSegmentRPHs;
    @XmlAttribute(name = "BirthDate")
    @XmlSchemaType(name = "date")
    protected XMLGregorianCalendar birthDate;
    @XmlAttribute(name = "CurrencyCode")
    protected String currencyCode;
    @XmlAttribute(name = "PassengerTypeCode", required = true)
    protected String passengerTypeCode;
    @XmlAttribute(name = "AccompaniedByInfant")
    protected Boolean accompaniedByInfant;
    @XmlAttribute(name = "ShareSynchInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareSynchInd;
    @XmlAttribute(name = "ShareMarketInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareMarketInd;
    @XmlAttribute(name = "Gender")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String gender;

    /**
     * Gets the value of the profileRef property.
     * 
     * @return
     *     possible object is
     *     {@link AirTravelerType.ProfileRef }
     *     
     */
    public AirTravelerType.ProfileRef getProfileRef() {
        return profileRef;
    }

    /**
     * Sets the value of the profileRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirTravelerType.ProfileRef }
     *     
     */
    public void setProfileRef(AirTravelerType.ProfileRef value) {
        this.profileRef = value;
    }

    /**
     * Gets the value of the personName property.
     * 
     * @return
     *     possible object is
     *     {@link PersonNameType }
     *     
     */
    public PersonNameType getPersonName() {
        return personName;
    }

    /**
     * Sets the value of the personName property.
     * 
     * @param value
     *     allowed object is
     *     {@link PersonNameType }
     *     
     */
    public void setPersonName(PersonNameType value) {
        this.personName = value;
    }

    /**
     * Gets the value of the telephone property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the telephone property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelephone().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirTravelerType.Telephone }
     * 
     * 
     */
    public List<AirTravelerType.Telephone> getTelephone() {
        if (telephone == null) {
            telephone = new ArrayList<AirTravelerType.Telephone>();
        }
        return this.telephone;
    }

    /**
     * Gets the value of the email property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the email property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEmail().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirTravelerType.Email }
     * 
     * 
     */
    public List<AirTravelerType.Email> getEmail() {
        if (email == null) {
            email = new ArrayList<AirTravelerType.Email>();
        }
        return this.email;
    }

    /**
     * Gets the value of the address property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the address property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirTravelerType.Address }
     * 
     * 
     */
    public List<AirTravelerType.Address> getAddress() {
        if (address == null) {
            address = new ArrayList<AirTravelerType.Address>();
        }
        return this.address;
    }

    /**
     * Gets the value of the custLoyalty property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the custLoyalty property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCustLoyalty().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirTravelerType.CustLoyalty }
     * 
     * 
     */
    public List<AirTravelerType.CustLoyalty> getCustLoyalty() {
        if (custLoyalty == null) {
            custLoyalty = new ArrayList<AirTravelerType.CustLoyalty>();
        }
        return this.custLoyalty;
    }

    /**
     * Gets the value of the document property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the document property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDocument().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AirTravelerType.Document }
     * 
     * 
     */
    public List<AirTravelerType.Document> getDocument() {
        if (document == null) {
            document = new ArrayList<AirTravelerType.Document>();
        }
        return this.document;
    }

    /**
     * Gets the value of the passengerTypeQuantity property.
     * 
     * @return
     *     possible object is
     *     {@link PassengerTypeQuantityType }
     *     
     */
    public PassengerTypeQuantityType getPassengerTypeQuantity() {
        return passengerTypeQuantity;
    }

    /**
     * Sets the value of the passengerTypeQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link PassengerTypeQuantityType }
     *     
     */
    public void setPassengerTypeQuantity(PassengerTypeQuantityType value) {
        this.passengerTypeQuantity = value;
    }

    /**
     * Gets the value of the travelerRefNumber property.
     * 
     * @return
     *     possible object is
     *     {@link AirTravelerType.TravelerRefNumber }
     *     
     */
    public AirTravelerType.TravelerRefNumber getTravelerRefNumber() {
        return travelerRefNumber;
    }

    /**
     * Sets the value of the travelerRefNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirTravelerType.TravelerRefNumber }
     *     
     */
    public void setTravelerRefNumber(AirTravelerType.TravelerRefNumber value) {
        this.travelerRefNumber = value;
    }

    /**
     * Gets the value of the flightSegmentRPHs property.
     * 
     * @return
     *     possible object is
     *     {@link AirTravelerType.FlightSegmentRPHs }
     *     
     */
    public AirTravelerType.FlightSegmentRPHs getFlightSegmentRPHs() {
        return flightSegmentRPHs;
    }

    /**
     * Sets the value of the flightSegmentRPHs property.
     * 
     * @param value
     *     allowed object is
     *     {@link AirTravelerType.FlightSegmentRPHs }
     *     
     */
    public void setFlightSegmentRPHs(AirTravelerType.FlightSegmentRPHs value) {
        this.flightSegmentRPHs = value;
    }

    /**
     * Gets the value of the birthDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getBirthDate() {
        return birthDate;
    }

    /**
     * Sets the value of the birthDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setBirthDate(XMLGregorianCalendar value) {
        this.birthDate = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the passengerTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPassengerTypeCode() {
        return passengerTypeCode;
    }

    /**
     * Sets the value of the passengerTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPassengerTypeCode(String value) {
        this.passengerTypeCode = value;
    }

    /**
     * Gets the value of the accompaniedByInfant property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAccompaniedByInfant() {
        return accompaniedByInfant;
    }

    /**
     * Sets the value of the accompaniedByInfant property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAccompaniedByInfant(Boolean value) {
        this.accompaniedByInfant = value;
    }

    /**
     * Gets the value of the shareSynchInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareSynchInd() {
        return shareSynchInd;
    }

    /**
     * Sets the value of the shareSynchInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareSynchInd(String value) {
        this.shareSynchInd = value;
    }

    /**
     * Gets the value of the shareMarketInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareMarketInd() {
        return shareMarketInd;
    }

    /**
     * Sets the value of the shareMarketInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareMarketInd(String value) {
        this.shareMarketInd = value;
    }

    /**
     * Gets the value of the gender property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGender() {
        return gender;
    }

    /**
     * Sets the value of the gender property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setGender(String value) {
        this.gender = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AirTravelerType.ProfileRef theProfileRef;
            theProfileRef = this.getProfileRef();
            strategy.appendField(locator, this, "profileRef", buffer, theProfileRef);
        }
        {
            PersonNameType thePersonName;
            thePersonName = this.getPersonName();
            strategy.appendField(locator, this, "personName", buffer, thePersonName);
        }
        {
            List<AirTravelerType.Telephone> theTelephone;
            theTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
            strategy.appendField(locator, this, "telephone", buffer, theTelephone);
        }
        {
            List<AirTravelerType.Email> theEmail;
            theEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
            strategy.appendField(locator, this, "email", buffer, theEmail);
        }
        {
            List<AirTravelerType.Address> theAddress;
            theAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            List<AirTravelerType.CustLoyalty> theCustLoyalty;
            theCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
            strategy.appendField(locator, this, "custLoyalty", buffer, theCustLoyalty);
        }
        {
            List<AirTravelerType.Document> theDocument;
            theDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            strategy.appendField(locator, this, "document", buffer, theDocument);
        }
        {
            PassengerTypeQuantityType thePassengerTypeQuantity;
            thePassengerTypeQuantity = this.getPassengerTypeQuantity();
            strategy.appendField(locator, this, "passengerTypeQuantity", buffer, thePassengerTypeQuantity);
        }
        {
            AirTravelerType.TravelerRefNumber theTravelerRefNumber;
            theTravelerRefNumber = this.getTravelerRefNumber();
            strategy.appendField(locator, this, "travelerRefNumber", buffer, theTravelerRefNumber);
        }
        {
            AirTravelerType.FlightSegmentRPHs theFlightSegmentRPHs;
            theFlightSegmentRPHs = this.getFlightSegmentRPHs();
            strategy.appendField(locator, this, "flightSegmentRPHs", buffer, theFlightSegmentRPHs);
        }
        {
            XMLGregorianCalendar theBirthDate;
            theBirthDate = this.getBirthDate();
            strategy.appendField(locator, this, "birthDate", buffer, theBirthDate);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
        }
        {
            String thePassengerTypeCode;
            thePassengerTypeCode = this.getPassengerTypeCode();
            strategy.appendField(locator, this, "passengerTypeCode", buffer, thePassengerTypeCode);
        }
        {
            Boolean theAccompaniedByInfant;
            theAccompaniedByInfant = this.isAccompaniedByInfant();
            strategy.appendField(locator, this, "accompaniedByInfant", buffer, theAccompaniedByInfant);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
        }
        {
            String theGender;
            theGender = this.getGender();
            strategy.appendField(locator, this, "gender", buffer, theGender);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AirTravelerType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AirTravelerType that = ((AirTravelerType) object);
        {
            AirTravelerType.ProfileRef lhsProfileRef;
            lhsProfileRef = this.getProfileRef();
            AirTravelerType.ProfileRef rhsProfileRef;
            rhsProfileRef = that.getProfileRef();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profileRef", lhsProfileRef), LocatorUtils.property(thatLocator, "profileRef", rhsProfileRef), lhsProfileRef, rhsProfileRef)) {
                return false;
            }
        }
        {
            PersonNameType lhsPersonName;
            lhsPersonName = this.getPersonName();
            PersonNameType rhsPersonName;
            rhsPersonName = that.getPersonName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "personName", lhsPersonName), LocatorUtils.property(thatLocator, "personName", rhsPersonName), lhsPersonName, rhsPersonName)) {
                return false;
            }
        }
        {
            List<AirTravelerType.Telephone> lhsTelephone;
            lhsTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
            List<AirTravelerType.Telephone> rhsTelephone;
            rhsTelephone = (((that.telephone!= null)&&(!that.telephone.isEmpty()))?that.getTelephone():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telephone", lhsTelephone), LocatorUtils.property(thatLocator, "telephone", rhsTelephone), lhsTelephone, rhsTelephone)) {
                return false;
            }
        }
        {
            List<AirTravelerType.Email> lhsEmail;
            lhsEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
            List<AirTravelerType.Email> rhsEmail;
            rhsEmail = (((that.email!= null)&&(!that.email.isEmpty()))?that.getEmail():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "email", lhsEmail), LocatorUtils.property(thatLocator, "email", rhsEmail), lhsEmail, rhsEmail)) {
                return false;
            }
        }
        {
            List<AirTravelerType.Address> lhsAddress;
            lhsAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            List<AirTravelerType.Address> rhsAddress;
            rhsAddress = (((that.address!= null)&&(!that.address.isEmpty()))?that.getAddress():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            List<AirTravelerType.CustLoyalty> lhsCustLoyalty;
            lhsCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
            List<AirTravelerType.CustLoyalty> rhsCustLoyalty;
            rhsCustLoyalty = (((that.custLoyalty!= null)&&(!that.custLoyalty.isEmpty()))?that.getCustLoyalty():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "custLoyalty", lhsCustLoyalty), LocatorUtils.property(thatLocator, "custLoyalty", rhsCustLoyalty), lhsCustLoyalty, rhsCustLoyalty)) {
                return false;
            }
        }
        {
            List<AirTravelerType.Document> lhsDocument;
            lhsDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            List<AirTravelerType.Document> rhsDocument;
            rhsDocument = (((that.document!= null)&&(!that.document.isEmpty()))?that.getDocument():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "document", lhsDocument), LocatorUtils.property(thatLocator, "document", rhsDocument), lhsDocument, rhsDocument)) {
                return false;
            }
        }
        {
            PassengerTypeQuantityType lhsPassengerTypeQuantity;
            lhsPassengerTypeQuantity = this.getPassengerTypeQuantity();
            PassengerTypeQuantityType rhsPassengerTypeQuantity;
            rhsPassengerTypeQuantity = that.getPassengerTypeQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeQuantity", lhsPassengerTypeQuantity), LocatorUtils.property(thatLocator, "passengerTypeQuantity", rhsPassengerTypeQuantity), lhsPassengerTypeQuantity, rhsPassengerTypeQuantity)) {
                return false;
            }
        }
        {
            AirTravelerType.TravelerRefNumber lhsTravelerRefNumber;
            lhsTravelerRefNumber = this.getTravelerRefNumber();
            AirTravelerType.TravelerRefNumber rhsTravelerRefNumber;
            rhsTravelerRefNumber = that.getTravelerRefNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelerRefNumber", lhsTravelerRefNumber), LocatorUtils.property(thatLocator, "travelerRefNumber", rhsTravelerRefNumber), lhsTravelerRefNumber, rhsTravelerRefNumber)) {
                return false;
            }
        }
        {
            AirTravelerType.FlightSegmentRPHs lhsFlightSegmentRPHs;
            lhsFlightSegmentRPHs = this.getFlightSegmentRPHs();
            AirTravelerType.FlightSegmentRPHs rhsFlightSegmentRPHs;
            rhsFlightSegmentRPHs = that.getFlightSegmentRPHs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightSegmentRPHs", lhsFlightSegmentRPHs), LocatorUtils.property(thatLocator, "flightSegmentRPHs", rhsFlightSegmentRPHs), lhsFlightSegmentRPHs, rhsFlightSegmentRPHs)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsBirthDate;
            lhsBirthDate = this.getBirthDate();
            XMLGregorianCalendar rhsBirthDate;
            rhsBirthDate = that.getBirthDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "birthDate", lhsBirthDate), LocatorUtils.property(thatLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate)) {
                return false;
            }
        }
        {
            String lhsCurrencyCode;
            lhsCurrencyCode = this.getCurrencyCode();
            String rhsCurrencyCode;
            rhsCurrencyCode = that.getCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                return false;
            }
        }
        {
            String lhsPassengerTypeCode;
            lhsPassengerTypeCode = this.getPassengerTypeCode();
            String rhsPassengerTypeCode;
            rhsPassengerTypeCode = that.getPassengerTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeCode", lhsPassengerTypeCode), LocatorUtils.property(thatLocator, "passengerTypeCode", rhsPassengerTypeCode), lhsPassengerTypeCode, rhsPassengerTypeCode)) {
                return false;
            }
        }
        {
            Boolean lhsAccompaniedByInfant;
            lhsAccompaniedByInfant = this.isAccompaniedByInfant();
            Boolean rhsAccompaniedByInfant;
            rhsAccompaniedByInfant = that.isAccompaniedByInfant();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "accompaniedByInfant", lhsAccompaniedByInfant), LocatorUtils.property(thatLocator, "accompaniedByInfant", rhsAccompaniedByInfant), lhsAccompaniedByInfant, rhsAccompaniedByInfant)) {
                return false;
            }
        }
        {
            String lhsShareSynchInd;
            lhsShareSynchInd = this.getShareSynchInd();
            String rhsShareSynchInd;
            rhsShareSynchInd = that.getShareSynchInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                return false;
            }
        }
        {
            String lhsShareMarketInd;
            lhsShareMarketInd = this.getShareMarketInd();
            String rhsShareMarketInd;
            rhsShareMarketInd = that.getShareMarketInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                return false;
            }
        }
        {
            String lhsGender;
            lhsGender = this.getGender();
            String rhsGender;
            rhsGender = that.getGender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gender", lhsGender), LocatorUtils.property(thatLocator, "gender", rhsGender), lhsGender, rhsGender)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AirTravelerType.ProfileRef theProfileRef;
            theProfileRef = this.getProfileRef();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profileRef", theProfileRef), currentHashCode, theProfileRef);
        }
        {
            PersonNameType thePersonName;
            thePersonName = this.getPersonName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "personName", thePersonName), currentHashCode, thePersonName);
        }
        {
            List<AirTravelerType.Telephone> theTelephone;
            theTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telephone", theTelephone), currentHashCode, theTelephone);
        }
        {
            List<AirTravelerType.Email> theEmail;
            theEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "email", theEmail), currentHashCode, theEmail);
        }
        {
            List<AirTravelerType.Address> theAddress;
            theAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            List<AirTravelerType.CustLoyalty> theCustLoyalty;
            theCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "custLoyalty", theCustLoyalty), currentHashCode, theCustLoyalty);
        }
        {
            List<AirTravelerType.Document> theDocument;
            theDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "document", theDocument), currentHashCode, theDocument);
        }
        {
            PassengerTypeQuantityType thePassengerTypeQuantity;
            thePassengerTypeQuantity = this.getPassengerTypeQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerTypeQuantity", thePassengerTypeQuantity), currentHashCode, thePassengerTypeQuantity);
        }
        {
            AirTravelerType.TravelerRefNumber theTravelerRefNumber;
            theTravelerRefNumber = this.getTravelerRefNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelerRefNumber", theTravelerRefNumber), currentHashCode, theTravelerRefNumber);
        }
        {
            AirTravelerType.FlightSegmentRPHs theFlightSegmentRPHs;
            theFlightSegmentRPHs = this.getFlightSegmentRPHs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightSegmentRPHs", theFlightSegmentRPHs), currentHashCode, theFlightSegmentRPHs);
        }
        {
            XMLGregorianCalendar theBirthDate;
            theBirthDate = this.getBirthDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "birthDate", theBirthDate), currentHashCode, theBirthDate);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
        }
        {
            String thePassengerTypeCode;
            thePassengerTypeCode = this.getPassengerTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerTypeCode", thePassengerTypeCode), currentHashCode, thePassengerTypeCode);
        }
        {
            Boolean theAccompaniedByInfant;
            theAccompaniedByInfant = this.isAccompaniedByInfant();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accompaniedByInfant", theAccompaniedByInfant), currentHashCode, theAccompaniedByInfant);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
        }
        {
            String theGender;
            theGender = this.getGender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gender", theGender), currentHashCode, theGender);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AirTravelerType) {
            final AirTravelerType copy = ((AirTravelerType) draftCopy);
            if (this.profileRef!= null) {
                AirTravelerType.ProfileRef sourceProfileRef;
                sourceProfileRef = this.getProfileRef();
                AirTravelerType.ProfileRef copyProfileRef = ((AirTravelerType.ProfileRef) strategy.copy(LocatorUtils.property(locator, "profileRef", sourceProfileRef), sourceProfileRef));
                copy.setProfileRef(copyProfileRef);
            } else {
                copy.profileRef = null;
            }
            if (this.personName!= null) {
                PersonNameType sourcePersonName;
                sourcePersonName = this.getPersonName();
                PersonNameType copyPersonName = ((PersonNameType) strategy.copy(LocatorUtils.property(locator, "personName", sourcePersonName), sourcePersonName));
                copy.setPersonName(copyPersonName);
            } else {
                copy.personName = null;
            }
            if ((this.telephone!= null)&&(!this.telephone.isEmpty())) {
                List<AirTravelerType.Telephone> sourceTelephone;
                sourceTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
                @SuppressWarnings("unchecked")
                List<AirTravelerType.Telephone> copyTelephone = ((List<AirTravelerType.Telephone> ) strategy.copy(LocatorUtils.property(locator, "telephone", sourceTelephone), sourceTelephone));
                copy.telephone = null;
                if (copyTelephone!= null) {
                    List<AirTravelerType.Telephone> uniqueTelephonel = copy.getTelephone();
                    uniqueTelephonel.addAll(copyTelephone);
                }
            } else {
                copy.telephone = null;
            }
            if ((this.email!= null)&&(!this.email.isEmpty())) {
                List<AirTravelerType.Email> sourceEmail;
                sourceEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
                @SuppressWarnings("unchecked")
                List<AirTravelerType.Email> copyEmail = ((List<AirTravelerType.Email> ) strategy.copy(LocatorUtils.property(locator, "email", sourceEmail), sourceEmail));
                copy.email = null;
                if (copyEmail!= null) {
                    List<AirTravelerType.Email> uniqueEmaill = copy.getEmail();
                    uniqueEmaill.addAll(copyEmail);
                }
            } else {
                copy.email = null;
            }
            if ((this.address!= null)&&(!this.address.isEmpty())) {
                List<AirTravelerType.Address> sourceAddress;
                sourceAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
                @SuppressWarnings("unchecked")
                List<AirTravelerType.Address> copyAddress = ((List<AirTravelerType.Address> ) strategy.copy(LocatorUtils.property(locator, "address", sourceAddress), sourceAddress));
                copy.address = null;
                if (copyAddress!= null) {
                    List<AirTravelerType.Address> uniqueAddressl = copy.getAddress();
                    uniqueAddressl.addAll(copyAddress);
                }
            } else {
                copy.address = null;
            }
            if ((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty())) {
                List<AirTravelerType.CustLoyalty> sourceCustLoyalty;
                sourceCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
                @SuppressWarnings("unchecked")
                List<AirTravelerType.CustLoyalty> copyCustLoyalty = ((List<AirTravelerType.CustLoyalty> ) strategy.copy(LocatorUtils.property(locator, "custLoyalty", sourceCustLoyalty), sourceCustLoyalty));
                copy.custLoyalty = null;
                if (copyCustLoyalty!= null) {
                    List<AirTravelerType.CustLoyalty> uniqueCustLoyaltyl = copy.getCustLoyalty();
                    uniqueCustLoyaltyl.addAll(copyCustLoyalty);
                }
            } else {
                copy.custLoyalty = null;
            }
            if ((this.document!= null)&&(!this.document.isEmpty())) {
                List<AirTravelerType.Document> sourceDocument;
                sourceDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
                @SuppressWarnings("unchecked")
                List<AirTravelerType.Document> copyDocument = ((List<AirTravelerType.Document> ) strategy.copy(LocatorUtils.property(locator, "document", sourceDocument), sourceDocument));
                copy.document = null;
                if (copyDocument!= null) {
                    List<AirTravelerType.Document> uniqueDocumentl = copy.getDocument();
                    uniqueDocumentl.addAll(copyDocument);
                }
            } else {
                copy.document = null;
            }
            if (this.passengerTypeQuantity!= null) {
                PassengerTypeQuantityType sourcePassengerTypeQuantity;
                sourcePassengerTypeQuantity = this.getPassengerTypeQuantity();
                PassengerTypeQuantityType copyPassengerTypeQuantity = ((PassengerTypeQuantityType) strategy.copy(LocatorUtils.property(locator, "passengerTypeQuantity", sourcePassengerTypeQuantity), sourcePassengerTypeQuantity));
                copy.setPassengerTypeQuantity(copyPassengerTypeQuantity);
            } else {
                copy.passengerTypeQuantity = null;
            }
            if (this.travelerRefNumber!= null) {
                AirTravelerType.TravelerRefNumber sourceTravelerRefNumber;
                sourceTravelerRefNumber = this.getTravelerRefNumber();
                AirTravelerType.TravelerRefNumber copyTravelerRefNumber = ((AirTravelerType.TravelerRefNumber) strategy.copy(LocatorUtils.property(locator, "travelerRefNumber", sourceTravelerRefNumber), sourceTravelerRefNumber));
                copy.setTravelerRefNumber(copyTravelerRefNumber);
            } else {
                copy.travelerRefNumber = null;
            }
            if (this.flightSegmentRPHs!= null) {
                AirTravelerType.FlightSegmentRPHs sourceFlightSegmentRPHs;
                sourceFlightSegmentRPHs = this.getFlightSegmentRPHs();
                AirTravelerType.FlightSegmentRPHs copyFlightSegmentRPHs = ((AirTravelerType.FlightSegmentRPHs) strategy.copy(LocatorUtils.property(locator, "flightSegmentRPHs", sourceFlightSegmentRPHs), sourceFlightSegmentRPHs));
                copy.setFlightSegmentRPHs(copyFlightSegmentRPHs);
            } else {
                copy.flightSegmentRPHs = null;
            }
            if (this.birthDate!= null) {
                XMLGregorianCalendar sourceBirthDate;
                sourceBirthDate = this.getBirthDate();
                XMLGregorianCalendar copyBirthDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "birthDate", sourceBirthDate), sourceBirthDate));
                copy.setBirthDate(copyBirthDate);
            } else {
                copy.birthDate = null;
            }
            if (this.currencyCode!= null) {
                String sourceCurrencyCode;
                sourceCurrencyCode = this.getCurrencyCode();
                String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                copy.setCurrencyCode(copyCurrencyCode);
            } else {
                copy.currencyCode = null;
            }
            if (this.passengerTypeCode!= null) {
                String sourcePassengerTypeCode;
                sourcePassengerTypeCode = this.getPassengerTypeCode();
                String copyPassengerTypeCode = ((String) strategy.copy(LocatorUtils.property(locator, "passengerTypeCode", sourcePassengerTypeCode), sourcePassengerTypeCode));
                copy.setPassengerTypeCode(copyPassengerTypeCode);
            } else {
                copy.passengerTypeCode = null;
            }
            if (this.accompaniedByInfant!= null) {
                Boolean sourceAccompaniedByInfant;
                sourceAccompaniedByInfant = this.isAccompaniedByInfant();
                Boolean copyAccompaniedByInfant = ((Boolean) strategy.copy(LocatorUtils.property(locator, "accompaniedByInfant", sourceAccompaniedByInfant), sourceAccompaniedByInfant));
                copy.setAccompaniedByInfant(copyAccompaniedByInfant);
            } else {
                copy.accompaniedByInfant = null;
            }
            if (this.shareSynchInd!= null) {
                String sourceShareSynchInd;
                sourceShareSynchInd = this.getShareSynchInd();
                String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                copy.setShareSynchInd(copyShareSynchInd);
            } else {
                copy.shareSynchInd = null;
            }
            if (this.shareMarketInd!= null) {
                String sourceShareMarketInd;
                sourceShareMarketInd = this.getShareMarketInd();
                String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                copy.setShareMarketInd(copyShareMarketInd);
            } else {
                copy.shareMarketInd = null;
            }
            if (this.gender!= null) {
                String sourceGender;
                sourceGender = this.getGender();
                String copyGender = ((String) strategy.copy(LocatorUtils.property(locator, "gender", sourceGender), sourceGender));
                copy.setGender(copyGender);
            } else {
                copy.gender = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AirTravelerType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AddressType"&gt;
     *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Address
        extends AddressType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Operation")
        protected ActionType operation;

        /**
         * Gets the value of the operation property.
         * 
         * @return
         *     possible object is
         *     {@link ActionType }
         *     
         */
        public ActionType getOperation() {
            return operation;
        }

        /**
         * Sets the value of the operation property.
         * 
         * @param value
         *     allowed object is
         *     {@link ActionType }
         *     
         */
        public void setOperation(ActionType value) {
            this.operation = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                strategy.appendField(locator, this, "operation", buffer, theOperation);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.Address)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final AirTravelerType.Address that = ((AirTravelerType.Address) object);
            {
                ActionType lhsOperation;
                lhsOperation = this.getOperation();
                ActionType rhsOperation;
                rhsOperation = that.getOperation();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof AirTravelerType.Address) {
                final AirTravelerType.Address copy = ((AirTravelerType.Address) draftCopy);
                if (this.operation!= null) {
                    ActionType sourceOperation;
                    sourceOperation = this.getOperation();
                    ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                    copy.setOperation(copyOperation);
                } else {
                    copy.operation = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.Address();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CustomerLoyaltyGroup"/&gt;
     *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CustLoyalty
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Operation")
        protected ActionType operation;
        @XmlAttribute(name = "ProgramID")
        protected String programID;
        @XmlAttribute(name = "MembershipID")
        protected String membershipID;
        @XmlAttribute(name = "TravelSector")
        protected String travelSector;
        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "VendorCode")
        protected List<String> vendorCode;
        @XmlAttribute(name = "LoyalLevel")
        protected String loyalLevel;
        @XmlAttribute(name = "SingleVendorInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String singleVendorInd;
        @XmlAttribute(name = "SignupDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar signupDate;
        @XmlAttribute(name = "ShareSynchInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareSynchInd;
        @XmlAttribute(name = "ShareMarketInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareMarketInd;
        @XmlAttribute(name = "EffectiveDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar effectiveDate;
        @XmlAttribute(name = "ExpireDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar expireDate;

        /**
         * Gets the value of the operation property.
         * 
         * @return
         *     possible object is
         *     {@link ActionType }
         *     
         */
        public ActionType getOperation() {
            return operation;
        }

        /**
         * Sets the value of the operation property.
         * 
         * @param value
         *     allowed object is
         *     {@link ActionType }
         *     
         */
        public void setOperation(ActionType value) {
            this.operation = value;
        }

        /**
         * Gets the value of the programID property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getProgramID() {
            return programID;
        }

        /**
         * Sets the value of the programID property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setProgramID(String value) {
            this.programID = value;
        }

        /**
         * Gets the value of the membershipID property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMembershipID() {
            return membershipID;
        }

        /**
         * Sets the value of the membershipID property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setMembershipID(String value) {
            this.membershipID = value;
        }

        /**
         * Gets the value of the travelSector property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTravelSector() {
            return travelSector;
        }

        /**
         * Sets the value of the travelSector property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTravelSector(String value) {
            this.travelSector = value;
        }

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the vendorCode property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the vendorCode property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getVendorCode().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getVendorCode() {
            if (vendorCode == null) {
                vendorCode = new ArrayList<String>();
            }
            return this.vendorCode;
        }

        /**
         * Gets the value of the loyalLevel property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLoyalLevel() {
            return loyalLevel;
        }

        /**
         * Sets the value of the loyalLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLoyalLevel(String value) {
            this.loyalLevel = value;
        }

        /**
         * Gets the value of the singleVendorInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSingleVendorInd() {
            return singleVendorInd;
        }

        /**
         * Sets the value of the singleVendorInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSingleVendorInd(String value) {
            this.singleVendorInd = value;
        }

        /**
         * Gets the value of the signupDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getSignupDate() {
            return signupDate;
        }

        /**
         * Sets the value of the signupDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setSignupDate(XMLGregorianCalendar value) {
            this.signupDate = value;
        }

        /**
         * Gets the value of the shareSynchInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareSynchInd() {
            return shareSynchInd;
        }

        /**
         * Sets the value of the shareSynchInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareSynchInd(String value) {
            this.shareSynchInd = value;
        }

        /**
         * Gets the value of the shareMarketInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareMarketInd() {
            return shareMarketInd;
        }

        /**
         * Sets the value of the shareMarketInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareMarketInd(String value) {
            this.shareMarketInd = value;
        }

        /**
         * Gets the value of the effectiveDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getEffectiveDate() {
            return effectiveDate;
        }

        /**
         * Sets the value of the effectiveDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setEffectiveDate(XMLGregorianCalendar value) {
            this.effectiveDate = value;
        }

        /**
         * Gets the value of the expireDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getExpireDate() {
            return expireDate;
        }

        /**
         * Sets the value of the expireDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setExpireDate(XMLGregorianCalendar value) {
            this.expireDate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                strategy.appendField(locator, this, "operation", buffer, theOperation);
            }
            {
                String theProgramID;
                theProgramID = this.getProgramID();
                strategy.appendField(locator, this, "programID", buffer, theProgramID);
            }
            {
                String theMembershipID;
                theMembershipID = this.getMembershipID();
                strategy.appendField(locator, this, "membershipID", buffer, theMembershipID);
            }
            {
                String theTravelSector;
                theTravelSector = this.getTravelSector();
                strategy.appendField(locator, this, "travelSector", buffer, theTravelSector);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                List<String> theVendorCode;
                theVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                strategy.appendField(locator, this, "vendorCode", buffer, theVendorCode);
            }
            {
                String theLoyalLevel;
                theLoyalLevel = this.getLoyalLevel();
                strategy.appendField(locator, this, "loyalLevel", buffer, theLoyalLevel);
            }
            {
                String theSingleVendorInd;
                theSingleVendorInd = this.getSingleVendorInd();
                strategy.appendField(locator, this, "singleVendorInd", buffer, theSingleVendorInd);
            }
            {
                XMLGregorianCalendar theSignupDate;
                theSignupDate = this.getSignupDate();
                strategy.appendField(locator, this, "signupDate", buffer, theSignupDate);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                strategy.appendField(locator, this, "expireDate", buffer, theExpireDate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.CustLoyalty)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirTravelerType.CustLoyalty that = ((AirTravelerType.CustLoyalty) object);
            {
                ActionType lhsOperation;
                lhsOperation = this.getOperation();
                ActionType rhsOperation;
                rhsOperation = that.getOperation();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                    return false;
                }
            }
            {
                String lhsProgramID;
                lhsProgramID = this.getProgramID();
                String rhsProgramID;
                rhsProgramID = that.getProgramID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "programID", lhsProgramID), LocatorUtils.property(thatLocator, "programID", rhsProgramID), lhsProgramID, rhsProgramID)) {
                    return false;
                }
            }
            {
                String lhsMembershipID;
                lhsMembershipID = this.getMembershipID();
                String rhsMembershipID;
                rhsMembershipID = that.getMembershipID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "membershipID", lhsMembershipID), LocatorUtils.property(thatLocator, "membershipID", rhsMembershipID), lhsMembershipID, rhsMembershipID)) {
                    return false;
                }
            }
            {
                String lhsTravelSector;
                lhsTravelSector = this.getTravelSector();
                String rhsTravelSector;
                rhsTravelSector = that.getTravelSector();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "travelSector", lhsTravelSector), LocatorUtils.property(thatLocator, "travelSector", rhsTravelSector), lhsTravelSector, rhsTravelSector)) {
                    return false;
                }
            }
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                List<String> lhsVendorCode;
                lhsVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                List<String> rhsVendorCode;
                rhsVendorCode = (((that.vendorCode!= null)&&(!that.vendorCode.isEmpty()))?that.getVendorCode():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "vendorCode", lhsVendorCode), LocatorUtils.property(thatLocator, "vendorCode", rhsVendorCode), lhsVendorCode, rhsVendorCode)) {
                    return false;
                }
            }
            {
                String lhsLoyalLevel;
                lhsLoyalLevel = this.getLoyalLevel();
                String rhsLoyalLevel;
                rhsLoyalLevel = that.getLoyalLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "loyalLevel", lhsLoyalLevel), LocatorUtils.property(thatLocator, "loyalLevel", rhsLoyalLevel), lhsLoyalLevel, rhsLoyalLevel)) {
                    return false;
                }
            }
            {
                String lhsSingleVendorInd;
                lhsSingleVendorInd = this.getSingleVendorInd();
                String rhsSingleVendorInd;
                rhsSingleVendorInd = that.getSingleVendorInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "singleVendorInd", lhsSingleVendorInd), LocatorUtils.property(thatLocator, "singleVendorInd", rhsSingleVendorInd), lhsSingleVendorInd, rhsSingleVendorInd)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsSignupDate;
                lhsSignupDate = this.getSignupDate();
                XMLGregorianCalendar rhsSignupDate;
                rhsSignupDate = that.getSignupDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "signupDate", lhsSignupDate), LocatorUtils.property(thatLocator, "signupDate", rhsSignupDate), lhsSignupDate, rhsSignupDate)) {
                    return false;
                }
            }
            {
                String lhsShareSynchInd;
                lhsShareSynchInd = this.getShareSynchInd();
                String rhsShareSynchInd;
                rhsShareSynchInd = that.getShareSynchInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                    return false;
                }
            }
            {
                String lhsShareMarketInd;
                lhsShareMarketInd = this.getShareMarketInd();
                String rhsShareMarketInd;
                rhsShareMarketInd = that.getShareMarketInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsEffectiveDate;
                lhsEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar rhsEffectiveDate;
                rhsEffectiveDate = that.getEffectiveDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsExpireDate;
                lhsExpireDate = this.getExpireDate();
                XMLGregorianCalendar rhsExpireDate;
                rhsExpireDate = that.getExpireDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "expireDate", lhsExpireDate), LocatorUtils.property(thatLocator, "expireDate", rhsExpireDate), lhsExpireDate, rhsExpireDate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
            }
            {
                String theProgramID;
                theProgramID = this.getProgramID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "programID", theProgramID), currentHashCode, theProgramID);
            }
            {
                String theMembershipID;
                theMembershipID = this.getMembershipID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "membershipID", theMembershipID), currentHashCode, theMembershipID);
            }
            {
                String theTravelSector;
                theTravelSector = this.getTravelSector();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelSector", theTravelSector), currentHashCode, theTravelSector);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                List<String> theVendorCode;
                theVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vendorCode", theVendorCode), currentHashCode, theVendorCode);
            }
            {
                String theLoyalLevel;
                theLoyalLevel = this.getLoyalLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loyalLevel", theLoyalLevel), currentHashCode, theLoyalLevel);
            }
            {
                String theSingleVendorInd;
                theSingleVendorInd = this.getSingleVendorInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleVendorInd", theSingleVendorInd), currentHashCode, theSingleVendorInd);
            }
            {
                XMLGregorianCalendar theSignupDate;
                theSignupDate = this.getSignupDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "signupDate", theSignupDate), currentHashCode, theSignupDate);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expireDate", theExpireDate), currentHashCode, theExpireDate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirTravelerType.CustLoyalty) {
                final AirTravelerType.CustLoyalty copy = ((AirTravelerType.CustLoyalty) draftCopy);
                if (this.operation!= null) {
                    ActionType sourceOperation;
                    sourceOperation = this.getOperation();
                    ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                    copy.setOperation(copyOperation);
                } else {
                    copy.operation = null;
                }
                if (this.programID!= null) {
                    String sourceProgramID;
                    sourceProgramID = this.getProgramID();
                    String copyProgramID = ((String) strategy.copy(LocatorUtils.property(locator, "programID", sourceProgramID), sourceProgramID));
                    copy.setProgramID(copyProgramID);
                } else {
                    copy.programID = null;
                }
                if (this.membershipID!= null) {
                    String sourceMembershipID;
                    sourceMembershipID = this.getMembershipID();
                    String copyMembershipID = ((String) strategy.copy(LocatorUtils.property(locator, "membershipID", sourceMembershipID), sourceMembershipID));
                    copy.setMembershipID(copyMembershipID);
                } else {
                    copy.membershipID = null;
                }
                if (this.travelSector!= null) {
                    String sourceTravelSector;
                    sourceTravelSector = this.getTravelSector();
                    String copyTravelSector = ((String) strategy.copy(LocatorUtils.property(locator, "travelSector", sourceTravelSector), sourceTravelSector));
                    copy.setTravelSector(copyTravelSector);
                } else {
                    copy.travelSector = null;
                }
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if ((this.vendorCode!= null)&&(!this.vendorCode.isEmpty())) {
                    List<String> sourceVendorCode;
                    sourceVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyVendorCode = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "vendorCode", sourceVendorCode), sourceVendorCode));
                    copy.vendorCode = null;
                    if (copyVendorCode!= null) {
                        List<String> uniqueVendorCodel = copy.getVendorCode();
                        uniqueVendorCodel.addAll(copyVendorCode);
                    }
                } else {
                    copy.vendorCode = null;
                }
                if (this.loyalLevel!= null) {
                    String sourceLoyalLevel;
                    sourceLoyalLevel = this.getLoyalLevel();
                    String copyLoyalLevel = ((String) strategy.copy(LocatorUtils.property(locator, "loyalLevel", sourceLoyalLevel), sourceLoyalLevel));
                    copy.setLoyalLevel(copyLoyalLevel);
                } else {
                    copy.loyalLevel = null;
                }
                if (this.singleVendorInd!= null) {
                    String sourceSingleVendorInd;
                    sourceSingleVendorInd = this.getSingleVendorInd();
                    String copySingleVendorInd = ((String) strategy.copy(LocatorUtils.property(locator, "singleVendorInd", sourceSingleVendorInd), sourceSingleVendorInd));
                    copy.setSingleVendorInd(copySingleVendorInd);
                } else {
                    copy.singleVendorInd = null;
                }
                if (this.signupDate!= null) {
                    XMLGregorianCalendar sourceSignupDate;
                    sourceSignupDate = this.getSignupDate();
                    XMLGregorianCalendar copySignupDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "signupDate", sourceSignupDate), sourceSignupDate));
                    copy.setSignupDate(copySignupDate);
                } else {
                    copy.signupDate = null;
                }
                if (this.shareSynchInd!= null) {
                    String sourceShareSynchInd;
                    sourceShareSynchInd = this.getShareSynchInd();
                    String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                    copy.setShareSynchInd(copyShareSynchInd);
                } else {
                    copy.shareSynchInd = null;
                }
                if (this.shareMarketInd!= null) {
                    String sourceShareMarketInd;
                    sourceShareMarketInd = this.getShareMarketInd();
                    String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                    copy.setShareMarketInd(copyShareMarketInd);
                } else {
                    copy.shareMarketInd = null;
                }
                if (this.effectiveDate!= null) {
                    XMLGregorianCalendar sourceEffectiveDate;
                    sourceEffectiveDate = this.getEffectiveDate();
                    XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                    copy.setEffectiveDate(copyEffectiveDate);
                } else {
                    copy.effectiveDate = null;
                }
                if (this.expireDate!= null) {
                    XMLGregorianCalendar sourceExpireDate;
                    sourceExpireDate = this.getExpireDate();
                    XMLGregorianCalendar copyExpireDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "expireDate", sourceExpireDate), sourceExpireDate));
                    copy.setExpireDate(copyExpireDate);
                } else {
                    copy.expireDate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.CustLoyalty();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}DocumentType"&gt;
     *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Document
        extends DocumentType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Operation")
        protected ActionType operation;

        /**
         * Gets the value of the operation property.
         * 
         * @return
         *     possible object is
         *     {@link ActionType }
         *     
         */
        public ActionType getOperation() {
            return operation;
        }

        /**
         * Sets the value of the operation property.
         * 
         * @param value
         *     allowed object is
         *     {@link ActionType }
         *     
         */
        public void setOperation(ActionType value) {
            this.operation = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                strategy.appendField(locator, this, "operation", buffer, theOperation);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.Document)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final AirTravelerType.Document that = ((AirTravelerType.Document) object);
            {
                ActionType lhsOperation;
                lhsOperation = this.getOperation();
                ActionType rhsOperation;
                rhsOperation = that.getOperation();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof AirTravelerType.Document) {
                final AirTravelerType.Document copy = ((AirTravelerType.Document) draftCopy);
                if (this.operation!= null) {
                    ActionType sourceOperation;
                    sourceOperation = this.getOperation();
                    ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                    copy.setOperation(copyOperation);
                } else {
                    copy.operation = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.Document();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;EmailType"&gt;
     *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Email
        extends EmailType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Operation")
        protected ActionType operation;

        /**
         * Gets the value of the operation property.
         * 
         * @return
         *     possible object is
         *     {@link ActionType }
         *     
         */
        public ActionType getOperation() {
            return operation;
        }

        /**
         * Sets the value of the operation property.
         * 
         * @param value
         *     allowed object is
         *     {@link ActionType }
         *     
         */
        public void setOperation(ActionType value) {
            this.operation = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                strategy.appendField(locator, this, "operation", buffer, theOperation);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.Email)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final AirTravelerType.Email that = ((AirTravelerType.Email) object);
            {
                ActionType lhsOperation;
                lhsOperation = this.getOperation();
                ActionType rhsOperation;
                rhsOperation = that.getOperation();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof AirTravelerType.Email) {
                final AirTravelerType.Email copy = ((AirTravelerType.Email) draftCopy);
                if (this.operation!= null) {
                    ActionType sourceOperation;
                    sourceOperation = this.getOperation();
                    ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                    copy.setOperation(copyOperation);
                } else {
                    copy.operation = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.Email();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="FlightSegmentRPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" maxOccurs="99"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "flightSegmentRPH"
    })
    public static class FlightSegmentRPHs
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "FlightSegmentRPH", required = true)
        protected List<String> flightSegmentRPH;

        /**
         * Gets the value of the flightSegmentRPH property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the flightSegmentRPH property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getFlightSegmentRPH().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getFlightSegmentRPH() {
            if (flightSegmentRPH == null) {
                flightSegmentRPH = new ArrayList<String>();
            }
            return this.flightSegmentRPH;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<String> theFlightSegmentRPH;
                theFlightSegmentRPH = (((this.flightSegmentRPH!= null)&&(!this.flightSegmentRPH.isEmpty()))?this.getFlightSegmentRPH():null);
                strategy.appendField(locator, this, "flightSegmentRPH", buffer, theFlightSegmentRPH);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.FlightSegmentRPHs)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirTravelerType.FlightSegmentRPHs that = ((AirTravelerType.FlightSegmentRPHs) object);
            {
                List<String> lhsFlightSegmentRPH;
                lhsFlightSegmentRPH = (((this.flightSegmentRPH!= null)&&(!this.flightSegmentRPH.isEmpty()))?this.getFlightSegmentRPH():null);
                List<String> rhsFlightSegmentRPH;
                rhsFlightSegmentRPH = (((that.flightSegmentRPH!= null)&&(!that.flightSegmentRPH.isEmpty()))?that.getFlightSegmentRPH():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "flightSegmentRPH", lhsFlightSegmentRPH), LocatorUtils.property(thatLocator, "flightSegmentRPH", rhsFlightSegmentRPH), lhsFlightSegmentRPH, rhsFlightSegmentRPH)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<String> theFlightSegmentRPH;
                theFlightSegmentRPH = (((this.flightSegmentRPH!= null)&&(!this.flightSegmentRPH.isEmpty()))?this.getFlightSegmentRPH():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightSegmentRPH", theFlightSegmentRPH), currentHashCode, theFlightSegmentRPH);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirTravelerType.FlightSegmentRPHs) {
                final AirTravelerType.FlightSegmentRPHs copy = ((AirTravelerType.FlightSegmentRPHs) draftCopy);
                if ((this.flightSegmentRPH!= null)&&(!this.flightSegmentRPH.isEmpty())) {
                    List<String> sourceFlightSegmentRPH;
                    sourceFlightSegmentRPH = (((this.flightSegmentRPH!= null)&&(!this.flightSegmentRPH.isEmpty()))?this.getFlightSegmentRPH():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyFlightSegmentRPH = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "flightSegmentRPH", sourceFlightSegmentRPH), sourceFlightSegmentRPH));
                    copy.flightSegmentRPH = null;
                    if (copyFlightSegmentRPH!= null) {
                        List<String> uniqueFlightSegmentRPHl = copy.getFlightSegmentRPH();
                        uniqueFlightSegmentRPHl.addAll(copyFlightSegmentRPH);
                    }
                } else {
                    copy.flightSegmentRPH = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.FlightSegmentRPHs();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="UniqueID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "uniqueID"
    })
    public static class ProfileRef
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "UniqueID", required = true)
        protected UniqueIDType uniqueID;

        /**
         * Gets the value of the uniqueID property.
         * 
         * @return
         *     possible object is
         *     {@link UniqueIDType }
         *     
         */
        public UniqueIDType getUniqueID() {
            return uniqueID;
        }

        /**
         * Sets the value of the uniqueID property.
         * 
         * @param value
         *     allowed object is
         *     {@link UniqueIDType }
         *     
         */
        public void setUniqueID(UniqueIDType value) {
            this.uniqueID = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                UniqueIDType theUniqueID;
                theUniqueID = this.getUniqueID();
                strategy.appendField(locator, this, "uniqueID", buffer, theUniqueID);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.ProfileRef)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirTravelerType.ProfileRef that = ((AirTravelerType.ProfileRef) object);
            {
                UniqueIDType lhsUniqueID;
                lhsUniqueID = this.getUniqueID();
                UniqueIDType rhsUniqueID;
                rhsUniqueID = that.getUniqueID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "uniqueID", lhsUniqueID), LocatorUtils.property(thatLocator, "uniqueID", rhsUniqueID), lhsUniqueID, rhsUniqueID)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                UniqueIDType theUniqueID;
                theUniqueID = this.getUniqueID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uniqueID", theUniqueID), currentHashCode, theUniqueID);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirTravelerType.ProfileRef) {
                final AirTravelerType.ProfileRef copy = ((AirTravelerType.ProfileRef) draftCopy);
                if (this.uniqueID!= null) {
                    UniqueIDType sourceUniqueID;
                    sourceUniqueID = this.getUniqueID();
                    UniqueIDType copyUniqueID = ((UniqueIDType) strategy.copy(LocatorUtils.property(locator, "uniqueID", sourceUniqueID), sourceUniqueID));
                    copy.setUniqueID(copyUniqueID);
                } else {
                    copy.uniqueID = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.ProfileRef();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TelephoneInfoGroup"/&gt;
     *       &lt;attribute name="Operation" type="{http://www.opentravel.org/OTA/2003/05}ActionType" /&gt;
     *       &lt;attribute name="LocationCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Telephone
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Operation")
        protected ActionType operation;
        @XmlAttribute(name = "LocationCode")
        protected String locationCode;
        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "ShareSynchInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareSynchInd;
        @XmlAttribute(name = "ShareMarketInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareMarketInd;
        @XmlAttribute(name = "PhoneLocationType")
        protected String phoneLocationType;
        @XmlAttribute(name = "PhoneTechType")
        protected String phoneTechType;
        @XmlAttribute(name = "PhoneUseType")
        protected String phoneUseType;
        @XmlAttribute(name = "CountryAccessCode")
        protected String countryAccessCode;
        @XmlAttribute(name = "AreaCityCode")
        protected String areaCityCode;
        @XmlAttribute(name = "PhoneNumber", required = true)
        protected String phoneNumber;
        @XmlAttribute(name = "Extension")
        protected String extension;
        @XmlAttribute(name = "PIN")
        protected String pin;
        @XmlAttribute(name = "Remark")
        protected String remark;
        @XmlAttribute(name = "FormattedInd")
        protected Boolean formattedInd;
        @XmlAttribute(name = "DefaultInd")
        protected Boolean defaultInd;

        /**
         * Gets the value of the operation property.
         * 
         * @return
         *     possible object is
         *     {@link ActionType }
         *     
         */
        public ActionType getOperation() {
            return operation;
        }

        /**
         * Sets the value of the operation property.
         * 
         * @param value
         *     allowed object is
         *     {@link ActionType }
         *     
         */
        public void setOperation(ActionType value) {
            this.operation = value;
        }

        /**
         * Gets the value of the locationCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLocationCode() {
            return locationCode;
        }

        /**
         * Sets the value of the locationCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLocationCode(String value) {
            this.locationCode = value;
        }

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the shareSynchInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareSynchInd() {
            return shareSynchInd;
        }

        /**
         * Sets the value of the shareSynchInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareSynchInd(String value) {
            this.shareSynchInd = value;
        }

        /**
         * Gets the value of the shareMarketInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareMarketInd() {
            return shareMarketInd;
        }

        /**
         * Sets the value of the shareMarketInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareMarketInd(String value) {
            this.shareMarketInd = value;
        }

        /**
         * Gets the value of the phoneLocationType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneLocationType() {
            return phoneLocationType;
        }

        /**
         * Sets the value of the phoneLocationType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneLocationType(String value) {
            this.phoneLocationType = value;
        }

        /**
         * Gets the value of the phoneTechType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneTechType() {
            return phoneTechType;
        }

        /**
         * Sets the value of the phoneTechType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneTechType(String value) {
            this.phoneTechType = value;
        }

        /**
         * Gets the value of the phoneUseType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneUseType() {
            return phoneUseType;
        }

        /**
         * Sets the value of the phoneUseType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneUseType(String value) {
            this.phoneUseType = value;
        }

        /**
         * Gets the value of the countryAccessCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCountryAccessCode() {
            return countryAccessCode;
        }

        /**
         * Sets the value of the countryAccessCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCountryAccessCode(String value) {
            this.countryAccessCode = value;
        }

        /**
         * Gets the value of the areaCityCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAreaCityCode() {
            return areaCityCode;
        }

        /**
         * Sets the value of the areaCityCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAreaCityCode(String value) {
            this.areaCityCode = value;
        }

        /**
         * Gets the value of the phoneNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneNumber() {
            return phoneNumber;
        }

        /**
         * Sets the value of the phoneNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneNumber(String value) {
            this.phoneNumber = value;
        }

        /**
         * Gets the value of the extension property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getExtension() {
            return extension;
        }

        /**
         * Sets the value of the extension property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setExtension(String value) {
            this.extension = value;
        }

        /**
         * Gets the value of the pin property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPIN() {
            return pin;
        }

        /**
         * Sets the value of the pin property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPIN(String value) {
            this.pin = value;
        }

        /**
         * Gets the value of the remark property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRemark() {
            return remark;
        }

        /**
         * Sets the value of the remark property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRemark(String value) {
            this.remark = value;
        }

        /**
         * Gets the value of the formattedInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isFormattedInd() {
            if (formattedInd == null) {
                return false;
            } else {
                return formattedInd;
            }
        }

        /**
         * Sets the value of the formattedInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setFormattedInd(Boolean value) {
            this.formattedInd = value;
        }

        /**
         * Gets the value of the defaultInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isDefaultInd() {
            if (defaultInd == null) {
                return false;
            } else {
                return defaultInd;
            }
        }

        /**
         * Sets the value of the defaultInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setDefaultInd(Boolean value) {
            this.defaultInd = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                strategy.appendField(locator, this, "operation", buffer, theOperation);
            }
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                strategy.appendField(locator, this, "locationCode", buffer, theLocationCode);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
            }
            {
                String thePhoneLocationType;
                thePhoneLocationType = this.getPhoneLocationType();
                strategy.appendField(locator, this, "phoneLocationType", buffer, thePhoneLocationType);
            }
            {
                String thePhoneTechType;
                thePhoneTechType = this.getPhoneTechType();
                strategy.appendField(locator, this, "phoneTechType", buffer, thePhoneTechType);
            }
            {
                String thePhoneUseType;
                thePhoneUseType = this.getPhoneUseType();
                strategy.appendField(locator, this, "phoneUseType", buffer, thePhoneUseType);
            }
            {
                String theCountryAccessCode;
                theCountryAccessCode = this.getCountryAccessCode();
                strategy.appendField(locator, this, "countryAccessCode", buffer, theCountryAccessCode);
            }
            {
                String theAreaCityCode;
                theAreaCityCode = this.getAreaCityCode();
                strategy.appendField(locator, this, "areaCityCode", buffer, theAreaCityCode);
            }
            {
                String thePhoneNumber;
                thePhoneNumber = this.getPhoneNumber();
                strategy.appendField(locator, this, "phoneNumber", buffer, thePhoneNumber);
            }
            {
                String theExtension;
                theExtension = this.getExtension();
                strategy.appendField(locator, this, "extension", buffer, theExtension);
            }
            {
                String thePIN;
                thePIN = this.getPIN();
                strategy.appendField(locator, this, "pin", buffer, thePIN);
            }
            {
                String theRemark;
                theRemark = this.getRemark();
                strategy.appendField(locator, this, "remark", buffer, theRemark);
            }
            {
                boolean theFormattedInd;
                theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                strategy.appendField(locator, this, "formattedInd", buffer, theFormattedInd);
            }
            {
                boolean theDefaultInd;
                theDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                strategy.appendField(locator, this, "defaultInd", buffer, theDefaultInd);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.Telephone)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirTravelerType.Telephone that = ((AirTravelerType.Telephone) object);
            {
                ActionType lhsOperation;
                lhsOperation = this.getOperation();
                ActionType rhsOperation;
                rhsOperation = that.getOperation();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                    return false;
                }
            }
            {
                String lhsLocationCode;
                lhsLocationCode = this.getLocationCode();
                String rhsLocationCode;
                rhsLocationCode = that.getLocationCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "locationCode", lhsLocationCode), LocatorUtils.property(thatLocator, "locationCode", rhsLocationCode), lhsLocationCode, rhsLocationCode)) {
                    return false;
                }
            }
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                String lhsShareSynchInd;
                lhsShareSynchInd = this.getShareSynchInd();
                String rhsShareSynchInd;
                rhsShareSynchInd = that.getShareSynchInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                    return false;
                }
            }
            {
                String lhsShareMarketInd;
                lhsShareMarketInd = this.getShareMarketInd();
                String rhsShareMarketInd;
                rhsShareMarketInd = that.getShareMarketInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                    return false;
                }
            }
            {
                String lhsPhoneLocationType;
                lhsPhoneLocationType = this.getPhoneLocationType();
                String rhsPhoneLocationType;
                rhsPhoneLocationType = that.getPhoneLocationType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneLocationType", lhsPhoneLocationType), LocatorUtils.property(thatLocator, "phoneLocationType", rhsPhoneLocationType), lhsPhoneLocationType, rhsPhoneLocationType)) {
                    return false;
                }
            }
            {
                String lhsPhoneTechType;
                lhsPhoneTechType = this.getPhoneTechType();
                String rhsPhoneTechType;
                rhsPhoneTechType = that.getPhoneTechType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneTechType", lhsPhoneTechType), LocatorUtils.property(thatLocator, "phoneTechType", rhsPhoneTechType), lhsPhoneTechType, rhsPhoneTechType)) {
                    return false;
                }
            }
            {
                String lhsPhoneUseType;
                lhsPhoneUseType = this.getPhoneUseType();
                String rhsPhoneUseType;
                rhsPhoneUseType = that.getPhoneUseType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneUseType", lhsPhoneUseType), LocatorUtils.property(thatLocator, "phoneUseType", rhsPhoneUseType), lhsPhoneUseType, rhsPhoneUseType)) {
                    return false;
                }
            }
            {
                String lhsCountryAccessCode;
                lhsCountryAccessCode = this.getCountryAccessCode();
                String rhsCountryAccessCode;
                rhsCountryAccessCode = that.getCountryAccessCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "countryAccessCode", lhsCountryAccessCode), LocatorUtils.property(thatLocator, "countryAccessCode", rhsCountryAccessCode), lhsCountryAccessCode, rhsCountryAccessCode)) {
                    return false;
                }
            }
            {
                String lhsAreaCityCode;
                lhsAreaCityCode = this.getAreaCityCode();
                String rhsAreaCityCode;
                rhsAreaCityCode = that.getAreaCityCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "areaCityCode", lhsAreaCityCode), LocatorUtils.property(thatLocator, "areaCityCode", rhsAreaCityCode), lhsAreaCityCode, rhsAreaCityCode)) {
                    return false;
                }
            }
            {
                String lhsPhoneNumber;
                lhsPhoneNumber = this.getPhoneNumber();
                String rhsPhoneNumber;
                rhsPhoneNumber = that.getPhoneNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneNumber", lhsPhoneNumber), LocatorUtils.property(thatLocator, "phoneNumber", rhsPhoneNumber), lhsPhoneNumber, rhsPhoneNumber)) {
                    return false;
                }
            }
            {
                String lhsExtension;
                lhsExtension = this.getExtension();
                String rhsExtension;
                rhsExtension = that.getExtension();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "extension", lhsExtension), LocatorUtils.property(thatLocator, "extension", rhsExtension), lhsExtension, rhsExtension)) {
                    return false;
                }
            }
            {
                String lhsPIN;
                lhsPIN = this.getPIN();
                String rhsPIN;
                rhsPIN = that.getPIN();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "pin", lhsPIN), LocatorUtils.property(thatLocator, "pin", rhsPIN), lhsPIN, rhsPIN)) {
                    return false;
                }
            }
            {
                String lhsRemark;
                lhsRemark = this.getRemark();
                String rhsRemark;
                rhsRemark = that.getRemark();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "remark", lhsRemark), LocatorUtils.property(thatLocator, "remark", rhsRemark), lhsRemark, rhsRemark)) {
                    return false;
                }
            }
            {
                boolean lhsFormattedInd;
                lhsFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                boolean rhsFormattedInd;
                rhsFormattedInd = ((that.formattedInd!= null)?that.isFormattedInd():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "formattedInd", lhsFormattedInd), LocatorUtils.property(thatLocator, "formattedInd", rhsFormattedInd), lhsFormattedInd, rhsFormattedInd)) {
                    return false;
                }
            }
            {
                boolean lhsDefaultInd;
                lhsDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                boolean rhsDefaultInd;
                rhsDefaultInd = ((that.defaultInd!= null)?that.isDefaultInd():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "defaultInd", lhsDefaultInd), LocatorUtils.property(thatLocator, "defaultInd", rhsDefaultInd), lhsDefaultInd, rhsDefaultInd)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                ActionType theOperation;
                theOperation = this.getOperation();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
            }
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locationCode", theLocationCode), currentHashCode, theLocationCode);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
            }
            {
                String thePhoneLocationType;
                thePhoneLocationType = this.getPhoneLocationType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneLocationType", thePhoneLocationType), currentHashCode, thePhoneLocationType);
            }
            {
                String thePhoneTechType;
                thePhoneTechType = this.getPhoneTechType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneTechType", thePhoneTechType), currentHashCode, thePhoneTechType);
            }
            {
                String thePhoneUseType;
                thePhoneUseType = this.getPhoneUseType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneUseType", thePhoneUseType), currentHashCode, thePhoneUseType);
            }
            {
                String theCountryAccessCode;
                theCountryAccessCode = this.getCountryAccessCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "countryAccessCode", theCountryAccessCode), currentHashCode, theCountryAccessCode);
            }
            {
                String theAreaCityCode;
                theAreaCityCode = this.getAreaCityCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "areaCityCode", theAreaCityCode), currentHashCode, theAreaCityCode);
            }
            {
                String thePhoneNumber;
                thePhoneNumber = this.getPhoneNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneNumber", thePhoneNumber), currentHashCode, thePhoneNumber);
            }
            {
                String theExtension;
                theExtension = this.getExtension();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extension", theExtension), currentHashCode, theExtension);
            }
            {
                String thePIN;
                thePIN = this.getPIN();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pin", thePIN), currentHashCode, thePIN);
            }
            {
                String theRemark;
                theRemark = this.getRemark();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remark", theRemark), currentHashCode, theRemark);
            }
            {
                boolean theFormattedInd;
                theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formattedInd", theFormattedInd), currentHashCode, theFormattedInd);
            }
            {
                boolean theDefaultInd;
                theDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "defaultInd", theDefaultInd), currentHashCode, theDefaultInd);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirTravelerType.Telephone) {
                final AirTravelerType.Telephone copy = ((AirTravelerType.Telephone) draftCopy);
                if (this.operation!= null) {
                    ActionType sourceOperation;
                    sourceOperation = this.getOperation();
                    ActionType copyOperation = ((ActionType) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation));
                    copy.setOperation(copyOperation);
                } else {
                    copy.operation = null;
                }
                if (this.locationCode!= null) {
                    String sourceLocationCode;
                    sourceLocationCode = this.getLocationCode();
                    String copyLocationCode = ((String) strategy.copy(LocatorUtils.property(locator, "locationCode", sourceLocationCode), sourceLocationCode));
                    copy.setLocationCode(copyLocationCode);
                } else {
                    copy.locationCode = null;
                }
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if (this.shareSynchInd!= null) {
                    String sourceShareSynchInd;
                    sourceShareSynchInd = this.getShareSynchInd();
                    String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                    copy.setShareSynchInd(copyShareSynchInd);
                } else {
                    copy.shareSynchInd = null;
                }
                if (this.shareMarketInd!= null) {
                    String sourceShareMarketInd;
                    sourceShareMarketInd = this.getShareMarketInd();
                    String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                    copy.setShareMarketInd(copyShareMarketInd);
                } else {
                    copy.shareMarketInd = null;
                }
                if (this.phoneLocationType!= null) {
                    String sourcePhoneLocationType;
                    sourcePhoneLocationType = this.getPhoneLocationType();
                    String copyPhoneLocationType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneLocationType", sourcePhoneLocationType), sourcePhoneLocationType));
                    copy.setPhoneLocationType(copyPhoneLocationType);
                } else {
                    copy.phoneLocationType = null;
                }
                if (this.phoneTechType!= null) {
                    String sourcePhoneTechType;
                    sourcePhoneTechType = this.getPhoneTechType();
                    String copyPhoneTechType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneTechType", sourcePhoneTechType), sourcePhoneTechType));
                    copy.setPhoneTechType(copyPhoneTechType);
                } else {
                    copy.phoneTechType = null;
                }
                if (this.phoneUseType!= null) {
                    String sourcePhoneUseType;
                    sourcePhoneUseType = this.getPhoneUseType();
                    String copyPhoneUseType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneUseType", sourcePhoneUseType), sourcePhoneUseType));
                    copy.setPhoneUseType(copyPhoneUseType);
                } else {
                    copy.phoneUseType = null;
                }
                if (this.countryAccessCode!= null) {
                    String sourceCountryAccessCode;
                    sourceCountryAccessCode = this.getCountryAccessCode();
                    String copyCountryAccessCode = ((String) strategy.copy(LocatorUtils.property(locator, "countryAccessCode", sourceCountryAccessCode), sourceCountryAccessCode));
                    copy.setCountryAccessCode(copyCountryAccessCode);
                } else {
                    copy.countryAccessCode = null;
                }
                if (this.areaCityCode!= null) {
                    String sourceAreaCityCode;
                    sourceAreaCityCode = this.getAreaCityCode();
                    String copyAreaCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "areaCityCode", sourceAreaCityCode), sourceAreaCityCode));
                    copy.setAreaCityCode(copyAreaCityCode);
                } else {
                    copy.areaCityCode = null;
                }
                if (this.phoneNumber!= null) {
                    String sourcePhoneNumber;
                    sourcePhoneNumber = this.getPhoneNumber();
                    String copyPhoneNumber = ((String) strategy.copy(LocatorUtils.property(locator, "phoneNumber", sourcePhoneNumber), sourcePhoneNumber));
                    copy.setPhoneNumber(copyPhoneNumber);
                } else {
                    copy.phoneNumber = null;
                }
                if (this.extension!= null) {
                    String sourceExtension;
                    sourceExtension = this.getExtension();
                    String copyExtension = ((String) strategy.copy(LocatorUtils.property(locator, "extension", sourceExtension), sourceExtension));
                    copy.setExtension(copyExtension);
                } else {
                    copy.extension = null;
                }
                if (this.pin!= null) {
                    String sourcePIN;
                    sourcePIN = this.getPIN();
                    String copyPIN = ((String) strategy.copy(LocatorUtils.property(locator, "pin", sourcePIN), sourcePIN));
                    copy.setPIN(copyPIN);
                } else {
                    copy.pin = null;
                }
                if (this.remark!= null) {
                    String sourceRemark;
                    sourceRemark = this.getRemark();
                    String copyRemark = ((String) strategy.copy(LocatorUtils.property(locator, "remark", sourceRemark), sourceRemark));
                    copy.setRemark(copyRemark);
                } else {
                    copy.remark = null;
                }
                if (this.formattedInd!= null) {
                    boolean sourceFormattedInd;
                    sourceFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                    boolean copyFormattedInd = strategy.copy(LocatorUtils.property(locator, "formattedInd", sourceFormattedInd), sourceFormattedInd);
                    copy.setFormattedInd(copyFormattedInd);
                } else {
                    copy.formattedInd = null;
                }
                if (this.defaultInd!= null) {
                    boolean sourceDefaultInd;
                    sourceDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                    boolean copyDefaultInd = strategy.copy(LocatorUtils.property(locator, "defaultInd", sourceDefaultInd), sourceDefaultInd);
                    copy.setDefaultInd(copyDefaultInd);
                } else {
                    copy.defaultInd = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.Telephone();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TravelerRefNumberGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TravelerRefNumber
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "SurnameRefNumber")
        protected String surnameRefNumber;

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the surnameRefNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSurnameRefNumber() {
            return surnameRefNumber;
        }

        /**
         * Sets the value of the surnameRefNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSurnameRefNumber(String value) {
            this.surnameRefNumber = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                String theSurnameRefNumber;
                theSurnameRefNumber = this.getSurnameRefNumber();
                strategy.appendField(locator, this, "surnameRefNumber", buffer, theSurnameRefNumber);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AirTravelerType.TravelerRefNumber)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AirTravelerType.TravelerRefNumber that = ((AirTravelerType.TravelerRefNumber) object);
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                String lhsSurnameRefNumber;
                lhsSurnameRefNumber = this.getSurnameRefNumber();
                String rhsSurnameRefNumber;
                rhsSurnameRefNumber = that.getSurnameRefNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "surnameRefNumber", lhsSurnameRefNumber), LocatorUtils.property(thatLocator, "surnameRefNumber", rhsSurnameRefNumber), lhsSurnameRefNumber, rhsSurnameRefNumber)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                String theSurnameRefNumber;
                theSurnameRefNumber = this.getSurnameRefNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "surnameRefNumber", theSurnameRefNumber), currentHashCode, theSurnameRefNumber);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AirTravelerType.TravelerRefNumber) {
                final AirTravelerType.TravelerRefNumber copy = ((AirTravelerType.TravelerRefNumber) draftCopy);
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if (this.surnameRefNumber!= null) {
                    String sourceSurnameRefNumber;
                    sourceSurnameRefNumber = this.getSurnameRefNumber();
                    String copySurnameRefNumber = ((String) strategy.copy(LocatorUtils.property(locator, "surnameRefNumber", sourceSurnameRefNumber), sourceSurnameRefNumber));
                    copy.setSurnameRefNumber(copySurnameRefNumber);
                } else {
                    copy.surnameRefNumber = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AirTravelerType.TravelerRefNumber();
        }

    }

}
