//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Date and time of trip, that allows specifying a time window before and after the given date.
 * 
 * <p>Java class for TravelDateTimeType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TravelDateTimeType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="DepartureDateTime" type="{http://www.opentravel.org/OTA/2003/05}TimeInstantType"/&gt;
 *         &lt;element name="ArrivalDateTime" type="{http://www.opentravel.org/OTA/2003/05}TimeInstantType"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TravelDateTimeType", propOrder = {
    "departureDateTime",
    "arrivalDateTime"
})
@XmlSeeAlso({
    OriginDestinationInformationType.class
})
public class TravelDateTimeType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "DepartureDateTime")
    protected TimeInstantType departureDateTime;
    @XmlElement(name = "ArrivalDateTime")
    protected TimeInstantType arrivalDateTime;

    /**
     * Gets the value of the departureDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link TimeInstantType }
     *     
     */
    public TimeInstantType getDepartureDateTime() {
        return departureDateTime;
    }

    /**
     * Sets the value of the departureDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link TimeInstantType }
     *     
     */
    public void setDepartureDateTime(TimeInstantType value) {
        this.departureDateTime = value;
    }

    /**
     * Gets the value of the arrivalDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link TimeInstantType }
     *     
     */
    public TimeInstantType getArrivalDateTime() {
        return arrivalDateTime;
    }

    /**
     * Sets the value of the arrivalDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link TimeInstantType }
     *     
     */
    public void setArrivalDateTime(TimeInstantType value) {
        this.arrivalDateTime = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TimeInstantType theDepartureDateTime;
            theDepartureDateTime = this.getDepartureDateTime();
            strategy.appendField(locator, this, "departureDateTime", buffer, theDepartureDateTime);
        }
        {
            TimeInstantType theArrivalDateTime;
            theArrivalDateTime = this.getArrivalDateTime();
            strategy.appendField(locator, this, "arrivalDateTime", buffer, theArrivalDateTime);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TravelDateTimeType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TravelDateTimeType that = ((TravelDateTimeType) object);
        {
            TimeInstantType lhsDepartureDateTime;
            lhsDepartureDateTime = this.getDepartureDateTime();
            TimeInstantType rhsDepartureDateTime;
            rhsDepartureDateTime = that.getDepartureDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "departureDateTime", lhsDepartureDateTime), LocatorUtils.property(thatLocator, "departureDateTime", rhsDepartureDateTime), lhsDepartureDateTime, rhsDepartureDateTime)) {
                return false;
            }
        }
        {
            TimeInstantType lhsArrivalDateTime;
            lhsArrivalDateTime = this.getArrivalDateTime();
            TimeInstantType rhsArrivalDateTime;
            rhsArrivalDateTime = that.getArrivalDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "arrivalDateTime", lhsArrivalDateTime), LocatorUtils.property(thatLocator, "arrivalDateTime", rhsArrivalDateTime), lhsArrivalDateTime, rhsArrivalDateTime)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TimeInstantType theDepartureDateTime;
            theDepartureDateTime = this.getDepartureDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departureDateTime", theDepartureDateTime), currentHashCode, theDepartureDateTime);
        }
        {
            TimeInstantType theArrivalDateTime;
            theArrivalDateTime = this.getArrivalDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "arrivalDateTime", theArrivalDateTime), currentHashCode, theArrivalDateTime);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TravelDateTimeType) {
            final TravelDateTimeType copy = ((TravelDateTimeType) draftCopy);
            if (this.departureDateTime!= null) {
                TimeInstantType sourceDepartureDateTime;
                sourceDepartureDateTime = this.getDepartureDateTime();
                TimeInstantType copyDepartureDateTime = ((TimeInstantType) strategy.copy(LocatorUtils.property(locator, "departureDateTime", sourceDepartureDateTime), sourceDepartureDateTime));
                copy.setDepartureDateTime(copyDepartureDateTime);
            } else {
                copy.departureDateTime = null;
            }
            if (this.arrivalDateTime!= null) {
                TimeInstantType sourceArrivalDateTime;
                sourceArrivalDateTime = this.getArrivalDateTime();
                TimeInstantType copyArrivalDateTime = ((TimeInstantType) strategy.copy(LocatorUtils.property(locator, "arrivalDateTime", sourceArrivalDateTime), sourceArrivalDateTime));
                copy.setArrivalDateTime(copyArrivalDateTime);
            } else {
                copy.arrivalDateTime = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TravelDateTimeType();
    }

}
