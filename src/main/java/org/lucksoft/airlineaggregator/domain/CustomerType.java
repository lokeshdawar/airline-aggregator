//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Contains basic data on the customer's identity, location, relationships, finances, memberships, etc.
 * 
 * <p>Java class for CustomerType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CustomerType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PersonName" type="{http://www.opentravel.org/OTA/2003/05}PersonNameType" minOccurs="0"/&gt;
 *         &lt;element name="Telephone" maxOccurs="5" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TelephoneInfoGroup"/&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}EffectiveExpireOptionalDateGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Email" type="{http://www.opentravel.org/OTA/2003/05}EmailType" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="Address" maxOccurs="5" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AddressInfoType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="CompanyName" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}EffectiveExpireOptionalDateGroup"/&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="URL" type="{http://www.opentravel.org/OTA/2003/05}URL_Type" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="CitizenCountryName" maxOccurs="2" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CitizenCountryNameGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="PhysChallName" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to128" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="PetInfo" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" maxOccurs="3" minOccurs="0"/&gt;
 *         &lt;element name="PaymentForm" type="{http://www.opentravel.org/OTA/2003/05}PaymentFormType" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="RelatedTraveler" type="{http://www.opentravel.org/OTA/2003/05}RelatedTravelerType" maxOccurs="9" minOccurs="0"/&gt;
 *         &lt;element name="ContactPerson" type="{http://www.opentravel.org/OTA/2003/05}ContactPersonType" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="Document" type="{http://www.opentravel.org/OTA/2003/05}DocumentType" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="CustLoyalty" maxOccurs="5" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CustomerLoyaltyGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="EmployeeInfo" type="{http://www.opentravel.org/OTA/2003/05}EmployeeInfoType" maxOccurs="3" minOccurs="0"/&gt;
 *         &lt;element name="EmployerInfo" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opentravel.org/OTA/2003/05}TPA_Extensions" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}GenderGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}BirthDateGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyCodeGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LanguageGroup"/&gt;
 *       &lt;attribute name="Deceased" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="LockoutType" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *       &lt;attribute name="VIP_Indicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="Text" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CustomerType", propOrder = {
    "personName",
    "telephone",
    "email",
    "address",
    "url",
    "citizenCountryName",
    "physChallName",
    "petInfo",
    "paymentForm",
    "relatedTraveler",
    "contactPerson",
    "document",
    "custLoyalty",
    "employeeInfo",
    "employerInfo",
    "tpaExtensions"
})
public class CustomerType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "PersonName")
    protected PersonNameType personName;
    @XmlElement(name = "Telephone")
    protected List<CustomerType.Telephone> telephone;
    @XmlElement(name = "Email")
    protected List<EmailType> email;
    @XmlElement(name = "Address")
    protected List<CustomerType.Address> address;
    @XmlElement(name = "URL")
    protected List<URLType> url;
    @XmlElement(name = "CitizenCountryName")
    protected List<CustomerType.CitizenCountryName> citizenCountryName;
    @XmlElement(name = "PhysChallName")
    protected List<String> physChallName;
    @XmlElement(name = "PetInfo")
    protected List<String> petInfo;
    @XmlElement(name = "PaymentForm")
    protected List<PaymentFormType> paymentForm;
    @XmlElement(name = "RelatedTraveler")
    protected List<RelatedTravelerType> relatedTraveler;
    @XmlElement(name = "ContactPerson")
    protected List<ContactPersonType> contactPerson;
    @XmlElement(name = "Document")
    protected List<DocumentType> document;
    @XmlElement(name = "CustLoyalty")
    protected List<CustomerType.CustLoyalty> custLoyalty;
    @XmlElement(name = "EmployeeInfo")
    protected List<EmployeeInfoType> employeeInfo;
    @XmlElement(name = "EmployerInfo")
    protected CompanyNameType employerInfo;
    @XmlElement(name = "TPA_Extensions")
    protected TPAExtensionsType tpaExtensions;
    @XmlAttribute(name = "Deceased")
    protected Boolean deceased;
    @XmlAttribute(name = "LockoutType")
    protected String lockoutType;
    @XmlAttribute(name = "VIP_Indicator")
    protected Boolean vipIndicator;
    @XmlAttribute(name = "Text")
    protected String text;
    @XmlAttribute(name = "Gender")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String gender;
    @XmlAttribute(name = "BirthDate")
    @XmlSchemaType(name = "date")
    protected XMLGregorianCalendar birthDate;
    @XmlAttribute(name = "CurrencyCode")
    protected String currencyCode;
    @XmlAttribute(name = "DecimalPlaces")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger decimalPlaces;
    @XmlAttribute(name = "Language")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String language;

    /**
     * Gets the value of the personName property.
     * 
     * @return
     *     possible object is
     *     {@link PersonNameType }
     *     
     */
    public PersonNameType getPersonName() {
        return personName;
    }

    /**
     * Sets the value of the personName property.
     * 
     * @param value
     *     allowed object is
     *     {@link PersonNameType }
     *     
     */
    public void setPersonName(PersonNameType value) {
        this.personName = value;
    }

    /**
     * Gets the value of the telephone property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the telephone property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelephone().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CustomerType.Telephone }
     * 
     * 
     */
    public List<CustomerType.Telephone> getTelephone() {
        if (telephone == null) {
            telephone = new ArrayList<CustomerType.Telephone>();
        }
        return this.telephone;
    }

    /**
     * Gets the value of the email property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the email property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEmail().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EmailType }
     * 
     * 
     */
    public List<EmailType> getEmail() {
        if (email == null) {
            email = new ArrayList<EmailType>();
        }
        return this.email;
    }

    /**
     * Gets the value of the address property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the address property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CustomerType.Address }
     * 
     * 
     */
    public List<CustomerType.Address> getAddress() {
        if (address == null) {
            address = new ArrayList<CustomerType.Address>();
        }
        return this.address;
    }

    /**
     * Gets the value of the url property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the url property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getURL().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link URLType }
     * 
     * 
     */
    public List<URLType> getURL() {
        if (url == null) {
            url = new ArrayList<URLType>();
        }
        return this.url;
    }

    /**
     * Gets the value of the citizenCountryName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the citizenCountryName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCitizenCountryName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CustomerType.CitizenCountryName }
     * 
     * 
     */
    public List<CustomerType.CitizenCountryName> getCitizenCountryName() {
        if (citizenCountryName == null) {
            citizenCountryName = new ArrayList<CustomerType.CitizenCountryName>();
        }
        return this.citizenCountryName;
    }

    /**
     * Gets the value of the physChallName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the physChallName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhysChallName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getPhysChallName() {
        if (physChallName == null) {
            physChallName = new ArrayList<String>();
        }
        return this.physChallName;
    }

    /**
     * Gets the value of the petInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the petInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPetInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getPetInfo() {
        if (petInfo == null) {
            petInfo = new ArrayList<String>();
        }
        return this.petInfo;
    }

    /**
     * Gets the value of the paymentForm property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the paymentForm property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPaymentForm().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PaymentFormType }
     * 
     * 
     */
    public List<PaymentFormType> getPaymentForm() {
        if (paymentForm == null) {
            paymentForm = new ArrayList<PaymentFormType>();
        }
        return this.paymentForm;
    }

    /**
     * Gets the value of the relatedTraveler property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatedTraveler property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatedTraveler().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RelatedTravelerType }
     * 
     * 
     */
    public List<RelatedTravelerType> getRelatedTraveler() {
        if (relatedTraveler == null) {
            relatedTraveler = new ArrayList<RelatedTravelerType>();
        }
        return this.relatedTraveler;
    }

    /**
     * Gets the value of the contactPerson property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contactPerson property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContactPerson().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ContactPersonType }
     * 
     * 
     */
    public List<ContactPersonType> getContactPerson() {
        if (contactPerson == null) {
            contactPerson = new ArrayList<ContactPersonType>();
        }
        return this.contactPerson;
    }

    /**
     * Gets the value of the document property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the document property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDocument().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DocumentType }
     * 
     * 
     */
    public List<DocumentType> getDocument() {
        if (document == null) {
            document = new ArrayList<DocumentType>();
        }
        return this.document;
    }

    /**
     * Gets the value of the custLoyalty property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the custLoyalty property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCustLoyalty().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CustomerType.CustLoyalty }
     * 
     * 
     */
    public List<CustomerType.CustLoyalty> getCustLoyalty() {
        if (custLoyalty == null) {
            custLoyalty = new ArrayList<CustomerType.CustLoyalty>();
        }
        return this.custLoyalty;
    }

    /**
     * Gets the value of the employeeInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the employeeInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEmployeeInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EmployeeInfoType }
     * 
     * 
     */
    public List<EmployeeInfoType> getEmployeeInfo() {
        if (employeeInfo == null) {
            employeeInfo = new ArrayList<EmployeeInfoType>();
        }
        return this.employeeInfo;
    }

    /**
     * Gets the value of the employerInfo property.
     * 
     * @return
     *     possible object is
     *     {@link CompanyNameType }
     *     
     */
    public CompanyNameType getEmployerInfo() {
        return employerInfo;
    }

    /**
     * Sets the value of the employerInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link CompanyNameType }
     *     
     */
    public void setEmployerInfo(CompanyNameType value) {
        this.employerInfo = value;
    }

    /**
     * Gets the value of the tpaExtensions property.
     * 
     * @return
     *     possible object is
     *     {@link TPAExtensionsType }
     *     
     */
    public TPAExtensionsType getTPAExtensions() {
        return tpaExtensions;
    }

    /**
     * Sets the value of the tpaExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link TPAExtensionsType }
     *     
     */
    public void setTPAExtensions(TPAExtensionsType value) {
        this.tpaExtensions = value;
    }

    /**
     * Gets the value of the deceased property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isDeceased() {
        return deceased;
    }

    /**
     * Sets the value of the deceased property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setDeceased(Boolean value) {
        this.deceased = value;
    }

    /**
     * Gets the value of the lockoutType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLockoutType() {
        return lockoutType;
    }

    /**
     * Sets the value of the lockoutType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLockoutType(String value) {
        this.lockoutType = value;
    }

    /**
     * Gets the value of the vipIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isVIPIndicator() {
        return vipIndicator;
    }

    /**
     * Sets the value of the vipIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setVIPIndicator(Boolean value) {
        this.vipIndicator = value;
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setText(String value) {
        this.text = value;
    }

    /**
     * Gets the value of the gender property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGender() {
        return gender;
    }

    /**
     * Sets the value of the gender property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setGender(String value) {
        this.gender = value;
    }

    /**
     * Gets the value of the birthDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getBirthDate() {
        return birthDate;
    }

    /**
     * Sets the value of the birthDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setBirthDate(XMLGregorianCalendar value) {
        this.birthDate = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the decimalPlaces property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDecimalPlaces() {
        return decimalPlaces;
    }

    /**
     * Sets the value of the decimalPlaces property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDecimalPlaces(BigInteger value) {
        this.decimalPlaces = value;
    }

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLanguage(String value) {
        this.language = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            PersonNameType thePersonName;
            thePersonName = this.getPersonName();
            strategy.appendField(locator, this, "personName", buffer, thePersonName);
        }
        {
            List<CustomerType.Telephone> theTelephone;
            theTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
            strategy.appendField(locator, this, "telephone", buffer, theTelephone);
        }
        {
            List<EmailType> theEmail;
            theEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
            strategy.appendField(locator, this, "email", buffer, theEmail);
        }
        {
            List<CustomerType.Address> theAddress;
            theAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            List<URLType> theURL;
            theURL = (((this.url!= null)&&(!this.url.isEmpty()))?this.getURL():null);
            strategy.appendField(locator, this, "url", buffer, theURL);
        }
        {
            List<CustomerType.CitizenCountryName> theCitizenCountryName;
            theCitizenCountryName = (((this.citizenCountryName!= null)&&(!this.citizenCountryName.isEmpty()))?this.getCitizenCountryName():null);
            strategy.appendField(locator, this, "citizenCountryName", buffer, theCitizenCountryName);
        }
        {
            List<String> thePhysChallName;
            thePhysChallName = (((this.physChallName!= null)&&(!this.physChallName.isEmpty()))?this.getPhysChallName():null);
            strategy.appendField(locator, this, "physChallName", buffer, thePhysChallName);
        }
        {
            List<String> thePetInfo;
            thePetInfo = (((this.petInfo!= null)&&(!this.petInfo.isEmpty()))?this.getPetInfo():null);
            strategy.appendField(locator, this, "petInfo", buffer, thePetInfo);
        }
        {
            List<PaymentFormType> thePaymentForm;
            thePaymentForm = (((this.paymentForm!= null)&&(!this.paymentForm.isEmpty()))?this.getPaymentForm():null);
            strategy.appendField(locator, this, "paymentForm", buffer, thePaymentForm);
        }
        {
            List<RelatedTravelerType> theRelatedTraveler;
            theRelatedTraveler = (((this.relatedTraveler!= null)&&(!this.relatedTraveler.isEmpty()))?this.getRelatedTraveler():null);
            strategy.appendField(locator, this, "relatedTraveler", buffer, theRelatedTraveler);
        }
        {
            List<ContactPersonType> theContactPerson;
            theContactPerson = (((this.contactPerson!= null)&&(!this.contactPerson.isEmpty()))?this.getContactPerson():null);
            strategy.appendField(locator, this, "contactPerson", buffer, theContactPerson);
        }
        {
            List<DocumentType> theDocument;
            theDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            strategy.appendField(locator, this, "document", buffer, theDocument);
        }
        {
            List<CustomerType.CustLoyalty> theCustLoyalty;
            theCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
            strategy.appendField(locator, this, "custLoyalty", buffer, theCustLoyalty);
        }
        {
            List<EmployeeInfoType> theEmployeeInfo;
            theEmployeeInfo = (((this.employeeInfo!= null)&&(!this.employeeInfo.isEmpty()))?this.getEmployeeInfo():null);
            strategy.appendField(locator, this, "employeeInfo", buffer, theEmployeeInfo);
        }
        {
            CompanyNameType theEmployerInfo;
            theEmployerInfo = this.getEmployerInfo();
            strategy.appendField(locator, this, "employerInfo", buffer, theEmployerInfo);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            strategy.appendField(locator, this, "tpaExtensions", buffer, theTPAExtensions);
        }
        {
            Boolean theDeceased;
            theDeceased = this.isDeceased();
            strategy.appendField(locator, this, "deceased", buffer, theDeceased);
        }
        {
            String theLockoutType;
            theLockoutType = this.getLockoutType();
            strategy.appendField(locator, this, "lockoutType", buffer, theLockoutType);
        }
        {
            Boolean theVIPIndicator;
            theVIPIndicator = this.isVIPIndicator();
            strategy.appendField(locator, this, "vipIndicator", buffer, theVIPIndicator);
        }
        {
            String theText;
            theText = this.getText();
            strategy.appendField(locator, this, "text", buffer, theText);
        }
        {
            String theGender;
            theGender = this.getGender();
            strategy.appendField(locator, this, "gender", buffer, theGender);
        }
        {
            XMLGregorianCalendar theBirthDate;
            theBirthDate = this.getBirthDate();
            strategy.appendField(locator, this, "birthDate", buffer, theBirthDate);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
        }
        {
            String theLanguage;
            theLanguage = this.getLanguage();
            strategy.appendField(locator, this, "language", buffer, theLanguage);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CustomerType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CustomerType that = ((CustomerType) object);
        {
            PersonNameType lhsPersonName;
            lhsPersonName = this.getPersonName();
            PersonNameType rhsPersonName;
            rhsPersonName = that.getPersonName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "personName", lhsPersonName), LocatorUtils.property(thatLocator, "personName", rhsPersonName), lhsPersonName, rhsPersonName)) {
                return false;
            }
        }
        {
            List<CustomerType.Telephone> lhsTelephone;
            lhsTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
            List<CustomerType.Telephone> rhsTelephone;
            rhsTelephone = (((that.telephone!= null)&&(!that.telephone.isEmpty()))?that.getTelephone():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telephone", lhsTelephone), LocatorUtils.property(thatLocator, "telephone", rhsTelephone), lhsTelephone, rhsTelephone)) {
                return false;
            }
        }
        {
            List<EmailType> lhsEmail;
            lhsEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
            List<EmailType> rhsEmail;
            rhsEmail = (((that.email!= null)&&(!that.email.isEmpty()))?that.getEmail():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "email", lhsEmail), LocatorUtils.property(thatLocator, "email", rhsEmail), lhsEmail, rhsEmail)) {
                return false;
            }
        }
        {
            List<CustomerType.Address> lhsAddress;
            lhsAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            List<CustomerType.Address> rhsAddress;
            rhsAddress = (((that.address!= null)&&(!that.address.isEmpty()))?that.getAddress():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            List<URLType> lhsURL;
            lhsURL = (((this.url!= null)&&(!this.url.isEmpty()))?this.getURL():null);
            List<URLType> rhsURL;
            rhsURL = (((that.url!= null)&&(!that.url.isEmpty()))?that.getURL():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "url", lhsURL), LocatorUtils.property(thatLocator, "url", rhsURL), lhsURL, rhsURL)) {
                return false;
            }
        }
        {
            List<CustomerType.CitizenCountryName> lhsCitizenCountryName;
            lhsCitizenCountryName = (((this.citizenCountryName!= null)&&(!this.citizenCountryName.isEmpty()))?this.getCitizenCountryName():null);
            List<CustomerType.CitizenCountryName> rhsCitizenCountryName;
            rhsCitizenCountryName = (((that.citizenCountryName!= null)&&(!that.citizenCountryName.isEmpty()))?that.getCitizenCountryName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "citizenCountryName", lhsCitizenCountryName), LocatorUtils.property(thatLocator, "citizenCountryName", rhsCitizenCountryName), lhsCitizenCountryName, rhsCitizenCountryName)) {
                return false;
            }
        }
        {
            List<String> lhsPhysChallName;
            lhsPhysChallName = (((this.physChallName!= null)&&(!this.physChallName.isEmpty()))?this.getPhysChallName():null);
            List<String> rhsPhysChallName;
            rhsPhysChallName = (((that.physChallName!= null)&&(!that.physChallName.isEmpty()))?that.getPhysChallName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "physChallName", lhsPhysChallName), LocatorUtils.property(thatLocator, "physChallName", rhsPhysChallName), lhsPhysChallName, rhsPhysChallName)) {
                return false;
            }
        }
        {
            List<String> lhsPetInfo;
            lhsPetInfo = (((this.petInfo!= null)&&(!this.petInfo.isEmpty()))?this.getPetInfo():null);
            List<String> rhsPetInfo;
            rhsPetInfo = (((that.petInfo!= null)&&(!that.petInfo.isEmpty()))?that.getPetInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "petInfo", lhsPetInfo), LocatorUtils.property(thatLocator, "petInfo", rhsPetInfo), lhsPetInfo, rhsPetInfo)) {
                return false;
            }
        }
        {
            List<PaymentFormType> lhsPaymentForm;
            lhsPaymentForm = (((this.paymentForm!= null)&&(!this.paymentForm.isEmpty()))?this.getPaymentForm():null);
            List<PaymentFormType> rhsPaymentForm;
            rhsPaymentForm = (((that.paymentForm!= null)&&(!that.paymentForm.isEmpty()))?that.getPaymentForm():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentForm", lhsPaymentForm), LocatorUtils.property(thatLocator, "paymentForm", rhsPaymentForm), lhsPaymentForm, rhsPaymentForm)) {
                return false;
            }
        }
        {
            List<RelatedTravelerType> lhsRelatedTraveler;
            lhsRelatedTraveler = (((this.relatedTraveler!= null)&&(!this.relatedTraveler.isEmpty()))?this.getRelatedTraveler():null);
            List<RelatedTravelerType> rhsRelatedTraveler;
            rhsRelatedTraveler = (((that.relatedTraveler!= null)&&(!that.relatedTraveler.isEmpty()))?that.getRelatedTraveler():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedTraveler", lhsRelatedTraveler), LocatorUtils.property(thatLocator, "relatedTraveler", rhsRelatedTraveler), lhsRelatedTraveler, rhsRelatedTraveler)) {
                return false;
            }
        }
        {
            List<ContactPersonType> lhsContactPerson;
            lhsContactPerson = (((this.contactPerson!= null)&&(!this.contactPerson.isEmpty()))?this.getContactPerson():null);
            List<ContactPersonType> rhsContactPerson;
            rhsContactPerson = (((that.contactPerson!= null)&&(!that.contactPerson.isEmpty()))?that.getContactPerson():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contactPerson", lhsContactPerson), LocatorUtils.property(thatLocator, "contactPerson", rhsContactPerson), lhsContactPerson, rhsContactPerson)) {
                return false;
            }
        }
        {
            List<DocumentType> lhsDocument;
            lhsDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            List<DocumentType> rhsDocument;
            rhsDocument = (((that.document!= null)&&(!that.document.isEmpty()))?that.getDocument():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "document", lhsDocument), LocatorUtils.property(thatLocator, "document", rhsDocument), lhsDocument, rhsDocument)) {
                return false;
            }
        }
        {
            List<CustomerType.CustLoyalty> lhsCustLoyalty;
            lhsCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
            List<CustomerType.CustLoyalty> rhsCustLoyalty;
            rhsCustLoyalty = (((that.custLoyalty!= null)&&(!that.custLoyalty.isEmpty()))?that.getCustLoyalty():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "custLoyalty", lhsCustLoyalty), LocatorUtils.property(thatLocator, "custLoyalty", rhsCustLoyalty), lhsCustLoyalty, rhsCustLoyalty)) {
                return false;
            }
        }
        {
            List<EmployeeInfoType> lhsEmployeeInfo;
            lhsEmployeeInfo = (((this.employeeInfo!= null)&&(!this.employeeInfo.isEmpty()))?this.getEmployeeInfo():null);
            List<EmployeeInfoType> rhsEmployeeInfo;
            rhsEmployeeInfo = (((that.employeeInfo!= null)&&(!that.employeeInfo.isEmpty()))?that.getEmployeeInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "employeeInfo", lhsEmployeeInfo), LocatorUtils.property(thatLocator, "employeeInfo", rhsEmployeeInfo), lhsEmployeeInfo, rhsEmployeeInfo)) {
                return false;
            }
        }
        {
            CompanyNameType lhsEmployerInfo;
            lhsEmployerInfo = this.getEmployerInfo();
            CompanyNameType rhsEmployerInfo;
            rhsEmployerInfo = that.getEmployerInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "employerInfo", lhsEmployerInfo), LocatorUtils.property(thatLocator, "employerInfo", rhsEmployerInfo), lhsEmployerInfo, rhsEmployerInfo)) {
                return false;
            }
        }
        {
            TPAExtensionsType lhsTPAExtensions;
            lhsTPAExtensions = this.getTPAExtensions();
            TPAExtensionsType rhsTPAExtensions;
            rhsTPAExtensions = that.getTPAExtensions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tpaExtensions", lhsTPAExtensions), LocatorUtils.property(thatLocator, "tpaExtensions", rhsTPAExtensions), lhsTPAExtensions, rhsTPAExtensions)) {
                return false;
            }
        }
        {
            Boolean lhsDeceased;
            lhsDeceased = this.isDeceased();
            Boolean rhsDeceased;
            rhsDeceased = that.isDeceased();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deceased", lhsDeceased), LocatorUtils.property(thatLocator, "deceased", rhsDeceased), lhsDeceased, rhsDeceased)) {
                return false;
            }
        }
        {
            String lhsLockoutType;
            lhsLockoutType = this.getLockoutType();
            String rhsLockoutType;
            rhsLockoutType = that.getLockoutType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lockoutType", lhsLockoutType), LocatorUtils.property(thatLocator, "lockoutType", rhsLockoutType), lhsLockoutType, rhsLockoutType)) {
                return false;
            }
        }
        {
            Boolean lhsVIPIndicator;
            lhsVIPIndicator = this.isVIPIndicator();
            Boolean rhsVIPIndicator;
            rhsVIPIndicator = that.isVIPIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vipIndicator", lhsVIPIndicator), LocatorUtils.property(thatLocator, "vipIndicator", rhsVIPIndicator), lhsVIPIndicator, rhsVIPIndicator)) {
                return false;
            }
        }
        {
            String lhsText;
            lhsText = this.getText();
            String rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            String lhsGender;
            lhsGender = this.getGender();
            String rhsGender;
            rhsGender = that.getGender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gender", lhsGender), LocatorUtils.property(thatLocator, "gender", rhsGender), lhsGender, rhsGender)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsBirthDate;
            lhsBirthDate = this.getBirthDate();
            XMLGregorianCalendar rhsBirthDate;
            rhsBirthDate = that.getBirthDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "birthDate", lhsBirthDate), LocatorUtils.property(thatLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate)) {
                return false;
            }
        }
        {
            String lhsCurrencyCode;
            lhsCurrencyCode = this.getCurrencyCode();
            String rhsCurrencyCode;
            rhsCurrencyCode = that.getCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                return false;
            }
        }
        {
            BigInteger lhsDecimalPlaces;
            lhsDecimalPlaces = this.getDecimalPlaces();
            BigInteger rhsDecimalPlaces;
            rhsDecimalPlaces = that.getDecimalPlaces();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                return false;
            }
        }
        {
            String lhsLanguage;
            lhsLanguage = this.getLanguage();
            String rhsLanguage;
            rhsLanguage = that.getLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            PersonNameType thePersonName;
            thePersonName = this.getPersonName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "personName", thePersonName), currentHashCode, thePersonName);
        }
        {
            List<CustomerType.Telephone> theTelephone;
            theTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telephone", theTelephone), currentHashCode, theTelephone);
        }
        {
            List<EmailType> theEmail;
            theEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "email", theEmail), currentHashCode, theEmail);
        }
        {
            List<CustomerType.Address> theAddress;
            theAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            List<URLType> theURL;
            theURL = (((this.url!= null)&&(!this.url.isEmpty()))?this.getURL():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "url", theURL), currentHashCode, theURL);
        }
        {
            List<CustomerType.CitizenCountryName> theCitizenCountryName;
            theCitizenCountryName = (((this.citizenCountryName!= null)&&(!this.citizenCountryName.isEmpty()))?this.getCitizenCountryName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "citizenCountryName", theCitizenCountryName), currentHashCode, theCitizenCountryName);
        }
        {
            List<String> thePhysChallName;
            thePhysChallName = (((this.physChallName!= null)&&(!this.physChallName.isEmpty()))?this.getPhysChallName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "physChallName", thePhysChallName), currentHashCode, thePhysChallName);
        }
        {
            List<String> thePetInfo;
            thePetInfo = (((this.petInfo!= null)&&(!this.petInfo.isEmpty()))?this.getPetInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "petInfo", thePetInfo), currentHashCode, thePetInfo);
        }
        {
            List<PaymentFormType> thePaymentForm;
            thePaymentForm = (((this.paymentForm!= null)&&(!this.paymentForm.isEmpty()))?this.getPaymentForm():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentForm", thePaymentForm), currentHashCode, thePaymentForm);
        }
        {
            List<RelatedTravelerType> theRelatedTraveler;
            theRelatedTraveler = (((this.relatedTraveler!= null)&&(!this.relatedTraveler.isEmpty()))?this.getRelatedTraveler():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedTraveler", theRelatedTraveler), currentHashCode, theRelatedTraveler);
        }
        {
            List<ContactPersonType> theContactPerson;
            theContactPerson = (((this.contactPerson!= null)&&(!this.contactPerson.isEmpty()))?this.getContactPerson():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contactPerson", theContactPerson), currentHashCode, theContactPerson);
        }
        {
            List<DocumentType> theDocument;
            theDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "document", theDocument), currentHashCode, theDocument);
        }
        {
            List<CustomerType.CustLoyalty> theCustLoyalty;
            theCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "custLoyalty", theCustLoyalty), currentHashCode, theCustLoyalty);
        }
        {
            List<EmployeeInfoType> theEmployeeInfo;
            theEmployeeInfo = (((this.employeeInfo!= null)&&(!this.employeeInfo.isEmpty()))?this.getEmployeeInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "employeeInfo", theEmployeeInfo), currentHashCode, theEmployeeInfo);
        }
        {
            CompanyNameType theEmployerInfo;
            theEmployerInfo = this.getEmployerInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "employerInfo", theEmployerInfo), currentHashCode, theEmployerInfo);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tpaExtensions", theTPAExtensions), currentHashCode, theTPAExtensions);
        }
        {
            Boolean theDeceased;
            theDeceased = this.isDeceased();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deceased", theDeceased), currentHashCode, theDeceased);
        }
        {
            String theLockoutType;
            theLockoutType = this.getLockoutType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lockoutType", theLockoutType), currentHashCode, theLockoutType);
        }
        {
            Boolean theVIPIndicator;
            theVIPIndicator = this.isVIPIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vipIndicator", theVIPIndicator), currentHashCode, theVIPIndicator);
        }
        {
            String theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            String theGender;
            theGender = this.getGender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gender", theGender), currentHashCode, theGender);
        }
        {
            XMLGregorianCalendar theBirthDate;
            theBirthDate = this.getBirthDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "birthDate", theBirthDate), currentHashCode, theBirthDate);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
        }
        {
            String theLanguage;
            theLanguage = this.getLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CustomerType) {
            final CustomerType copy = ((CustomerType) draftCopy);
            if (this.personName!= null) {
                PersonNameType sourcePersonName;
                sourcePersonName = this.getPersonName();
                PersonNameType copyPersonName = ((PersonNameType) strategy.copy(LocatorUtils.property(locator, "personName", sourcePersonName), sourcePersonName));
                copy.setPersonName(copyPersonName);
            } else {
                copy.personName = null;
            }
            if ((this.telephone!= null)&&(!this.telephone.isEmpty())) {
                List<CustomerType.Telephone> sourceTelephone;
                sourceTelephone = (((this.telephone!= null)&&(!this.telephone.isEmpty()))?this.getTelephone():null);
                @SuppressWarnings("unchecked")
                List<CustomerType.Telephone> copyTelephone = ((List<CustomerType.Telephone> ) strategy.copy(LocatorUtils.property(locator, "telephone", sourceTelephone), sourceTelephone));
                copy.telephone = null;
                if (copyTelephone!= null) {
                    List<CustomerType.Telephone> uniqueTelephonel = copy.getTelephone();
                    uniqueTelephonel.addAll(copyTelephone);
                }
            } else {
                copy.telephone = null;
            }
            if ((this.email!= null)&&(!this.email.isEmpty())) {
                List<EmailType> sourceEmail;
                sourceEmail = (((this.email!= null)&&(!this.email.isEmpty()))?this.getEmail():null);
                @SuppressWarnings("unchecked")
                List<EmailType> copyEmail = ((List<EmailType> ) strategy.copy(LocatorUtils.property(locator, "email", sourceEmail), sourceEmail));
                copy.email = null;
                if (copyEmail!= null) {
                    List<EmailType> uniqueEmaill = copy.getEmail();
                    uniqueEmaill.addAll(copyEmail);
                }
            } else {
                copy.email = null;
            }
            if ((this.address!= null)&&(!this.address.isEmpty())) {
                List<CustomerType.Address> sourceAddress;
                sourceAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
                @SuppressWarnings("unchecked")
                List<CustomerType.Address> copyAddress = ((List<CustomerType.Address> ) strategy.copy(LocatorUtils.property(locator, "address", sourceAddress), sourceAddress));
                copy.address = null;
                if (copyAddress!= null) {
                    List<CustomerType.Address> uniqueAddressl = copy.getAddress();
                    uniqueAddressl.addAll(copyAddress);
                }
            } else {
                copy.address = null;
            }
            if ((this.url!= null)&&(!this.url.isEmpty())) {
                List<URLType> sourceURL;
                sourceURL = (((this.url!= null)&&(!this.url.isEmpty()))?this.getURL():null);
                @SuppressWarnings("unchecked")
                List<URLType> copyURL = ((List<URLType> ) strategy.copy(LocatorUtils.property(locator, "url", sourceURL), sourceURL));
                copy.url = null;
                if (copyURL!= null) {
                    List<URLType> uniqueURLl = copy.getURL();
                    uniqueURLl.addAll(copyURL);
                }
            } else {
                copy.url = null;
            }
            if ((this.citizenCountryName!= null)&&(!this.citizenCountryName.isEmpty())) {
                List<CustomerType.CitizenCountryName> sourceCitizenCountryName;
                sourceCitizenCountryName = (((this.citizenCountryName!= null)&&(!this.citizenCountryName.isEmpty()))?this.getCitizenCountryName():null);
                @SuppressWarnings("unchecked")
                List<CustomerType.CitizenCountryName> copyCitizenCountryName = ((List<CustomerType.CitizenCountryName> ) strategy.copy(LocatorUtils.property(locator, "citizenCountryName", sourceCitizenCountryName), sourceCitizenCountryName));
                copy.citizenCountryName = null;
                if (copyCitizenCountryName!= null) {
                    List<CustomerType.CitizenCountryName> uniqueCitizenCountryNamel = copy.getCitizenCountryName();
                    uniqueCitizenCountryNamel.addAll(copyCitizenCountryName);
                }
            } else {
                copy.citizenCountryName = null;
            }
            if ((this.physChallName!= null)&&(!this.physChallName.isEmpty())) {
                List<String> sourcePhysChallName;
                sourcePhysChallName = (((this.physChallName!= null)&&(!this.physChallName.isEmpty()))?this.getPhysChallName():null);
                @SuppressWarnings("unchecked")
                List<String> copyPhysChallName = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "physChallName", sourcePhysChallName), sourcePhysChallName));
                copy.physChallName = null;
                if (copyPhysChallName!= null) {
                    List<String> uniquePhysChallNamel = copy.getPhysChallName();
                    uniquePhysChallNamel.addAll(copyPhysChallName);
                }
            } else {
                copy.physChallName = null;
            }
            if ((this.petInfo!= null)&&(!this.petInfo.isEmpty())) {
                List<String> sourcePetInfo;
                sourcePetInfo = (((this.petInfo!= null)&&(!this.petInfo.isEmpty()))?this.getPetInfo():null);
                @SuppressWarnings("unchecked")
                List<String> copyPetInfo = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "petInfo", sourcePetInfo), sourcePetInfo));
                copy.petInfo = null;
                if (copyPetInfo!= null) {
                    List<String> uniquePetInfol = copy.getPetInfo();
                    uniquePetInfol.addAll(copyPetInfo);
                }
            } else {
                copy.petInfo = null;
            }
            if ((this.paymentForm!= null)&&(!this.paymentForm.isEmpty())) {
                List<PaymentFormType> sourcePaymentForm;
                sourcePaymentForm = (((this.paymentForm!= null)&&(!this.paymentForm.isEmpty()))?this.getPaymentForm():null);
                @SuppressWarnings("unchecked")
                List<PaymentFormType> copyPaymentForm = ((List<PaymentFormType> ) strategy.copy(LocatorUtils.property(locator, "paymentForm", sourcePaymentForm), sourcePaymentForm));
                copy.paymentForm = null;
                if (copyPaymentForm!= null) {
                    List<PaymentFormType> uniquePaymentForml = copy.getPaymentForm();
                    uniquePaymentForml.addAll(copyPaymentForm);
                }
            } else {
                copy.paymentForm = null;
            }
            if ((this.relatedTraveler!= null)&&(!this.relatedTraveler.isEmpty())) {
                List<RelatedTravelerType> sourceRelatedTraveler;
                sourceRelatedTraveler = (((this.relatedTraveler!= null)&&(!this.relatedTraveler.isEmpty()))?this.getRelatedTraveler():null);
                @SuppressWarnings("unchecked")
                List<RelatedTravelerType> copyRelatedTraveler = ((List<RelatedTravelerType> ) strategy.copy(LocatorUtils.property(locator, "relatedTraveler", sourceRelatedTraveler), sourceRelatedTraveler));
                copy.relatedTraveler = null;
                if (copyRelatedTraveler!= null) {
                    List<RelatedTravelerType> uniqueRelatedTravelerl = copy.getRelatedTraveler();
                    uniqueRelatedTravelerl.addAll(copyRelatedTraveler);
                }
            } else {
                copy.relatedTraveler = null;
            }
            if ((this.contactPerson!= null)&&(!this.contactPerson.isEmpty())) {
                List<ContactPersonType> sourceContactPerson;
                sourceContactPerson = (((this.contactPerson!= null)&&(!this.contactPerson.isEmpty()))?this.getContactPerson():null);
                @SuppressWarnings("unchecked")
                List<ContactPersonType> copyContactPerson = ((List<ContactPersonType> ) strategy.copy(LocatorUtils.property(locator, "contactPerson", sourceContactPerson), sourceContactPerson));
                copy.contactPerson = null;
                if (copyContactPerson!= null) {
                    List<ContactPersonType> uniqueContactPersonl = copy.getContactPerson();
                    uniqueContactPersonl.addAll(copyContactPerson);
                }
            } else {
                copy.contactPerson = null;
            }
            if ((this.document!= null)&&(!this.document.isEmpty())) {
                List<DocumentType> sourceDocument;
                sourceDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
                @SuppressWarnings("unchecked")
                List<DocumentType> copyDocument = ((List<DocumentType> ) strategy.copy(LocatorUtils.property(locator, "document", sourceDocument), sourceDocument));
                copy.document = null;
                if (copyDocument!= null) {
                    List<DocumentType> uniqueDocumentl = copy.getDocument();
                    uniqueDocumentl.addAll(copyDocument);
                }
            } else {
                copy.document = null;
            }
            if ((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty())) {
                List<CustomerType.CustLoyalty> sourceCustLoyalty;
                sourceCustLoyalty = (((this.custLoyalty!= null)&&(!this.custLoyalty.isEmpty()))?this.getCustLoyalty():null);
                @SuppressWarnings("unchecked")
                List<CustomerType.CustLoyalty> copyCustLoyalty = ((List<CustomerType.CustLoyalty> ) strategy.copy(LocatorUtils.property(locator, "custLoyalty", sourceCustLoyalty), sourceCustLoyalty));
                copy.custLoyalty = null;
                if (copyCustLoyalty!= null) {
                    List<CustomerType.CustLoyalty> uniqueCustLoyaltyl = copy.getCustLoyalty();
                    uniqueCustLoyaltyl.addAll(copyCustLoyalty);
                }
            } else {
                copy.custLoyalty = null;
            }
            if ((this.employeeInfo!= null)&&(!this.employeeInfo.isEmpty())) {
                List<EmployeeInfoType> sourceEmployeeInfo;
                sourceEmployeeInfo = (((this.employeeInfo!= null)&&(!this.employeeInfo.isEmpty()))?this.getEmployeeInfo():null);
                @SuppressWarnings("unchecked")
                List<EmployeeInfoType> copyEmployeeInfo = ((List<EmployeeInfoType> ) strategy.copy(LocatorUtils.property(locator, "employeeInfo", sourceEmployeeInfo), sourceEmployeeInfo));
                copy.employeeInfo = null;
                if (copyEmployeeInfo!= null) {
                    List<EmployeeInfoType> uniqueEmployeeInfol = copy.getEmployeeInfo();
                    uniqueEmployeeInfol.addAll(copyEmployeeInfo);
                }
            } else {
                copy.employeeInfo = null;
            }
            if (this.employerInfo!= null) {
                CompanyNameType sourceEmployerInfo;
                sourceEmployerInfo = this.getEmployerInfo();
                CompanyNameType copyEmployerInfo = ((CompanyNameType) strategy.copy(LocatorUtils.property(locator, "employerInfo", sourceEmployerInfo), sourceEmployerInfo));
                copy.setEmployerInfo(copyEmployerInfo);
            } else {
                copy.employerInfo = null;
            }
            if (this.tpaExtensions!= null) {
                TPAExtensionsType sourceTPAExtensions;
                sourceTPAExtensions = this.getTPAExtensions();
                TPAExtensionsType copyTPAExtensions = ((TPAExtensionsType) strategy.copy(LocatorUtils.property(locator, "tpaExtensions", sourceTPAExtensions), sourceTPAExtensions));
                copy.setTPAExtensions(copyTPAExtensions);
            } else {
                copy.tpaExtensions = null;
            }
            if (this.deceased!= null) {
                Boolean sourceDeceased;
                sourceDeceased = this.isDeceased();
                Boolean copyDeceased = ((Boolean) strategy.copy(LocatorUtils.property(locator, "deceased", sourceDeceased), sourceDeceased));
                copy.setDeceased(copyDeceased);
            } else {
                copy.deceased = null;
            }
            if (this.lockoutType!= null) {
                String sourceLockoutType;
                sourceLockoutType = this.getLockoutType();
                String copyLockoutType = ((String) strategy.copy(LocatorUtils.property(locator, "lockoutType", sourceLockoutType), sourceLockoutType));
                copy.setLockoutType(copyLockoutType);
            } else {
                copy.lockoutType = null;
            }
            if (this.vipIndicator!= null) {
                Boolean sourceVIPIndicator;
                sourceVIPIndicator = this.isVIPIndicator();
                Boolean copyVIPIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "vipIndicator", sourceVIPIndicator), sourceVIPIndicator));
                copy.setVIPIndicator(copyVIPIndicator);
            } else {
                copy.vipIndicator = null;
            }
            if (this.text!= null) {
                String sourceText;
                sourceText = this.getText();
                String copyText = ((String) strategy.copy(LocatorUtils.property(locator, "text", sourceText), sourceText));
                copy.setText(copyText);
            } else {
                copy.text = null;
            }
            if (this.gender!= null) {
                String sourceGender;
                sourceGender = this.getGender();
                String copyGender = ((String) strategy.copy(LocatorUtils.property(locator, "gender", sourceGender), sourceGender));
                copy.setGender(copyGender);
            } else {
                copy.gender = null;
            }
            if (this.birthDate!= null) {
                XMLGregorianCalendar sourceBirthDate;
                sourceBirthDate = this.getBirthDate();
                XMLGregorianCalendar copyBirthDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "birthDate", sourceBirthDate), sourceBirthDate));
                copy.setBirthDate(copyBirthDate);
            } else {
                copy.birthDate = null;
            }
            if (this.currencyCode!= null) {
                String sourceCurrencyCode;
                sourceCurrencyCode = this.getCurrencyCode();
                String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                copy.setCurrencyCode(copyCurrencyCode);
            } else {
                copy.currencyCode = null;
            }
            if (this.decimalPlaces!= null) {
                BigInteger sourceDecimalPlaces;
                sourceDecimalPlaces = this.getDecimalPlaces();
                BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                copy.setDecimalPlaces(copyDecimalPlaces);
            } else {
                copy.decimalPlaces = null;
            }
            if (this.language!= null) {
                String sourceLanguage;
                sourceLanguage = this.getLanguage();
                String copyLanguage = ((String) strategy.copy(LocatorUtils.property(locator, "language", sourceLanguage), sourceLanguage));
                copy.setLanguage(copyLanguage);
            } else {
                copy.language = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CustomerType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AddressInfoType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="CompanyName" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}EffectiveExpireOptionalDateGroup"/&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "companyName"
    })
    public static class Address
        extends AddressInfoType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "CompanyName")
        protected CompanyNameType companyName;
        @XmlAttribute(name = "EffectiveDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar effectiveDate;
        @XmlAttribute(name = "ExpireDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar expireDate;

        /**
         * Gets the value of the companyName property.
         * 
         * @return
         *     possible object is
         *     {@link CompanyNameType }
         *     
         */
        public CompanyNameType getCompanyName() {
            return companyName;
        }

        /**
         * Sets the value of the companyName property.
         * 
         * @param value
         *     allowed object is
         *     {@link CompanyNameType }
         *     
         */
        public void setCompanyName(CompanyNameType value) {
            this.companyName = value;
        }

        /**
         * Gets the value of the effectiveDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getEffectiveDate() {
            return effectiveDate;
        }

        /**
         * Sets the value of the effectiveDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setEffectiveDate(XMLGregorianCalendar value) {
            this.effectiveDate = value;
        }

        /**
         * Gets the value of the expireDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getExpireDate() {
            return expireDate;
        }

        /**
         * Sets the value of the expireDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setExpireDate(XMLGregorianCalendar value) {
            this.expireDate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                CompanyNameType theCompanyName;
                theCompanyName = this.getCompanyName();
                strategy.appendField(locator, this, "companyName", buffer, theCompanyName);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                strategy.appendField(locator, this, "expireDate", buffer, theExpireDate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CustomerType.Address)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final CustomerType.Address that = ((CustomerType.Address) object);
            {
                CompanyNameType lhsCompanyName;
                lhsCompanyName = this.getCompanyName();
                CompanyNameType rhsCompanyName;
                rhsCompanyName = that.getCompanyName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "companyName", lhsCompanyName), LocatorUtils.property(thatLocator, "companyName", rhsCompanyName), lhsCompanyName, rhsCompanyName)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsEffectiveDate;
                lhsEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar rhsEffectiveDate;
                rhsEffectiveDate = that.getEffectiveDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsExpireDate;
                lhsExpireDate = this.getExpireDate();
                XMLGregorianCalendar rhsExpireDate;
                rhsExpireDate = that.getExpireDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "expireDate", lhsExpireDate), LocatorUtils.property(thatLocator, "expireDate", rhsExpireDate), lhsExpireDate, rhsExpireDate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                CompanyNameType theCompanyName;
                theCompanyName = this.getCompanyName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "companyName", theCompanyName), currentHashCode, theCompanyName);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expireDate", theExpireDate), currentHashCode, theExpireDate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof CustomerType.Address) {
                final CustomerType.Address copy = ((CustomerType.Address) draftCopy);
                if (this.companyName!= null) {
                    CompanyNameType sourceCompanyName;
                    sourceCompanyName = this.getCompanyName();
                    CompanyNameType copyCompanyName = ((CompanyNameType) strategy.copy(LocatorUtils.property(locator, "companyName", sourceCompanyName), sourceCompanyName));
                    copy.setCompanyName(copyCompanyName);
                } else {
                    copy.companyName = null;
                }
                if (this.effectiveDate!= null) {
                    XMLGregorianCalendar sourceEffectiveDate;
                    sourceEffectiveDate = this.getEffectiveDate();
                    XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                    copy.setEffectiveDate(copyEffectiveDate);
                } else {
                    copy.effectiveDate = null;
                }
                if (this.expireDate!= null) {
                    XMLGregorianCalendar sourceExpireDate;
                    sourceExpireDate = this.getExpireDate();
                    XMLGregorianCalendar copyExpireDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "expireDate", sourceExpireDate), sourceExpireDate));
                    copy.setExpireDate(copyExpireDate);
                } else {
                    copy.expireDate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CustomerType.Address();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CitizenCountryNameGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CitizenCountryName
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Code")
        protected String code;
        @XmlAttribute(name = "DefaultInd")
        protected Boolean defaultInd;

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        /**
         * Gets the value of the defaultInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isDefaultInd() {
            if (defaultInd == null) {
                return false;
            } else {
                return defaultInd;
            }
        }

        /**
         * Sets the value of the defaultInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setDefaultInd(Boolean value) {
            this.defaultInd = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            {
                boolean theDefaultInd;
                theDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                strategy.appendField(locator, this, "defaultInd", buffer, theDefaultInd);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CustomerType.CitizenCountryName)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CustomerType.CitizenCountryName that = ((CustomerType.CitizenCountryName) object);
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            {
                boolean lhsDefaultInd;
                lhsDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                boolean rhsDefaultInd;
                rhsDefaultInd = ((that.defaultInd!= null)?that.isDefaultInd():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "defaultInd", lhsDefaultInd), LocatorUtils.property(thatLocator, "defaultInd", rhsDefaultInd), lhsDefaultInd, rhsDefaultInd)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            {
                boolean theDefaultInd;
                theDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "defaultInd", theDefaultInd), currentHashCode, theDefaultInd);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CustomerType.CitizenCountryName) {
                final CustomerType.CitizenCountryName copy = ((CustomerType.CitizenCountryName) draftCopy);
                if (this.code!= null) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
                if (this.defaultInd!= null) {
                    boolean sourceDefaultInd;
                    sourceDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                    boolean copyDefaultInd = strategy.copy(LocatorUtils.property(locator, "defaultInd", sourceDefaultInd), sourceDefaultInd);
                    copy.setDefaultInd(copyDefaultInd);
                } else {
                    copy.defaultInd = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CustomerType.CitizenCountryName();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CustomerLoyaltyGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CustLoyalty
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "ProgramID")
        protected String programID;
        @XmlAttribute(name = "MembershipID")
        protected String membershipID;
        @XmlAttribute(name = "TravelSector")
        protected String travelSector;
        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "VendorCode")
        protected List<String> vendorCode;
        @XmlAttribute(name = "LoyalLevel")
        protected String loyalLevel;
        @XmlAttribute(name = "SingleVendorInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String singleVendorInd;
        @XmlAttribute(name = "SignupDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar signupDate;
        @XmlAttribute(name = "ShareSynchInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareSynchInd;
        @XmlAttribute(name = "ShareMarketInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareMarketInd;
        @XmlAttribute(name = "EffectiveDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar effectiveDate;
        @XmlAttribute(name = "ExpireDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar expireDate;

        /**
         * Gets the value of the programID property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getProgramID() {
            return programID;
        }

        /**
         * Sets the value of the programID property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setProgramID(String value) {
            this.programID = value;
        }

        /**
         * Gets the value of the membershipID property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMembershipID() {
            return membershipID;
        }

        /**
         * Sets the value of the membershipID property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setMembershipID(String value) {
            this.membershipID = value;
        }

        /**
         * Gets the value of the travelSector property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTravelSector() {
            return travelSector;
        }

        /**
         * Sets the value of the travelSector property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTravelSector(String value) {
            this.travelSector = value;
        }

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the vendorCode property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the vendorCode property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getVendorCode().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getVendorCode() {
            if (vendorCode == null) {
                vendorCode = new ArrayList<String>();
            }
            return this.vendorCode;
        }

        /**
         * Gets the value of the loyalLevel property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLoyalLevel() {
            return loyalLevel;
        }

        /**
         * Sets the value of the loyalLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLoyalLevel(String value) {
            this.loyalLevel = value;
        }

        /**
         * Gets the value of the singleVendorInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSingleVendorInd() {
            return singleVendorInd;
        }

        /**
         * Sets the value of the singleVendorInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSingleVendorInd(String value) {
            this.singleVendorInd = value;
        }

        /**
         * Gets the value of the signupDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getSignupDate() {
            return signupDate;
        }

        /**
         * Sets the value of the signupDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setSignupDate(XMLGregorianCalendar value) {
            this.signupDate = value;
        }

        /**
         * Gets the value of the shareSynchInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareSynchInd() {
            return shareSynchInd;
        }

        /**
         * Sets the value of the shareSynchInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareSynchInd(String value) {
            this.shareSynchInd = value;
        }

        /**
         * Gets the value of the shareMarketInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareMarketInd() {
            return shareMarketInd;
        }

        /**
         * Sets the value of the shareMarketInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareMarketInd(String value) {
            this.shareMarketInd = value;
        }

        /**
         * Gets the value of the effectiveDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getEffectiveDate() {
            return effectiveDate;
        }

        /**
         * Sets the value of the effectiveDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setEffectiveDate(XMLGregorianCalendar value) {
            this.effectiveDate = value;
        }

        /**
         * Gets the value of the expireDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getExpireDate() {
            return expireDate;
        }

        /**
         * Sets the value of the expireDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setExpireDate(XMLGregorianCalendar value) {
            this.expireDate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theProgramID;
                theProgramID = this.getProgramID();
                strategy.appendField(locator, this, "programID", buffer, theProgramID);
            }
            {
                String theMembershipID;
                theMembershipID = this.getMembershipID();
                strategy.appendField(locator, this, "membershipID", buffer, theMembershipID);
            }
            {
                String theTravelSector;
                theTravelSector = this.getTravelSector();
                strategy.appendField(locator, this, "travelSector", buffer, theTravelSector);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                List<String> theVendorCode;
                theVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                strategy.appendField(locator, this, "vendorCode", buffer, theVendorCode);
            }
            {
                String theLoyalLevel;
                theLoyalLevel = this.getLoyalLevel();
                strategy.appendField(locator, this, "loyalLevel", buffer, theLoyalLevel);
            }
            {
                String theSingleVendorInd;
                theSingleVendorInd = this.getSingleVendorInd();
                strategy.appendField(locator, this, "singleVendorInd", buffer, theSingleVendorInd);
            }
            {
                XMLGregorianCalendar theSignupDate;
                theSignupDate = this.getSignupDate();
                strategy.appendField(locator, this, "signupDate", buffer, theSignupDate);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                strategy.appendField(locator, this, "expireDate", buffer, theExpireDate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CustomerType.CustLoyalty)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CustomerType.CustLoyalty that = ((CustomerType.CustLoyalty) object);
            {
                String lhsProgramID;
                lhsProgramID = this.getProgramID();
                String rhsProgramID;
                rhsProgramID = that.getProgramID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "programID", lhsProgramID), LocatorUtils.property(thatLocator, "programID", rhsProgramID), lhsProgramID, rhsProgramID)) {
                    return false;
                }
            }
            {
                String lhsMembershipID;
                lhsMembershipID = this.getMembershipID();
                String rhsMembershipID;
                rhsMembershipID = that.getMembershipID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "membershipID", lhsMembershipID), LocatorUtils.property(thatLocator, "membershipID", rhsMembershipID), lhsMembershipID, rhsMembershipID)) {
                    return false;
                }
            }
            {
                String lhsTravelSector;
                lhsTravelSector = this.getTravelSector();
                String rhsTravelSector;
                rhsTravelSector = that.getTravelSector();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "travelSector", lhsTravelSector), LocatorUtils.property(thatLocator, "travelSector", rhsTravelSector), lhsTravelSector, rhsTravelSector)) {
                    return false;
                }
            }
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                List<String> lhsVendorCode;
                lhsVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                List<String> rhsVendorCode;
                rhsVendorCode = (((that.vendorCode!= null)&&(!that.vendorCode.isEmpty()))?that.getVendorCode():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "vendorCode", lhsVendorCode), LocatorUtils.property(thatLocator, "vendorCode", rhsVendorCode), lhsVendorCode, rhsVendorCode)) {
                    return false;
                }
            }
            {
                String lhsLoyalLevel;
                lhsLoyalLevel = this.getLoyalLevel();
                String rhsLoyalLevel;
                rhsLoyalLevel = that.getLoyalLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "loyalLevel", lhsLoyalLevel), LocatorUtils.property(thatLocator, "loyalLevel", rhsLoyalLevel), lhsLoyalLevel, rhsLoyalLevel)) {
                    return false;
                }
            }
            {
                String lhsSingleVendorInd;
                lhsSingleVendorInd = this.getSingleVendorInd();
                String rhsSingleVendorInd;
                rhsSingleVendorInd = that.getSingleVendorInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "singleVendorInd", lhsSingleVendorInd), LocatorUtils.property(thatLocator, "singleVendorInd", rhsSingleVendorInd), lhsSingleVendorInd, rhsSingleVendorInd)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsSignupDate;
                lhsSignupDate = this.getSignupDate();
                XMLGregorianCalendar rhsSignupDate;
                rhsSignupDate = that.getSignupDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "signupDate", lhsSignupDate), LocatorUtils.property(thatLocator, "signupDate", rhsSignupDate), lhsSignupDate, rhsSignupDate)) {
                    return false;
                }
            }
            {
                String lhsShareSynchInd;
                lhsShareSynchInd = this.getShareSynchInd();
                String rhsShareSynchInd;
                rhsShareSynchInd = that.getShareSynchInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                    return false;
                }
            }
            {
                String lhsShareMarketInd;
                lhsShareMarketInd = this.getShareMarketInd();
                String rhsShareMarketInd;
                rhsShareMarketInd = that.getShareMarketInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsEffectiveDate;
                lhsEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar rhsEffectiveDate;
                rhsEffectiveDate = that.getEffectiveDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsExpireDate;
                lhsExpireDate = this.getExpireDate();
                XMLGregorianCalendar rhsExpireDate;
                rhsExpireDate = that.getExpireDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "expireDate", lhsExpireDate), LocatorUtils.property(thatLocator, "expireDate", rhsExpireDate), lhsExpireDate, rhsExpireDate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theProgramID;
                theProgramID = this.getProgramID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "programID", theProgramID), currentHashCode, theProgramID);
            }
            {
                String theMembershipID;
                theMembershipID = this.getMembershipID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "membershipID", theMembershipID), currentHashCode, theMembershipID);
            }
            {
                String theTravelSector;
                theTravelSector = this.getTravelSector();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelSector", theTravelSector), currentHashCode, theTravelSector);
            }
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                List<String> theVendorCode;
                theVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vendorCode", theVendorCode), currentHashCode, theVendorCode);
            }
            {
                String theLoyalLevel;
                theLoyalLevel = this.getLoyalLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loyalLevel", theLoyalLevel), currentHashCode, theLoyalLevel);
            }
            {
                String theSingleVendorInd;
                theSingleVendorInd = this.getSingleVendorInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleVendorInd", theSingleVendorInd), currentHashCode, theSingleVendorInd);
            }
            {
                XMLGregorianCalendar theSignupDate;
                theSignupDate = this.getSignupDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "signupDate", theSignupDate), currentHashCode, theSignupDate);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expireDate", theExpireDate), currentHashCode, theExpireDate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CustomerType.CustLoyalty) {
                final CustomerType.CustLoyalty copy = ((CustomerType.CustLoyalty) draftCopy);
                if (this.programID!= null) {
                    String sourceProgramID;
                    sourceProgramID = this.getProgramID();
                    String copyProgramID = ((String) strategy.copy(LocatorUtils.property(locator, "programID", sourceProgramID), sourceProgramID));
                    copy.setProgramID(copyProgramID);
                } else {
                    copy.programID = null;
                }
                if (this.membershipID!= null) {
                    String sourceMembershipID;
                    sourceMembershipID = this.getMembershipID();
                    String copyMembershipID = ((String) strategy.copy(LocatorUtils.property(locator, "membershipID", sourceMembershipID), sourceMembershipID));
                    copy.setMembershipID(copyMembershipID);
                } else {
                    copy.membershipID = null;
                }
                if (this.travelSector!= null) {
                    String sourceTravelSector;
                    sourceTravelSector = this.getTravelSector();
                    String copyTravelSector = ((String) strategy.copy(LocatorUtils.property(locator, "travelSector", sourceTravelSector), sourceTravelSector));
                    copy.setTravelSector(copyTravelSector);
                } else {
                    copy.travelSector = null;
                }
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if ((this.vendorCode!= null)&&(!this.vendorCode.isEmpty())) {
                    List<String> sourceVendorCode;
                    sourceVendorCode = (((this.vendorCode!= null)&&(!this.vendorCode.isEmpty()))?this.getVendorCode():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyVendorCode = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "vendorCode", sourceVendorCode), sourceVendorCode));
                    copy.vendorCode = null;
                    if (copyVendorCode!= null) {
                        List<String> uniqueVendorCodel = copy.getVendorCode();
                        uniqueVendorCodel.addAll(copyVendorCode);
                    }
                } else {
                    copy.vendorCode = null;
                }
                if (this.loyalLevel!= null) {
                    String sourceLoyalLevel;
                    sourceLoyalLevel = this.getLoyalLevel();
                    String copyLoyalLevel = ((String) strategy.copy(LocatorUtils.property(locator, "loyalLevel", sourceLoyalLevel), sourceLoyalLevel));
                    copy.setLoyalLevel(copyLoyalLevel);
                } else {
                    copy.loyalLevel = null;
                }
                if (this.singleVendorInd!= null) {
                    String sourceSingleVendorInd;
                    sourceSingleVendorInd = this.getSingleVendorInd();
                    String copySingleVendorInd = ((String) strategy.copy(LocatorUtils.property(locator, "singleVendorInd", sourceSingleVendorInd), sourceSingleVendorInd));
                    copy.setSingleVendorInd(copySingleVendorInd);
                } else {
                    copy.singleVendorInd = null;
                }
                if (this.signupDate!= null) {
                    XMLGregorianCalendar sourceSignupDate;
                    sourceSignupDate = this.getSignupDate();
                    XMLGregorianCalendar copySignupDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "signupDate", sourceSignupDate), sourceSignupDate));
                    copy.setSignupDate(copySignupDate);
                } else {
                    copy.signupDate = null;
                }
                if (this.shareSynchInd!= null) {
                    String sourceShareSynchInd;
                    sourceShareSynchInd = this.getShareSynchInd();
                    String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                    copy.setShareSynchInd(copyShareSynchInd);
                } else {
                    copy.shareSynchInd = null;
                }
                if (this.shareMarketInd!= null) {
                    String sourceShareMarketInd;
                    sourceShareMarketInd = this.getShareMarketInd();
                    String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                    copy.setShareMarketInd(copyShareMarketInd);
                } else {
                    copy.shareMarketInd = null;
                }
                if (this.effectiveDate!= null) {
                    XMLGregorianCalendar sourceEffectiveDate;
                    sourceEffectiveDate = this.getEffectiveDate();
                    XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                    copy.setEffectiveDate(copyEffectiveDate);
                } else {
                    copy.effectiveDate = null;
                }
                if (this.expireDate!= null) {
                    XMLGregorianCalendar sourceExpireDate;
                    sourceExpireDate = this.getExpireDate();
                    XMLGregorianCalendar copyExpireDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "expireDate", sourceExpireDate), sourceExpireDate));
                    copy.setExpireDate(copyExpireDate);
                } else {
                    copy.expireDate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CustomerType.CustLoyalty();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TelephoneInfoGroup"/&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}EffectiveExpireOptionalDateGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Telephone
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "RPH")
        protected String rph;
        @XmlAttribute(name = "ShareSynchInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareSynchInd;
        @XmlAttribute(name = "ShareMarketInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareMarketInd;
        @XmlAttribute(name = "PhoneLocationType")
        protected String phoneLocationType;
        @XmlAttribute(name = "PhoneTechType")
        protected String phoneTechType;
        @XmlAttribute(name = "PhoneUseType")
        protected String phoneUseType;
        @XmlAttribute(name = "CountryAccessCode")
        protected String countryAccessCode;
        @XmlAttribute(name = "AreaCityCode")
        protected String areaCityCode;
        @XmlAttribute(name = "PhoneNumber", required = true)
        protected String phoneNumber;
        @XmlAttribute(name = "Extension")
        protected String extension;
        @XmlAttribute(name = "PIN")
        protected String pin;
        @XmlAttribute(name = "Remark")
        protected String remark;
        @XmlAttribute(name = "FormattedInd")
        protected Boolean formattedInd;
        @XmlAttribute(name = "DefaultInd")
        protected Boolean defaultInd;
        @XmlAttribute(name = "EffectiveDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar effectiveDate;
        @XmlAttribute(name = "ExpireDate")
        @XmlSchemaType(name = "date")
        protected XMLGregorianCalendar expireDate;

        /**
         * Gets the value of the rph property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRPH() {
            return rph;
        }

        /**
         * Sets the value of the rph property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRPH(String value) {
            this.rph = value;
        }

        /**
         * Gets the value of the shareSynchInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareSynchInd() {
            return shareSynchInd;
        }

        /**
         * Sets the value of the shareSynchInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareSynchInd(String value) {
            this.shareSynchInd = value;
        }

        /**
         * Gets the value of the shareMarketInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareMarketInd() {
            return shareMarketInd;
        }

        /**
         * Sets the value of the shareMarketInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareMarketInd(String value) {
            this.shareMarketInd = value;
        }

        /**
         * Gets the value of the phoneLocationType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneLocationType() {
            return phoneLocationType;
        }

        /**
         * Sets the value of the phoneLocationType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneLocationType(String value) {
            this.phoneLocationType = value;
        }

        /**
         * Gets the value of the phoneTechType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneTechType() {
            return phoneTechType;
        }

        /**
         * Sets the value of the phoneTechType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneTechType(String value) {
            this.phoneTechType = value;
        }

        /**
         * Gets the value of the phoneUseType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneUseType() {
            return phoneUseType;
        }

        /**
         * Sets the value of the phoneUseType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneUseType(String value) {
            this.phoneUseType = value;
        }

        /**
         * Gets the value of the countryAccessCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCountryAccessCode() {
            return countryAccessCode;
        }

        /**
         * Sets the value of the countryAccessCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCountryAccessCode(String value) {
            this.countryAccessCode = value;
        }

        /**
         * Gets the value of the areaCityCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAreaCityCode() {
            return areaCityCode;
        }

        /**
         * Sets the value of the areaCityCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAreaCityCode(String value) {
            this.areaCityCode = value;
        }

        /**
         * Gets the value of the phoneNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneNumber() {
            return phoneNumber;
        }

        /**
         * Sets the value of the phoneNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneNumber(String value) {
            this.phoneNumber = value;
        }

        /**
         * Gets the value of the extension property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getExtension() {
            return extension;
        }

        /**
         * Sets the value of the extension property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setExtension(String value) {
            this.extension = value;
        }

        /**
         * Gets the value of the pin property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPIN() {
            return pin;
        }

        /**
         * Sets the value of the pin property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPIN(String value) {
            this.pin = value;
        }

        /**
         * Gets the value of the remark property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRemark() {
            return remark;
        }

        /**
         * Sets the value of the remark property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRemark(String value) {
            this.remark = value;
        }

        /**
         * Gets the value of the formattedInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isFormattedInd() {
            if (formattedInd == null) {
                return false;
            } else {
                return formattedInd;
            }
        }

        /**
         * Sets the value of the formattedInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setFormattedInd(Boolean value) {
            this.formattedInd = value;
        }

        /**
         * Gets the value of the defaultInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isDefaultInd() {
            if (defaultInd == null) {
                return false;
            } else {
                return defaultInd;
            }
        }

        /**
         * Sets the value of the defaultInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setDefaultInd(Boolean value) {
            this.defaultInd = value;
        }

        /**
         * Gets the value of the effectiveDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getEffectiveDate() {
            return effectiveDate;
        }

        /**
         * Sets the value of the effectiveDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setEffectiveDate(XMLGregorianCalendar value) {
            this.effectiveDate = value;
        }

        /**
         * Gets the value of the expireDate property.
         * 
         * @return
         *     possible object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public XMLGregorianCalendar getExpireDate() {
            return expireDate;
        }

        /**
         * Sets the value of the expireDate property.
         * 
         * @param value
         *     allowed object is
         *     {@link XMLGregorianCalendar }
         *     
         */
        public void setExpireDate(XMLGregorianCalendar value) {
            this.expireDate = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theRPH;
                theRPH = this.getRPH();
                strategy.appendField(locator, this, "rph", buffer, theRPH);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
            }
            {
                String thePhoneLocationType;
                thePhoneLocationType = this.getPhoneLocationType();
                strategy.appendField(locator, this, "phoneLocationType", buffer, thePhoneLocationType);
            }
            {
                String thePhoneTechType;
                thePhoneTechType = this.getPhoneTechType();
                strategy.appendField(locator, this, "phoneTechType", buffer, thePhoneTechType);
            }
            {
                String thePhoneUseType;
                thePhoneUseType = this.getPhoneUseType();
                strategy.appendField(locator, this, "phoneUseType", buffer, thePhoneUseType);
            }
            {
                String theCountryAccessCode;
                theCountryAccessCode = this.getCountryAccessCode();
                strategy.appendField(locator, this, "countryAccessCode", buffer, theCountryAccessCode);
            }
            {
                String theAreaCityCode;
                theAreaCityCode = this.getAreaCityCode();
                strategy.appendField(locator, this, "areaCityCode", buffer, theAreaCityCode);
            }
            {
                String thePhoneNumber;
                thePhoneNumber = this.getPhoneNumber();
                strategy.appendField(locator, this, "phoneNumber", buffer, thePhoneNumber);
            }
            {
                String theExtension;
                theExtension = this.getExtension();
                strategy.appendField(locator, this, "extension", buffer, theExtension);
            }
            {
                String thePIN;
                thePIN = this.getPIN();
                strategy.appendField(locator, this, "pin", buffer, thePIN);
            }
            {
                String theRemark;
                theRemark = this.getRemark();
                strategy.appendField(locator, this, "remark", buffer, theRemark);
            }
            {
                boolean theFormattedInd;
                theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                strategy.appendField(locator, this, "formattedInd", buffer, theFormattedInd);
            }
            {
                boolean theDefaultInd;
                theDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                strategy.appendField(locator, this, "defaultInd", buffer, theDefaultInd);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                strategy.appendField(locator, this, "expireDate", buffer, theExpireDate);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CustomerType.Telephone)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CustomerType.Telephone that = ((CustomerType.Telephone) object);
            {
                String lhsRPH;
                lhsRPH = this.getRPH();
                String rhsRPH;
                rhsRPH = that.getRPH();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                    return false;
                }
            }
            {
                String lhsShareSynchInd;
                lhsShareSynchInd = this.getShareSynchInd();
                String rhsShareSynchInd;
                rhsShareSynchInd = that.getShareSynchInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                    return false;
                }
            }
            {
                String lhsShareMarketInd;
                lhsShareMarketInd = this.getShareMarketInd();
                String rhsShareMarketInd;
                rhsShareMarketInd = that.getShareMarketInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                    return false;
                }
            }
            {
                String lhsPhoneLocationType;
                lhsPhoneLocationType = this.getPhoneLocationType();
                String rhsPhoneLocationType;
                rhsPhoneLocationType = that.getPhoneLocationType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneLocationType", lhsPhoneLocationType), LocatorUtils.property(thatLocator, "phoneLocationType", rhsPhoneLocationType), lhsPhoneLocationType, rhsPhoneLocationType)) {
                    return false;
                }
            }
            {
                String lhsPhoneTechType;
                lhsPhoneTechType = this.getPhoneTechType();
                String rhsPhoneTechType;
                rhsPhoneTechType = that.getPhoneTechType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneTechType", lhsPhoneTechType), LocatorUtils.property(thatLocator, "phoneTechType", rhsPhoneTechType), lhsPhoneTechType, rhsPhoneTechType)) {
                    return false;
                }
            }
            {
                String lhsPhoneUseType;
                lhsPhoneUseType = this.getPhoneUseType();
                String rhsPhoneUseType;
                rhsPhoneUseType = that.getPhoneUseType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneUseType", lhsPhoneUseType), LocatorUtils.property(thatLocator, "phoneUseType", rhsPhoneUseType), lhsPhoneUseType, rhsPhoneUseType)) {
                    return false;
                }
            }
            {
                String lhsCountryAccessCode;
                lhsCountryAccessCode = this.getCountryAccessCode();
                String rhsCountryAccessCode;
                rhsCountryAccessCode = that.getCountryAccessCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "countryAccessCode", lhsCountryAccessCode), LocatorUtils.property(thatLocator, "countryAccessCode", rhsCountryAccessCode), lhsCountryAccessCode, rhsCountryAccessCode)) {
                    return false;
                }
            }
            {
                String lhsAreaCityCode;
                lhsAreaCityCode = this.getAreaCityCode();
                String rhsAreaCityCode;
                rhsAreaCityCode = that.getAreaCityCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "areaCityCode", lhsAreaCityCode), LocatorUtils.property(thatLocator, "areaCityCode", rhsAreaCityCode), lhsAreaCityCode, rhsAreaCityCode)) {
                    return false;
                }
            }
            {
                String lhsPhoneNumber;
                lhsPhoneNumber = this.getPhoneNumber();
                String rhsPhoneNumber;
                rhsPhoneNumber = that.getPhoneNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneNumber", lhsPhoneNumber), LocatorUtils.property(thatLocator, "phoneNumber", rhsPhoneNumber), lhsPhoneNumber, rhsPhoneNumber)) {
                    return false;
                }
            }
            {
                String lhsExtension;
                lhsExtension = this.getExtension();
                String rhsExtension;
                rhsExtension = that.getExtension();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "extension", lhsExtension), LocatorUtils.property(thatLocator, "extension", rhsExtension), lhsExtension, rhsExtension)) {
                    return false;
                }
            }
            {
                String lhsPIN;
                lhsPIN = this.getPIN();
                String rhsPIN;
                rhsPIN = that.getPIN();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "pin", lhsPIN), LocatorUtils.property(thatLocator, "pin", rhsPIN), lhsPIN, rhsPIN)) {
                    return false;
                }
            }
            {
                String lhsRemark;
                lhsRemark = this.getRemark();
                String rhsRemark;
                rhsRemark = that.getRemark();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "remark", lhsRemark), LocatorUtils.property(thatLocator, "remark", rhsRemark), lhsRemark, rhsRemark)) {
                    return false;
                }
            }
            {
                boolean lhsFormattedInd;
                lhsFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                boolean rhsFormattedInd;
                rhsFormattedInd = ((that.formattedInd!= null)?that.isFormattedInd():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "formattedInd", lhsFormattedInd), LocatorUtils.property(thatLocator, "formattedInd", rhsFormattedInd), lhsFormattedInd, rhsFormattedInd)) {
                    return false;
                }
            }
            {
                boolean lhsDefaultInd;
                lhsDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                boolean rhsDefaultInd;
                rhsDefaultInd = ((that.defaultInd!= null)?that.isDefaultInd():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "defaultInd", lhsDefaultInd), LocatorUtils.property(thatLocator, "defaultInd", rhsDefaultInd), lhsDefaultInd, rhsDefaultInd)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsEffectiveDate;
                lhsEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar rhsEffectiveDate;
                rhsEffectiveDate = that.getEffectiveDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                    return false;
                }
            }
            {
                XMLGregorianCalendar lhsExpireDate;
                lhsExpireDate = this.getExpireDate();
                XMLGregorianCalendar rhsExpireDate;
                rhsExpireDate = that.getExpireDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "expireDate", lhsExpireDate), LocatorUtils.property(thatLocator, "expireDate", rhsExpireDate), lhsExpireDate, rhsExpireDate)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theRPH;
                theRPH = this.getRPH();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
            }
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
            }
            {
                String thePhoneLocationType;
                thePhoneLocationType = this.getPhoneLocationType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneLocationType", thePhoneLocationType), currentHashCode, thePhoneLocationType);
            }
            {
                String thePhoneTechType;
                thePhoneTechType = this.getPhoneTechType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneTechType", thePhoneTechType), currentHashCode, thePhoneTechType);
            }
            {
                String thePhoneUseType;
                thePhoneUseType = this.getPhoneUseType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneUseType", thePhoneUseType), currentHashCode, thePhoneUseType);
            }
            {
                String theCountryAccessCode;
                theCountryAccessCode = this.getCountryAccessCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "countryAccessCode", theCountryAccessCode), currentHashCode, theCountryAccessCode);
            }
            {
                String theAreaCityCode;
                theAreaCityCode = this.getAreaCityCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "areaCityCode", theAreaCityCode), currentHashCode, theAreaCityCode);
            }
            {
                String thePhoneNumber;
                thePhoneNumber = this.getPhoneNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneNumber", thePhoneNumber), currentHashCode, thePhoneNumber);
            }
            {
                String theExtension;
                theExtension = this.getExtension();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extension", theExtension), currentHashCode, theExtension);
            }
            {
                String thePIN;
                thePIN = this.getPIN();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pin", thePIN), currentHashCode, thePIN);
            }
            {
                String theRemark;
                theRemark = this.getRemark();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remark", theRemark), currentHashCode, theRemark);
            }
            {
                boolean theFormattedInd;
                theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formattedInd", theFormattedInd), currentHashCode, theFormattedInd);
            }
            {
                boolean theDefaultInd;
                theDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "defaultInd", theDefaultInd), currentHashCode, theDefaultInd);
            }
            {
                XMLGregorianCalendar theEffectiveDate;
                theEffectiveDate = this.getEffectiveDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
            }
            {
                XMLGregorianCalendar theExpireDate;
                theExpireDate = this.getExpireDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expireDate", theExpireDate), currentHashCode, theExpireDate);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CustomerType.Telephone) {
                final CustomerType.Telephone copy = ((CustomerType.Telephone) draftCopy);
                if (this.rph!= null) {
                    String sourceRPH;
                    sourceRPH = this.getRPH();
                    String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                    copy.setRPH(copyRPH);
                } else {
                    copy.rph = null;
                }
                if (this.shareSynchInd!= null) {
                    String sourceShareSynchInd;
                    sourceShareSynchInd = this.getShareSynchInd();
                    String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                    copy.setShareSynchInd(copyShareSynchInd);
                } else {
                    copy.shareSynchInd = null;
                }
                if (this.shareMarketInd!= null) {
                    String sourceShareMarketInd;
                    sourceShareMarketInd = this.getShareMarketInd();
                    String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                    copy.setShareMarketInd(copyShareMarketInd);
                } else {
                    copy.shareMarketInd = null;
                }
                if (this.phoneLocationType!= null) {
                    String sourcePhoneLocationType;
                    sourcePhoneLocationType = this.getPhoneLocationType();
                    String copyPhoneLocationType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneLocationType", sourcePhoneLocationType), sourcePhoneLocationType));
                    copy.setPhoneLocationType(copyPhoneLocationType);
                } else {
                    copy.phoneLocationType = null;
                }
                if (this.phoneTechType!= null) {
                    String sourcePhoneTechType;
                    sourcePhoneTechType = this.getPhoneTechType();
                    String copyPhoneTechType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneTechType", sourcePhoneTechType), sourcePhoneTechType));
                    copy.setPhoneTechType(copyPhoneTechType);
                } else {
                    copy.phoneTechType = null;
                }
                if (this.phoneUseType!= null) {
                    String sourcePhoneUseType;
                    sourcePhoneUseType = this.getPhoneUseType();
                    String copyPhoneUseType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneUseType", sourcePhoneUseType), sourcePhoneUseType));
                    copy.setPhoneUseType(copyPhoneUseType);
                } else {
                    copy.phoneUseType = null;
                }
                if (this.countryAccessCode!= null) {
                    String sourceCountryAccessCode;
                    sourceCountryAccessCode = this.getCountryAccessCode();
                    String copyCountryAccessCode = ((String) strategy.copy(LocatorUtils.property(locator, "countryAccessCode", sourceCountryAccessCode), sourceCountryAccessCode));
                    copy.setCountryAccessCode(copyCountryAccessCode);
                } else {
                    copy.countryAccessCode = null;
                }
                if (this.areaCityCode!= null) {
                    String sourceAreaCityCode;
                    sourceAreaCityCode = this.getAreaCityCode();
                    String copyAreaCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "areaCityCode", sourceAreaCityCode), sourceAreaCityCode));
                    copy.setAreaCityCode(copyAreaCityCode);
                } else {
                    copy.areaCityCode = null;
                }
                if (this.phoneNumber!= null) {
                    String sourcePhoneNumber;
                    sourcePhoneNumber = this.getPhoneNumber();
                    String copyPhoneNumber = ((String) strategy.copy(LocatorUtils.property(locator, "phoneNumber", sourcePhoneNumber), sourcePhoneNumber));
                    copy.setPhoneNumber(copyPhoneNumber);
                } else {
                    copy.phoneNumber = null;
                }
                if (this.extension!= null) {
                    String sourceExtension;
                    sourceExtension = this.getExtension();
                    String copyExtension = ((String) strategy.copy(LocatorUtils.property(locator, "extension", sourceExtension), sourceExtension));
                    copy.setExtension(copyExtension);
                } else {
                    copy.extension = null;
                }
                if (this.pin!= null) {
                    String sourcePIN;
                    sourcePIN = this.getPIN();
                    String copyPIN = ((String) strategy.copy(LocatorUtils.property(locator, "pin", sourcePIN), sourcePIN));
                    copy.setPIN(copyPIN);
                } else {
                    copy.pin = null;
                }
                if (this.remark!= null) {
                    String sourceRemark;
                    sourceRemark = this.getRemark();
                    String copyRemark = ((String) strategy.copy(LocatorUtils.property(locator, "remark", sourceRemark), sourceRemark));
                    copy.setRemark(copyRemark);
                } else {
                    copy.remark = null;
                }
                if (this.formattedInd!= null) {
                    boolean sourceFormattedInd;
                    sourceFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                    boolean copyFormattedInd = strategy.copy(LocatorUtils.property(locator, "formattedInd", sourceFormattedInd), sourceFormattedInd);
                    copy.setFormattedInd(copyFormattedInd);
                } else {
                    copy.formattedInd = null;
                }
                if (this.defaultInd!= null) {
                    boolean sourceDefaultInd;
                    sourceDefaultInd = ((this.defaultInd!= null)?this.isDefaultInd():false);
                    boolean copyDefaultInd = strategy.copy(LocatorUtils.property(locator, "defaultInd", sourceDefaultInd), sourceDefaultInd);
                    copy.setDefaultInd(copyDefaultInd);
                } else {
                    copy.defaultInd = null;
                }
                if (this.effectiveDate!= null) {
                    XMLGregorianCalendar sourceEffectiveDate;
                    sourceEffectiveDate = this.getEffectiveDate();
                    XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                    copy.setEffectiveDate(copyEffectiveDate);
                } else {
                    copy.effectiveDate = null;
                }
                if (this.expireDate!= null) {
                    XMLGregorianCalendar sourceExpireDate;
                    sourceExpireDate = this.getExpireDate();
                    XMLGregorianCalendar copyExpireDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "expireDate", sourceExpireDate), sourceExpireDate));
                    copy.setExpireDate(copyExpireDate);
                } else {
                    copy.expireDate = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CustomerType.Telephone();
        }

    }

}
