//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Rules for this priced option. 
 * 
 * <p>Java class for FareInfoType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FareInfoType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="DepartureDate" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/&gt;
 *         &lt;element name="FareReference" maxOccurs="5" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength0to8"&gt;
 *                 &lt;attribute name="ResBookDesigCode" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaLength1to2" /&gt;
 *                 &lt;attribute name="TicketDesignatorCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                 &lt;attribute name="AccountCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="RuleInfo" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}RuleInfoType"&gt;
 *                 &lt;attribute name="TripType" type="{http://www.opentravel.org/OTA/2003/05}AirTripType" /&gt;
 *                 &lt;attribute name="MoneySaverInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FilingAirline" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" minOccurs="0"/&gt;
 *         &lt;element name="MarketingAirline" type="{http://www.opentravel.org/OTA/2003/05}CompanyNameType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="DepartureAirport" type="{http://www.opentravel.org/OTA/2003/05}LocationType"/&gt;
 *         &lt;element name="ArrivalAirport" type="{http://www.opentravel.org/OTA/2003/05}LocationType"/&gt;
 *         &lt;element name="Date" maxOccurs="5" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attribute name="Date" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *                 &lt;attribute name="Type"&gt;
 *                   &lt;simpleType&gt;
 *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                       &lt;enumeration value="LastRuleChange"/&gt;
 *                       &lt;enumeration value="RuleBecomesInvalid"/&gt;
 *                       &lt;enumeration value="RestrictiveFareEffective"/&gt;
 *                       &lt;enumeration value="RestrictiveFareDiscontinue"/&gt;
 *                     &lt;/restriction&gt;
 *                   &lt;/simpleType&gt;
 *                 &lt;/attribute&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="FareInfo" maxOccurs="15" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Date" maxOccurs="5" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attribute name="Date" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
 *                           &lt;attribute name="Type"&gt;
 *                             &lt;simpleType&gt;
 *                               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                                 &lt;enumeration value="EffectiveTravel"/&gt;
 *                                 &lt;enumeration value="DiscontinueTravel"/&gt;
 *                                 &lt;enumeration value="FirstTicketing"/&gt;
 *                                 &lt;enumeration value="LastTicketing"/&gt;
 *                                 &lt;enumeration value="TravelCompletion"/&gt;
 *                               &lt;/restriction&gt;
 *                             &lt;/simpleType&gt;
 *                           &lt;/attribute&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="Fare" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attribute name="BaseAmount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
 *                           &lt;attribute name="BaseNUC_Amount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
 *                           &lt;attribute name="TaxAmount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
 *                           &lt;attribute name="TotalFare" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
 *                           &lt;attribute name="FareDescription" type="{http://www.opentravel.org/OTA/2003/05}StringLength0to64" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="PTC" maxOccurs="5" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attribute name="PassengerTypeCode" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="FareBasisCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
 *                 &lt;attribute name="GlobalIndicatorCode" type="{http://www.opentravel.org/OTA/2003/05}GlobalIndicatorType" /&gt;
 *                 &lt;attribute name="MaximumPermittedMileage" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *                 &lt;attribute name="TripType" type="{http://www.opentravel.org/OTA/2003/05}AirTripType" /&gt;
 *                 &lt;attribute name="FareType" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaLength1to3" /&gt;
 *                 &lt;attribute name="FareStatus" type="{http://www.opentravel.org/OTA/2003/05}FareStatusType" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}NegotiatedFareAttributes"/&gt;
 *       &lt;attribute name="CurrencyCode" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
 *       &lt;attribute name="TariffNumber" type="{http://www.opentravel.org/OTA/2003/05}AlphaNumericStringLength1to8" /&gt;
 *       &lt;attribute name="RuleNumber" type="{http://www.opentravel.org/OTA/2003/05}AlphaNumericStringLength1to8" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FareInfoType", propOrder = {
    "departureDate",
    "fareReference",
    "ruleInfo",
    "filingAirline",
    "marketingAirline",
    "departureAirport",
    "arrivalAirport",
    "date",
    "fareInfo"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.AirItineraryPricingInfoType.FareInfos.FareInfo.class,
    org.lucksoft.airlineaggregator.domain.PTCFareBreakdownType.FareInfo.class
})
public class FareInfoType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "DepartureDate")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar departureDate;
    @XmlElement(name = "FareReference")
    protected List<FareInfoType.FareReference> fareReference;
    @XmlElement(name = "RuleInfo")
    protected FareInfoType.RuleInfo ruleInfo;
    @XmlElement(name = "FilingAirline")
    protected CompanyNameType filingAirline;
    @XmlElement(name = "MarketingAirline")
    protected List<CompanyNameType> marketingAirline;
    @XmlElement(name = "DepartureAirport", required = true)
    protected LocationType departureAirport;
    @XmlElement(name = "ArrivalAirport", required = true)
    protected LocationType arrivalAirport;
    @XmlElement(name = "Date")
    protected List<FareInfoType.Date> date;
    @XmlElement(name = "FareInfo")
    protected List<FareInfoType.FareInfo> fareInfo;
    @XmlAttribute(name = "CurrencyCode")
    protected String currencyCode;
    @XmlAttribute(name = "TariffNumber")
    protected String tariffNumber;
    @XmlAttribute(name = "RuleNumber")
    protected String ruleNumber;
    @XmlAttribute(name = "NegotiatedFare")
    protected Boolean negotiatedFare;
    @XmlAttribute(name = "NegotiatedFareCode")
    protected String negotiatedFareCode;

    /**
     * Gets the value of the departureDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDepartureDate() {
        return departureDate;
    }

    /**
     * Sets the value of the departureDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDepartureDate(XMLGregorianCalendar value) {
        this.departureDate = value;
    }

    /**
     * Gets the value of the fareReference property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fareReference property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFareReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FareInfoType.FareReference }
     * 
     * 
     */
    public List<FareInfoType.FareReference> getFareReference() {
        if (fareReference == null) {
            fareReference = new ArrayList<FareInfoType.FareReference>();
        }
        return this.fareReference;
    }

    /**
     * Gets the value of the ruleInfo property.
     * 
     * @return
     *     possible object is
     *     {@link FareInfoType.RuleInfo }
     *     
     */
    public FareInfoType.RuleInfo getRuleInfo() {
        return ruleInfo;
    }

    /**
     * Sets the value of the ruleInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link FareInfoType.RuleInfo }
     *     
     */
    public void setRuleInfo(FareInfoType.RuleInfo value) {
        this.ruleInfo = value;
    }

    /**
     * Gets the value of the filingAirline property.
     * 
     * @return
     *     possible object is
     *     {@link CompanyNameType }
     *     
     */
    public CompanyNameType getFilingAirline() {
        return filingAirline;
    }

    /**
     * Sets the value of the filingAirline property.
     * 
     * @param value
     *     allowed object is
     *     {@link CompanyNameType }
     *     
     */
    public void setFilingAirline(CompanyNameType value) {
        this.filingAirline = value;
    }

    /**
     * Gets the value of the marketingAirline property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the marketingAirline property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMarketingAirline().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CompanyNameType }
     * 
     * 
     */
    public List<CompanyNameType> getMarketingAirline() {
        if (marketingAirline == null) {
            marketingAirline = new ArrayList<CompanyNameType>();
        }
        return this.marketingAirline;
    }

    /**
     * Gets the value of the departureAirport property.
     * 
     * @return
     *     possible object is
     *     {@link LocationType }
     *     
     */
    public LocationType getDepartureAirport() {
        return departureAirport;
    }

    /**
     * Sets the value of the departureAirport property.
     * 
     * @param value
     *     allowed object is
     *     {@link LocationType }
     *     
     */
    public void setDepartureAirport(LocationType value) {
        this.departureAirport = value;
    }

    /**
     * Gets the value of the arrivalAirport property.
     * 
     * @return
     *     possible object is
     *     {@link LocationType }
     *     
     */
    public LocationType getArrivalAirport() {
        return arrivalAirport;
    }

    /**
     * Sets the value of the arrivalAirport property.
     * 
     * @param value
     *     allowed object is
     *     {@link LocationType }
     *     
     */
    public void setArrivalAirport(LocationType value) {
        this.arrivalAirport = value;
    }

    /**
     * Gets the value of the date property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the date property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDate().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FareInfoType.Date }
     * 
     * 
     */
    public List<FareInfoType.Date> getDate() {
        if (date == null) {
            date = new ArrayList<FareInfoType.Date>();
        }
        return this.date;
    }

    /**
     * Gets the value of the fareInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fareInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFareInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FareInfoType.FareInfo }
     * 
     * 
     */
    public List<FareInfoType.FareInfo> getFareInfo() {
        if (fareInfo == null) {
            fareInfo = new ArrayList<FareInfoType.FareInfo>();
        }
        return this.fareInfo;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the tariffNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTariffNumber() {
        return tariffNumber;
    }

    /**
     * Sets the value of the tariffNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTariffNumber(String value) {
        this.tariffNumber = value;
    }

    /**
     * Gets the value of the ruleNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRuleNumber() {
        return ruleNumber;
    }

    /**
     * Sets the value of the ruleNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRuleNumber(String value) {
        this.ruleNumber = value;
    }

    /**
     * Gets the value of the negotiatedFare property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isNegotiatedFare() {
        if (negotiatedFare == null) {
            return false;
        } else {
            return negotiatedFare;
        }
    }

    /**
     * Sets the value of the negotiatedFare property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setNegotiatedFare(Boolean value) {
        this.negotiatedFare = value;
    }

    /**
     * Gets the value of the negotiatedFareCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNegotiatedFareCode() {
        return negotiatedFareCode;
    }

    /**
     * Sets the value of the negotiatedFareCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNegotiatedFareCode(String value) {
        this.negotiatedFareCode = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            XMLGregorianCalendar theDepartureDate;
            theDepartureDate = this.getDepartureDate();
            strategy.appendField(locator, this, "departureDate", buffer, theDepartureDate);
        }
        {
            List<FareInfoType.FareReference> theFareReference;
            theFareReference = (((this.fareReference!= null)&&(!this.fareReference.isEmpty()))?this.getFareReference():null);
            strategy.appendField(locator, this, "fareReference", buffer, theFareReference);
        }
        {
            FareInfoType.RuleInfo theRuleInfo;
            theRuleInfo = this.getRuleInfo();
            strategy.appendField(locator, this, "ruleInfo", buffer, theRuleInfo);
        }
        {
            CompanyNameType theFilingAirline;
            theFilingAirline = this.getFilingAirline();
            strategy.appendField(locator, this, "filingAirline", buffer, theFilingAirline);
        }
        {
            List<CompanyNameType> theMarketingAirline;
            theMarketingAirline = (((this.marketingAirline!= null)&&(!this.marketingAirline.isEmpty()))?this.getMarketingAirline():null);
            strategy.appendField(locator, this, "marketingAirline", buffer, theMarketingAirline);
        }
        {
            LocationType theDepartureAirport;
            theDepartureAirport = this.getDepartureAirport();
            strategy.appendField(locator, this, "departureAirport", buffer, theDepartureAirport);
        }
        {
            LocationType theArrivalAirport;
            theArrivalAirport = this.getArrivalAirport();
            strategy.appendField(locator, this, "arrivalAirport", buffer, theArrivalAirport);
        }
        {
            List<FareInfoType.Date> theDate;
            theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            strategy.appendField(locator, this, "date", buffer, theDate);
        }
        {
            List<FareInfoType.FareInfo> theFareInfo;
            theFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
            strategy.appendField(locator, this, "fareInfo", buffer, theFareInfo);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
        }
        {
            String theTariffNumber;
            theTariffNumber = this.getTariffNumber();
            strategy.appendField(locator, this, "tariffNumber", buffer, theTariffNumber);
        }
        {
            String theRuleNumber;
            theRuleNumber = this.getRuleNumber();
            strategy.appendField(locator, this, "ruleNumber", buffer, theRuleNumber);
        }
        {
            boolean theNegotiatedFare;
            theNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
            strategy.appendField(locator, this, "negotiatedFare", buffer, theNegotiatedFare);
        }
        {
            String theNegotiatedFareCode;
            theNegotiatedFareCode = this.getNegotiatedFareCode();
            strategy.appendField(locator, this, "negotiatedFareCode", buffer, theNegotiatedFareCode);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FareInfoType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FareInfoType that = ((FareInfoType) object);
        {
            XMLGregorianCalendar lhsDepartureDate;
            lhsDepartureDate = this.getDepartureDate();
            XMLGregorianCalendar rhsDepartureDate;
            rhsDepartureDate = that.getDepartureDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "departureDate", lhsDepartureDate), LocatorUtils.property(thatLocator, "departureDate", rhsDepartureDate), lhsDepartureDate, rhsDepartureDate)) {
                return false;
            }
        }
        {
            List<FareInfoType.FareReference> lhsFareReference;
            lhsFareReference = (((this.fareReference!= null)&&(!this.fareReference.isEmpty()))?this.getFareReference():null);
            List<FareInfoType.FareReference> rhsFareReference;
            rhsFareReference = (((that.fareReference!= null)&&(!that.fareReference.isEmpty()))?that.getFareReference():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareReference", lhsFareReference), LocatorUtils.property(thatLocator, "fareReference", rhsFareReference), lhsFareReference, rhsFareReference)) {
                return false;
            }
        }
        {
            FareInfoType.RuleInfo lhsRuleInfo;
            lhsRuleInfo = this.getRuleInfo();
            FareInfoType.RuleInfo rhsRuleInfo;
            rhsRuleInfo = that.getRuleInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ruleInfo", lhsRuleInfo), LocatorUtils.property(thatLocator, "ruleInfo", rhsRuleInfo), lhsRuleInfo, rhsRuleInfo)) {
                return false;
            }
        }
        {
            CompanyNameType lhsFilingAirline;
            lhsFilingAirline = this.getFilingAirline();
            CompanyNameType rhsFilingAirline;
            rhsFilingAirline = that.getFilingAirline();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "filingAirline", lhsFilingAirline), LocatorUtils.property(thatLocator, "filingAirline", rhsFilingAirline), lhsFilingAirline, rhsFilingAirline)) {
                return false;
            }
        }
        {
            List<CompanyNameType> lhsMarketingAirline;
            lhsMarketingAirline = (((this.marketingAirline!= null)&&(!this.marketingAirline.isEmpty()))?this.getMarketingAirline():null);
            List<CompanyNameType> rhsMarketingAirline;
            rhsMarketingAirline = (((that.marketingAirline!= null)&&(!that.marketingAirline.isEmpty()))?that.getMarketingAirline():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "marketingAirline", lhsMarketingAirline), LocatorUtils.property(thatLocator, "marketingAirline", rhsMarketingAirline), lhsMarketingAirline, rhsMarketingAirline)) {
                return false;
            }
        }
        {
            LocationType lhsDepartureAirport;
            lhsDepartureAirport = this.getDepartureAirport();
            LocationType rhsDepartureAirport;
            rhsDepartureAirport = that.getDepartureAirport();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "departureAirport", lhsDepartureAirport), LocatorUtils.property(thatLocator, "departureAirport", rhsDepartureAirport), lhsDepartureAirport, rhsDepartureAirport)) {
                return false;
            }
        }
        {
            LocationType lhsArrivalAirport;
            lhsArrivalAirport = this.getArrivalAirport();
            LocationType rhsArrivalAirport;
            rhsArrivalAirport = that.getArrivalAirport();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "arrivalAirport", lhsArrivalAirport), LocatorUtils.property(thatLocator, "arrivalAirport", rhsArrivalAirport), lhsArrivalAirport, rhsArrivalAirport)) {
                return false;
            }
        }
        {
            List<FareInfoType.Date> lhsDate;
            lhsDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            List<FareInfoType.Date> rhsDate;
            rhsDate = (((that.date!= null)&&(!that.date.isEmpty()))?that.getDate():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            List<FareInfoType.FareInfo> lhsFareInfo;
            lhsFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
            List<FareInfoType.FareInfo> rhsFareInfo;
            rhsFareInfo = (((that.fareInfo!= null)&&(!that.fareInfo.isEmpty()))?that.getFareInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fareInfo", lhsFareInfo), LocatorUtils.property(thatLocator, "fareInfo", rhsFareInfo), lhsFareInfo, rhsFareInfo)) {
                return false;
            }
        }
        {
            String lhsCurrencyCode;
            lhsCurrencyCode = this.getCurrencyCode();
            String rhsCurrencyCode;
            rhsCurrencyCode = that.getCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                return false;
            }
        }
        {
            String lhsTariffNumber;
            lhsTariffNumber = this.getTariffNumber();
            String rhsTariffNumber;
            rhsTariffNumber = that.getTariffNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tariffNumber", lhsTariffNumber), LocatorUtils.property(thatLocator, "tariffNumber", rhsTariffNumber), lhsTariffNumber, rhsTariffNumber)) {
                return false;
            }
        }
        {
            String lhsRuleNumber;
            lhsRuleNumber = this.getRuleNumber();
            String rhsRuleNumber;
            rhsRuleNumber = that.getRuleNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ruleNumber", lhsRuleNumber), LocatorUtils.property(thatLocator, "ruleNumber", rhsRuleNumber), lhsRuleNumber, rhsRuleNumber)) {
                return false;
            }
        }
        {
            boolean lhsNegotiatedFare;
            lhsNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
            boolean rhsNegotiatedFare;
            rhsNegotiatedFare = ((that.negotiatedFare!= null)?that.isNegotiatedFare():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "negotiatedFare", lhsNegotiatedFare), LocatorUtils.property(thatLocator, "negotiatedFare", rhsNegotiatedFare), lhsNegotiatedFare, rhsNegotiatedFare)) {
                return false;
            }
        }
        {
            String lhsNegotiatedFareCode;
            lhsNegotiatedFareCode = this.getNegotiatedFareCode();
            String rhsNegotiatedFareCode;
            rhsNegotiatedFareCode = that.getNegotiatedFareCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "negotiatedFareCode", lhsNegotiatedFareCode), LocatorUtils.property(thatLocator, "negotiatedFareCode", rhsNegotiatedFareCode), lhsNegotiatedFareCode, rhsNegotiatedFareCode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            XMLGregorianCalendar theDepartureDate;
            theDepartureDate = this.getDepartureDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departureDate", theDepartureDate), currentHashCode, theDepartureDate);
        }
        {
            List<FareInfoType.FareReference> theFareReference;
            theFareReference = (((this.fareReference!= null)&&(!this.fareReference.isEmpty()))?this.getFareReference():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareReference", theFareReference), currentHashCode, theFareReference);
        }
        {
            FareInfoType.RuleInfo theRuleInfo;
            theRuleInfo = this.getRuleInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ruleInfo", theRuleInfo), currentHashCode, theRuleInfo);
        }
        {
            CompanyNameType theFilingAirline;
            theFilingAirline = this.getFilingAirline();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "filingAirline", theFilingAirline), currentHashCode, theFilingAirline);
        }
        {
            List<CompanyNameType> theMarketingAirline;
            theMarketingAirline = (((this.marketingAirline!= null)&&(!this.marketingAirline.isEmpty()))?this.getMarketingAirline():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "marketingAirline", theMarketingAirline), currentHashCode, theMarketingAirline);
        }
        {
            LocationType theDepartureAirport;
            theDepartureAirport = this.getDepartureAirport();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departureAirport", theDepartureAirport), currentHashCode, theDepartureAirport);
        }
        {
            LocationType theArrivalAirport;
            theArrivalAirport = this.getArrivalAirport();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "arrivalAirport", theArrivalAirport), currentHashCode, theArrivalAirport);
        }
        {
            List<FareInfoType.Date> theDate;
            theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            List<FareInfoType.FareInfo> theFareInfo;
            theFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareInfo", theFareInfo), currentHashCode, theFareInfo);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
        }
        {
            String theTariffNumber;
            theTariffNumber = this.getTariffNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tariffNumber", theTariffNumber), currentHashCode, theTariffNumber);
        }
        {
            String theRuleNumber;
            theRuleNumber = this.getRuleNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ruleNumber", theRuleNumber), currentHashCode, theRuleNumber);
        }
        {
            boolean theNegotiatedFare;
            theNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "negotiatedFare", theNegotiatedFare), currentHashCode, theNegotiatedFare);
        }
        {
            String theNegotiatedFareCode;
            theNegotiatedFareCode = this.getNegotiatedFareCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "negotiatedFareCode", theNegotiatedFareCode), currentHashCode, theNegotiatedFareCode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FareInfoType) {
            final FareInfoType copy = ((FareInfoType) draftCopy);
            if (this.departureDate!= null) {
                XMLGregorianCalendar sourceDepartureDate;
                sourceDepartureDate = this.getDepartureDate();
                XMLGregorianCalendar copyDepartureDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "departureDate", sourceDepartureDate), sourceDepartureDate));
                copy.setDepartureDate(copyDepartureDate);
            } else {
                copy.departureDate = null;
            }
            if ((this.fareReference!= null)&&(!this.fareReference.isEmpty())) {
                List<FareInfoType.FareReference> sourceFareReference;
                sourceFareReference = (((this.fareReference!= null)&&(!this.fareReference.isEmpty()))?this.getFareReference():null);
                @SuppressWarnings("unchecked")
                List<FareInfoType.FareReference> copyFareReference = ((List<FareInfoType.FareReference> ) strategy.copy(LocatorUtils.property(locator, "fareReference", sourceFareReference), sourceFareReference));
                copy.fareReference = null;
                if (copyFareReference!= null) {
                    List<FareInfoType.FareReference> uniqueFareReferencel = copy.getFareReference();
                    uniqueFareReferencel.addAll(copyFareReference);
                }
            } else {
                copy.fareReference = null;
            }
            if (this.ruleInfo!= null) {
                FareInfoType.RuleInfo sourceRuleInfo;
                sourceRuleInfo = this.getRuleInfo();
                FareInfoType.RuleInfo copyRuleInfo = ((FareInfoType.RuleInfo) strategy.copy(LocatorUtils.property(locator, "ruleInfo", sourceRuleInfo), sourceRuleInfo));
                copy.setRuleInfo(copyRuleInfo);
            } else {
                copy.ruleInfo = null;
            }
            if (this.filingAirline!= null) {
                CompanyNameType sourceFilingAirline;
                sourceFilingAirline = this.getFilingAirline();
                CompanyNameType copyFilingAirline = ((CompanyNameType) strategy.copy(LocatorUtils.property(locator, "filingAirline", sourceFilingAirline), sourceFilingAirline));
                copy.setFilingAirline(copyFilingAirline);
            } else {
                copy.filingAirline = null;
            }
            if ((this.marketingAirline!= null)&&(!this.marketingAirline.isEmpty())) {
                List<CompanyNameType> sourceMarketingAirline;
                sourceMarketingAirline = (((this.marketingAirline!= null)&&(!this.marketingAirline.isEmpty()))?this.getMarketingAirline():null);
                @SuppressWarnings("unchecked")
                List<CompanyNameType> copyMarketingAirline = ((List<CompanyNameType> ) strategy.copy(LocatorUtils.property(locator, "marketingAirline", sourceMarketingAirline), sourceMarketingAirline));
                copy.marketingAirline = null;
                if (copyMarketingAirline!= null) {
                    List<CompanyNameType> uniqueMarketingAirlinel = copy.getMarketingAirline();
                    uniqueMarketingAirlinel.addAll(copyMarketingAirline);
                }
            } else {
                copy.marketingAirline = null;
            }
            if (this.departureAirport!= null) {
                LocationType sourceDepartureAirport;
                sourceDepartureAirport = this.getDepartureAirport();
                LocationType copyDepartureAirport = ((LocationType) strategy.copy(LocatorUtils.property(locator, "departureAirport", sourceDepartureAirport), sourceDepartureAirport));
                copy.setDepartureAirport(copyDepartureAirport);
            } else {
                copy.departureAirport = null;
            }
            if (this.arrivalAirport!= null) {
                LocationType sourceArrivalAirport;
                sourceArrivalAirport = this.getArrivalAirport();
                LocationType copyArrivalAirport = ((LocationType) strategy.copy(LocatorUtils.property(locator, "arrivalAirport", sourceArrivalAirport), sourceArrivalAirport));
                copy.setArrivalAirport(copyArrivalAirport);
            } else {
                copy.arrivalAirport = null;
            }
            if ((this.date!= null)&&(!this.date.isEmpty())) {
                List<FareInfoType.Date> sourceDate;
                sourceDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
                @SuppressWarnings("unchecked")
                List<FareInfoType.Date> copyDate = ((List<FareInfoType.Date> ) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                copy.date = null;
                if (copyDate!= null) {
                    List<FareInfoType.Date> uniqueDatel = copy.getDate();
                    uniqueDatel.addAll(copyDate);
                }
            } else {
                copy.date = null;
            }
            if ((this.fareInfo!= null)&&(!this.fareInfo.isEmpty())) {
                List<FareInfoType.FareInfo> sourceFareInfo;
                sourceFareInfo = (((this.fareInfo!= null)&&(!this.fareInfo.isEmpty()))?this.getFareInfo():null);
                @SuppressWarnings("unchecked")
                List<FareInfoType.FareInfo> copyFareInfo = ((List<FareInfoType.FareInfo> ) strategy.copy(LocatorUtils.property(locator, "fareInfo", sourceFareInfo), sourceFareInfo));
                copy.fareInfo = null;
                if (copyFareInfo!= null) {
                    List<FareInfoType.FareInfo> uniqueFareInfol = copy.getFareInfo();
                    uniqueFareInfol.addAll(copyFareInfo);
                }
            } else {
                copy.fareInfo = null;
            }
            if (this.currencyCode!= null) {
                String sourceCurrencyCode;
                sourceCurrencyCode = this.getCurrencyCode();
                String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                copy.setCurrencyCode(copyCurrencyCode);
            } else {
                copy.currencyCode = null;
            }
            if (this.tariffNumber!= null) {
                String sourceTariffNumber;
                sourceTariffNumber = this.getTariffNumber();
                String copyTariffNumber = ((String) strategy.copy(LocatorUtils.property(locator, "tariffNumber", sourceTariffNumber), sourceTariffNumber));
                copy.setTariffNumber(copyTariffNumber);
            } else {
                copy.tariffNumber = null;
            }
            if (this.ruleNumber!= null) {
                String sourceRuleNumber;
                sourceRuleNumber = this.getRuleNumber();
                String copyRuleNumber = ((String) strategy.copy(LocatorUtils.property(locator, "ruleNumber", sourceRuleNumber), sourceRuleNumber));
                copy.setRuleNumber(copyRuleNumber);
            } else {
                copy.ruleNumber = null;
            }
            if (this.negotiatedFare!= null) {
                boolean sourceNegotiatedFare;
                sourceNegotiatedFare = ((this.negotiatedFare!= null)?this.isNegotiatedFare():false);
                boolean copyNegotiatedFare = strategy.copy(LocatorUtils.property(locator, "negotiatedFare", sourceNegotiatedFare), sourceNegotiatedFare);
                copy.setNegotiatedFare(copyNegotiatedFare);
            } else {
                copy.negotiatedFare = null;
            }
            if (this.negotiatedFareCode!= null) {
                String sourceNegotiatedFareCode;
                sourceNegotiatedFareCode = this.getNegotiatedFareCode();
                String copyNegotiatedFareCode = ((String) strategy.copy(LocatorUtils.property(locator, "negotiatedFareCode", sourceNegotiatedFareCode), sourceNegotiatedFareCode));
                copy.setNegotiatedFareCode(copyNegotiatedFareCode);
            } else {
                copy.negotiatedFareCode = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FareInfoType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attribute name="Date" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
     *       &lt;attribute name="Type"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="LastRuleChange"/&gt;
     *             &lt;enumeration value="RuleBecomesInvalid"/&gt;
     *             &lt;enumeration value="RestrictiveFareEffective"/&gt;
     *             &lt;enumeration value="RestrictiveFareDiscontinue"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Date
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Date")
        protected String date;
        @XmlAttribute(name = "Type")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String type;

        /**
         * Gets the value of the date property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDate() {
            return date;
        }

        /**
         * Sets the value of the date property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDate(String value) {
            this.date = value;
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theDate;
                theDate = this.getDate();
                strategy.appendField(locator, this, "date", buffer, theDate);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareInfoType.Date)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareInfoType.Date that = ((FareInfoType.Date) object);
            {
                String lhsDate;
                lhsDate = this.getDate();
                String rhsDate;
                rhsDate = that.getDate();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theDate;
                theDate = this.getDate();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareInfoType.Date) {
                final FareInfoType.Date copy = ((FareInfoType.Date) draftCopy);
                if (this.date!= null) {
                    String sourceDate;
                    sourceDate = this.getDate();
                    String copyDate = ((String) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                    copy.setDate(copyDate);
                } else {
                    copy.date = null;
                }
                if (this.type!= null) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareInfoType.Date();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Date" maxOccurs="5" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attribute name="Date" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
     *                 &lt;attribute name="Type"&gt;
     *                   &lt;simpleType&gt;
     *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *                       &lt;enumeration value="EffectiveTravel"/&gt;
     *                       &lt;enumeration value="DiscontinueTravel"/&gt;
     *                       &lt;enumeration value="FirstTicketing"/&gt;
     *                       &lt;enumeration value="LastTicketing"/&gt;
     *                       &lt;enumeration value="TravelCompletion"/&gt;
     *                     &lt;/restriction&gt;
     *                   &lt;/simpleType&gt;
     *                 &lt;/attribute&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="Fare" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attribute name="BaseAmount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
     *                 &lt;attribute name="BaseNUC_Amount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
     *                 &lt;attribute name="TaxAmount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
     *                 &lt;attribute name="TotalFare" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
     *                 &lt;attribute name="FareDescription" type="{http://www.opentravel.org/OTA/2003/05}StringLength0to64" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="PTC" maxOccurs="5" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attribute name="PassengerTypeCode" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="FareBasisCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *       &lt;attribute name="GlobalIndicatorCode" type="{http://www.opentravel.org/OTA/2003/05}GlobalIndicatorType" /&gt;
     *       &lt;attribute name="MaximumPermittedMileage" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
     *       &lt;attribute name="TripType" type="{http://www.opentravel.org/OTA/2003/05}AirTripType" /&gt;
     *       &lt;attribute name="FareType" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaLength1to3" /&gt;
     *       &lt;attribute name="FareStatus" type="{http://www.opentravel.org/OTA/2003/05}FareStatusType" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "date",
        "fare",
        "ptc"
    })
    public static class FareInfo
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "Date")
        protected List<FareInfoType.FareInfo.Date> date;
        @XmlElement(name = "Fare")
        protected FareInfoType.FareInfo.Fare fare;
        @XmlElement(name = "PTC")
        protected List<FareInfoType.FareInfo.PTC> ptc;
        @XmlAttribute(name = "FareBasisCode")
        protected String fareBasisCode;
        @XmlAttribute(name = "GlobalIndicatorCode")
        protected GlobalIndicatorType globalIndicatorCode;
        @XmlAttribute(name = "MaximumPermittedMileage")
        protected BigInteger maximumPermittedMileage;
        @XmlAttribute(name = "TripType")
        protected AirTripType tripType;
        @XmlAttribute(name = "FareType")
        protected String fareType;
        @XmlAttribute(name = "FareStatus")
        protected FareStatusType fareStatus;

        /**
         * Gets the value of the date property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the date property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getDate().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link FareInfoType.FareInfo.Date }
         * 
         * 
         */
        public List<FareInfoType.FareInfo.Date> getDate() {
            if (date == null) {
                date = new ArrayList<FareInfoType.FareInfo.Date>();
            }
            return this.date;
        }

        /**
         * Gets the value of the fare property.
         * 
         * @return
         *     possible object is
         *     {@link FareInfoType.FareInfo.Fare }
         *     
         */
        public FareInfoType.FareInfo.Fare getFare() {
            return fare;
        }

        /**
         * Sets the value of the fare property.
         * 
         * @param value
         *     allowed object is
         *     {@link FareInfoType.FareInfo.Fare }
         *     
         */
        public void setFare(FareInfoType.FareInfo.Fare value) {
            this.fare = value;
        }

        /**
         * Gets the value of the ptc property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the ptc property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPTC().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link FareInfoType.FareInfo.PTC }
         * 
         * 
         */
        public List<FareInfoType.FareInfo.PTC> getPTC() {
            if (ptc == null) {
                ptc = new ArrayList<FareInfoType.FareInfo.PTC>();
            }
            return this.ptc;
        }

        /**
         * Gets the value of the fareBasisCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFareBasisCode() {
            return fareBasisCode;
        }

        /**
         * Sets the value of the fareBasisCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFareBasisCode(String value) {
            this.fareBasisCode = value;
        }

        /**
         * Gets the value of the globalIndicatorCode property.
         * 
         * @return
         *     possible object is
         *     {@link GlobalIndicatorType }
         *     
         */
        public GlobalIndicatorType getGlobalIndicatorCode() {
            return globalIndicatorCode;
        }

        /**
         * Sets the value of the globalIndicatorCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link GlobalIndicatorType }
         *     
         */
        public void setGlobalIndicatorCode(GlobalIndicatorType value) {
            this.globalIndicatorCode = value;
        }

        /**
         * Gets the value of the maximumPermittedMileage property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getMaximumPermittedMileage() {
            return maximumPermittedMileage;
        }

        /**
         * Sets the value of the maximumPermittedMileage property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setMaximumPermittedMileage(BigInteger value) {
            this.maximumPermittedMileage = value;
        }

        /**
         * Gets the value of the tripType property.
         * 
         * @return
         *     possible object is
         *     {@link AirTripType }
         *     
         */
        public AirTripType getTripType() {
            return tripType;
        }

        /**
         * Sets the value of the tripType property.
         * 
         * @param value
         *     allowed object is
         *     {@link AirTripType }
         *     
         */
        public void setTripType(AirTripType value) {
            this.tripType = value;
        }

        /**
         * Gets the value of the fareType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getFareType() {
            return fareType;
        }

        /**
         * Sets the value of the fareType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setFareType(String value) {
            this.fareType = value;
        }

        /**
         * Gets the value of the fareStatus property.
         * 
         * @return
         *     possible object is
         *     {@link FareStatusType }
         *     
         */
        public FareStatusType getFareStatus() {
            return fareStatus;
        }

        /**
         * Sets the value of the fareStatus property.
         * 
         * @param value
         *     allowed object is
         *     {@link FareStatusType }
         *     
         */
        public void setFareStatus(FareStatusType value) {
            this.fareStatus = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<FareInfoType.FareInfo.Date> theDate;
                theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
                strategy.appendField(locator, this, "date", buffer, theDate);
            }
            {
                FareInfoType.FareInfo.Fare theFare;
                theFare = this.getFare();
                strategy.appendField(locator, this, "fare", buffer, theFare);
            }
            {
                List<FareInfoType.FareInfo.PTC> thePTC;
                thePTC = (((this.ptc!= null)&&(!this.ptc.isEmpty()))?this.getPTC():null);
                strategy.appendField(locator, this, "ptc", buffer, thePTC);
            }
            {
                String theFareBasisCode;
                theFareBasisCode = this.getFareBasisCode();
                strategy.appendField(locator, this, "fareBasisCode", buffer, theFareBasisCode);
            }
            {
                GlobalIndicatorType theGlobalIndicatorCode;
                theGlobalIndicatorCode = this.getGlobalIndicatorCode();
                strategy.appendField(locator, this, "globalIndicatorCode", buffer, theGlobalIndicatorCode);
            }
            {
                BigInteger theMaximumPermittedMileage;
                theMaximumPermittedMileage = this.getMaximumPermittedMileage();
                strategy.appendField(locator, this, "maximumPermittedMileage", buffer, theMaximumPermittedMileage);
            }
            {
                AirTripType theTripType;
                theTripType = this.getTripType();
                strategy.appendField(locator, this, "tripType", buffer, theTripType);
            }
            {
                String theFareType;
                theFareType = this.getFareType();
                strategy.appendField(locator, this, "fareType", buffer, theFareType);
            }
            {
                FareStatusType theFareStatus;
                theFareStatus = this.getFareStatus();
                strategy.appendField(locator, this, "fareStatus", buffer, theFareStatus);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareInfoType.FareInfo)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareInfoType.FareInfo that = ((FareInfoType.FareInfo) object);
            {
                List<FareInfoType.FareInfo.Date> lhsDate;
                lhsDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
                List<FareInfoType.FareInfo.Date> rhsDate;
                rhsDate = (((that.date!= null)&&(!that.date.isEmpty()))?that.getDate():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                    return false;
                }
            }
            {
                FareInfoType.FareInfo.Fare lhsFare;
                lhsFare = this.getFare();
                FareInfoType.FareInfo.Fare rhsFare;
                rhsFare = that.getFare();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fare", lhsFare), LocatorUtils.property(thatLocator, "fare", rhsFare), lhsFare, rhsFare)) {
                    return false;
                }
            }
            {
                List<FareInfoType.FareInfo.PTC> lhsPTC;
                lhsPTC = (((this.ptc!= null)&&(!this.ptc.isEmpty()))?this.getPTC():null);
                List<FareInfoType.FareInfo.PTC> rhsPTC;
                rhsPTC = (((that.ptc!= null)&&(!that.ptc.isEmpty()))?that.getPTC():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptc", lhsPTC), LocatorUtils.property(thatLocator, "ptc", rhsPTC), lhsPTC, rhsPTC)) {
                    return false;
                }
            }
            {
                String lhsFareBasisCode;
                lhsFareBasisCode = this.getFareBasisCode();
                String rhsFareBasisCode;
                rhsFareBasisCode = that.getFareBasisCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareBasisCode", lhsFareBasisCode), LocatorUtils.property(thatLocator, "fareBasisCode", rhsFareBasisCode), lhsFareBasisCode, rhsFareBasisCode)) {
                    return false;
                }
            }
            {
                GlobalIndicatorType lhsGlobalIndicatorCode;
                lhsGlobalIndicatorCode = this.getGlobalIndicatorCode();
                GlobalIndicatorType rhsGlobalIndicatorCode;
                rhsGlobalIndicatorCode = that.getGlobalIndicatorCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "globalIndicatorCode", lhsGlobalIndicatorCode), LocatorUtils.property(thatLocator, "globalIndicatorCode", rhsGlobalIndicatorCode), lhsGlobalIndicatorCode, rhsGlobalIndicatorCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsMaximumPermittedMileage;
                lhsMaximumPermittedMileage = this.getMaximumPermittedMileage();
                BigInteger rhsMaximumPermittedMileage;
                rhsMaximumPermittedMileage = that.getMaximumPermittedMileage();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "maximumPermittedMileage", lhsMaximumPermittedMileage), LocatorUtils.property(thatLocator, "maximumPermittedMileage", rhsMaximumPermittedMileage), lhsMaximumPermittedMileage, rhsMaximumPermittedMileage)) {
                    return false;
                }
            }
            {
                AirTripType lhsTripType;
                lhsTripType = this.getTripType();
                AirTripType rhsTripType;
                rhsTripType = that.getTripType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "tripType", lhsTripType), LocatorUtils.property(thatLocator, "tripType", rhsTripType), lhsTripType, rhsTripType)) {
                    return false;
                }
            }
            {
                String lhsFareType;
                lhsFareType = this.getFareType();
                String rhsFareType;
                rhsFareType = that.getFareType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareType", lhsFareType), LocatorUtils.property(thatLocator, "fareType", rhsFareType), lhsFareType, rhsFareType)) {
                    return false;
                }
            }
            {
                FareStatusType lhsFareStatus;
                lhsFareStatus = this.getFareStatus();
                FareStatusType rhsFareStatus;
                rhsFareStatus = that.getFareStatus();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fareStatus", lhsFareStatus), LocatorUtils.property(thatLocator, "fareStatus", rhsFareStatus), lhsFareStatus, rhsFareStatus)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<FareInfoType.FareInfo.Date> theDate;
                theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
            }
            {
                FareInfoType.FareInfo.Fare theFare;
                theFare = this.getFare();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fare", theFare), currentHashCode, theFare);
            }
            {
                List<FareInfoType.FareInfo.PTC> thePTC;
                thePTC = (((this.ptc!= null)&&(!this.ptc.isEmpty()))?this.getPTC():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptc", thePTC), currentHashCode, thePTC);
            }
            {
                String theFareBasisCode;
                theFareBasisCode = this.getFareBasisCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareBasisCode", theFareBasisCode), currentHashCode, theFareBasisCode);
            }
            {
                GlobalIndicatorType theGlobalIndicatorCode;
                theGlobalIndicatorCode = this.getGlobalIndicatorCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "globalIndicatorCode", theGlobalIndicatorCode), currentHashCode, theGlobalIndicatorCode);
            }
            {
                BigInteger theMaximumPermittedMileage;
                theMaximumPermittedMileage = this.getMaximumPermittedMileage();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maximumPermittedMileage", theMaximumPermittedMileage), currentHashCode, theMaximumPermittedMileage);
            }
            {
                AirTripType theTripType;
                theTripType = this.getTripType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tripType", theTripType), currentHashCode, theTripType);
            }
            {
                String theFareType;
                theFareType = this.getFareType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareType", theFareType), currentHashCode, theFareType);
            }
            {
                FareStatusType theFareStatus;
                theFareStatus = this.getFareStatus();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareStatus", theFareStatus), currentHashCode, theFareStatus);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareInfoType.FareInfo) {
                final FareInfoType.FareInfo copy = ((FareInfoType.FareInfo) draftCopy);
                if ((this.date!= null)&&(!this.date.isEmpty())) {
                    List<FareInfoType.FareInfo.Date> sourceDate;
                    sourceDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
                    @SuppressWarnings("unchecked")
                    List<FareInfoType.FareInfo.Date> copyDate = ((List<FareInfoType.FareInfo.Date> ) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                    copy.date = null;
                    if (copyDate!= null) {
                        List<FareInfoType.FareInfo.Date> uniqueDatel = copy.getDate();
                        uniqueDatel.addAll(copyDate);
                    }
                } else {
                    copy.date = null;
                }
                if (this.fare!= null) {
                    FareInfoType.FareInfo.Fare sourceFare;
                    sourceFare = this.getFare();
                    FareInfoType.FareInfo.Fare copyFare = ((FareInfoType.FareInfo.Fare) strategy.copy(LocatorUtils.property(locator, "fare", sourceFare), sourceFare));
                    copy.setFare(copyFare);
                } else {
                    copy.fare = null;
                }
                if ((this.ptc!= null)&&(!this.ptc.isEmpty())) {
                    List<FareInfoType.FareInfo.PTC> sourcePTC;
                    sourcePTC = (((this.ptc!= null)&&(!this.ptc.isEmpty()))?this.getPTC():null);
                    @SuppressWarnings("unchecked")
                    List<FareInfoType.FareInfo.PTC> copyPTC = ((List<FareInfoType.FareInfo.PTC> ) strategy.copy(LocatorUtils.property(locator, "ptc", sourcePTC), sourcePTC));
                    copy.ptc = null;
                    if (copyPTC!= null) {
                        List<FareInfoType.FareInfo.PTC> uniquePTCl = copy.getPTC();
                        uniquePTCl.addAll(copyPTC);
                    }
                } else {
                    copy.ptc = null;
                }
                if (this.fareBasisCode!= null) {
                    String sourceFareBasisCode;
                    sourceFareBasisCode = this.getFareBasisCode();
                    String copyFareBasisCode = ((String) strategy.copy(LocatorUtils.property(locator, "fareBasisCode", sourceFareBasisCode), sourceFareBasisCode));
                    copy.setFareBasisCode(copyFareBasisCode);
                } else {
                    copy.fareBasisCode = null;
                }
                if (this.globalIndicatorCode!= null) {
                    GlobalIndicatorType sourceGlobalIndicatorCode;
                    sourceGlobalIndicatorCode = this.getGlobalIndicatorCode();
                    GlobalIndicatorType copyGlobalIndicatorCode = ((GlobalIndicatorType) strategy.copy(LocatorUtils.property(locator, "globalIndicatorCode", sourceGlobalIndicatorCode), sourceGlobalIndicatorCode));
                    copy.setGlobalIndicatorCode(copyGlobalIndicatorCode);
                } else {
                    copy.globalIndicatorCode = null;
                }
                if (this.maximumPermittedMileage!= null) {
                    BigInteger sourceMaximumPermittedMileage;
                    sourceMaximumPermittedMileage = this.getMaximumPermittedMileage();
                    BigInteger copyMaximumPermittedMileage = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maximumPermittedMileage", sourceMaximumPermittedMileage), sourceMaximumPermittedMileage));
                    copy.setMaximumPermittedMileage(copyMaximumPermittedMileage);
                } else {
                    copy.maximumPermittedMileage = null;
                }
                if (this.tripType!= null) {
                    AirTripType sourceTripType;
                    sourceTripType = this.getTripType();
                    AirTripType copyTripType = ((AirTripType) strategy.copy(LocatorUtils.property(locator, "tripType", sourceTripType), sourceTripType));
                    copy.setTripType(copyTripType);
                } else {
                    copy.tripType = null;
                }
                if (this.fareType!= null) {
                    String sourceFareType;
                    sourceFareType = this.getFareType();
                    String copyFareType = ((String) strategy.copy(LocatorUtils.property(locator, "fareType", sourceFareType), sourceFareType));
                    copy.setFareType(copyFareType);
                } else {
                    copy.fareType = null;
                }
                if (this.fareStatus!= null) {
                    FareStatusType sourceFareStatus;
                    sourceFareStatus = this.getFareStatus();
                    FareStatusType copyFareStatus = ((FareStatusType) strategy.copy(LocatorUtils.property(locator, "fareStatus", sourceFareStatus), sourceFareStatus));
                    copy.setFareStatus(copyFareStatus);
                } else {
                    copy.fareStatus = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareInfoType.FareInfo();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attribute name="Date" type="{http://www.opentravel.org/OTA/2003/05}DateOrDateTimeType" /&gt;
         *       &lt;attribute name="Type"&gt;
         *         &lt;simpleType&gt;
         *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
         *             &lt;enumeration value="EffectiveTravel"/&gt;
         *             &lt;enumeration value="DiscontinueTravel"/&gt;
         *             &lt;enumeration value="FirstTicketing"/&gt;
         *             &lt;enumeration value="LastTicketing"/&gt;
         *             &lt;enumeration value="TravelCompletion"/&gt;
         *           &lt;/restriction&gt;
         *         &lt;/simpleType&gt;
         *       &lt;/attribute&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Date
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "Date")
            protected String date;
            @XmlAttribute(name = "Type")
            @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
            protected String type;

            /**
             * Gets the value of the date property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getDate() {
                return date;
            }

            /**
             * Sets the value of the date property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setDate(String value) {
                this.date = value;
            }

            /**
             * Gets the value of the type property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getType() {
                return type;
            }

            /**
             * Sets the value of the type property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setType(String value) {
                this.type = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theDate;
                    theDate = this.getDate();
                    strategy.appendField(locator, this, "date", buffer, theDate);
                }
                {
                    String theType;
                    theType = this.getType();
                    strategy.appendField(locator, this, "type", buffer, theType);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof FareInfoType.FareInfo.Date)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final FareInfoType.FareInfo.Date that = ((FareInfoType.FareInfo.Date) object);
                {
                    String lhsDate;
                    lhsDate = this.getDate();
                    String rhsDate;
                    rhsDate = that.getDate();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                        return false;
                    }
                }
                {
                    String lhsType;
                    lhsType = this.getType();
                    String rhsType;
                    rhsType = that.getType();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theDate;
                    theDate = this.getDate();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
                }
                {
                    String theType;
                    theType = this.getType();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof FareInfoType.FareInfo.Date) {
                    final FareInfoType.FareInfo.Date copy = ((FareInfoType.FareInfo.Date) draftCopy);
                    if (this.date!= null) {
                        String sourceDate;
                        sourceDate = this.getDate();
                        String copyDate = ((String) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                        copy.setDate(copyDate);
                    } else {
                        copy.date = null;
                    }
                    if (this.type!= null) {
                        String sourceType;
                        sourceType = this.getType();
                        String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                        copy.setType(copyType);
                    } else {
                        copy.type = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new FareInfoType.FareInfo.Date();
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attribute name="BaseAmount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
         *       &lt;attribute name="BaseNUC_Amount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
         *       &lt;attribute name="TaxAmount" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
         *       &lt;attribute name="TotalFare" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
         *       &lt;attribute name="FareDescription" type="{http://www.opentravel.org/OTA/2003/05}StringLength0to64" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Fare
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "BaseAmount")
            protected BigDecimal baseAmount;
            @XmlAttribute(name = "BaseNUC_Amount")
            protected BigDecimal baseNUCAmount;
            @XmlAttribute(name = "TaxAmount")
            protected BigDecimal taxAmount;
            @XmlAttribute(name = "TotalFare")
            protected BigDecimal totalFare;
            @XmlAttribute(name = "FareDescription")
            protected String fareDescription;

            /**
             * Gets the value of the baseAmount property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getBaseAmount() {
                return baseAmount;
            }

            /**
             * Sets the value of the baseAmount property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setBaseAmount(BigDecimal value) {
                this.baseAmount = value;
            }

            /**
             * Gets the value of the baseNUCAmount property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getBaseNUCAmount() {
                return baseNUCAmount;
            }

            /**
             * Sets the value of the baseNUCAmount property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setBaseNUCAmount(BigDecimal value) {
                this.baseNUCAmount = value;
            }

            /**
             * Gets the value of the taxAmount property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getTaxAmount() {
                return taxAmount;
            }

            /**
             * Sets the value of the taxAmount property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setTaxAmount(BigDecimal value) {
                this.taxAmount = value;
            }

            /**
             * Gets the value of the totalFare property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getTotalFare() {
                return totalFare;
            }

            /**
             * Sets the value of the totalFare property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setTotalFare(BigDecimal value) {
                this.totalFare = value;
            }

            /**
             * Gets the value of the fareDescription property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getFareDescription() {
                return fareDescription;
            }

            /**
             * Sets the value of the fareDescription property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setFareDescription(String value) {
                this.fareDescription = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    BigDecimal theBaseAmount;
                    theBaseAmount = this.getBaseAmount();
                    strategy.appendField(locator, this, "baseAmount", buffer, theBaseAmount);
                }
                {
                    BigDecimal theBaseNUCAmount;
                    theBaseNUCAmount = this.getBaseNUCAmount();
                    strategy.appendField(locator, this, "baseNUCAmount", buffer, theBaseNUCAmount);
                }
                {
                    BigDecimal theTaxAmount;
                    theTaxAmount = this.getTaxAmount();
                    strategy.appendField(locator, this, "taxAmount", buffer, theTaxAmount);
                }
                {
                    BigDecimal theTotalFare;
                    theTotalFare = this.getTotalFare();
                    strategy.appendField(locator, this, "totalFare", buffer, theTotalFare);
                }
                {
                    String theFareDescription;
                    theFareDescription = this.getFareDescription();
                    strategy.appendField(locator, this, "fareDescription", buffer, theFareDescription);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof FareInfoType.FareInfo.Fare)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final FareInfoType.FareInfo.Fare that = ((FareInfoType.FareInfo.Fare) object);
                {
                    BigDecimal lhsBaseAmount;
                    lhsBaseAmount = this.getBaseAmount();
                    BigDecimal rhsBaseAmount;
                    rhsBaseAmount = that.getBaseAmount();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "baseAmount", lhsBaseAmount), LocatorUtils.property(thatLocator, "baseAmount", rhsBaseAmount), lhsBaseAmount, rhsBaseAmount)) {
                        return false;
                    }
                }
                {
                    BigDecimal lhsBaseNUCAmount;
                    lhsBaseNUCAmount = this.getBaseNUCAmount();
                    BigDecimal rhsBaseNUCAmount;
                    rhsBaseNUCAmount = that.getBaseNUCAmount();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "baseNUCAmount", lhsBaseNUCAmount), LocatorUtils.property(thatLocator, "baseNUCAmount", rhsBaseNUCAmount), lhsBaseNUCAmount, rhsBaseNUCAmount)) {
                        return false;
                    }
                }
                {
                    BigDecimal lhsTaxAmount;
                    lhsTaxAmount = this.getTaxAmount();
                    BigDecimal rhsTaxAmount;
                    rhsTaxAmount = that.getTaxAmount();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "taxAmount", lhsTaxAmount), LocatorUtils.property(thatLocator, "taxAmount", rhsTaxAmount), lhsTaxAmount, rhsTaxAmount)) {
                        return false;
                    }
                }
                {
                    BigDecimal lhsTotalFare;
                    lhsTotalFare = this.getTotalFare();
                    BigDecimal rhsTotalFare;
                    rhsTotalFare = that.getTotalFare();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "totalFare", lhsTotalFare), LocatorUtils.property(thatLocator, "totalFare", rhsTotalFare), lhsTotalFare, rhsTotalFare)) {
                        return false;
                    }
                }
                {
                    String lhsFareDescription;
                    lhsFareDescription = this.getFareDescription();
                    String rhsFareDescription;
                    rhsFareDescription = that.getFareDescription();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "fareDescription", lhsFareDescription), LocatorUtils.property(thatLocator, "fareDescription", rhsFareDescription), lhsFareDescription, rhsFareDescription)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    BigDecimal theBaseAmount;
                    theBaseAmount = this.getBaseAmount();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "baseAmount", theBaseAmount), currentHashCode, theBaseAmount);
                }
                {
                    BigDecimal theBaseNUCAmount;
                    theBaseNUCAmount = this.getBaseNUCAmount();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "baseNUCAmount", theBaseNUCAmount), currentHashCode, theBaseNUCAmount);
                }
                {
                    BigDecimal theTaxAmount;
                    theTaxAmount = this.getTaxAmount();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxAmount", theTaxAmount), currentHashCode, theTaxAmount);
                }
                {
                    BigDecimal theTotalFare;
                    theTotalFare = this.getTotalFare();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalFare", theTotalFare), currentHashCode, theTotalFare);
                }
                {
                    String theFareDescription;
                    theFareDescription = this.getFareDescription();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fareDescription", theFareDescription), currentHashCode, theFareDescription);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof FareInfoType.FareInfo.Fare) {
                    final FareInfoType.FareInfo.Fare copy = ((FareInfoType.FareInfo.Fare) draftCopy);
                    if (this.baseAmount!= null) {
                        BigDecimal sourceBaseAmount;
                        sourceBaseAmount = this.getBaseAmount();
                        BigDecimal copyBaseAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "baseAmount", sourceBaseAmount), sourceBaseAmount));
                        copy.setBaseAmount(copyBaseAmount);
                    } else {
                        copy.baseAmount = null;
                    }
                    if (this.baseNUCAmount!= null) {
                        BigDecimal sourceBaseNUCAmount;
                        sourceBaseNUCAmount = this.getBaseNUCAmount();
                        BigDecimal copyBaseNUCAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "baseNUCAmount", sourceBaseNUCAmount), sourceBaseNUCAmount));
                        copy.setBaseNUCAmount(copyBaseNUCAmount);
                    } else {
                        copy.baseNUCAmount = null;
                    }
                    if (this.taxAmount!= null) {
                        BigDecimal sourceTaxAmount;
                        sourceTaxAmount = this.getTaxAmount();
                        BigDecimal copyTaxAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "taxAmount", sourceTaxAmount), sourceTaxAmount));
                        copy.setTaxAmount(copyTaxAmount);
                    } else {
                        copy.taxAmount = null;
                    }
                    if (this.totalFare!= null) {
                        BigDecimal sourceTotalFare;
                        sourceTotalFare = this.getTotalFare();
                        BigDecimal copyTotalFare = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "totalFare", sourceTotalFare), sourceTotalFare));
                        copy.setTotalFare(copyTotalFare);
                    } else {
                        copy.totalFare = null;
                    }
                    if (this.fareDescription!= null) {
                        String sourceFareDescription;
                        sourceFareDescription = this.getFareDescription();
                        String copyFareDescription = ((String) strategy.copy(LocatorUtils.property(locator, "fareDescription", sourceFareDescription), sourceFareDescription));
                        copy.setFareDescription(copyFareDescription);
                    } else {
                        copy.fareDescription = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new FareInfoType.FareInfo.Fare();
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attribute name="PassengerTypeCode" type="{http://www.opentravel.org/OTA/2003/05}AlphaLength3" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class PTC
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "PassengerTypeCode")
            protected String passengerTypeCode;

            /**
             * Gets the value of the passengerTypeCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getPassengerTypeCode() {
                return passengerTypeCode;
            }

            /**
             * Sets the value of the passengerTypeCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setPassengerTypeCode(String value) {
                this.passengerTypeCode = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String thePassengerTypeCode;
                    thePassengerTypeCode = this.getPassengerTypeCode();
                    strategy.appendField(locator, this, "passengerTypeCode", buffer, thePassengerTypeCode);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof FareInfoType.FareInfo.PTC)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final FareInfoType.FareInfo.PTC that = ((FareInfoType.FareInfo.PTC) object);
                {
                    String lhsPassengerTypeCode;
                    lhsPassengerTypeCode = this.getPassengerTypeCode();
                    String rhsPassengerTypeCode;
                    rhsPassengerTypeCode = that.getPassengerTypeCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "passengerTypeCode", lhsPassengerTypeCode), LocatorUtils.property(thatLocator, "passengerTypeCode", rhsPassengerTypeCode), lhsPassengerTypeCode, rhsPassengerTypeCode)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String thePassengerTypeCode;
                    thePassengerTypeCode = this.getPassengerTypeCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "passengerTypeCode", thePassengerTypeCode), currentHashCode, thePassengerTypeCode);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof FareInfoType.FareInfo.PTC) {
                    final FareInfoType.FareInfo.PTC copy = ((FareInfoType.FareInfo.PTC) draftCopy);
                    if (this.passengerTypeCode!= null) {
                        String sourcePassengerTypeCode;
                        sourcePassengerTypeCode = this.getPassengerTypeCode();
                        String copyPassengerTypeCode = ((String) strategy.copy(LocatorUtils.property(locator, "passengerTypeCode", sourcePassengerTypeCode), sourcePassengerTypeCode));
                        copy.setPassengerTypeCode(copyPassengerTypeCode);
                    } else {
                        copy.passengerTypeCode = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new FareInfoType.FareInfo.PTC();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength0to8"&gt;
     *       &lt;attribute name="ResBookDesigCode" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaLength1to2" /&gt;
     *       &lt;attribute name="TicketDesignatorCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" /&gt;
     *       &lt;attribute name="AccountCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class FareReference
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String value;
        @XmlAttribute(name = "ResBookDesigCode")
        protected String resBookDesigCode;
        @XmlAttribute(name = "TicketDesignatorCode")
        protected String ticketDesignatorCode;
        @XmlAttribute(name = "AccountCode")
        protected String accountCode;

        /**
         * Used for Character Strings, length 0 to 8
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Gets the value of the resBookDesigCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getResBookDesigCode() {
            return resBookDesigCode;
        }

        /**
         * Sets the value of the resBookDesigCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setResBookDesigCode(String value) {
            this.resBookDesigCode = value;
        }

        /**
         * Gets the value of the ticketDesignatorCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTicketDesignatorCode() {
            return ticketDesignatorCode;
        }

        /**
         * Sets the value of the ticketDesignatorCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTicketDesignatorCode(String value) {
            this.ticketDesignatorCode = value;
        }

        /**
         * Gets the value of the accountCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAccountCode() {
            return accountCode;
        }

        /**
         * Sets the value of the accountCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAccountCode(String value) {
            this.accountCode = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theValue;
                theValue = this.getValue();
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                String theResBookDesigCode;
                theResBookDesigCode = this.getResBookDesigCode();
                strategy.appendField(locator, this, "resBookDesigCode", buffer, theResBookDesigCode);
            }
            {
                String theTicketDesignatorCode;
                theTicketDesignatorCode = this.getTicketDesignatorCode();
                strategy.appendField(locator, this, "ticketDesignatorCode", buffer, theTicketDesignatorCode);
            }
            {
                String theAccountCode;
                theAccountCode = this.getAccountCode();
                strategy.appendField(locator, this, "accountCode", buffer, theAccountCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareInfoType.FareReference)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final FareInfoType.FareReference that = ((FareInfoType.FareReference) object);
            {
                String lhsValue;
                lhsValue = this.getValue();
                String rhsValue;
                rhsValue = that.getValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                String lhsResBookDesigCode;
                lhsResBookDesigCode = this.getResBookDesigCode();
                String rhsResBookDesigCode;
                rhsResBookDesigCode = that.getResBookDesigCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resBookDesigCode", lhsResBookDesigCode), LocatorUtils.property(thatLocator, "resBookDesigCode", rhsResBookDesigCode), lhsResBookDesigCode, rhsResBookDesigCode)) {
                    return false;
                }
            }
            {
                String lhsTicketDesignatorCode;
                lhsTicketDesignatorCode = this.getTicketDesignatorCode();
                String rhsTicketDesignatorCode;
                rhsTicketDesignatorCode = that.getTicketDesignatorCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDesignatorCode", lhsTicketDesignatorCode), LocatorUtils.property(thatLocator, "ticketDesignatorCode", rhsTicketDesignatorCode), lhsTicketDesignatorCode, rhsTicketDesignatorCode)) {
                    return false;
                }
            }
            {
                String lhsAccountCode;
                lhsAccountCode = this.getAccountCode();
                String rhsAccountCode;
                rhsAccountCode = that.getAccountCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "accountCode", lhsAccountCode), LocatorUtils.property(thatLocator, "accountCode", rhsAccountCode), lhsAccountCode, rhsAccountCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theValue;
                theValue = this.getValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                String theResBookDesigCode;
                theResBookDesigCode = this.getResBookDesigCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resBookDesigCode", theResBookDesigCode), currentHashCode, theResBookDesigCode);
            }
            {
                String theTicketDesignatorCode;
                theTicketDesignatorCode = this.getTicketDesignatorCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDesignatorCode", theTicketDesignatorCode), currentHashCode, theTicketDesignatorCode);
            }
            {
                String theAccountCode;
                theAccountCode = this.getAccountCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accountCode", theAccountCode), currentHashCode, theAccountCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof FareInfoType.FareReference) {
                final FareInfoType.FareReference copy = ((FareInfoType.FareReference) draftCopy);
                if (this.value!= null) {
                    String sourceValue;
                    sourceValue = this.getValue();
                    String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.setValue(copyValue);
                } else {
                    copy.value = null;
                }
                if (this.resBookDesigCode!= null) {
                    String sourceResBookDesigCode;
                    sourceResBookDesigCode = this.getResBookDesigCode();
                    String copyResBookDesigCode = ((String) strategy.copy(LocatorUtils.property(locator, "resBookDesigCode", sourceResBookDesigCode), sourceResBookDesigCode));
                    copy.setResBookDesigCode(copyResBookDesigCode);
                } else {
                    copy.resBookDesigCode = null;
                }
                if (this.ticketDesignatorCode!= null) {
                    String sourceTicketDesignatorCode;
                    sourceTicketDesignatorCode = this.getTicketDesignatorCode();
                    String copyTicketDesignatorCode = ((String) strategy.copy(LocatorUtils.property(locator, "ticketDesignatorCode", sourceTicketDesignatorCode), sourceTicketDesignatorCode));
                    copy.setTicketDesignatorCode(copyTicketDesignatorCode);
                } else {
                    copy.ticketDesignatorCode = null;
                }
                if (this.accountCode!= null) {
                    String sourceAccountCode;
                    sourceAccountCode = this.getAccountCode();
                    String copyAccountCode = ((String) strategy.copy(LocatorUtils.property(locator, "accountCode", sourceAccountCode), sourceAccountCode));
                    copy.setAccountCode(copyAccountCode);
                } else {
                    copy.accountCode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareInfoType.FareReference();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}RuleInfoType"&gt;
     *       &lt;attribute name="TripType" type="{http://www.opentravel.org/OTA/2003/05}AirTripType" /&gt;
     *       &lt;attribute name="MoneySaverInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class RuleInfo
        extends RuleInfoType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "TripType")
        protected AirTripType tripType;
        @XmlAttribute(name = "MoneySaverInd")
        protected Boolean moneySaverInd;

        /**
         * Gets the value of the tripType property.
         * 
         * @return
         *     possible object is
         *     {@link AirTripType }
         *     
         */
        public AirTripType getTripType() {
            return tripType;
        }

        /**
         * Sets the value of the tripType property.
         * 
         * @param value
         *     allowed object is
         *     {@link AirTripType }
         *     
         */
        public void setTripType(AirTripType value) {
            this.tripType = value;
        }

        /**
         * Gets the value of the moneySaverInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isMoneySaverInd() {
            return moneySaverInd;
        }

        /**
         * Sets the value of the moneySaverInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setMoneySaverInd(Boolean value) {
            this.moneySaverInd = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                AirTripType theTripType;
                theTripType = this.getTripType();
                strategy.appendField(locator, this, "tripType", buffer, theTripType);
            }
            {
                Boolean theMoneySaverInd;
                theMoneySaverInd = this.isMoneySaverInd();
                strategy.appendField(locator, this, "moneySaverInd", buffer, theMoneySaverInd);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof FareInfoType.RuleInfo)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final FareInfoType.RuleInfo that = ((FareInfoType.RuleInfo) object);
            {
                AirTripType lhsTripType;
                lhsTripType = this.getTripType();
                AirTripType rhsTripType;
                rhsTripType = that.getTripType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "tripType", lhsTripType), LocatorUtils.property(thatLocator, "tripType", rhsTripType), lhsTripType, rhsTripType)) {
                    return false;
                }
            }
            {
                Boolean lhsMoneySaverInd;
                lhsMoneySaverInd = this.isMoneySaverInd();
                Boolean rhsMoneySaverInd;
                rhsMoneySaverInd = that.isMoneySaverInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "moneySaverInd", lhsMoneySaverInd), LocatorUtils.property(thatLocator, "moneySaverInd", rhsMoneySaverInd), lhsMoneySaverInd, rhsMoneySaverInd)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                AirTripType theTripType;
                theTripType = this.getTripType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tripType", theTripType), currentHashCode, theTripType);
            }
            {
                Boolean theMoneySaverInd;
                theMoneySaverInd = this.isMoneySaverInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "moneySaverInd", theMoneySaverInd), currentHashCode, theMoneySaverInd);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof FareInfoType.RuleInfo) {
                final FareInfoType.RuleInfo copy = ((FareInfoType.RuleInfo) draftCopy);
                if (this.tripType!= null) {
                    AirTripType sourceTripType;
                    sourceTripType = this.getTripType();
                    AirTripType copyTripType = ((AirTripType) strategy.copy(LocatorUtils.property(locator, "tripType", sourceTripType), sourceTripType));
                    copy.setTripType(copyTripType);
                } else {
                    copy.tripType = null;
                }
                if (this.moneySaverInd!= null) {
                    Boolean sourceMoneySaverInd;
                    sourceMoneySaverInd = this.isMoneySaverInd();
                    Boolean copyMoneySaverInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "moneySaverInd", sourceMoneySaverInd), sourceMoneySaverInd));
                    copy.setMoneySaverInd(copyMoneySaverInd);
                } else {
                    copy.moneySaverInd = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new FareInfoType.RuleInfo();
        }

    }

}
