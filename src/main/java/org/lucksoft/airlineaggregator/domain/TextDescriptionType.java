//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Describes a text item.
 * 
 * <p>Java class for TextDescriptionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TextDescriptionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="URL" type="{http://www.w3.org/2001/XMLSchema}anyURI" minOccurs="0"/&gt;
 *         &lt;element name="Description" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FormattedTextTextType"&gt;
 *                 &lt;attribute name="ListItem" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/choice&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}MultimediaDescriptionGroup"/&gt;
 *       &lt;attribute name="Category" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *       &lt;attribute name="Language" type="{http://www.w3.org/2001/XMLSchema}language" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TextDescriptionType", propOrder = {
    "url",
    "description"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.TextItemsType.TextItem.class
})
public class TextDescriptionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "URL")
    @XmlSchemaType(name = "anyURI")
    protected String url;
    @XmlElement(name = "Description")
    protected List<TextDescriptionType.Description> description;
    @XmlAttribute(name = "Category")
    protected String category;
    @XmlAttribute(name = "Language")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String language;
    @XmlAttribute(name = "ContentID")
    protected String contentID;
    @XmlAttribute(name = "Title")
    protected String title;
    @XmlAttribute(name = "Author")
    protected String author;
    @XmlAttribute(name = "CopyrightNotice")
    protected String copyrightNotice;
    @XmlAttribute(name = "CopyrightOwner")
    protected String copyrightOwner;
    @XmlAttribute(name = "CopyrightStart")
    protected String copyrightStart;
    @XmlAttribute(name = "CopyrightEnd")
    protected String copyrightEnd;
    @XmlAttribute(name = "EffectiveStart")
    protected String effectiveStart;
    @XmlAttribute(name = "EffectiveEnd")
    protected String effectiveEnd;
    @XmlAttribute(name = "ApplicableStart")
    protected String applicableStart;
    @XmlAttribute(name = "ApplicableEnd")
    protected String applicableEnd;
    @XmlAttribute(name = "RecordID")
    protected String recordID;
    @XmlAttribute(name = "SourceID")
    protected String sourceID;

    /**
     * Gets the value of the url property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getURL() {
        return url;
    }

    /**
     * Sets the value of the url property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setURL(String value) {
        this.url = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the description property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TextDescriptionType.Description }
     * 
     * 
     */
    public List<TextDescriptionType.Description> getDescription() {
        if (description == null) {
            description = new ArrayList<TextDescriptionType.Description>();
        }
        return this.description;
    }

    /**
     * Gets the value of the category property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCategory() {
        return category;
    }

    /**
     * Sets the value of the category property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCategory(String value) {
        this.category = value;
    }

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLanguage(String value) {
        this.language = value;
    }

    /**
     * Gets the value of the contentID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContentID() {
        return contentID;
    }

    /**
     * Sets the value of the contentID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContentID(String value) {
        this.contentID = value;
    }

    /**
     * Gets the value of the title property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the value of the title property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTitle(String value) {
        this.title = value;
    }

    /**
     * Gets the value of the author property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Sets the value of the author property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAuthor(String value) {
        this.author = value;
    }

    /**
     * Gets the value of the copyrightNotice property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCopyrightNotice() {
        return copyrightNotice;
    }

    /**
     * Sets the value of the copyrightNotice property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCopyrightNotice(String value) {
        this.copyrightNotice = value;
    }

    /**
     * Gets the value of the copyrightOwner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCopyrightOwner() {
        return copyrightOwner;
    }

    /**
     * Sets the value of the copyrightOwner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCopyrightOwner(String value) {
        this.copyrightOwner = value;
    }

    /**
     * Gets the value of the copyrightStart property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCopyrightStart() {
        return copyrightStart;
    }

    /**
     * Sets the value of the copyrightStart property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCopyrightStart(String value) {
        this.copyrightStart = value;
    }

    /**
     * Gets the value of the copyrightEnd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCopyrightEnd() {
        return copyrightEnd;
    }

    /**
     * Sets the value of the copyrightEnd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCopyrightEnd(String value) {
        this.copyrightEnd = value;
    }

    /**
     * Gets the value of the effectiveStart property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEffectiveStart() {
        return effectiveStart;
    }

    /**
     * Sets the value of the effectiveStart property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEffectiveStart(String value) {
        this.effectiveStart = value;
    }

    /**
     * Gets the value of the effectiveEnd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEffectiveEnd() {
        return effectiveEnd;
    }

    /**
     * Sets the value of the effectiveEnd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEffectiveEnd(String value) {
        this.effectiveEnd = value;
    }

    /**
     * Gets the value of the applicableStart property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getApplicableStart() {
        return applicableStart;
    }

    /**
     * Sets the value of the applicableStart property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setApplicableStart(String value) {
        this.applicableStart = value;
    }

    /**
     * Gets the value of the applicableEnd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getApplicableEnd() {
        return applicableEnd;
    }

    /**
     * Sets the value of the applicableEnd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setApplicableEnd(String value) {
        this.applicableEnd = value;
    }

    /**
     * Gets the value of the recordID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRecordID() {
        return recordID;
    }

    /**
     * Sets the value of the recordID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRecordID(String value) {
        this.recordID = value;
    }

    /**
     * Gets the value of the sourceID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSourceID() {
        return sourceID;
    }

    /**
     * Sets the value of the sourceID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSourceID(String value) {
        this.sourceID = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theURL;
            theURL = this.getURL();
            strategy.appendField(locator, this, "url", buffer, theURL);
        }
        {
            List<TextDescriptionType.Description> theDescription;
            theDescription = (((this.description!= null)&&(!this.description.isEmpty()))?this.getDescription():null);
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            String theCategory;
            theCategory = this.getCategory();
            strategy.appendField(locator, this, "category", buffer, theCategory);
        }
        {
            String theLanguage;
            theLanguage = this.getLanguage();
            strategy.appendField(locator, this, "language", buffer, theLanguage);
        }
        {
            String theContentID;
            theContentID = this.getContentID();
            strategy.appendField(locator, this, "contentID", buffer, theContentID);
        }
        {
            String theTitle;
            theTitle = this.getTitle();
            strategy.appendField(locator, this, "title", buffer, theTitle);
        }
        {
            String theAuthor;
            theAuthor = this.getAuthor();
            strategy.appendField(locator, this, "author", buffer, theAuthor);
        }
        {
            String theCopyrightNotice;
            theCopyrightNotice = this.getCopyrightNotice();
            strategy.appendField(locator, this, "copyrightNotice", buffer, theCopyrightNotice);
        }
        {
            String theCopyrightOwner;
            theCopyrightOwner = this.getCopyrightOwner();
            strategy.appendField(locator, this, "copyrightOwner", buffer, theCopyrightOwner);
        }
        {
            String theCopyrightStart;
            theCopyrightStart = this.getCopyrightStart();
            strategy.appendField(locator, this, "copyrightStart", buffer, theCopyrightStart);
        }
        {
            String theCopyrightEnd;
            theCopyrightEnd = this.getCopyrightEnd();
            strategy.appendField(locator, this, "copyrightEnd", buffer, theCopyrightEnd);
        }
        {
            String theEffectiveStart;
            theEffectiveStart = this.getEffectiveStart();
            strategy.appendField(locator, this, "effectiveStart", buffer, theEffectiveStart);
        }
        {
            String theEffectiveEnd;
            theEffectiveEnd = this.getEffectiveEnd();
            strategy.appendField(locator, this, "effectiveEnd", buffer, theEffectiveEnd);
        }
        {
            String theApplicableStart;
            theApplicableStart = this.getApplicableStart();
            strategy.appendField(locator, this, "applicableStart", buffer, theApplicableStart);
        }
        {
            String theApplicableEnd;
            theApplicableEnd = this.getApplicableEnd();
            strategy.appendField(locator, this, "applicableEnd", buffer, theApplicableEnd);
        }
        {
            String theRecordID;
            theRecordID = this.getRecordID();
            strategy.appendField(locator, this, "recordID", buffer, theRecordID);
        }
        {
            String theSourceID;
            theSourceID = this.getSourceID();
            strategy.appendField(locator, this, "sourceID", buffer, theSourceID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TextDescriptionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TextDescriptionType that = ((TextDescriptionType) object);
        {
            String lhsURL;
            lhsURL = this.getURL();
            String rhsURL;
            rhsURL = that.getURL();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "url", lhsURL), LocatorUtils.property(thatLocator, "url", rhsURL), lhsURL, rhsURL)) {
                return false;
            }
        }
        {
            List<TextDescriptionType.Description> lhsDescription;
            lhsDescription = (((this.description!= null)&&(!this.description.isEmpty()))?this.getDescription():null);
            List<TextDescriptionType.Description> rhsDescription;
            rhsDescription = (((that.description!= null)&&(!that.description.isEmpty()))?that.getDescription():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            String lhsCategory;
            lhsCategory = this.getCategory();
            String rhsCategory;
            rhsCategory = that.getCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        {
            String lhsLanguage;
            lhsLanguage = this.getLanguage();
            String rhsLanguage;
            rhsLanguage = that.getLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        {
            String lhsContentID;
            lhsContentID = this.getContentID();
            String rhsContentID;
            rhsContentID = that.getContentID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contentID", lhsContentID), LocatorUtils.property(thatLocator, "contentID", rhsContentID), lhsContentID, rhsContentID)) {
                return false;
            }
        }
        {
            String lhsTitle;
            lhsTitle = this.getTitle();
            String rhsTitle;
            rhsTitle = that.getTitle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "title", lhsTitle), LocatorUtils.property(thatLocator, "title", rhsTitle), lhsTitle, rhsTitle)) {
                return false;
            }
        }
        {
            String lhsAuthor;
            lhsAuthor = this.getAuthor();
            String rhsAuthor;
            rhsAuthor = that.getAuthor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "author", lhsAuthor), LocatorUtils.property(thatLocator, "author", rhsAuthor), lhsAuthor, rhsAuthor)) {
                return false;
            }
        }
        {
            String lhsCopyrightNotice;
            lhsCopyrightNotice = this.getCopyrightNotice();
            String rhsCopyrightNotice;
            rhsCopyrightNotice = that.getCopyrightNotice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "copyrightNotice", lhsCopyrightNotice), LocatorUtils.property(thatLocator, "copyrightNotice", rhsCopyrightNotice), lhsCopyrightNotice, rhsCopyrightNotice)) {
                return false;
            }
        }
        {
            String lhsCopyrightOwner;
            lhsCopyrightOwner = this.getCopyrightOwner();
            String rhsCopyrightOwner;
            rhsCopyrightOwner = that.getCopyrightOwner();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "copyrightOwner", lhsCopyrightOwner), LocatorUtils.property(thatLocator, "copyrightOwner", rhsCopyrightOwner), lhsCopyrightOwner, rhsCopyrightOwner)) {
                return false;
            }
        }
        {
            String lhsCopyrightStart;
            lhsCopyrightStart = this.getCopyrightStart();
            String rhsCopyrightStart;
            rhsCopyrightStart = that.getCopyrightStart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "copyrightStart", lhsCopyrightStart), LocatorUtils.property(thatLocator, "copyrightStart", rhsCopyrightStart), lhsCopyrightStart, rhsCopyrightStart)) {
                return false;
            }
        }
        {
            String lhsCopyrightEnd;
            lhsCopyrightEnd = this.getCopyrightEnd();
            String rhsCopyrightEnd;
            rhsCopyrightEnd = that.getCopyrightEnd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "copyrightEnd", lhsCopyrightEnd), LocatorUtils.property(thatLocator, "copyrightEnd", rhsCopyrightEnd), lhsCopyrightEnd, rhsCopyrightEnd)) {
                return false;
            }
        }
        {
            String lhsEffectiveStart;
            lhsEffectiveStart = this.getEffectiveStart();
            String rhsEffectiveStart;
            rhsEffectiveStart = that.getEffectiveStart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveStart", lhsEffectiveStart), LocatorUtils.property(thatLocator, "effectiveStart", rhsEffectiveStart), lhsEffectiveStart, rhsEffectiveStart)) {
                return false;
            }
        }
        {
            String lhsEffectiveEnd;
            lhsEffectiveEnd = this.getEffectiveEnd();
            String rhsEffectiveEnd;
            rhsEffectiveEnd = that.getEffectiveEnd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveEnd", lhsEffectiveEnd), LocatorUtils.property(thatLocator, "effectiveEnd", rhsEffectiveEnd), lhsEffectiveEnd, rhsEffectiveEnd)) {
                return false;
            }
        }
        {
            String lhsApplicableStart;
            lhsApplicableStart = this.getApplicableStart();
            String rhsApplicableStart;
            rhsApplicableStart = that.getApplicableStart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "applicableStart", lhsApplicableStart), LocatorUtils.property(thatLocator, "applicableStart", rhsApplicableStart), lhsApplicableStart, rhsApplicableStart)) {
                return false;
            }
        }
        {
            String lhsApplicableEnd;
            lhsApplicableEnd = this.getApplicableEnd();
            String rhsApplicableEnd;
            rhsApplicableEnd = that.getApplicableEnd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "applicableEnd", lhsApplicableEnd), LocatorUtils.property(thatLocator, "applicableEnd", rhsApplicableEnd), lhsApplicableEnd, rhsApplicableEnd)) {
                return false;
            }
        }
        {
            String lhsRecordID;
            lhsRecordID = this.getRecordID();
            String rhsRecordID;
            rhsRecordID = that.getRecordID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recordID", lhsRecordID), LocatorUtils.property(thatLocator, "recordID", rhsRecordID), lhsRecordID, rhsRecordID)) {
                return false;
            }
        }
        {
            String lhsSourceID;
            lhsSourceID = this.getSourceID();
            String rhsSourceID;
            rhsSourceID = that.getSourceID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceID", lhsSourceID), LocatorUtils.property(thatLocator, "sourceID", rhsSourceID), lhsSourceID, rhsSourceID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theURL;
            theURL = this.getURL();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "url", theURL), currentHashCode, theURL);
        }
        {
            List<TextDescriptionType.Description> theDescription;
            theDescription = (((this.description!= null)&&(!this.description.isEmpty()))?this.getDescription():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            String theCategory;
            theCategory = this.getCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        {
            String theLanguage;
            theLanguage = this.getLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        {
            String theContentID;
            theContentID = this.getContentID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contentID", theContentID), currentHashCode, theContentID);
        }
        {
            String theTitle;
            theTitle = this.getTitle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "title", theTitle), currentHashCode, theTitle);
        }
        {
            String theAuthor;
            theAuthor = this.getAuthor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "author", theAuthor), currentHashCode, theAuthor);
        }
        {
            String theCopyrightNotice;
            theCopyrightNotice = this.getCopyrightNotice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "copyrightNotice", theCopyrightNotice), currentHashCode, theCopyrightNotice);
        }
        {
            String theCopyrightOwner;
            theCopyrightOwner = this.getCopyrightOwner();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "copyrightOwner", theCopyrightOwner), currentHashCode, theCopyrightOwner);
        }
        {
            String theCopyrightStart;
            theCopyrightStart = this.getCopyrightStart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "copyrightStart", theCopyrightStart), currentHashCode, theCopyrightStart);
        }
        {
            String theCopyrightEnd;
            theCopyrightEnd = this.getCopyrightEnd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "copyrightEnd", theCopyrightEnd), currentHashCode, theCopyrightEnd);
        }
        {
            String theEffectiveStart;
            theEffectiveStart = this.getEffectiveStart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveStart", theEffectiveStart), currentHashCode, theEffectiveStart);
        }
        {
            String theEffectiveEnd;
            theEffectiveEnd = this.getEffectiveEnd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveEnd", theEffectiveEnd), currentHashCode, theEffectiveEnd);
        }
        {
            String theApplicableStart;
            theApplicableStart = this.getApplicableStart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "applicableStart", theApplicableStart), currentHashCode, theApplicableStart);
        }
        {
            String theApplicableEnd;
            theApplicableEnd = this.getApplicableEnd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "applicableEnd", theApplicableEnd), currentHashCode, theApplicableEnd);
        }
        {
            String theRecordID;
            theRecordID = this.getRecordID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recordID", theRecordID), currentHashCode, theRecordID);
        }
        {
            String theSourceID;
            theSourceID = this.getSourceID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceID", theSourceID), currentHashCode, theSourceID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TextDescriptionType) {
            final TextDescriptionType copy = ((TextDescriptionType) draftCopy);
            if (this.url!= null) {
                String sourceURL;
                sourceURL = this.getURL();
                String copyURL = ((String) strategy.copy(LocatorUtils.property(locator, "url", sourceURL), sourceURL));
                copy.setURL(copyURL);
            } else {
                copy.url = null;
            }
            if ((this.description!= null)&&(!this.description.isEmpty())) {
                List<TextDescriptionType.Description> sourceDescription;
                sourceDescription = (((this.description!= null)&&(!this.description.isEmpty()))?this.getDescription():null);
                @SuppressWarnings("unchecked")
                List<TextDescriptionType.Description> copyDescription = ((List<TextDescriptionType.Description> ) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.description = null;
                if (copyDescription!= null) {
                    List<TextDescriptionType.Description> uniqueDescriptionl = copy.getDescription();
                    uniqueDescriptionl.addAll(copyDescription);
                }
            } else {
                copy.description = null;
            }
            if (this.category!= null) {
                String sourceCategory;
                sourceCategory = this.getCategory();
                String copyCategory = ((String) strategy.copy(LocatorUtils.property(locator, "category", sourceCategory), sourceCategory));
                copy.setCategory(copyCategory);
            } else {
                copy.category = null;
            }
            if (this.language!= null) {
                String sourceLanguage;
                sourceLanguage = this.getLanguage();
                String copyLanguage = ((String) strategy.copy(LocatorUtils.property(locator, "language", sourceLanguage), sourceLanguage));
                copy.setLanguage(copyLanguage);
            } else {
                copy.language = null;
            }
            if (this.contentID!= null) {
                String sourceContentID;
                sourceContentID = this.getContentID();
                String copyContentID = ((String) strategy.copy(LocatorUtils.property(locator, "contentID", sourceContentID), sourceContentID));
                copy.setContentID(copyContentID);
            } else {
                copy.contentID = null;
            }
            if (this.title!= null) {
                String sourceTitle;
                sourceTitle = this.getTitle();
                String copyTitle = ((String) strategy.copy(LocatorUtils.property(locator, "title", sourceTitle), sourceTitle));
                copy.setTitle(copyTitle);
            } else {
                copy.title = null;
            }
            if (this.author!= null) {
                String sourceAuthor;
                sourceAuthor = this.getAuthor();
                String copyAuthor = ((String) strategy.copy(LocatorUtils.property(locator, "author", sourceAuthor), sourceAuthor));
                copy.setAuthor(copyAuthor);
            } else {
                copy.author = null;
            }
            if (this.copyrightNotice!= null) {
                String sourceCopyrightNotice;
                sourceCopyrightNotice = this.getCopyrightNotice();
                String copyCopyrightNotice = ((String) strategy.copy(LocatorUtils.property(locator, "copyrightNotice", sourceCopyrightNotice), sourceCopyrightNotice));
                copy.setCopyrightNotice(copyCopyrightNotice);
            } else {
                copy.copyrightNotice = null;
            }
            if (this.copyrightOwner!= null) {
                String sourceCopyrightOwner;
                sourceCopyrightOwner = this.getCopyrightOwner();
                String copyCopyrightOwner = ((String) strategy.copy(LocatorUtils.property(locator, "copyrightOwner", sourceCopyrightOwner), sourceCopyrightOwner));
                copy.setCopyrightOwner(copyCopyrightOwner);
            } else {
                copy.copyrightOwner = null;
            }
            if (this.copyrightStart!= null) {
                String sourceCopyrightStart;
                sourceCopyrightStart = this.getCopyrightStart();
                String copyCopyrightStart = ((String) strategy.copy(LocatorUtils.property(locator, "copyrightStart", sourceCopyrightStart), sourceCopyrightStart));
                copy.setCopyrightStart(copyCopyrightStart);
            } else {
                copy.copyrightStart = null;
            }
            if (this.copyrightEnd!= null) {
                String sourceCopyrightEnd;
                sourceCopyrightEnd = this.getCopyrightEnd();
                String copyCopyrightEnd = ((String) strategy.copy(LocatorUtils.property(locator, "copyrightEnd", sourceCopyrightEnd), sourceCopyrightEnd));
                copy.setCopyrightEnd(copyCopyrightEnd);
            } else {
                copy.copyrightEnd = null;
            }
            if (this.effectiveStart!= null) {
                String sourceEffectiveStart;
                sourceEffectiveStart = this.getEffectiveStart();
                String copyEffectiveStart = ((String) strategy.copy(LocatorUtils.property(locator, "effectiveStart", sourceEffectiveStart), sourceEffectiveStart));
                copy.setEffectiveStart(copyEffectiveStart);
            } else {
                copy.effectiveStart = null;
            }
            if (this.effectiveEnd!= null) {
                String sourceEffectiveEnd;
                sourceEffectiveEnd = this.getEffectiveEnd();
                String copyEffectiveEnd = ((String) strategy.copy(LocatorUtils.property(locator, "effectiveEnd", sourceEffectiveEnd), sourceEffectiveEnd));
                copy.setEffectiveEnd(copyEffectiveEnd);
            } else {
                copy.effectiveEnd = null;
            }
            if (this.applicableStart!= null) {
                String sourceApplicableStart;
                sourceApplicableStart = this.getApplicableStart();
                String copyApplicableStart = ((String) strategy.copy(LocatorUtils.property(locator, "applicableStart", sourceApplicableStart), sourceApplicableStart));
                copy.setApplicableStart(copyApplicableStart);
            } else {
                copy.applicableStart = null;
            }
            if (this.applicableEnd!= null) {
                String sourceApplicableEnd;
                sourceApplicableEnd = this.getApplicableEnd();
                String copyApplicableEnd = ((String) strategy.copy(LocatorUtils.property(locator, "applicableEnd", sourceApplicableEnd), sourceApplicableEnd));
                copy.setApplicableEnd(copyApplicableEnd);
            } else {
                copy.applicableEnd = null;
            }
            if (this.recordID!= null) {
                String sourceRecordID;
                sourceRecordID = this.getRecordID();
                String copyRecordID = ((String) strategy.copy(LocatorUtils.property(locator, "recordID", sourceRecordID), sourceRecordID));
                copy.setRecordID(copyRecordID);
            } else {
                copy.recordID = null;
            }
            if (this.sourceID!= null) {
                String sourceSourceID;
                sourceSourceID = this.getSourceID();
                String copySourceID = ((String) strategy.copy(LocatorUtils.property(locator, "sourceID", sourceSourceID), sourceSourceID));
                copy.setSourceID(copySourceID);
            } else {
                copy.sourceID = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TextDescriptionType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FormattedTextTextType"&gt;
     *       &lt;attribute name="ListItem" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Description
        extends FormattedTextTextType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "ListItem")
        protected BigInteger listItem;

        /**
         * Gets the value of the listItem property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getListItem() {
            return listItem;
        }

        /**
         * Sets the value of the listItem property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setListItem(BigInteger value) {
            this.listItem = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                BigInteger theListItem;
                theListItem = this.getListItem();
                strategy.appendField(locator, this, "listItem", buffer, theListItem);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof TextDescriptionType.Description)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final TextDescriptionType.Description that = ((TextDescriptionType.Description) object);
            {
                BigInteger lhsListItem;
                lhsListItem = this.getListItem();
                BigInteger rhsListItem;
                rhsListItem = that.getListItem();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "listItem", lhsListItem), LocatorUtils.property(thatLocator, "listItem", rhsListItem), lhsListItem, rhsListItem)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                BigInteger theListItem;
                theListItem = this.getListItem();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "listItem", theListItem), currentHashCode, theListItem);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof TextDescriptionType.Description) {
                final TextDescriptionType.Description copy = ((TextDescriptionType.Description) draftCopy);
                if (this.listItem!= null) {
                    BigInteger sourceListItem;
                    sourceListItem = this.getListItem();
                    BigInteger copyListItem = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "listItem", sourceListItem), sourceListItem));
                    copy.setListItem(copyListItem);
                } else {
                    copy.listItem = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new TextDescriptionType.Description();
        }

    }

}
