//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Provides address information.
 * 
 * <p>Java class for AddressType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AddressType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="StreetNmbr" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StreetNmbrType"&gt;
 *                 &lt;attribute name="StreetNmbrSuffix" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *                 &lt;attribute name="StreetDirection" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
 *                 &lt;attribute name="RuralRouteNmbr" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to5" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="BldgRoom" maxOccurs="2" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength0to64"&gt;
 *                 &lt;attribute name="BldgNameIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="AddressLine" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to255" maxOccurs="5" minOccurs="0"/&gt;
 *         &lt;element name="CityName" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" minOccurs="0"/&gt;
 *         &lt;element name="PostalCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" minOccurs="0"/&gt;
 *         &lt;element name="County" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" minOccurs="0"/&gt;
 *         &lt;element name="StateProv" type="{http://www.opentravel.org/OTA/2003/05}StateProvType" minOccurs="0"/&gt;
 *         &lt;element name="CountryName" type="{http://www.opentravel.org/OTA/2003/05}CountryNameType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PrivacyGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}FormattedInd"/&gt;
 *       &lt;attribute name="Type" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AddressType", propOrder = {
    "streetNmbr",
    "bldgRoom",
    "addressLine",
    "cityName",
    "postalCode",
    "county",
    "stateProv",
    "countryName"
})
@XmlSeeAlso({
    AddressInfoType.class,
    org.lucksoft.airlineaggregator.domain.ItemSearchCriterionType.Address.class,
    org.lucksoft.airlineaggregator.domain.AirTravelerType.Address.class
})
public class AddressType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "StreetNmbr")
    protected AddressType.StreetNmbr streetNmbr;
    @XmlElement(name = "BldgRoom")
    protected List<AddressType.BldgRoom> bldgRoom;
    @XmlElement(name = "AddressLine")
    protected List<String> addressLine;
    @XmlElement(name = "CityName")
    protected String cityName;
    @XmlElement(name = "PostalCode")
    protected String postalCode;
    @XmlElement(name = "County")
    protected String county;
    @XmlElement(name = "StateProv")
    protected StateProvType stateProv;
    @XmlElement(name = "CountryName")
    protected CountryNameType countryName;
    @XmlAttribute(name = "Type")
    protected String type;
    @XmlAttribute(name = "ShareSynchInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareSynchInd;
    @XmlAttribute(name = "ShareMarketInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareMarketInd;
    @XmlAttribute(name = "FormattedInd")
    protected Boolean formattedInd;

    /**
     * Gets the value of the streetNmbr property.
     * 
     * @return
     *     possible object is
     *     {@link AddressType.StreetNmbr }
     *     
     */
    public AddressType.StreetNmbr getStreetNmbr() {
        return streetNmbr;
    }

    /**
     * Sets the value of the streetNmbr property.
     * 
     * @param value
     *     allowed object is
     *     {@link AddressType.StreetNmbr }
     *     
     */
    public void setStreetNmbr(AddressType.StreetNmbr value) {
        this.streetNmbr = value;
    }

    /**
     * Gets the value of the bldgRoom property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the bldgRoom property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBldgRoom().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AddressType.BldgRoom }
     * 
     * 
     */
    public List<AddressType.BldgRoom> getBldgRoom() {
        if (bldgRoom == null) {
            bldgRoom = new ArrayList<AddressType.BldgRoom>();
        }
        return this.bldgRoom;
    }

    /**
     * Gets the value of the addressLine property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addressLine property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddressLine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getAddressLine() {
        if (addressLine == null) {
            addressLine = new ArrayList<String>();
        }
        return this.addressLine;
    }

    /**
     * Gets the value of the cityName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCityName() {
        return cityName;
    }

    /**
     * Sets the value of the cityName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCityName(String value) {
        this.cityName = value;
    }

    /**
     * Gets the value of the postalCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the value of the postalCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPostalCode(String value) {
        this.postalCode = value;
    }

    /**
     * Gets the value of the county property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCounty() {
        return county;
    }

    /**
     * Sets the value of the county property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCounty(String value) {
        this.county = value;
    }

    /**
     * Gets the value of the stateProv property.
     * 
     * @return
     *     possible object is
     *     {@link StateProvType }
     *     
     */
    public StateProvType getStateProv() {
        return stateProv;
    }

    /**
     * Sets the value of the stateProv property.
     * 
     * @param value
     *     allowed object is
     *     {@link StateProvType }
     *     
     */
    public void setStateProv(StateProvType value) {
        this.stateProv = value;
    }

    /**
     * Gets the value of the countryName property.
     * 
     * @return
     *     possible object is
     *     {@link CountryNameType }
     *     
     */
    public CountryNameType getCountryName() {
        return countryName;
    }

    /**
     * Sets the value of the countryName property.
     * 
     * @param value
     *     allowed object is
     *     {@link CountryNameType }
     *     
     */
    public void setCountryName(CountryNameType value) {
        this.countryName = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the shareSynchInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareSynchInd() {
        return shareSynchInd;
    }

    /**
     * Sets the value of the shareSynchInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareSynchInd(String value) {
        this.shareSynchInd = value;
    }

    /**
     * Gets the value of the shareMarketInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareMarketInd() {
        return shareMarketInd;
    }

    /**
     * Sets the value of the shareMarketInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareMarketInd(String value) {
        this.shareMarketInd = value;
    }

    /**
     * Gets the value of the formattedInd property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isFormattedInd() {
        if (formattedInd == null) {
            return false;
        } else {
            return formattedInd;
        }
    }

    /**
     * Sets the value of the formattedInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setFormattedInd(Boolean value) {
        this.formattedInd = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AddressType.StreetNmbr theStreetNmbr;
            theStreetNmbr = this.getStreetNmbr();
            strategy.appendField(locator, this, "streetNmbr", buffer, theStreetNmbr);
        }
        {
            List<AddressType.BldgRoom> theBldgRoom;
            theBldgRoom = (((this.bldgRoom!= null)&&(!this.bldgRoom.isEmpty()))?this.getBldgRoom():null);
            strategy.appendField(locator, this, "bldgRoom", buffer, theBldgRoom);
        }
        {
            List<String> theAddressLine;
            theAddressLine = (((this.addressLine!= null)&&(!this.addressLine.isEmpty()))?this.getAddressLine():null);
            strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
        }
        {
            String theCityName;
            theCityName = this.getCityName();
            strategy.appendField(locator, this, "cityName", buffer, theCityName);
        }
        {
            String thePostalCode;
            thePostalCode = this.getPostalCode();
            strategy.appendField(locator, this, "postalCode", buffer, thePostalCode);
        }
        {
            String theCounty;
            theCounty = this.getCounty();
            strategy.appendField(locator, this, "county", buffer, theCounty);
        }
        {
            StateProvType theStateProv;
            theStateProv = this.getStateProv();
            strategy.appendField(locator, this, "stateProv", buffer, theStateProv);
        }
        {
            CountryNameType theCountryName;
            theCountryName = this.getCountryName();
            strategy.appendField(locator, this, "countryName", buffer, theCountryName);
        }
        {
            String theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
        }
        {
            boolean theFormattedInd;
            theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
            strategy.appendField(locator, this, "formattedInd", buffer, theFormattedInd);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AddressType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AddressType that = ((AddressType) object);
        {
            AddressType.StreetNmbr lhsStreetNmbr;
            lhsStreetNmbr = this.getStreetNmbr();
            AddressType.StreetNmbr rhsStreetNmbr;
            rhsStreetNmbr = that.getStreetNmbr();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "streetNmbr", lhsStreetNmbr), LocatorUtils.property(thatLocator, "streetNmbr", rhsStreetNmbr), lhsStreetNmbr, rhsStreetNmbr)) {
                return false;
            }
        }
        {
            List<AddressType.BldgRoom> lhsBldgRoom;
            lhsBldgRoom = (((this.bldgRoom!= null)&&(!this.bldgRoom.isEmpty()))?this.getBldgRoom():null);
            List<AddressType.BldgRoom> rhsBldgRoom;
            rhsBldgRoom = (((that.bldgRoom!= null)&&(!that.bldgRoom.isEmpty()))?that.getBldgRoom():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bldgRoom", lhsBldgRoom), LocatorUtils.property(thatLocator, "bldgRoom", rhsBldgRoom), lhsBldgRoom, rhsBldgRoom)) {
                return false;
            }
        }
        {
            List<String> lhsAddressLine;
            lhsAddressLine = (((this.addressLine!= null)&&(!this.addressLine.isEmpty()))?this.getAddressLine():null);
            List<String> rhsAddressLine;
            rhsAddressLine = (((that.addressLine!= null)&&(!that.addressLine.isEmpty()))?that.getAddressLine():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                return false;
            }
        }
        {
            String lhsCityName;
            lhsCityName = this.getCityName();
            String rhsCityName;
            rhsCityName = that.getCityName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cityName", lhsCityName), LocatorUtils.property(thatLocator, "cityName", rhsCityName), lhsCityName, rhsCityName)) {
                return false;
            }
        }
        {
            String lhsPostalCode;
            lhsPostalCode = this.getPostalCode();
            String rhsPostalCode;
            rhsPostalCode = that.getPostalCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postalCode", lhsPostalCode), LocatorUtils.property(thatLocator, "postalCode", rhsPostalCode), lhsPostalCode, rhsPostalCode)) {
                return false;
            }
        }
        {
            String lhsCounty;
            lhsCounty = this.getCounty();
            String rhsCounty;
            rhsCounty = that.getCounty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "county", lhsCounty), LocatorUtils.property(thatLocator, "county", rhsCounty), lhsCounty, rhsCounty)) {
                return false;
            }
        }
        {
            StateProvType lhsStateProv;
            lhsStateProv = this.getStateProv();
            StateProvType rhsStateProv;
            rhsStateProv = that.getStateProv();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stateProv", lhsStateProv), LocatorUtils.property(thatLocator, "stateProv", rhsStateProv), lhsStateProv, rhsStateProv)) {
                return false;
            }
        }
        {
            CountryNameType lhsCountryName;
            lhsCountryName = this.getCountryName();
            CountryNameType rhsCountryName;
            rhsCountryName = that.getCountryName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "countryName", lhsCountryName), LocatorUtils.property(thatLocator, "countryName", rhsCountryName), lhsCountryName, rhsCountryName)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            String lhsShareSynchInd;
            lhsShareSynchInd = this.getShareSynchInd();
            String rhsShareSynchInd;
            rhsShareSynchInd = that.getShareSynchInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                return false;
            }
        }
        {
            String lhsShareMarketInd;
            lhsShareMarketInd = this.getShareMarketInd();
            String rhsShareMarketInd;
            rhsShareMarketInd = that.getShareMarketInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                return false;
            }
        }
        {
            boolean lhsFormattedInd;
            lhsFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
            boolean rhsFormattedInd;
            rhsFormattedInd = ((that.formattedInd!= null)?that.isFormattedInd():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "formattedInd", lhsFormattedInd), LocatorUtils.property(thatLocator, "formattedInd", rhsFormattedInd), lhsFormattedInd, rhsFormattedInd)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AddressType.StreetNmbr theStreetNmbr;
            theStreetNmbr = this.getStreetNmbr();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "streetNmbr", theStreetNmbr), currentHashCode, theStreetNmbr);
        }
        {
            List<AddressType.BldgRoom> theBldgRoom;
            theBldgRoom = (((this.bldgRoom!= null)&&(!this.bldgRoom.isEmpty()))?this.getBldgRoom():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bldgRoom", theBldgRoom), currentHashCode, theBldgRoom);
        }
        {
            List<String> theAddressLine;
            theAddressLine = (((this.addressLine!= null)&&(!this.addressLine.isEmpty()))?this.getAddressLine():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
        }
        {
            String theCityName;
            theCityName = this.getCityName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cityName", theCityName), currentHashCode, theCityName);
        }
        {
            String thePostalCode;
            thePostalCode = this.getPostalCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalCode", thePostalCode), currentHashCode, thePostalCode);
        }
        {
            String theCounty;
            theCounty = this.getCounty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "county", theCounty), currentHashCode, theCounty);
        }
        {
            StateProvType theStateProv;
            theStateProv = this.getStateProv();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stateProv", theStateProv), currentHashCode, theStateProv);
        }
        {
            CountryNameType theCountryName;
            theCountryName = this.getCountryName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "countryName", theCountryName), currentHashCode, theCountryName);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
        }
        {
            boolean theFormattedInd;
            theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formattedInd", theFormattedInd), currentHashCode, theFormattedInd);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AddressType) {
            final AddressType copy = ((AddressType) draftCopy);
            if (this.streetNmbr!= null) {
                AddressType.StreetNmbr sourceStreetNmbr;
                sourceStreetNmbr = this.getStreetNmbr();
                AddressType.StreetNmbr copyStreetNmbr = ((AddressType.StreetNmbr) strategy.copy(LocatorUtils.property(locator, "streetNmbr", sourceStreetNmbr), sourceStreetNmbr));
                copy.setStreetNmbr(copyStreetNmbr);
            } else {
                copy.streetNmbr = null;
            }
            if ((this.bldgRoom!= null)&&(!this.bldgRoom.isEmpty())) {
                List<AddressType.BldgRoom> sourceBldgRoom;
                sourceBldgRoom = (((this.bldgRoom!= null)&&(!this.bldgRoom.isEmpty()))?this.getBldgRoom():null);
                @SuppressWarnings("unchecked")
                List<AddressType.BldgRoom> copyBldgRoom = ((List<AddressType.BldgRoom> ) strategy.copy(LocatorUtils.property(locator, "bldgRoom", sourceBldgRoom), sourceBldgRoom));
                copy.bldgRoom = null;
                if (copyBldgRoom!= null) {
                    List<AddressType.BldgRoom> uniqueBldgRooml = copy.getBldgRoom();
                    uniqueBldgRooml.addAll(copyBldgRoom);
                }
            } else {
                copy.bldgRoom = null;
            }
            if ((this.addressLine!= null)&&(!this.addressLine.isEmpty())) {
                List<String> sourceAddressLine;
                sourceAddressLine = (((this.addressLine!= null)&&(!this.addressLine.isEmpty()))?this.getAddressLine():null);
                @SuppressWarnings("unchecked")
                List<String> copyAddressLine = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                copy.addressLine = null;
                if (copyAddressLine!= null) {
                    List<String> uniqueAddressLinel = copy.getAddressLine();
                    uniqueAddressLinel.addAll(copyAddressLine);
                }
            } else {
                copy.addressLine = null;
            }
            if (this.cityName!= null) {
                String sourceCityName;
                sourceCityName = this.getCityName();
                String copyCityName = ((String) strategy.copy(LocatorUtils.property(locator, "cityName", sourceCityName), sourceCityName));
                copy.setCityName(copyCityName);
            } else {
                copy.cityName = null;
            }
            if (this.postalCode!= null) {
                String sourcePostalCode;
                sourcePostalCode = this.getPostalCode();
                String copyPostalCode = ((String) strategy.copy(LocatorUtils.property(locator, "postalCode", sourcePostalCode), sourcePostalCode));
                copy.setPostalCode(copyPostalCode);
            } else {
                copy.postalCode = null;
            }
            if (this.county!= null) {
                String sourceCounty;
                sourceCounty = this.getCounty();
                String copyCounty = ((String) strategy.copy(LocatorUtils.property(locator, "county", sourceCounty), sourceCounty));
                copy.setCounty(copyCounty);
            } else {
                copy.county = null;
            }
            if (this.stateProv!= null) {
                StateProvType sourceStateProv;
                sourceStateProv = this.getStateProv();
                StateProvType copyStateProv = ((StateProvType) strategy.copy(LocatorUtils.property(locator, "stateProv", sourceStateProv), sourceStateProv));
                copy.setStateProv(copyStateProv);
            } else {
                copy.stateProv = null;
            }
            if (this.countryName!= null) {
                CountryNameType sourceCountryName;
                sourceCountryName = this.getCountryName();
                CountryNameType copyCountryName = ((CountryNameType) strategy.copy(LocatorUtils.property(locator, "countryName", sourceCountryName), sourceCountryName));
                copy.setCountryName(copyCountryName);
            } else {
                copy.countryName = null;
            }
            if (this.type!= null) {
                String sourceType;
                sourceType = this.getType();
                String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
            if (this.shareSynchInd!= null) {
                String sourceShareSynchInd;
                sourceShareSynchInd = this.getShareSynchInd();
                String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                copy.setShareSynchInd(copyShareSynchInd);
            } else {
                copy.shareSynchInd = null;
            }
            if (this.shareMarketInd!= null) {
                String sourceShareMarketInd;
                sourceShareMarketInd = this.getShareMarketInd();
                String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                copy.setShareMarketInd(copyShareMarketInd);
            } else {
                copy.shareMarketInd = null;
            }
            if (this.formattedInd!= null) {
                boolean sourceFormattedInd;
                sourceFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                boolean copyFormattedInd = strategy.copy(LocatorUtils.property(locator, "formattedInd", sourceFormattedInd), sourceFormattedInd);
                copy.setFormattedInd(copyFormattedInd);
            } else {
                copy.formattedInd = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AddressType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength0to64"&gt;
     *       &lt;attribute name="BldgNameIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class BldgRoom
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String value;
        @XmlAttribute(name = "BldgNameIndicator")
        protected Boolean bldgNameIndicator;

        /**
         * Used for Character Strings, length 0 to 64
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Gets the value of the bldgNameIndicator property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isBldgNameIndicator() {
            return bldgNameIndicator;
        }

        /**
         * Sets the value of the bldgNameIndicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setBldgNameIndicator(Boolean value) {
            this.bldgNameIndicator = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theValue;
                theValue = this.getValue();
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                Boolean theBldgNameIndicator;
                theBldgNameIndicator = this.isBldgNameIndicator();
                strategy.appendField(locator, this, "bldgNameIndicator", buffer, theBldgNameIndicator);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AddressType.BldgRoom)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AddressType.BldgRoom that = ((AddressType.BldgRoom) object);
            {
                String lhsValue;
                lhsValue = this.getValue();
                String rhsValue;
                rhsValue = that.getValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                Boolean lhsBldgNameIndicator;
                lhsBldgNameIndicator = this.isBldgNameIndicator();
                Boolean rhsBldgNameIndicator;
                rhsBldgNameIndicator = that.isBldgNameIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "bldgNameIndicator", lhsBldgNameIndicator), LocatorUtils.property(thatLocator, "bldgNameIndicator", rhsBldgNameIndicator), lhsBldgNameIndicator, rhsBldgNameIndicator)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theValue;
                theValue = this.getValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                Boolean theBldgNameIndicator;
                theBldgNameIndicator = this.isBldgNameIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bldgNameIndicator", theBldgNameIndicator), currentHashCode, theBldgNameIndicator);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AddressType.BldgRoom) {
                final AddressType.BldgRoom copy = ((AddressType.BldgRoom) draftCopy);
                if (this.value!= null) {
                    String sourceValue;
                    sourceValue = this.getValue();
                    String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.setValue(copyValue);
                } else {
                    copy.value = null;
                }
                if (this.bldgNameIndicator!= null) {
                    Boolean sourceBldgNameIndicator;
                    sourceBldgNameIndicator = this.isBldgNameIndicator();
                    Boolean copyBldgNameIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "bldgNameIndicator", sourceBldgNameIndicator), sourceBldgNameIndicator));
                    copy.setBldgNameIndicator(copyBldgNameIndicator);
                } else {
                    copy.bldgNameIndicator = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AddressType.BldgRoom();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StreetNmbrType"&gt;
     *       &lt;attribute name="StreetNmbrSuffix" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *       &lt;attribute name="StreetDirection" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to8" /&gt;
     *       &lt;attribute name="RuralRouteNmbr" type="{http://www.opentravel.org/OTA/2003/05}NumericStringLength1to5" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class StreetNmbr
        extends StreetNmbrType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "StreetNmbrSuffix")
        protected String streetNmbrSuffix;
        @XmlAttribute(name = "StreetDirection")
        protected String streetDirection;
        @XmlAttribute(name = "RuralRouteNmbr")
        protected String ruralRouteNmbr;

        /**
         * Gets the value of the streetNmbrSuffix property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getStreetNmbrSuffix() {
            return streetNmbrSuffix;
        }

        /**
         * Sets the value of the streetNmbrSuffix property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setStreetNmbrSuffix(String value) {
            this.streetNmbrSuffix = value;
        }

        /**
         * Gets the value of the streetDirection property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getStreetDirection() {
            return streetDirection;
        }

        /**
         * Sets the value of the streetDirection property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setStreetDirection(String value) {
            this.streetDirection = value;
        }

        /**
         * Gets the value of the ruralRouteNmbr property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRuralRouteNmbr() {
            return ruralRouteNmbr;
        }

        /**
         * Sets the value of the ruralRouteNmbr property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRuralRouteNmbr(String value) {
            this.ruralRouteNmbr = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                String theStreetNmbrSuffix;
                theStreetNmbrSuffix = this.getStreetNmbrSuffix();
                strategy.appendField(locator, this, "streetNmbrSuffix", buffer, theStreetNmbrSuffix);
            }
            {
                String theStreetDirection;
                theStreetDirection = this.getStreetDirection();
                strategy.appendField(locator, this, "streetDirection", buffer, theStreetDirection);
            }
            {
                String theRuralRouteNmbr;
                theRuralRouteNmbr = this.getRuralRouteNmbr();
                strategy.appendField(locator, this, "ruralRouteNmbr", buffer, theRuralRouteNmbr);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AddressType.StreetNmbr)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final AddressType.StreetNmbr that = ((AddressType.StreetNmbr) object);
            {
                String lhsStreetNmbrSuffix;
                lhsStreetNmbrSuffix = this.getStreetNmbrSuffix();
                String rhsStreetNmbrSuffix;
                rhsStreetNmbrSuffix = that.getStreetNmbrSuffix();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "streetNmbrSuffix", lhsStreetNmbrSuffix), LocatorUtils.property(thatLocator, "streetNmbrSuffix", rhsStreetNmbrSuffix), lhsStreetNmbrSuffix, rhsStreetNmbrSuffix)) {
                    return false;
                }
            }
            {
                String lhsStreetDirection;
                lhsStreetDirection = this.getStreetDirection();
                String rhsStreetDirection;
                rhsStreetDirection = that.getStreetDirection();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "streetDirection", lhsStreetDirection), LocatorUtils.property(thatLocator, "streetDirection", rhsStreetDirection), lhsStreetDirection, rhsStreetDirection)) {
                    return false;
                }
            }
            {
                String lhsRuralRouteNmbr;
                lhsRuralRouteNmbr = this.getRuralRouteNmbr();
                String rhsRuralRouteNmbr;
                rhsRuralRouteNmbr = that.getRuralRouteNmbr();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ruralRouteNmbr", lhsRuralRouteNmbr), LocatorUtils.property(thatLocator, "ruralRouteNmbr", rhsRuralRouteNmbr), lhsRuralRouteNmbr, rhsRuralRouteNmbr)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                String theStreetNmbrSuffix;
                theStreetNmbrSuffix = this.getStreetNmbrSuffix();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "streetNmbrSuffix", theStreetNmbrSuffix), currentHashCode, theStreetNmbrSuffix);
            }
            {
                String theStreetDirection;
                theStreetDirection = this.getStreetDirection();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "streetDirection", theStreetDirection), currentHashCode, theStreetDirection);
            }
            {
                String theRuralRouteNmbr;
                theRuralRouteNmbr = this.getRuralRouteNmbr();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ruralRouteNmbr", theRuralRouteNmbr), currentHashCode, theRuralRouteNmbr);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof AddressType.StreetNmbr) {
                final AddressType.StreetNmbr copy = ((AddressType.StreetNmbr) draftCopy);
                if (this.streetNmbrSuffix!= null) {
                    String sourceStreetNmbrSuffix;
                    sourceStreetNmbrSuffix = this.getStreetNmbrSuffix();
                    String copyStreetNmbrSuffix = ((String) strategy.copy(LocatorUtils.property(locator, "streetNmbrSuffix", sourceStreetNmbrSuffix), sourceStreetNmbrSuffix));
                    copy.setStreetNmbrSuffix(copyStreetNmbrSuffix);
                } else {
                    copy.streetNmbrSuffix = null;
                }
                if (this.streetDirection!= null) {
                    String sourceStreetDirection;
                    sourceStreetDirection = this.getStreetDirection();
                    String copyStreetDirection = ((String) strategy.copy(LocatorUtils.property(locator, "streetDirection", sourceStreetDirection), sourceStreetDirection));
                    copy.setStreetDirection(copyStreetDirection);
                } else {
                    copy.streetDirection = null;
                }
                if (this.ruralRouteNmbr!= null) {
                    String sourceRuralRouteNmbr;
                    sourceRuralRouteNmbr = this.getRuralRouteNmbr();
                    String copyRuralRouteNmbr = ((String) strategy.copy(LocatorUtils.property(locator, "ruralRouteNmbr", sourceRuralRouteNmbr), sourceRuralRouteNmbr));
                    copy.setRuralRouteNmbr(copyRuralRouteNmbr);
                } else {
                    copy.ruralRouteNmbr = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AddressType.StreetNmbr();
        }

    }

}
