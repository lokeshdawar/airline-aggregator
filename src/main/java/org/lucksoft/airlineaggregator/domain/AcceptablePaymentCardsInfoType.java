//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * This complex type identifies payment cards that are acceptable for a specific form of payment, along with the ability to provide free text information regarding payment cards.
 * 
 * <p>Java class for AcceptablePaymentCardsInfoType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AcceptablePaymentCardsInfoType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="AcceptablePaymentCards" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="AcceptablePaymentCard" maxOccurs="99"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AcceptablePaymentCardGroup"/&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Info" type="{http://www.opentravel.org/OTA/2003/05}FormattedTextType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AcceptablePaymentCardsInfoType", propOrder = {
    "acceptablePaymentCards",
    "info"
})
public class AcceptablePaymentCardsInfoType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AcceptablePaymentCards")
    protected AcceptablePaymentCardsInfoType.AcceptablePaymentCards acceptablePaymentCards;
    @XmlElement(name = "Info")
    protected FormattedTextType info;

    /**
     * Gets the value of the acceptablePaymentCards property.
     * 
     * @return
     *     possible object is
     *     {@link AcceptablePaymentCardsInfoType.AcceptablePaymentCards }
     *     
     */
    public AcceptablePaymentCardsInfoType.AcceptablePaymentCards getAcceptablePaymentCards() {
        return acceptablePaymentCards;
    }

    /**
     * Sets the value of the acceptablePaymentCards property.
     * 
     * @param value
     *     allowed object is
     *     {@link AcceptablePaymentCardsInfoType.AcceptablePaymentCards }
     *     
     */
    public void setAcceptablePaymentCards(AcceptablePaymentCardsInfoType.AcceptablePaymentCards value) {
        this.acceptablePaymentCards = value;
    }

    /**
     * Gets the value of the info property.
     * 
     * @return
     *     possible object is
     *     {@link FormattedTextType }
     *     
     */
    public FormattedTextType getInfo() {
        return info;
    }

    /**
     * Sets the value of the info property.
     * 
     * @param value
     *     allowed object is
     *     {@link FormattedTextType }
     *     
     */
    public void setInfo(FormattedTextType value) {
        this.info = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AcceptablePaymentCardsInfoType.AcceptablePaymentCards theAcceptablePaymentCards;
            theAcceptablePaymentCards = this.getAcceptablePaymentCards();
            strategy.appendField(locator, this, "acceptablePaymentCards", buffer, theAcceptablePaymentCards);
        }
        {
            FormattedTextType theInfo;
            theInfo = this.getInfo();
            strategy.appendField(locator, this, "info", buffer, theInfo);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AcceptablePaymentCardsInfoType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AcceptablePaymentCardsInfoType that = ((AcceptablePaymentCardsInfoType) object);
        {
            AcceptablePaymentCardsInfoType.AcceptablePaymentCards lhsAcceptablePaymentCards;
            lhsAcceptablePaymentCards = this.getAcceptablePaymentCards();
            AcceptablePaymentCardsInfoType.AcceptablePaymentCards rhsAcceptablePaymentCards;
            rhsAcceptablePaymentCards = that.getAcceptablePaymentCards();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "acceptablePaymentCards", lhsAcceptablePaymentCards), LocatorUtils.property(thatLocator, "acceptablePaymentCards", rhsAcceptablePaymentCards), lhsAcceptablePaymentCards, rhsAcceptablePaymentCards)) {
                return false;
            }
        }
        {
            FormattedTextType lhsInfo;
            lhsInfo = this.getInfo();
            FormattedTextType rhsInfo;
            rhsInfo = that.getInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "info", lhsInfo), LocatorUtils.property(thatLocator, "info", rhsInfo), lhsInfo, rhsInfo)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AcceptablePaymentCardsInfoType.AcceptablePaymentCards theAcceptablePaymentCards;
            theAcceptablePaymentCards = this.getAcceptablePaymentCards();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acceptablePaymentCards", theAcceptablePaymentCards), currentHashCode, theAcceptablePaymentCards);
        }
        {
            FormattedTextType theInfo;
            theInfo = this.getInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "info", theInfo), currentHashCode, theInfo);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AcceptablePaymentCardsInfoType) {
            final AcceptablePaymentCardsInfoType copy = ((AcceptablePaymentCardsInfoType) draftCopy);
            if (this.acceptablePaymentCards!= null) {
                AcceptablePaymentCardsInfoType.AcceptablePaymentCards sourceAcceptablePaymentCards;
                sourceAcceptablePaymentCards = this.getAcceptablePaymentCards();
                AcceptablePaymentCardsInfoType.AcceptablePaymentCards copyAcceptablePaymentCards = ((AcceptablePaymentCardsInfoType.AcceptablePaymentCards) strategy.copy(LocatorUtils.property(locator, "acceptablePaymentCards", sourceAcceptablePaymentCards), sourceAcceptablePaymentCards));
                copy.setAcceptablePaymentCards(copyAcceptablePaymentCards);
            } else {
                copy.acceptablePaymentCards = null;
            }
            if (this.info!= null) {
                FormattedTextType sourceInfo;
                sourceInfo = this.getInfo();
                FormattedTextType copyInfo = ((FormattedTextType) strategy.copy(LocatorUtils.property(locator, "info", sourceInfo), sourceInfo));
                copy.setInfo(copyInfo);
            } else {
                copy.info = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AcceptablePaymentCardsInfoType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="AcceptablePaymentCard" maxOccurs="99"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AcceptablePaymentCardGroup"/&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "acceptablePaymentCard"
    })
    public static class AcceptablePaymentCards
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AcceptablePaymentCard", required = true)
        protected List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> acceptablePaymentCard;

        /**
         * Gets the value of the acceptablePaymentCard property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the acceptablePaymentCard property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAcceptablePaymentCard().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard }
         * 
         * 
         */
        public List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> getAcceptablePaymentCard() {
            if (acceptablePaymentCard == null) {
                acceptablePaymentCard = new ArrayList<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard>();
            }
            return this.acceptablePaymentCard;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> theAcceptablePaymentCard;
                theAcceptablePaymentCard = (((this.acceptablePaymentCard!= null)&&(!this.acceptablePaymentCard.isEmpty()))?this.getAcceptablePaymentCard():null);
                strategy.appendField(locator, this, "acceptablePaymentCard", buffer, theAcceptablePaymentCard);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AcceptablePaymentCardsInfoType.AcceptablePaymentCards)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AcceptablePaymentCardsInfoType.AcceptablePaymentCards that = ((AcceptablePaymentCardsInfoType.AcceptablePaymentCards) object);
            {
                List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> lhsAcceptablePaymentCard;
                lhsAcceptablePaymentCard = (((this.acceptablePaymentCard!= null)&&(!this.acceptablePaymentCard.isEmpty()))?this.getAcceptablePaymentCard():null);
                List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> rhsAcceptablePaymentCard;
                rhsAcceptablePaymentCard = (((that.acceptablePaymentCard!= null)&&(!that.acceptablePaymentCard.isEmpty()))?that.getAcceptablePaymentCard():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "acceptablePaymentCard", lhsAcceptablePaymentCard), LocatorUtils.property(thatLocator, "acceptablePaymentCard", rhsAcceptablePaymentCard), lhsAcceptablePaymentCard, rhsAcceptablePaymentCard)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> theAcceptablePaymentCard;
                theAcceptablePaymentCard = (((this.acceptablePaymentCard!= null)&&(!this.acceptablePaymentCard.isEmpty()))?this.getAcceptablePaymentCard():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acceptablePaymentCard", theAcceptablePaymentCard), currentHashCode, theAcceptablePaymentCard);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AcceptablePaymentCardsInfoType.AcceptablePaymentCards) {
                final AcceptablePaymentCardsInfoType.AcceptablePaymentCards copy = ((AcceptablePaymentCardsInfoType.AcceptablePaymentCards) draftCopy);
                if ((this.acceptablePaymentCard!= null)&&(!this.acceptablePaymentCard.isEmpty())) {
                    List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> sourceAcceptablePaymentCard;
                    sourceAcceptablePaymentCard = (((this.acceptablePaymentCard!= null)&&(!this.acceptablePaymentCard.isEmpty()))?this.getAcceptablePaymentCard():null);
                    @SuppressWarnings("unchecked")
                    List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> copyAcceptablePaymentCard = ((List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> ) strategy.copy(LocatorUtils.property(locator, "acceptablePaymentCard", sourceAcceptablePaymentCard), sourceAcceptablePaymentCard));
                    copy.acceptablePaymentCard = null;
                    if (copyAcceptablePaymentCard!= null) {
                        List<AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard> uniqueAcceptablePaymentCardl = copy.getAcceptablePaymentCard();
                        uniqueAcceptablePaymentCardl.addAll(copyAcceptablePaymentCard);
                    }
                } else {
                    copy.acceptablePaymentCard = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AcceptablePaymentCardsInfoType.AcceptablePaymentCards();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AcceptablePaymentCardGroup"/&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class AcceptablePaymentCard
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "CardType")
            protected String cardType;
            @XmlAttribute(name = "CardName")
            protected String cardName;
            @XmlAttribute(name = "UsagePercentage")
            protected BigDecimal usagePercentage;
            @XmlAttribute(name = "UsageAmount")
            protected BigDecimal usageAmount;
            @XmlAttribute(name = "CurrencyCode")
            protected String currencyCode;
            @XmlAttribute(name = "DecimalPlaces")
            @XmlSchemaType(name = "nonNegativeInteger")
            protected BigInteger decimalPlaces;

            /**
             * Gets the value of the cardType property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCardType() {
                return cardType;
            }

            /**
             * Sets the value of the cardType property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCardType(String value) {
                this.cardType = value;
            }

            /**
             * Gets the value of the cardName property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCardName() {
                return cardName;
            }

            /**
             * Sets the value of the cardName property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCardName(String value) {
                this.cardName = value;
            }

            /**
             * Gets the value of the usagePercentage property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getUsagePercentage() {
                return usagePercentage;
            }

            /**
             * Sets the value of the usagePercentage property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setUsagePercentage(BigDecimal value) {
                this.usagePercentage = value;
            }

            /**
             * Gets the value of the usageAmount property.
             * 
             * @return
             *     possible object is
             *     {@link BigDecimal }
             *     
             */
            public BigDecimal getUsageAmount() {
                return usageAmount;
            }

            /**
             * Sets the value of the usageAmount property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigDecimal }
             *     
             */
            public void setUsageAmount(BigDecimal value) {
                this.usageAmount = value;
            }

            /**
             * Gets the value of the currencyCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCurrencyCode() {
                return currencyCode;
            }

            /**
             * Sets the value of the currencyCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCurrencyCode(String value) {
                this.currencyCode = value;
            }

            /**
             * Gets the value of the decimalPlaces property.
             * 
             * @return
             *     possible object is
             *     {@link BigInteger }
             *     
             */
            public BigInteger getDecimalPlaces() {
                return decimalPlaces;
            }

            /**
             * Sets the value of the decimalPlaces property.
             * 
             * @param value
             *     allowed object is
             *     {@link BigInteger }
             *     
             */
            public void setDecimalPlaces(BigInteger value) {
                this.decimalPlaces = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theCardType;
                    theCardType = this.getCardType();
                    strategy.appendField(locator, this, "cardType", buffer, theCardType);
                }
                {
                    String theCardName;
                    theCardName = this.getCardName();
                    strategy.appendField(locator, this, "cardName", buffer, theCardName);
                }
                {
                    BigDecimal theUsagePercentage;
                    theUsagePercentage = this.getUsagePercentage();
                    strategy.appendField(locator, this, "usagePercentage", buffer, theUsagePercentage);
                }
                {
                    BigDecimal theUsageAmount;
                    theUsageAmount = this.getUsageAmount();
                    strategy.appendField(locator, this, "usageAmount", buffer, theUsageAmount);
                }
                {
                    String theCurrencyCode;
                    theCurrencyCode = this.getCurrencyCode();
                    strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
                }
                {
                    BigInteger theDecimalPlaces;
                    theDecimalPlaces = this.getDecimalPlaces();
                    strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard that = ((AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard) object);
                {
                    String lhsCardType;
                    lhsCardType = this.getCardType();
                    String rhsCardType;
                    rhsCardType = that.getCardType();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "cardType", lhsCardType), LocatorUtils.property(thatLocator, "cardType", rhsCardType), lhsCardType, rhsCardType)) {
                        return false;
                    }
                }
                {
                    String lhsCardName;
                    lhsCardName = this.getCardName();
                    String rhsCardName;
                    rhsCardName = that.getCardName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "cardName", lhsCardName), LocatorUtils.property(thatLocator, "cardName", rhsCardName), lhsCardName, rhsCardName)) {
                        return false;
                    }
                }
                {
                    BigDecimal lhsUsagePercentage;
                    lhsUsagePercentage = this.getUsagePercentage();
                    BigDecimal rhsUsagePercentage;
                    rhsUsagePercentage = that.getUsagePercentage();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "usagePercentage", lhsUsagePercentage), LocatorUtils.property(thatLocator, "usagePercentage", rhsUsagePercentage), lhsUsagePercentage, rhsUsagePercentage)) {
                        return false;
                    }
                }
                {
                    BigDecimal lhsUsageAmount;
                    lhsUsageAmount = this.getUsageAmount();
                    BigDecimal rhsUsageAmount;
                    rhsUsageAmount = that.getUsageAmount();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "usageAmount", lhsUsageAmount), LocatorUtils.property(thatLocator, "usageAmount", rhsUsageAmount), lhsUsageAmount, rhsUsageAmount)) {
                        return false;
                    }
                }
                {
                    String lhsCurrencyCode;
                    lhsCurrencyCode = this.getCurrencyCode();
                    String rhsCurrencyCode;
                    rhsCurrencyCode = that.getCurrencyCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                        return false;
                    }
                }
                {
                    BigInteger lhsDecimalPlaces;
                    lhsDecimalPlaces = this.getDecimalPlaces();
                    BigInteger rhsDecimalPlaces;
                    rhsDecimalPlaces = that.getDecimalPlaces();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theCardType;
                    theCardType = this.getCardType();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cardType", theCardType), currentHashCode, theCardType);
                }
                {
                    String theCardName;
                    theCardName = this.getCardName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cardName", theCardName), currentHashCode, theCardName);
                }
                {
                    BigDecimal theUsagePercentage;
                    theUsagePercentage = this.getUsagePercentage();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usagePercentage", theUsagePercentage), currentHashCode, theUsagePercentage);
                }
                {
                    BigDecimal theUsageAmount;
                    theUsageAmount = this.getUsageAmount();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usageAmount", theUsageAmount), currentHashCode, theUsageAmount);
                }
                {
                    String theCurrencyCode;
                    theCurrencyCode = this.getCurrencyCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
                }
                {
                    BigInteger theDecimalPlaces;
                    theDecimalPlaces = this.getDecimalPlaces();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard) {
                    final AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard copy = ((AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard) draftCopy);
                    if (this.cardType!= null) {
                        String sourceCardType;
                        sourceCardType = this.getCardType();
                        String copyCardType = ((String) strategy.copy(LocatorUtils.property(locator, "cardType", sourceCardType), sourceCardType));
                        copy.setCardType(copyCardType);
                    } else {
                        copy.cardType = null;
                    }
                    if (this.cardName!= null) {
                        String sourceCardName;
                        sourceCardName = this.getCardName();
                        String copyCardName = ((String) strategy.copy(LocatorUtils.property(locator, "cardName", sourceCardName), sourceCardName));
                        copy.setCardName(copyCardName);
                    } else {
                        copy.cardName = null;
                    }
                    if (this.usagePercentage!= null) {
                        BigDecimal sourceUsagePercentage;
                        sourceUsagePercentage = this.getUsagePercentage();
                        BigDecimal copyUsagePercentage = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "usagePercentage", sourceUsagePercentage), sourceUsagePercentage));
                        copy.setUsagePercentage(copyUsagePercentage);
                    } else {
                        copy.usagePercentage = null;
                    }
                    if (this.usageAmount!= null) {
                        BigDecimal sourceUsageAmount;
                        sourceUsageAmount = this.getUsageAmount();
                        BigDecimal copyUsageAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "usageAmount", sourceUsageAmount), sourceUsageAmount));
                        copy.setUsageAmount(copyUsageAmount);
                    } else {
                        copy.usageAmount = null;
                    }
                    if (this.currencyCode!= null) {
                        String sourceCurrencyCode;
                        sourceCurrencyCode = this.getCurrencyCode();
                        String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                        copy.setCurrencyCode(copyCurrencyCode);
                    } else {
                        copy.currencyCode = null;
                    }
                    if (this.decimalPlaces!= null) {
                        BigInteger sourceDecimalPlaces;
                        sourceDecimalPlaces = this.getDecimalPlaces();
                        BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                        copy.setDecimalPlaces(copyDecimalPlaces);
                    } else {
                        copy.decimalPlaces = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new AcceptablePaymentCardsInfoType.AcceptablePaymentCards.AcceptablePaymentCard();
            }

        }

    }

}
