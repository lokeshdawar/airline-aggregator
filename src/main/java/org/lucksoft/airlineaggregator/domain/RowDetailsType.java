//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Describes the row details in a seat map
 * 
 * <p>Java class for RowDetailsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RowDetailsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="AirSeats"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="AirSeat" maxOccurs="99"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SeatDetailsGroup"/&gt;
 *                           &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="AirRowCharacteristics"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attribute name="CharacteristicList" use="required" type="{http://www.opentravel.org/OTA/2003/05}ListOfOTA_CodeType" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="MaxNumberOfSeats" type="{http://www.opentravel.org/OTA/2003/05}Numeric0to99" /&gt;
 *       &lt;attribute name="RowNumber" use="required" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *       &lt;attribute name="AirBookDesigCode" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaLength1to2" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RowDetailsType", propOrder = {
    "airSeats",
    "airRowCharacteristics"
})
public class RowDetailsType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AirSeats", required = true)
    protected RowDetailsType.AirSeats airSeats;
    @XmlElement(name = "AirRowCharacteristics", required = true)
    protected RowDetailsType.AirRowCharacteristics airRowCharacteristics;
    @XmlAttribute(name = "MaxNumberOfSeats")
    protected Integer maxNumberOfSeats;
    @XmlAttribute(name = "RowNumber", required = true)
    protected BigInteger rowNumber;
    @XmlAttribute(name = "AirBookDesigCode")
    protected String airBookDesigCode;

    /**
     * Gets the value of the airSeats property.
     * 
     * @return
     *     possible object is
     *     {@link RowDetailsType.AirSeats }
     *     
     */
    public RowDetailsType.AirSeats getAirSeats() {
        return airSeats;
    }

    /**
     * Sets the value of the airSeats property.
     * 
     * @param value
     *     allowed object is
     *     {@link RowDetailsType.AirSeats }
     *     
     */
    public void setAirSeats(RowDetailsType.AirSeats value) {
        this.airSeats = value;
    }

    /**
     * Gets the value of the airRowCharacteristics property.
     * 
     * @return
     *     possible object is
     *     {@link RowDetailsType.AirRowCharacteristics }
     *     
     */
    public RowDetailsType.AirRowCharacteristics getAirRowCharacteristics() {
        return airRowCharacteristics;
    }

    /**
     * Sets the value of the airRowCharacteristics property.
     * 
     * @param value
     *     allowed object is
     *     {@link RowDetailsType.AirRowCharacteristics }
     *     
     */
    public void setAirRowCharacteristics(RowDetailsType.AirRowCharacteristics value) {
        this.airRowCharacteristics = value;
    }

    /**
     * Gets the value of the maxNumberOfSeats property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMaxNumberOfSeats() {
        return maxNumberOfSeats;
    }

    /**
     * Sets the value of the maxNumberOfSeats property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMaxNumberOfSeats(Integer value) {
        this.maxNumberOfSeats = value;
    }

    /**
     * Gets the value of the rowNumber property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getRowNumber() {
        return rowNumber;
    }

    /**
     * Sets the value of the rowNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setRowNumber(BigInteger value) {
        this.rowNumber = value;
    }

    /**
     * Gets the value of the airBookDesigCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAirBookDesigCode() {
        return airBookDesigCode;
    }

    /**
     * Sets the value of the airBookDesigCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAirBookDesigCode(String value) {
        this.airBookDesigCode = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            RowDetailsType.AirSeats theAirSeats;
            theAirSeats = this.getAirSeats();
            strategy.appendField(locator, this, "airSeats", buffer, theAirSeats);
        }
        {
            RowDetailsType.AirRowCharacteristics theAirRowCharacteristics;
            theAirRowCharacteristics = this.getAirRowCharacteristics();
            strategy.appendField(locator, this, "airRowCharacteristics", buffer, theAirRowCharacteristics);
        }
        {
            Integer theMaxNumberOfSeats;
            theMaxNumberOfSeats = this.getMaxNumberOfSeats();
            strategy.appendField(locator, this, "maxNumberOfSeats", buffer, theMaxNumberOfSeats);
        }
        {
            BigInteger theRowNumber;
            theRowNumber = this.getRowNumber();
            strategy.appendField(locator, this, "rowNumber", buffer, theRowNumber);
        }
        {
            String theAirBookDesigCode;
            theAirBookDesigCode = this.getAirBookDesigCode();
            strategy.appendField(locator, this, "airBookDesigCode", buffer, theAirBookDesigCode);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RowDetailsType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RowDetailsType that = ((RowDetailsType) object);
        {
            RowDetailsType.AirSeats lhsAirSeats;
            lhsAirSeats = this.getAirSeats();
            RowDetailsType.AirSeats rhsAirSeats;
            rhsAirSeats = that.getAirSeats();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airSeats", lhsAirSeats), LocatorUtils.property(thatLocator, "airSeats", rhsAirSeats), lhsAirSeats, rhsAirSeats)) {
                return false;
            }
        }
        {
            RowDetailsType.AirRowCharacteristics lhsAirRowCharacteristics;
            lhsAirRowCharacteristics = this.getAirRowCharacteristics();
            RowDetailsType.AirRowCharacteristics rhsAirRowCharacteristics;
            rhsAirRowCharacteristics = that.getAirRowCharacteristics();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airRowCharacteristics", lhsAirRowCharacteristics), LocatorUtils.property(thatLocator, "airRowCharacteristics", rhsAirRowCharacteristics), lhsAirRowCharacteristics, rhsAirRowCharacteristics)) {
                return false;
            }
        }
        {
            Integer lhsMaxNumberOfSeats;
            lhsMaxNumberOfSeats = this.getMaxNumberOfSeats();
            Integer rhsMaxNumberOfSeats;
            rhsMaxNumberOfSeats = that.getMaxNumberOfSeats();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxNumberOfSeats", lhsMaxNumberOfSeats), LocatorUtils.property(thatLocator, "maxNumberOfSeats", rhsMaxNumberOfSeats), lhsMaxNumberOfSeats, rhsMaxNumberOfSeats)) {
                return false;
            }
        }
        {
            BigInteger lhsRowNumber;
            lhsRowNumber = this.getRowNumber();
            BigInteger rhsRowNumber;
            rhsRowNumber = that.getRowNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rowNumber", lhsRowNumber), LocatorUtils.property(thatLocator, "rowNumber", rhsRowNumber), lhsRowNumber, rhsRowNumber)) {
                return false;
            }
        }
        {
            String lhsAirBookDesigCode;
            lhsAirBookDesigCode = this.getAirBookDesigCode();
            String rhsAirBookDesigCode;
            rhsAirBookDesigCode = that.getAirBookDesigCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airBookDesigCode", lhsAirBookDesigCode), LocatorUtils.property(thatLocator, "airBookDesigCode", rhsAirBookDesigCode), lhsAirBookDesigCode, rhsAirBookDesigCode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            RowDetailsType.AirSeats theAirSeats;
            theAirSeats = this.getAirSeats();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airSeats", theAirSeats), currentHashCode, theAirSeats);
        }
        {
            RowDetailsType.AirRowCharacteristics theAirRowCharacteristics;
            theAirRowCharacteristics = this.getAirRowCharacteristics();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airRowCharacteristics", theAirRowCharacteristics), currentHashCode, theAirRowCharacteristics);
        }
        {
            Integer theMaxNumberOfSeats;
            theMaxNumberOfSeats = this.getMaxNumberOfSeats();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxNumberOfSeats", theMaxNumberOfSeats), currentHashCode, theMaxNumberOfSeats);
        }
        {
            BigInteger theRowNumber;
            theRowNumber = this.getRowNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rowNumber", theRowNumber), currentHashCode, theRowNumber);
        }
        {
            String theAirBookDesigCode;
            theAirBookDesigCode = this.getAirBookDesigCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airBookDesigCode", theAirBookDesigCode), currentHashCode, theAirBookDesigCode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof RowDetailsType) {
            final RowDetailsType copy = ((RowDetailsType) draftCopy);
            if (this.airSeats!= null) {
                RowDetailsType.AirSeats sourceAirSeats;
                sourceAirSeats = this.getAirSeats();
                RowDetailsType.AirSeats copyAirSeats = ((RowDetailsType.AirSeats) strategy.copy(LocatorUtils.property(locator, "airSeats", sourceAirSeats), sourceAirSeats));
                copy.setAirSeats(copyAirSeats);
            } else {
                copy.airSeats = null;
            }
            if (this.airRowCharacteristics!= null) {
                RowDetailsType.AirRowCharacteristics sourceAirRowCharacteristics;
                sourceAirRowCharacteristics = this.getAirRowCharacteristics();
                RowDetailsType.AirRowCharacteristics copyAirRowCharacteristics = ((RowDetailsType.AirRowCharacteristics) strategy.copy(LocatorUtils.property(locator, "airRowCharacteristics", sourceAirRowCharacteristics), sourceAirRowCharacteristics));
                copy.setAirRowCharacteristics(copyAirRowCharacteristics);
            } else {
                copy.airRowCharacteristics = null;
            }
            if (this.maxNumberOfSeats!= null) {
                Integer sourceMaxNumberOfSeats;
                sourceMaxNumberOfSeats = this.getMaxNumberOfSeats();
                Integer copyMaxNumberOfSeats = ((Integer) strategy.copy(LocatorUtils.property(locator, "maxNumberOfSeats", sourceMaxNumberOfSeats), sourceMaxNumberOfSeats));
                copy.setMaxNumberOfSeats(copyMaxNumberOfSeats);
            } else {
                copy.maxNumberOfSeats = null;
            }
            if (this.rowNumber!= null) {
                BigInteger sourceRowNumber;
                sourceRowNumber = this.getRowNumber();
                BigInteger copyRowNumber = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "rowNumber", sourceRowNumber), sourceRowNumber));
                copy.setRowNumber(copyRowNumber);
            } else {
                copy.rowNumber = null;
            }
            if (this.airBookDesigCode!= null) {
                String sourceAirBookDesigCode;
                sourceAirBookDesigCode = this.getAirBookDesigCode();
                String copyAirBookDesigCode = ((String) strategy.copy(LocatorUtils.property(locator, "airBookDesigCode", sourceAirBookDesigCode), sourceAirBookDesigCode));
                copy.setAirBookDesigCode(copyAirBookDesigCode);
            } else {
                copy.airBookDesigCode = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RowDetailsType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attribute name="CharacteristicList" use="required" type="{http://www.opentravel.org/OTA/2003/05}ListOfOTA_CodeType" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class AirRowCharacteristics
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "CharacteristicList", required = true)
        protected List<String> characteristicList;

        /**
         * Gets the value of the characteristicList property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the characteristicList property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getCharacteristicList().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getCharacteristicList() {
            if (characteristicList == null) {
                characteristicList = new ArrayList<String>();
            }
            return this.characteristicList;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<String> theCharacteristicList;
                theCharacteristicList = (((this.characteristicList!= null)&&(!this.characteristicList.isEmpty()))?this.getCharacteristicList():null);
                strategy.appendField(locator, this, "characteristicList", buffer, theCharacteristicList);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RowDetailsType.AirRowCharacteristics)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final RowDetailsType.AirRowCharacteristics that = ((RowDetailsType.AirRowCharacteristics) object);
            {
                List<String> lhsCharacteristicList;
                lhsCharacteristicList = (((this.characteristicList!= null)&&(!this.characteristicList.isEmpty()))?this.getCharacteristicList():null);
                List<String> rhsCharacteristicList;
                rhsCharacteristicList = (((that.characteristicList!= null)&&(!that.characteristicList.isEmpty()))?that.getCharacteristicList():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "characteristicList", lhsCharacteristicList), LocatorUtils.property(thatLocator, "characteristicList", rhsCharacteristicList), lhsCharacteristicList, rhsCharacteristicList)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<String> theCharacteristicList;
                theCharacteristicList = (((this.characteristicList!= null)&&(!this.characteristicList.isEmpty()))?this.getCharacteristicList():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "characteristicList", theCharacteristicList), currentHashCode, theCharacteristicList);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof RowDetailsType.AirRowCharacteristics) {
                final RowDetailsType.AirRowCharacteristics copy = ((RowDetailsType.AirRowCharacteristics) draftCopy);
                if ((this.characteristicList!= null)&&(!this.characteristicList.isEmpty())) {
                    List<String> sourceCharacteristicList;
                    sourceCharacteristicList = (((this.characteristicList!= null)&&(!this.characteristicList.isEmpty()))?this.getCharacteristicList():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyCharacteristicList = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "characteristicList", sourceCharacteristicList), sourceCharacteristicList));
                    copy.characteristicList = null;
                    if (copyCharacteristicList!= null) {
                        List<String> uniqueCharacteristicListl = copy.getCharacteristicList();
                        uniqueCharacteristicListl.addAll(copyCharacteristicList);
                    }
                } else {
                    copy.characteristicList = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RowDetailsType.AirRowCharacteristics();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="AirSeat" maxOccurs="99"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SeatDetailsGroup"/&gt;
     *                 &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "airSeat"
    })
    public static class AirSeats
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AirSeat", required = true)
        protected List<RowDetailsType.AirSeats.AirSeat> airSeat;

        /**
         * Gets the value of the airSeat property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the airSeat property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAirSeat().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link RowDetailsType.AirSeats.AirSeat }
         * 
         * 
         */
        public List<RowDetailsType.AirSeats.AirSeat> getAirSeat() {
            if (airSeat == null) {
                airSeat = new ArrayList<RowDetailsType.AirSeats.AirSeat>();
            }
            return this.airSeat;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<RowDetailsType.AirSeats.AirSeat> theAirSeat;
                theAirSeat = (((this.airSeat!= null)&&(!this.airSeat.isEmpty()))?this.getAirSeat():null);
                strategy.appendField(locator, this, "airSeat", buffer, theAirSeat);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RowDetailsType.AirSeats)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final RowDetailsType.AirSeats that = ((RowDetailsType.AirSeats) object);
            {
                List<RowDetailsType.AirSeats.AirSeat> lhsAirSeat;
                lhsAirSeat = (((this.airSeat!= null)&&(!this.airSeat.isEmpty()))?this.getAirSeat():null);
                List<RowDetailsType.AirSeats.AirSeat> rhsAirSeat;
                rhsAirSeat = (((that.airSeat!= null)&&(!that.airSeat.isEmpty()))?that.getAirSeat():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "airSeat", lhsAirSeat), LocatorUtils.property(thatLocator, "airSeat", rhsAirSeat), lhsAirSeat, rhsAirSeat)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<RowDetailsType.AirSeats.AirSeat> theAirSeat;
                theAirSeat = (((this.airSeat!= null)&&(!this.airSeat.isEmpty()))?this.getAirSeat():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airSeat", theAirSeat), currentHashCode, theAirSeat);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof RowDetailsType.AirSeats) {
                final RowDetailsType.AirSeats copy = ((RowDetailsType.AirSeats) draftCopy);
                if ((this.airSeat!= null)&&(!this.airSeat.isEmpty())) {
                    List<RowDetailsType.AirSeats.AirSeat> sourceAirSeat;
                    sourceAirSeat = (((this.airSeat!= null)&&(!this.airSeat.isEmpty()))?this.getAirSeat():null);
                    @SuppressWarnings("unchecked")
                    List<RowDetailsType.AirSeats.AirSeat> copyAirSeat = ((List<RowDetailsType.AirSeats.AirSeat> ) strategy.copy(LocatorUtils.property(locator, "airSeat", sourceAirSeat), sourceAirSeat));
                    copy.airSeat = null;
                    if (copyAirSeat!= null) {
                        List<RowDetailsType.AirSeats.AirSeat> uniqueAirSeatl = copy.getAirSeat();
                        uniqueAirSeatl.addAll(copyAirSeat);
                    }
                } else {
                    copy.airSeat = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RowDetailsType.AirSeats();
        }


        /**
         *  Describes the seat attributes.
         * 
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SeatDetailsGroup"/&gt;
         *       &lt;attribute name="RPH" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class AirSeat
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "RPH")
            protected String rph;
            @XmlAttribute(name = "SeatAvailability")
            protected String seatAvailability;
            @XmlAttribute(name = "SeatNumber", required = true)
            protected String seatNumber;
            @XmlAttribute(name = "SeatCharacteristics", required = true)
            protected List<String> seatCharacteristics;
            @XmlAttribute(name = "AirBookDesigCode")
            protected String airBookDesigCode;

            /**
             * Gets the value of the rph property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getRPH() {
                return rph;
            }

            /**
             * Sets the value of the rph property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setRPH(String value) {
                this.rph = value;
            }

            /**
             * Gets the value of the seatAvailability property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getSeatAvailability() {
                return seatAvailability;
            }

            /**
             * Sets the value of the seatAvailability property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setSeatAvailability(String value) {
                this.seatAvailability = value;
            }

            /**
             * Gets the value of the seatNumber property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getSeatNumber() {
                return seatNumber;
            }

            /**
             * Sets the value of the seatNumber property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setSeatNumber(String value) {
                this.seatNumber = value;
            }

            /**
             * Gets the value of the seatCharacteristics property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the seatCharacteristics property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getSeatCharacteristics().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link String }
             * 
             * 
             */
            public List<String> getSeatCharacteristics() {
                if (seatCharacteristics == null) {
                    seatCharacteristics = new ArrayList<String>();
                }
                return this.seatCharacteristics;
            }

            /**
             * Gets the value of the airBookDesigCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getAirBookDesigCode() {
                return airBookDesigCode;
            }

            /**
             * Sets the value of the airBookDesigCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setAirBookDesigCode(String value) {
                this.airBookDesigCode = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    strategy.appendField(locator, this, "rph", buffer, theRPH);
                }
                {
                    String theSeatAvailability;
                    theSeatAvailability = this.getSeatAvailability();
                    strategy.appendField(locator, this, "seatAvailability", buffer, theSeatAvailability);
                }
                {
                    String theSeatNumber;
                    theSeatNumber = this.getSeatNumber();
                    strategy.appendField(locator, this, "seatNumber", buffer, theSeatNumber);
                }
                {
                    List<String> theSeatCharacteristics;
                    theSeatCharacteristics = (((this.seatCharacteristics!= null)&&(!this.seatCharacteristics.isEmpty()))?this.getSeatCharacteristics():null);
                    strategy.appendField(locator, this, "seatCharacteristics", buffer, theSeatCharacteristics);
                }
                {
                    String theAirBookDesigCode;
                    theAirBookDesigCode = this.getAirBookDesigCode();
                    strategy.appendField(locator, this, "airBookDesigCode", buffer, theAirBookDesigCode);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof RowDetailsType.AirSeats.AirSeat)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final RowDetailsType.AirSeats.AirSeat that = ((RowDetailsType.AirSeats.AirSeat) object);
                {
                    String lhsRPH;
                    lhsRPH = this.getRPH();
                    String rhsRPH;
                    rhsRPH = that.getRPH();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                        return false;
                    }
                }
                {
                    String lhsSeatAvailability;
                    lhsSeatAvailability = this.getSeatAvailability();
                    String rhsSeatAvailability;
                    rhsSeatAvailability = that.getSeatAvailability();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "seatAvailability", lhsSeatAvailability), LocatorUtils.property(thatLocator, "seatAvailability", rhsSeatAvailability), lhsSeatAvailability, rhsSeatAvailability)) {
                        return false;
                    }
                }
                {
                    String lhsSeatNumber;
                    lhsSeatNumber = this.getSeatNumber();
                    String rhsSeatNumber;
                    rhsSeatNumber = that.getSeatNumber();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "seatNumber", lhsSeatNumber), LocatorUtils.property(thatLocator, "seatNumber", rhsSeatNumber), lhsSeatNumber, rhsSeatNumber)) {
                        return false;
                    }
                }
                {
                    List<String> lhsSeatCharacteristics;
                    lhsSeatCharacteristics = (((this.seatCharacteristics!= null)&&(!this.seatCharacteristics.isEmpty()))?this.getSeatCharacteristics():null);
                    List<String> rhsSeatCharacteristics;
                    rhsSeatCharacteristics = (((that.seatCharacteristics!= null)&&(!that.seatCharacteristics.isEmpty()))?that.getSeatCharacteristics():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "seatCharacteristics", lhsSeatCharacteristics), LocatorUtils.property(thatLocator, "seatCharacteristics", rhsSeatCharacteristics), lhsSeatCharacteristics, rhsSeatCharacteristics)) {
                        return false;
                    }
                }
                {
                    String lhsAirBookDesigCode;
                    lhsAirBookDesigCode = this.getAirBookDesigCode();
                    String rhsAirBookDesigCode;
                    rhsAirBookDesigCode = that.getAirBookDesigCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "airBookDesigCode", lhsAirBookDesigCode), LocatorUtils.property(thatLocator, "airBookDesigCode", rhsAirBookDesigCode), lhsAirBookDesigCode, rhsAirBookDesigCode)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
                }
                {
                    String theSeatAvailability;
                    theSeatAvailability = this.getSeatAvailability();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatAvailability", theSeatAvailability), currentHashCode, theSeatAvailability);
                }
                {
                    String theSeatNumber;
                    theSeatNumber = this.getSeatNumber();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatNumber", theSeatNumber), currentHashCode, theSeatNumber);
                }
                {
                    List<String> theSeatCharacteristics;
                    theSeatCharacteristics = (((this.seatCharacteristics!= null)&&(!this.seatCharacteristics.isEmpty()))?this.getSeatCharacteristics():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatCharacteristics", theSeatCharacteristics), currentHashCode, theSeatCharacteristics);
                }
                {
                    String theAirBookDesigCode;
                    theAirBookDesigCode = this.getAirBookDesigCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airBookDesigCode", theAirBookDesigCode), currentHashCode, theAirBookDesigCode);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof RowDetailsType.AirSeats.AirSeat) {
                    final RowDetailsType.AirSeats.AirSeat copy = ((RowDetailsType.AirSeats.AirSeat) draftCopy);
                    if (this.rph!= null) {
                        String sourceRPH;
                        sourceRPH = this.getRPH();
                        String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                        copy.setRPH(copyRPH);
                    } else {
                        copy.rph = null;
                    }
                    if (this.seatAvailability!= null) {
                        String sourceSeatAvailability;
                        sourceSeatAvailability = this.getSeatAvailability();
                        String copySeatAvailability = ((String) strategy.copy(LocatorUtils.property(locator, "seatAvailability", sourceSeatAvailability), sourceSeatAvailability));
                        copy.setSeatAvailability(copySeatAvailability);
                    } else {
                        copy.seatAvailability = null;
                    }
                    if (this.seatNumber!= null) {
                        String sourceSeatNumber;
                        sourceSeatNumber = this.getSeatNumber();
                        String copySeatNumber = ((String) strategy.copy(LocatorUtils.property(locator, "seatNumber", sourceSeatNumber), sourceSeatNumber));
                        copy.setSeatNumber(copySeatNumber);
                    } else {
                        copy.seatNumber = null;
                    }
                    if ((this.seatCharacteristics!= null)&&(!this.seatCharacteristics.isEmpty())) {
                        List<String> sourceSeatCharacteristics;
                        sourceSeatCharacteristics = (((this.seatCharacteristics!= null)&&(!this.seatCharacteristics.isEmpty()))?this.getSeatCharacteristics():null);
                        @SuppressWarnings("unchecked")
                        List<String> copySeatCharacteristics = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "seatCharacteristics", sourceSeatCharacteristics), sourceSeatCharacteristics));
                        copy.seatCharacteristics = null;
                        if (copySeatCharacteristics!= null) {
                            List<String> uniqueSeatCharacteristicsl = copy.getSeatCharacteristics();
                            uniqueSeatCharacteristicsl.addAll(copySeatCharacteristics);
                        }
                    } else {
                        copy.seatCharacteristics = null;
                    }
                    if (this.airBookDesigCode!= null) {
                        String sourceAirBookDesigCode;
                        sourceAirBookDesigCode = this.getAirBookDesigCode();
                        String copyAirBookDesigCode = ((String) strategy.copy(LocatorUtils.property(locator, "airBookDesigCode", sourceAirBookDesigCode), sourceAirBookDesigCode));
                        copy.setAirBookDesigCode(copyAirBookDesigCode);
                    } else {
                        copy.airBookDesigCode = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new RowDetailsType.AirSeats.AirSeat();
            }

        }

    }

}
