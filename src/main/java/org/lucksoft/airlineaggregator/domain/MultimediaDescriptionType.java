//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Describes multimedia item(s).
 * 
 * <p>Java class for MultimediaDescriptionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MultimediaDescriptionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice minOccurs="0"&gt;
 *         &lt;element name="VideoItems" type="{http://www.opentravel.org/OTA/2003/05}VideoItemsType" minOccurs="0"/&gt;
 *         &lt;element name="ImageItems" type="{http://www.opentravel.org/OTA/2003/05}ImageItemsType" minOccurs="0"/&gt;
 *         &lt;element name="TextItems" type="{http://www.opentravel.org/OTA/2003/05}TextItemsType" minOccurs="0"/&gt;
 *       &lt;/choice&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}ID_OptionalGroup"/&gt;
 *       &lt;attribute name="InfoCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *       &lt;attribute name="AdditionalDetailCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MultimediaDescriptionType", propOrder = {
    "videoItems",
    "imageItems",
    "textItems"
})
public class MultimediaDescriptionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "VideoItems")
    protected VideoItemsType videoItems;
    @XmlElement(name = "ImageItems")
    protected ImageItemsType imageItems;
    @XmlElement(name = "TextItems")
    protected TextItemsType textItems;
    @XmlAttribute(name = "InfoCode")
    protected String infoCode;
    @XmlAttribute(name = "AdditionalDetailCode")
    protected String additionalDetailCode;
    @XmlAttribute(name = "ID")
    protected String id;

    /**
     * Gets the value of the videoItems property.
     * 
     * @return
     *     possible object is
     *     {@link VideoItemsType }
     *     
     */
    public VideoItemsType getVideoItems() {
        return videoItems;
    }

    /**
     * Sets the value of the videoItems property.
     * 
     * @param value
     *     allowed object is
     *     {@link VideoItemsType }
     *     
     */
    public void setVideoItems(VideoItemsType value) {
        this.videoItems = value;
    }

    /**
     * Gets the value of the imageItems property.
     * 
     * @return
     *     possible object is
     *     {@link ImageItemsType }
     *     
     */
    public ImageItemsType getImageItems() {
        return imageItems;
    }

    /**
     * Sets the value of the imageItems property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImageItemsType }
     *     
     */
    public void setImageItems(ImageItemsType value) {
        this.imageItems = value;
    }

    /**
     * Gets the value of the textItems property.
     * 
     * @return
     *     possible object is
     *     {@link TextItemsType }
     *     
     */
    public TextItemsType getTextItems() {
        return textItems;
    }

    /**
     * Sets the value of the textItems property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextItemsType }
     *     
     */
    public void setTextItems(TextItemsType value) {
        this.textItems = value;
    }

    /**
     * Gets the value of the infoCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInfoCode() {
        return infoCode;
    }

    /**
     * Sets the value of the infoCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInfoCode(String value) {
        this.infoCode = value;
    }

    /**
     * Gets the value of the additionalDetailCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAdditionalDetailCode() {
        return additionalDetailCode;
    }

    /**
     * Sets the value of the additionalDetailCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAdditionalDetailCode(String value) {
        this.additionalDetailCode = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getID() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setID(String value) {
        this.id = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            VideoItemsType theVideoItems;
            theVideoItems = this.getVideoItems();
            strategy.appendField(locator, this, "videoItems", buffer, theVideoItems);
        }
        {
            ImageItemsType theImageItems;
            theImageItems = this.getImageItems();
            strategy.appendField(locator, this, "imageItems", buffer, theImageItems);
        }
        {
            TextItemsType theTextItems;
            theTextItems = this.getTextItems();
            strategy.appendField(locator, this, "textItems", buffer, theTextItems);
        }
        {
            String theInfoCode;
            theInfoCode = this.getInfoCode();
            strategy.appendField(locator, this, "infoCode", buffer, theInfoCode);
        }
        {
            String theAdditionalDetailCode;
            theAdditionalDetailCode = this.getAdditionalDetailCode();
            strategy.appendField(locator, this, "additionalDetailCode", buffer, theAdditionalDetailCode);
        }
        {
            String theID;
            theID = this.getID();
            strategy.appendField(locator, this, "id", buffer, theID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MultimediaDescriptionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MultimediaDescriptionType that = ((MultimediaDescriptionType) object);
        {
            VideoItemsType lhsVideoItems;
            lhsVideoItems = this.getVideoItems();
            VideoItemsType rhsVideoItems;
            rhsVideoItems = that.getVideoItems();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "videoItems", lhsVideoItems), LocatorUtils.property(thatLocator, "videoItems", rhsVideoItems), lhsVideoItems, rhsVideoItems)) {
                return false;
            }
        }
        {
            ImageItemsType lhsImageItems;
            lhsImageItems = this.getImageItems();
            ImageItemsType rhsImageItems;
            rhsImageItems = that.getImageItems();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imageItems", lhsImageItems), LocatorUtils.property(thatLocator, "imageItems", rhsImageItems), lhsImageItems, rhsImageItems)) {
                return false;
            }
        }
        {
            TextItemsType lhsTextItems;
            lhsTextItems = this.getTextItems();
            TextItemsType rhsTextItems;
            rhsTextItems = that.getTextItems();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textItems", lhsTextItems), LocatorUtils.property(thatLocator, "textItems", rhsTextItems), lhsTextItems, rhsTextItems)) {
                return false;
            }
        }
        {
            String lhsInfoCode;
            lhsInfoCode = this.getInfoCode();
            String rhsInfoCode;
            rhsInfoCode = that.getInfoCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "infoCode", lhsInfoCode), LocatorUtils.property(thatLocator, "infoCode", rhsInfoCode), lhsInfoCode, rhsInfoCode)) {
                return false;
            }
        }
        {
            String lhsAdditionalDetailCode;
            lhsAdditionalDetailCode = this.getAdditionalDetailCode();
            String rhsAdditionalDetailCode;
            rhsAdditionalDetailCode = that.getAdditionalDetailCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "additionalDetailCode", lhsAdditionalDetailCode), LocatorUtils.property(thatLocator, "additionalDetailCode", rhsAdditionalDetailCode), lhsAdditionalDetailCode, rhsAdditionalDetailCode)) {
                return false;
            }
        }
        {
            String lhsID;
            lhsID = this.getID();
            String rhsID;
            rhsID = that.getID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsID), LocatorUtils.property(thatLocator, "id", rhsID), lhsID, rhsID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            VideoItemsType theVideoItems;
            theVideoItems = this.getVideoItems();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "videoItems", theVideoItems), currentHashCode, theVideoItems);
        }
        {
            ImageItemsType theImageItems;
            theImageItems = this.getImageItems();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imageItems", theImageItems), currentHashCode, theImageItems);
        }
        {
            TextItemsType theTextItems;
            theTextItems = this.getTextItems();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textItems", theTextItems), currentHashCode, theTextItems);
        }
        {
            String theInfoCode;
            theInfoCode = this.getInfoCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "infoCode", theInfoCode), currentHashCode, theInfoCode);
        }
        {
            String theAdditionalDetailCode;
            theAdditionalDetailCode = this.getAdditionalDetailCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "additionalDetailCode", theAdditionalDetailCode), currentHashCode, theAdditionalDetailCode);
        }
        {
            String theID;
            theID = this.getID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theID), currentHashCode, theID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof MultimediaDescriptionType) {
            final MultimediaDescriptionType copy = ((MultimediaDescriptionType) draftCopy);
            if (this.videoItems!= null) {
                VideoItemsType sourceVideoItems;
                sourceVideoItems = this.getVideoItems();
                VideoItemsType copyVideoItems = ((VideoItemsType) strategy.copy(LocatorUtils.property(locator, "videoItems", sourceVideoItems), sourceVideoItems));
                copy.setVideoItems(copyVideoItems);
            } else {
                copy.videoItems = null;
            }
            if (this.imageItems!= null) {
                ImageItemsType sourceImageItems;
                sourceImageItems = this.getImageItems();
                ImageItemsType copyImageItems = ((ImageItemsType) strategy.copy(LocatorUtils.property(locator, "imageItems", sourceImageItems), sourceImageItems));
                copy.setImageItems(copyImageItems);
            } else {
                copy.imageItems = null;
            }
            if (this.textItems!= null) {
                TextItemsType sourceTextItems;
                sourceTextItems = this.getTextItems();
                TextItemsType copyTextItems = ((TextItemsType) strategy.copy(LocatorUtils.property(locator, "textItems", sourceTextItems), sourceTextItems));
                copy.setTextItems(copyTextItems);
            } else {
                copy.textItems = null;
            }
            if (this.infoCode!= null) {
                String sourceInfoCode;
                sourceInfoCode = this.getInfoCode();
                String copyInfoCode = ((String) strategy.copy(LocatorUtils.property(locator, "infoCode", sourceInfoCode), sourceInfoCode));
                copy.setInfoCode(copyInfoCode);
            } else {
                copy.infoCode = null;
            }
            if (this.additionalDetailCode!= null) {
                String sourceAdditionalDetailCode;
                sourceAdditionalDetailCode = this.getAdditionalDetailCode();
                String copyAdditionalDetailCode = ((String) strategy.copy(LocatorUtils.property(locator, "additionalDetailCode", sourceAdditionalDetailCode), sourceAdditionalDetailCode));
                copy.setAdditionalDetailCode(copyAdditionalDetailCode);
            } else {
                copy.additionalDetailCode = null;
            }
            if (this.id!= null) {
                String sourceID;
                sourceID = this.getID();
                String copyID = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceID), sourceID));
                copy.setID(copyID);
            } else {
                copy.id = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MultimediaDescriptionType();
    }

}
