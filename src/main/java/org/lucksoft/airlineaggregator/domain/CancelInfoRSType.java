//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * May contain rules associated with canceling a reservation as well as the supplier's cancellation number.
 * 
 * <p>Java class for CancelInfoRSType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CancelInfoRSType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="CancelRules" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="CancelRule" type="{http://www.opentravel.org/OTA/2003/05}CancelRuleType" maxOccurs="unbounded"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="UniqueID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CancelInfoRSType", propOrder = {
    "cancelRules",
    "uniqueID"
})
public class CancelInfoRSType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "CancelRules")
    protected CancelInfoRSType.CancelRules cancelRules;
    @XmlElement(name = "UniqueID")
    protected UniqueIDType uniqueID;

    /**
     * Gets the value of the cancelRules property.
     * 
     * @return
     *     possible object is
     *     {@link CancelInfoRSType.CancelRules }
     *     
     */
    public CancelInfoRSType.CancelRules getCancelRules() {
        return cancelRules;
    }

    /**
     * Sets the value of the cancelRules property.
     * 
     * @param value
     *     allowed object is
     *     {@link CancelInfoRSType.CancelRules }
     *     
     */
    public void setCancelRules(CancelInfoRSType.CancelRules value) {
        this.cancelRules = value;
    }

    /**
     * Gets the value of the uniqueID property.
     * 
     * @return
     *     possible object is
     *     {@link UniqueIDType }
     *     
     */
    public UniqueIDType getUniqueID() {
        return uniqueID;
    }

    /**
     * Sets the value of the uniqueID property.
     * 
     * @param value
     *     allowed object is
     *     {@link UniqueIDType }
     *     
     */
    public void setUniqueID(UniqueIDType value) {
        this.uniqueID = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            CancelInfoRSType.CancelRules theCancelRules;
            theCancelRules = this.getCancelRules();
            strategy.appendField(locator, this, "cancelRules", buffer, theCancelRules);
        }
        {
            UniqueIDType theUniqueID;
            theUniqueID = this.getUniqueID();
            strategy.appendField(locator, this, "uniqueID", buffer, theUniqueID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CancelInfoRSType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CancelInfoRSType that = ((CancelInfoRSType) object);
        {
            CancelInfoRSType.CancelRules lhsCancelRules;
            lhsCancelRules = this.getCancelRules();
            CancelInfoRSType.CancelRules rhsCancelRules;
            rhsCancelRules = that.getCancelRules();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cancelRules", lhsCancelRules), LocatorUtils.property(thatLocator, "cancelRules", rhsCancelRules), lhsCancelRules, rhsCancelRules)) {
                return false;
            }
        }
        {
            UniqueIDType lhsUniqueID;
            lhsUniqueID = this.getUniqueID();
            UniqueIDType rhsUniqueID;
            rhsUniqueID = that.getUniqueID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uniqueID", lhsUniqueID), LocatorUtils.property(thatLocator, "uniqueID", rhsUniqueID), lhsUniqueID, rhsUniqueID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            CancelInfoRSType.CancelRules theCancelRules;
            theCancelRules = this.getCancelRules();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cancelRules", theCancelRules), currentHashCode, theCancelRules);
        }
        {
            UniqueIDType theUniqueID;
            theUniqueID = this.getUniqueID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uniqueID", theUniqueID), currentHashCode, theUniqueID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CancelInfoRSType) {
            final CancelInfoRSType copy = ((CancelInfoRSType) draftCopy);
            if (this.cancelRules!= null) {
                CancelInfoRSType.CancelRules sourceCancelRules;
                sourceCancelRules = this.getCancelRules();
                CancelInfoRSType.CancelRules copyCancelRules = ((CancelInfoRSType.CancelRules) strategy.copy(LocatorUtils.property(locator, "cancelRules", sourceCancelRules), sourceCancelRules));
                copy.setCancelRules(copyCancelRules);
            } else {
                copy.cancelRules = null;
            }
            if (this.uniqueID!= null) {
                UniqueIDType sourceUniqueID;
                sourceUniqueID = this.getUniqueID();
                UniqueIDType copyUniqueID = ((UniqueIDType) strategy.copy(LocatorUtils.property(locator, "uniqueID", sourceUniqueID), sourceUniqueID));
                copy.setUniqueID(copyUniqueID);
            } else {
                copy.uniqueID = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CancelInfoRSType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="CancelRule" type="{http://www.opentravel.org/OTA/2003/05}CancelRuleType" maxOccurs="unbounded"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "cancelRule"
    })
    public static class CancelRules
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "CancelRule", required = true)
        protected List<CancelRuleType> cancelRule;

        /**
         * Gets the value of the cancelRule property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the cancelRule property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getCancelRule().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link CancelRuleType }
         * 
         * 
         */
        public List<CancelRuleType> getCancelRule() {
            if (cancelRule == null) {
                cancelRule = new ArrayList<CancelRuleType>();
            }
            return this.cancelRule;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<CancelRuleType> theCancelRule;
                theCancelRule = (((this.cancelRule!= null)&&(!this.cancelRule.isEmpty()))?this.getCancelRule():null);
                strategy.appendField(locator, this, "cancelRule", buffer, theCancelRule);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof CancelInfoRSType.CancelRules)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final CancelInfoRSType.CancelRules that = ((CancelInfoRSType.CancelRules) object);
            {
                List<CancelRuleType> lhsCancelRule;
                lhsCancelRule = (((this.cancelRule!= null)&&(!this.cancelRule.isEmpty()))?this.getCancelRule():null);
                List<CancelRuleType> rhsCancelRule;
                rhsCancelRule = (((that.cancelRule!= null)&&(!that.cancelRule.isEmpty()))?that.getCancelRule():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "cancelRule", lhsCancelRule), LocatorUtils.property(thatLocator, "cancelRule", rhsCancelRule), lhsCancelRule, rhsCancelRule)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<CancelRuleType> theCancelRule;
                theCancelRule = (((this.cancelRule!= null)&&(!this.cancelRule.isEmpty()))?this.getCancelRule():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cancelRule", theCancelRule), currentHashCode, theCancelRule);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof CancelInfoRSType.CancelRules) {
                final CancelInfoRSType.CancelRules copy = ((CancelInfoRSType.CancelRules) draftCopy);
                if ((this.cancelRule!= null)&&(!this.cancelRule.isEmpty())) {
                    List<CancelRuleType> sourceCancelRule;
                    sourceCancelRule = (((this.cancelRule!= null)&&(!this.cancelRule.isEmpty()))?this.getCancelRule():null);
                    @SuppressWarnings("unchecked")
                    List<CancelRuleType> copyCancelRule = ((List<CancelRuleType> ) strategy.copy(LocatorUtils.property(locator, "cancelRule", sourceCancelRule), sourceCancelRule));
                    copy.cancelRule = null;
                    if (copyCancelRule!= null) {
                        List<CancelRuleType> uniqueCancelRulel = copy.getCancelRule();
                        uniqueCancelRulel.addAll(copyCancelRule);
                    }
                } else {
                    copy.cancelRule = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new CancelInfoRSType.CancelRules();
        }

    }

}
