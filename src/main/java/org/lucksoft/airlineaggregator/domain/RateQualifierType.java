//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * The RateQualifierType complex type describes fully rate information associated with a specific rate quotation, including the description of any promotions that may apply.
 * 
 * <p>Java class for RateQualifierType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RateQualifierType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PromoDesc" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" minOccurs="0"/&gt;
 *         &lt;element name="RateComments" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="RateComment" maxOccurs="15"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;simpleContent&gt;
 *                         &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FormattedTextTextType"&gt;
 *                           &lt;attribute name="Name" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/simpleContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}RateQualifierCoreGroup"/&gt;
 *       &lt;attribute name="ArriveByFlight" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="RateAuthorizationCode" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *       &lt;attribute name="VendorRateID" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to32" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RateQualifierType", propOrder = {
    "promoDesc",
    "rateComments"
})
public class RateQualifierType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "PromoDesc")
    protected String promoDesc;
    @XmlElement(name = "RateComments")
    protected RateQualifierType.RateComments rateComments;
    @XmlAttribute(name = "ArriveByFlight")
    protected Boolean arriveByFlight;
    @XmlAttribute(name = "RateAuthorizationCode")
    protected String rateAuthorizationCode;
    @XmlAttribute(name = "VendorRateID")
    protected String vendorRateID;
    @XmlAttribute(name = "TravelPurpose")
    protected String travelPurpose;
    @XmlAttribute(name = "RateCategory")
    protected String rateCategory;
    @XmlAttribute(name = "CorpDiscountNmbr")
    protected String corpDiscountNmbr;
    @XmlAttribute(name = "RateQualifier")
    protected String rateQualifier;
    @XmlAttribute(name = "RatePeriod")
    protected RatePeriodSimpleType ratePeriod;
    @XmlAttribute(name = "GuaranteedInd")
    protected Boolean guaranteedInd;
    @XmlAttribute(name = "PromotionCode")
    protected String promotionCode;
    @XmlAttribute(name = "PromotionVendorCode")
    protected List<String> promotionVendorCode;

    /**
     * Gets the value of the promoDesc property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPromoDesc() {
        return promoDesc;
    }

    /**
     * Sets the value of the promoDesc property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPromoDesc(String value) {
        this.promoDesc = value;
    }

    /**
     * Gets the value of the rateComments property.
     * 
     * @return
     *     possible object is
     *     {@link RateQualifierType.RateComments }
     *     
     */
    public RateQualifierType.RateComments getRateComments() {
        return rateComments;
    }

    /**
     * Sets the value of the rateComments property.
     * 
     * @param value
     *     allowed object is
     *     {@link RateQualifierType.RateComments }
     *     
     */
    public void setRateComments(RateQualifierType.RateComments value) {
        this.rateComments = value;
    }

    /**
     * Gets the value of the arriveByFlight property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isArriveByFlight() {
        if (arriveByFlight == null) {
            return false;
        } else {
            return arriveByFlight;
        }
    }

    /**
     * Sets the value of the arriveByFlight property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setArriveByFlight(Boolean value) {
        this.arriveByFlight = value;
    }

    /**
     * Gets the value of the rateAuthorizationCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRateAuthorizationCode() {
        return rateAuthorizationCode;
    }

    /**
     * Sets the value of the rateAuthorizationCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRateAuthorizationCode(String value) {
        this.rateAuthorizationCode = value;
    }

    /**
     * Gets the value of the vendorRateID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVendorRateID() {
        return vendorRateID;
    }

    /**
     * Sets the value of the vendorRateID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVendorRateID(String value) {
        this.vendorRateID = value;
    }

    /**
     * Gets the value of the travelPurpose property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTravelPurpose() {
        return travelPurpose;
    }

    /**
     * Sets the value of the travelPurpose property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTravelPurpose(String value) {
        this.travelPurpose = value;
    }

    /**
     * Gets the value of the rateCategory property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRateCategory() {
        return rateCategory;
    }

    /**
     * Sets the value of the rateCategory property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRateCategory(String value) {
        this.rateCategory = value;
    }

    /**
     * Gets the value of the corpDiscountNmbr property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCorpDiscountNmbr() {
        return corpDiscountNmbr;
    }

    /**
     * Sets the value of the corpDiscountNmbr property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCorpDiscountNmbr(String value) {
        this.corpDiscountNmbr = value;
    }

    /**
     * Gets the value of the rateQualifier property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRateQualifier() {
        return rateQualifier;
    }

    /**
     * Sets the value of the rateQualifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRateQualifier(String value) {
        this.rateQualifier = value;
    }

    /**
     * Gets the value of the ratePeriod property.
     * 
     * @return
     *     possible object is
     *     {@link RatePeriodSimpleType }
     *     
     */
    public RatePeriodSimpleType getRatePeriod() {
        return ratePeriod;
    }

    /**
     * Sets the value of the ratePeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link RatePeriodSimpleType }
     *     
     */
    public void setRatePeriod(RatePeriodSimpleType value) {
        this.ratePeriod = value;
    }

    /**
     * Gets the value of the guaranteedInd property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isGuaranteedInd() {
        return guaranteedInd;
    }

    /**
     * Sets the value of the guaranteedInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setGuaranteedInd(Boolean value) {
        this.guaranteedInd = value;
    }

    /**
     * Gets the value of the promotionCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPromotionCode() {
        return promotionCode;
    }

    /**
     * Sets the value of the promotionCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPromotionCode(String value) {
        this.promotionCode = value;
    }

    /**
     * Gets the value of the promotionVendorCode property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the promotionVendorCode property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPromotionVendorCode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getPromotionVendorCode() {
        if (promotionVendorCode == null) {
            promotionVendorCode = new ArrayList<String>();
        }
        return this.promotionVendorCode;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String thePromoDesc;
            thePromoDesc = this.getPromoDesc();
            strategy.appendField(locator, this, "promoDesc", buffer, thePromoDesc);
        }
        {
            RateQualifierType.RateComments theRateComments;
            theRateComments = this.getRateComments();
            strategy.appendField(locator, this, "rateComments", buffer, theRateComments);
        }
        {
            boolean theArriveByFlight;
            theArriveByFlight = ((this.arriveByFlight!= null)?this.isArriveByFlight():false);
            strategy.appendField(locator, this, "arriveByFlight", buffer, theArriveByFlight);
        }
        {
            String theRateAuthorizationCode;
            theRateAuthorizationCode = this.getRateAuthorizationCode();
            strategy.appendField(locator, this, "rateAuthorizationCode", buffer, theRateAuthorizationCode);
        }
        {
            String theVendorRateID;
            theVendorRateID = this.getVendorRateID();
            strategy.appendField(locator, this, "vendorRateID", buffer, theVendorRateID);
        }
        {
            String theTravelPurpose;
            theTravelPurpose = this.getTravelPurpose();
            strategy.appendField(locator, this, "travelPurpose", buffer, theTravelPurpose);
        }
        {
            String theRateCategory;
            theRateCategory = this.getRateCategory();
            strategy.appendField(locator, this, "rateCategory", buffer, theRateCategory);
        }
        {
            String theCorpDiscountNmbr;
            theCorpDiscountNmbr = this.getCorpDiscountNmbr();
            strategy.appendField(locator, this, "corpDiscountNmbr", buffer, theCorpDiscountNmbr);
        }
        {
            String theRateQualifier;
            theRateQualifier = this.getRateQualifier();
            strategy.appendField(locator, this, "rateQualifier", buffer, theRateQualifier);
        }
        {
            RatePeriodSimpleType theRatePeriod;
            theRatePeriod = this.getRatePeriod();
            strategy.appendField(locator, this, "ratePeriod", buffer, theRatePeriod);
        }
        {
            Boolean theGuaranteedInd;
            theGuaranteedInd = this.isGuaranteedInd();
            strategy.appendField(locator, this, "guaranteedInd", buffer, theGuaranteedInd);
        }
        {
            String thePromotionCode;
            thePromotionCode = this.getPromotionCode();
            strategy.appendField(locator, this, "promotionCode", buffer, thePromotionCode);
        }
        {
            List<String> thePromotionVendorCode;
            thePromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
            strategy.appendField(locator, this, "promotionVendorCode", buffer, thePromotionVendorCode);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RateQualifierType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RateQualifierType that = ((RateQualifierType) object);
        {
            String lhsPromoDesc;
            lhsPromoDesc = this.getPromoDesc();
            String rhsPromoDesc;
            rhsPromoDesc = that.getPromoDesc();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "promoDesc", lhsPromoDesc), LocatorUtils.property(thatLocator, "promoDesc", rhsPromoDesc), lhsPromoDesc, rhsPromoDesc)) {
                return false;
            }
        }
        {
            RateQualifierType.RateComments lhsRateComments;
            lhsRateComments = this.getRateComments();
            RateQualifierType.RateComments rhsRateComments;
            rhsRateComments = that.getRateComments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rateComments", lhsRateComments), LocatorUtils.property(thatLocator, "rateComments", rhsRateComments), lhsRateComments, rhsRateComments)) {
                return false;
            }
        }
        {
            boolean lhsArriveByFlight;
            lhsArriveByFlight = ((this.arriveByFlight!= null)?this.isArriveByFlight():false);
            boolean rhsArriveByFlight;
            rhsArriveByFlight = ((that.arriveByFlight!= null)?that.isArriveByFlight():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "arriveByFlight", lhsArriveByFlight), LocatorUtils.property(thatLocator, "arriveByFlight", rhsArriveByFlight), lhsArriveByFlight, rhsArriveByFlight)) {
                return false;
            }
        }
        {
            String lhsRateAuthorizationCode;
            lhsRateAuthorizationCode = this.getRateAuthorizationCode();
            String rhsRateAuthorizationCode;
            rhsRateAuthorizationCode = that.getRateAuthorizationCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rateAuthorizationCode", lhsRateAuthorizationCode), LocatorUtils.property(thatLocator, "rateAuthorizationCode", rhsRateAuthorizationCode), lhsRateAuthorizationCode, rhsRateAuthorizationCode)) {
                return false;
            }
        }
        {
            String lhsVendorRateID;
            lhsVendorRateID = this.getVendorRateID();
            String rhsVendorRateID;
            rhsVendorRateID = that.getVendorRateID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vendorRateID", lhsVendorRateID), LocatorUtils.property(thatLocator, "vendorRateID", rhsVendorRateID), lhsVendorRateID, rhsVendorRateID)) {
                return false;
            }
        }
        {
            String lhsTravelPurpose;
            lhsTravelPurpose = this.getTravelPurpose();
            String rhsTravelPurpose;
            rhsTravelPurpose = that.getTravelPurpose();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "travelPurpose", lhsTravelPurpose), LocatorUtils.property(thatLocator, "travelPurpose", rhsTravelPurpose), lhsTravelPurpose, rhsTravelPurpose)) {
                return false;
            }
        }
        {
            String lhsRateCategory;
            lhsRateCategory = this.getRateCategory();
            String rhsRateCategory;
            rhsRateCategory = that.getRateCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rateCategory", lhsRateCategory), LocatorUtils.property(thatLocator, "rateCategory", rhsRateCategory), lhsRateCategory, rhsRateCategory)) {
                return false;
            }
        }
        {
            String lhsCorpDiscountNmbr;
            lhsCorpDiscountNmbr = this.getCorpDiscountNmbr();
            String rhsCorpDiscountNmbr;
            rhsCorpDiscountNmbr = that.getCorpDiscountNmbr();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "corpDiscountNmbr", lhsCorpDiscountNmbr), LocatorUtils.property(thatLocator, "corpDiscountNmbr", rhsCorpDiscountNmbr), lhsCorpDiscountNmbr, rhsCorpDiscountNmbr)) {
                return false;
            }
        }
        {
            String lhsRateQualifier;
            lhsRateQualifier = this.getRateQualifier();
            String rhsRateQualifier;
            rhsRateQualifier = that.getRateQualifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rateQualifier", lhsRateQualifier), LocatorUtils.property(thatLocator, "rateQualifier", rhsRateQualifier), lhsRateQualifier, rhsRateQualifier)) {
                return false;
            }
        }
        {
            RatePeriodSimpleType lhsRatePeriod;
            lhsRatePeriod = this.getRatePeriod();
            RatePeriodSimpleType rhsRatePeriod;
            rhsRatePeriod = that.getRatePeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ratePeriod", lhsRatePeriod), LocatorUtils.property(thatLocator, "ratePeriod", rhsRatePeriod), lhsRatePeriod, rhsRatePeriod)) {
                return false;
            }
        }
        {
            Boolean lhsGuaranteedInd;
            lhsGuaranteedInd = this.isGuaranteedInd();
            Boolean rhsGuaranteedInd;
            rhsGuaranteedInd = that.isGuaranteedInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "guaranteedInd", lhsGuaranteedInd), LocatorUtils.property(thatLocator, "guaranteedInd", rhsGuaranteedInd), lhsGuaranteedInd, rhsGuaranteedInd)) {
                return false;
            }
        }
        {
            String lhsPromotionCode;
            lhsPromotionCode = this.getPromotionCode();
            String rhsPromotionCode;
            rhsPromotionCode = that.getPromotionCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "promotionCode", lhsPromotionCode), LocatorUtils.property(thatLocator, "promotionCode", rhsPromotionCode), lhsPromotionCode, rhsPromotionCode)) {
                return false;
            }
        }
        {
            List<String> lhsPromotionVendorCode;
            lhsPromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
            List<String> rhsPromotionVendorCode;
            rhsPromotionVendorCode = (((that.promotionVendorCode!= null)&&(!that.promotionVendorCode.isEmpty()))?that.getPromotionVendorCode():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "promotionVendorCode", lhsPromotionVendorCode), LocatorUtils.property(thatLocator, "promotionVendorCode", rhsPromotionVendorCode), lhsPromotionVendorCode, rhsPromotionVendorCode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String thePromoDesc;
            thePromoDesc = this.getPromoDesc();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "promoDesc", thePromoDesc), currentHashCode, thePromoDesc);
        }
        {
            RateQualifierType.RateComments theRateComments;
            theRateComments = this.getRateComments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rateComments", theRateComments), currentHashCode, theRateComments);
        }
        {
            boolean theArriveByFlight;
            theArriveByFlight = ((this.arriveByFlight!= null)?this.isArriveByFlight():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "arriveByFlight", theArriveByFlight), currentHashCode, theArriveByFlight);
        }
        {
            String theRateAuthorizationCode;
            theRateAuthorizationCode = this.getRateAuthorizationCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rateAuthorizationCode", theRateAuthorizationCode), currentHashCode, theRateAuthorizationCode);
        }
        {
            String theVendorRateID;
            theVendorRateID = this.getVendorRateID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vendorRateID", theVendorRateID), currentHashCode, theVendorRateID);
        }
        {
            String theTravelPurpose;
            theTravelPurpose = this.getTravelPurpose();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "travelPurpose", theTravelPurpose), currentHashCode, theTravelPurpose);
        }
        {
            String theRateCategory;
            theRateCategory = this.getRateCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rateCategory", theRateCategory), currentHashCode, theRateCategory);
        }
        {
            String theCorpDiscountNmbr;
            theCorpDiscountNmbr = this.getCorpDiscountNmbr();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "corpDiscountNmbr", theCorpDiscountNmbr), currentHashCode, theCorpDiscountNmbr);
        }
        {
            String theRateQualifier;
            theRateQualifier = this.getRateQualifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rateQualifier", theRateQualifier), currentHashCode, theRateQualifier);
        }
        {
            RatePeriodSimpleType theRatePeriod;
            theRatePeriod = this.getRatePeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ratePeriod", theRatePeriod), currentHashCode, theRatePeriod);
        }
        {
            Boolean theGuaranteedInd;
            theGuaranteedInd = this.isGuaranteedInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "guaranteedInd", theGuaranteedInd), currentHashCode, theGuaranteedInd);
        }
        {
            String thePromotionCode;
            thePromotionCode = this.getPromotionCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "promotionCode", thePromotionCode), currentHashCode, thePromotionCode);
        }
        {
            List<String> thePromotionVendorCode;
            thePromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "promotionVendorCode", thePromotionVendorCode), currentHashCode, thePromotionVendorCode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof RateQualifierType) {
            final RateQualifierType copy = ((RateQualifierType) draftCopy);
            if (this.promoDesc!= null) {
                String sourcePromoDesc;
                sourcePromoDesc = this.getPromoDesc();
                String copyPromoDesc = ((String) strategy.copy(LocatorUtils.property(locator, "promoDesc", sourcePromoDesc), sourcePromoDesc));
                copy.setPromoDesc(copyPromoDesc);
            } else {
                copy.promoDesc = null;
            }
            if (this.rateComments!= null) {
                RateQualifierType.RateComments sourceRateComments;
                sourceRateComments = this.getRateComments();
                RateQualifierType.RateComments copyRateComments = ((RateQualifierType.RateComments) strategy.copy(LocatorUtils.property(locator, "rateComments", sourceRateComments), sourceRateComments));
                copy.setRateComments(copyRateComments);
            } else {
                copy.rateComments = null;
            }
            if (this.arriveByFlight!= null) {
                boolean sourceArriveByFlight;
                sourceArriveByFlight = ((this.arriveByFlight!= null)?this.isArriveByFlight():false);
                boolean copyArriveByFlight = strategy.copy(LocatorUtils.property(locator, "arriveByFlight", sourceArriveByFlight), sourceArriveByFlight);
                copy.setArriveByFlight(copyArriveByFlight);
            } else {
                copy.arriveByFlight = null;
            }
            if (this.rateAuthorizationCode!= null) {
                String sourceRateAuthorizationCode;
                sourceRateAuthorizationCode = this.getRateAuthorizationCode();
                String copyRateAuthorizationCode = ((String) strategy.copy(LocatorUtils.property(locator, "rateAuthorizationCode", sourceRateAuthorizationCode), sourceRateAuthorizationCode));
                copy.setRateAuthorizationCode(copyRateAuthorizationCode);
            } else {
                copy.rateAuthorizationCode = null;
            }
            if (this.vendorRateID!= null) {
                String sourceVendorRateID;
                sourceVendorRateID = this.getVendorRateID();
                String copyVendorRateID = ((String) strategy.copy(LocatorUtils.property(locator, "vendorRateID", sourceVendorRateID), sourceVendorRateID));
                copy.setVendorRateID(copyVendorRateID);
            } else {
                copy.vendorRateID = null;
            }
            if (this.travelPurpose!= null) {
                String sourceTravelPurpose;
                sourceTravelPurpose = this.getTravelPurpose();
                String copyTravelPurpose = ((String) strategy.copy(LocatorUtils.property(locator, "travelPurpose", sourceTravelPurpose), sourceTravelPurpose));
                copy.setTravelPurpose(copyTravelPurpose);
            } else {
                copy.travelPurpose = null;
            }
            if (this.rateCategory!= null) {
                String sourceRateCategory;
                sourceRateCategory = this.getRateCategory();
                String copyRateCategory = ((String) strategy.copy(LocatorUtils.property(locator, "rateCategory", sourceRateCategory), sourceRateCategory));
                copy.setRateCategory(copyRateCategory);
            } else {
                copy.rateCategory = null;
            }
            if (this.corpDiscountNmbr!= null) {
                String sourceCorpDiscountNmbr;
                sourceCorpDiscountNmbr = this.getCorpDiscountNmbr();
                String copyCorpDiscountNmbr = ((String) strategy.copy(LocatorUtils.property(locator, "corpDiscountNmbr", sourceCorpDiscountNmbr), sourceCorpDiscountNmbr));
                copy.setCorpDiscountNmbr(copyCorpDiscountNmbr);
            } else {
                copy.corpDiscountNmbr = null;
            }
            if (this.rateQualifier!= null) {
                String sourceRateQualifier;
                sourceRateQualifier = this.getRateQualifier();
                String copyRateQualifier = ((String) strategy.copy(LocatorUtils.property(locator, "rateQualifier", sourceRateQualifier), sourceRateQualifier));
                copy.setRateQualifier(copyRateQualifier);
            } else {
                copy.rateQualifier = null;
            }
            if (this.ratePeriod!= null) {
                RatePeriodSimpleType sourceRatePeriod;
                sourceRatePeriod = this.getRatePeriod();
                RatePeriodSimpleType copyRatePeriod = ((RatePeriodSimpleType) strategy.copy(LocatorUtils.property(locator, "ratePeriod", sourceRatePeriod), sourceRatePeriod));
                copy.setRatePeriod(copyRatePeriod);
            } else {
                copy.ratePeriod = null;
            }
            if (this.guaranteedInd!= null) {
                Boolean sourceGuaranteedInd;
                sourceGuaranteedInd = this.isGuaranteedInd();
                Boolean copyGuaranteedInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "guaranteedInd", sourceGuaranteedInd), sourceGuaranteedInd));
                copy.setGuaranteedInd(copyGuaranteedInd);
            } else {
                copy.guaranteedInd = null;
            }
            if (this.promotionCode!= null) {
                String sourcePromotionCode;
                sourcePromotionCode = this.getPromotionCode();
                String copyPromotionCode = ((String) strategy.copy(LocatorUtils.property(locator, "promotionCode", sourcePromotionCode), sourcePromotionCode));
                copy.setPromotionCode(copyPromotionCode);
            } else {
                copy.promotionCode = null;
            }
            if ((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty())) {
                List<String> sourcePromotionVendorCode;
                sourcePromotionVendorCode = (((this.promotionVendorCode!= null)&&(!this.promotionVendorCode.isEmpty()))?this.getPromotionVendorCode():null);
                @SuppressWarnings("unchecked")
                List<String> copyPromotionVendorCode = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "promotionVendorCode", sourcePromotionVendorCode), sourcePromotionVendorCode));
                copy.promotionVendorCode = null;
                if (copyPromotionVendorCode!= null) {
                    List<String> uniquePromotionVendorCodel = copy.getPromotionVendorCode();
                    uniquePromotionVendorCodel.addAll(copyPromotionVendorCode);
                }
            } else {
                copy.promotionVendorCode = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RateQualifierType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="RateComment" maxOccurs="15"&gt;
     *           &lt;complexType&gt;
     *             &lt;simpleContent&gt;
     *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FormattedTextTextType"&gt;
     *                 &lt;attribute name="Name" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/simpleContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "rateComment"
    })
    public static class RateComments
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "RateComment", required = true)
        protected List<RateQualifierType.RateComments.RateComment> rateComment;

        /**
         * Gets the value of the rateComment property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the rateComment property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getRateComment().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link RateQualifierType.RateComments.RateComment }
         * 
         * 
         */
        public List<RateQualifierType.RateComments.RateComment> getRateComment() {
            if (rateComment == null) {
                rateComment = new ArrayList<RateQualifierType.RateComments.RateComment>();
            }
            return this.rateComment;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<RateQualifierType.RateComments.RateComment> theRateComment;
                theRateComment = (((this.rateComment!= null)&&(!this.rateComment.isEmpty()))?this.getRateComment():null);
                strategy.appendField(locator, this, "rateComment", buffer, theRateComment);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof RateQualifierType.RateComments)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final RateQualifierType.RateComments that = ((RateQualifierType.RateComments) object);
            {
                List<RateQualifierType.RateComments.RateComment> lhsRateComment;
                lhsRateComment = (((this.rateComment!= null)&&(!this.rateComment.isEmpty()))?this.getRateComment():null);
                List<RateQualifierType.RateComments.RateComment> rhsRateComment;
                rhsRateComment = (((that.rateComment!= null)&&(!that.rateComment.isEmpty()))?that.getRateComment():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rateComment", lhsRateComment), LocatorUtils.property(thatLocator, "rateComment", rhsRateComment), lhsRateComment, rhsRateComment)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<RateQualifierType.RateComments.RateComment> theRateComment;
                theRateComment = (((this.rateComment!= null)&&(!this.rateComment.isEmpty()))?this.getRateComment():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rateComment", theRateComment), currentHashCode, theRateComment);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof RateQualifierType.RateComments) {
                final RateQualifierType.RateComments copy = ((RateQualifierType.RateComments) draftCopy);
                if ((this.rateComment!= null)&&(!this.rateComment.isEmpty())) {
                    List<RateQualifierType.RateComments.RateComment> sourceRateComment;
                    sourceRateComment = (((this.rateComment!= null)&&(!this.rateComment.isEmpty()))?this.getRateComment():null);
                    @SuppressWarnings("unchecked")
                    List<RateQualifierType.RateComments.RateComment> copyRateComment = ((List<RateQualifierType.RateComments.RateComment> ) strategy.copy(LocatorUtils.property(locator, "rateComment", sourceRateComment), sourceRateComment));
                    copy.rateComment = null;
                    if (copyRateComment!= null) {
                        List<RateQualifierType.RateComments.RateComment> uniqueRateCommentl = copy.getRateComment();
                        uniqueRateCommentl.addAll(copyRateComment);
                    }
                } else {
                    copy.rateComment = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new RateQualifierType.RateComments();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;simpleContent&gt;
         *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;FormattedTextTextType"&gt;
         *       &lt;attribute name="Name" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/simpleContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class RateComment
            extends FormattedTextTextType
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "Name")
            protected String name;

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                super.appendFields(locator, buffer, strategy);
                {
                    String theName;
                    theName = this.getName();
                    strategy.appendField(locator, this, "name", buffer, theName);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof RateQualifierType.RateComments.RateComment)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                    return false;
                }
                final RateQualifierType.RateComments.RateComment that = ((RateQualifierType.RateComments.RateComment) object);
                {
                    String lhsName;
                    lhsName = this.getName();
                    String rhsName;
                    rhsName = that.getName();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = super.hashCode(locator, strategy);
                {
                    String theName;
                    theName = this.getName();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                super.copyTo(locator, draftCopy, strategy);
                if (draftCopy instanceof RateQualifierType.RateComments.RateComment) {
                    final RateQualifierType.RateComments.RateComment copy = ((RateQualifierType.RateComments.RateComment) draftCopy);
                    if (this.name!= null) {
                        String sourceName;
                        sourceName = this.getName();
                        String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                        copy.setName(copyName);
                    } else {
                        copy.name = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new RateQualifierType.RateComments.RateComment();
            }

        }

    }

}
