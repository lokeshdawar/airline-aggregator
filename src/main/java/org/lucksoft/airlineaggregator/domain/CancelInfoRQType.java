//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Identifies the common, or core, information associated with the request for cancellation of a reservation or other type of record.
 * 
 * <p>Java class for CancelInfoRQType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CancelInfoRQType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="UniqueID" type="{http://www.opentravel.org/OTA/2003/05}UniqueID_Type" maxOccurs="2"/&gt;
 *         &lt;element name="PersonName" type="{http://www.opentravel.org/OTA/2003/05}PersonNameType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="CancelType" use="required" type="{http://www.opentravel.org/OTA/2003/05}TransactionActionType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CancelInfoRQType", propOrder = {
    "uniqueID",
    "personName"
})
public class CancelInfoRQType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "UniqueID", required = true)
    protected List<UniqueIDType> uniqueID;
    @XmlElement(name = "PersonName")
    protected PersonNameType personName;
    @XmlAttribute(name = "CancelType", required = true)
    protected TransactionActionType cancelType;

    /**
     * Gets the value of the uniqueID property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the uniqueID property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUniqueID().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UniqueIDType }
     * 
     * 
     */
    public List<UniqueIDType> getUniqueID() {
        if (uniqueID == null) {
            uniqueID = new ArrayList<UniqueIDType>();
        }
        return this.uniqueID;
    }

    /**
     * Gets the value of the personName property.
     * 
     * @return
     *     possible object is
     *     {@link PersonNameType }
     *     
     */
    public PersonNameType getPersonName() {
        return personName;
    }

    /**
     * Sets the value of the personName property.
     * 
     * @param value
     *     allowed object is
     *     {@link PersonNameType }
     *     
     */
    public void setPersonName(PersonNameType value) {
        this.personName = value;
    }

    /**
     * Gets the value of the cancelType property.
     * 
     * @return
     *     possible object is
     *     {@link TransactionActionType }
     *     
     */
    public TransactionActionType getCancelType() {
        return cancelType;
    }

    /**
     * Sets the value of the cancelType property.
     * 
     * @param value
     *     allowed object is
     *     {@link TransactionActionType }
     *     
     */
    public void setCancelType(TransactionActionType value) {
        this.cancelType = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<UniqueIDType> theUniqueID;
            theUniqueID = (((this.uniqueID!= null)&&(!this.uniqueID.isEmpty()))?this.getUniqueID():null);
            strategy.appendField(locator, this, "uniqueID", buffer, theUniqueID);
        }
        {
            PersonNameType thePersonName;
            thePersonName = this.getPersonName();
            strategy.appendField(locator, this, "personName", buffer, thePersonName);
        }
        {
            TransactionActionType theCancelType;
            theCancelType = this.getCancelType();
            strategy.appendField(locator, this, "cancelType", buffer, theCancelType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CancelInfoRQType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CancelInfoRQType that = ((CancelInfoRQType) object);
        {
            List<UniqueIDType> lhsUniqueID;
            lhsUniqueID = (((this.uniqueID!= null)&&(!this.uniqueID.isEmpty()))?this.getUniqueID():null);
            List<UniqueIDType> rhsUniqueID;
            rhsUniqueID = (((that.uniqueID!= null)&&(!that.uniqueID.isEmpty()))?that.getUniqueID():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uniqueID", lhsUniqueID), LocatorUtils.property(thatLocator, "uniqueID", rhsUniqueID), lhsUniqueID, rhsUniqueID)) {
                return false;
            }
        }
        {
            PersonNameType lhsPersonName;
            lhsPersonName = this.getPersonName();
            PersonNameType rhsPersonName;
            rhsPersonName = that.getPersonName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "personName", lhsPersonName), LocatorUtils.property(thatLocator, "personName", rhsPersonName), lhsPersonName, rhsPersonName)) {
                return false;
            }
        }
        {
            TransactionActionType lhsCancelType;
            lhsCancelType = this.getCancelType();
            TransactionActionType rhsCancelType;
            rhsCancelType = that.getCancelType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cancelType", lhsCancelType), LocatorUtils.property(thatLocator, "cancelType", rhsCancelType), lhsCancelType, rhsCancelType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<UniqueIDType> theUniqueID;
            theUniqueID = (((this.uniqueID!= null)&&(!this.uniqueID.isEmpty()))?this.getUniqueID():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uniqueID", theUniqueID), currentHashCode, theUniqueID);
        }
        {
            PersonNameType thePersonName;
            thePersonName = this.getPersonName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "personName", thePersonName), currentHashCode, thePersonName);
        }
        {
            TransactionActionType theCancelType;
            theCancelType = this.getCancelType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cancelType", theCancelType), currentHashCode, theCancelType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CancelInfoRQType) {
            final CancelInfoRQType copy = ((CancelInfoRQType) draftCopy);
            if ((this.uniqueID!= null)&&(!this.uniqueID.isEmpty())) {
                List<UniqueIDType> sourceUniqueID;
                sourceUniqueID = (((this.uniqueID!= null)&&(!this.uniqueID.isEmpty()))?this.getUniqueID():null);
                @SuppressWarnings("unchecked")
                List<UniqueIDType> copyUniqueID = ((List<UniqueIDType> ) strategy.copy(LocatorUtils.property(locator, "uniqueID", sourceUniqueID), sourceUniqueID));
                copy.uniqueID = null;
                if (copyUniqueID!= null) {
                    List<UniqueIDType> uniqueUniqueIDl = copy.getUniqueID();
                    uniqueUniqueIDl.addAll(copyUniqueID);
                }
            } else {
                copy.uniqueID = null;
            }
            if (this.personName!= null) {
                PersonNameType sourcePersonName;
                sourcePersonName = this.getPersonName();
                PersonNameType copyPersonName = ((PersonNameType) strategy.copy(LocatorUtils.property(locator, "personName", sourcePersonName), sourcePersonName));
                copy.setPersonName(copyPersonName);
            } else {
                copy.personName = null;
            }
            if (this.cancelType!= null) {
                TransactionActionType sourceCancelType;
                sourceCancelType = this.getCancelType();
                TransactionActionType copyCancelType = ((TransactionActionType) strategy.copy(LocatorUtils.property(locator, "cancelType", sourceCancelType), sourceCancelType));
                copy.setCancelType(copyCancelType);
            } else {
                copy.cancelType = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CancelInfoRQType();
    }

}
