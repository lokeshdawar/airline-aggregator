//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Travel needs associated with a collection but independent of specific travel services.
 * 
 * <p>Java class for CommonPrefType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CommonPrefType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="NamePref" type="{http://www.opentravel.org/OTA/2003/05}NamePrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="PhonePref" type="{http://www.opentravel.org/OTA/2003/05}PhonePrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="AddressPref" type="{http://www.opentravel.org/OTA/2003/05}AddressPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="PaymentFormPref" type="{http://www.opentravel.org/OTA/2003/05}PaymentFormPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="InterestPref" type="{http://www.opentravel.org/OTA/2003/05}InterestPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="InsurancePref" type="{http://www.opentravel.org/OTA/2003/05}InsurancePrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="SeatingPref" type="{http://www.opentravel.org/OTA/2003/05}SeatingPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="TicketDistribPref" type="{http://www.opentravel.org/OTA/2003/05}TicketDistribPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="MediaEntertainPref" type="{http://www.opentravel.org/OTA/2003/05}MediaEntertainPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="PetInfoPref" type="{http://www.opentravel.org/OTA/2003/05}PetInfoPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="MealPref" type="{http://www.opentravel.org/OTA/2003/05}MealPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="LoyaltyPref" type="{http://www.opentravel.org/OTA/2003/05}LoyaltyPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="SpecRequestPref" type="{http://www.opentravel.org/OTA/2003/05}SpecRequestPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="RelatedTravelerPref" type="{http://www.opentravel.org/OTA/2003/05}RelatedTravelerPrefType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opentravel.org/OTA/2003/05}TPA_Extensions" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PrivacyGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}AltLangID_Group"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}SmokingIndicatorGroup"/&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PrimaryLangID_Group"/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CommonPrefType", propOrder = {
    "namePref",
    "phonePref",
    "addressPref",
    "paymentFormPref",
    "interestPref",
    "insurancePref",
    "seatingPref",
    "ticketDistribPref",
    "mediaEntertainPref",
    "petInfoPref",
    "mealPref",
    "loyaltyPref",
    "specRequestPref",
    "relatedTravelerPref",
    "tpaExtensions"
})
public class CommonPrefType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "NamePref")
    protected List<NamePrefType> namePref;
    @XmlElement(name = "PhonePref")
    protected List<PhonePrefType> phonePref;
    @XmlElement(name = "AddressPref")
    protected List<AddressPrefType> addressPref;
    @XmlElement(name = "PaymentFormPref")
    protected List<PaymentFormPrefType> paymentFormPref;
    @XmlElement(name = "InterestPref")
    protected List<InterestPrefType> interestPref;
    @XmlElement(name = "InsurancePref")
    protected List<InsurancePrefType> insurancePref;
    @XmlElement(name = "SeatingPref")
    protected List<SeatingPrefType> seatingPref;
    @XmlElement(name = "TicketDistribPref")
    protected List<TicketDistribPrefType> ticketDistribPref;
    @XmlElement(name = "MediaEntertainPref")
    protected List<MediaEntertainPrefType> mediaEntertainPref;
    @XmlElement(name = "PetInfoPref")
    protected List<PetInfoPrefType> petInfoPref;
    @XmlElement(name = "MealPref")
    protected List<MealPrefType> mealPref;
    @XmlElement(name = "LoyaltyPref")
    protected List<LoyaltyPrefType> loyaltyPref;
    @XmlElement(name = "SpecRequestPref")
    protected List<SpecRequestPrefType> specRequestPref;
    @XmlElement(name = "RelatedTravelerPref")
    protected List<RelatedTravelerPrefType> relatedTravelerPref;
    @XmlElement(name = "TPA_Extensions")
    protected TPAExtensionsType tpaExtensions;
    @XmlAttribute(name = "ShareSynchInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareSynchInd;
    @XmlAttribute(name = "ShareMarketInd")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String shareMarketInd;
    @XmlAttribute(name = "AltLangID")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String altLangID;
    @XmlAttribute(name = "SmokingAllowed")
    protected Boolean smokingAllowed;
    @XmlAttribute(name = "PrimaryLangID")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String primaryLangID;

    /**
     * Gets the value of the namePref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the namePref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNamePref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NamePrefType }
     * 
     * 
     */
    public List<NamePrefType> getNamePref() {
        if (namePref == null) {
            namePref = new ArrayList<NamePrefType>();
        }
        return this.namePref;
    }

    /**
     * Gets the value of the phonePref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the phonePref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhonePref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PhonePrefType }
     * 
     * 
     */
    public List<PhonePrefType> getPhonePref() {
        if (phonePref == null) {
            phonePref = new ArrayList<PhonePrefType>();
        }
        return this.phonePref;
    }

    /**
     * Gets the value of the addressPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addressPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddressPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AddressPrefType }
     * 
     * 
     */
    public List<AddressPrefType> getAddressPref() {
        if (addressPref == null) {
            addressPref = new ArrayList<AddressPrefType>();
        }
        return this.addressPref;
    }

    /**
     * Gets the value of the paymentFormPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the paymentFormPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPaymentFormPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PaymentFormPrefType }
     * 
     * 
     */
    public List<PaymentFormPrefType> getPaymentFormPref() {
        if (paymentFormPref == null) {
            paymentFormPref = new ArrayList<PaymentFormPrefType>();
        }
        return this.paymentFormPref;
    }

    /**
     * Gets the value of the interestPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the interestPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInterestPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link InterestPrefType }
     * 
     * 
     */
    public List<InterestPrefType> getInterestPref() {
        if (interestPref == null) {
            interestPref = new ArrayList<InterestPrefType>();
        }
        return this.interestPref;
    }

    /**
     * Gets the value of the insurancePref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the insurancePref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInsurancePref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link InsurancePrefType }
     * 
     * 
     */
    public List<InsurancePrefType> getInsurancePref() {
        if (insurancePref == null) {
            insurancePref = new ArrayList<InsurancePrefType>();
        }
        return this.insurancePref;
    }

    /**
     * Gets the value of the seatingPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the seatingPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSeatingPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SeatingPrefType }
     * 
     * 
     */
    public List<SeatingPrefType> getSeatingPref() {
        if (seatingPref == null) {
            seatingPref = new ArrayList<SeatingPrefType>();
        }
        return this.seatingPref;
    }

    /**
     * Gets the value of the ticketDistribPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ticketDistribPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTicketDistribPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TicketDistribPrefType }
     * 
     * 
     */
    public List<TicketDistribPrefType> getTicketDistribPref() {
        if (ticketDistribPref == null) {
            ticketDistribPref = new ArrayList<TicketDistribPrefType>();
        }
        return this.ticketDistribPref;
    }

    /**
     * Gets the value of the mediaEntertainPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mediaEntertainPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMediaEntertainPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MediaEntertainPrefType }
     * 
     * 
     */
    public List<MediaEntertainPrefType> getMediaEntertainPref() {
        if (mediaEntertainPref == null) {
            mediaEntertainPref = new ArrayList<MediaEntertainPrefType>();
        }
        return this.mediaEntertainPref;
    }

    /**
     * Gets the value of the petInfoPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the petInfoPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPetInfoPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PetInfoPrefType }
     * 
     * 
     */
    public List<PetInfoPrefType> getPetInfoPref() {
        if (petInfoPref == null) {
            petInfoPref = new ArrayList<PetInfoPrefType>();
        }
        return this.petInfoPref;
    }

    /**
     * Gets the value of the mealPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mealPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMealPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MealPrefType }
     * 
     * 
     */
    public List<MealPrefType> getMealPref() {
        if (mealPref == null) {
            mealPref = new ArrayList<MealPrefType>();
        }
        return this.mealPref;
    }

    /**
     * Gets the value of the loyaltyPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the loyaltyPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLoyaltyPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LoyaltyPrefType }
     * 
     * 
     */
    public List<LoyaltyPrefType> getLoyaltyPref() {
        if (loyaltyPref == null) {
            loyaltyPref = new ArrayList<LoyaltyPrefType>();
        }
        return this.loyaltyPref;
    }

    /**
     * Gets the value of the specRequestPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specRequestPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecRequestPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpecRequestPrefType }
     * 
     * 
     */
    public List<SpecRequestPrefType> getSpecRequestPref() {
        if (specRequestPref == null) {
            specRequestPref = new ArrayList<SpecRequestPrefType>();
        }
        return this.specRequestPref;
    }

    /**
     * Gets the value of the relatedTravelerPref property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatedTravelerPref property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatedTravelerPref().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RelatedTravelerPrefType }
     * 
     * 
     */
    public List<RelatedTravelerPrefType> getRelatedTravelerPref() {
        if (relatedTravelerPref == null) {
            relatedTravelerPref = new ArrayList<RelatedTravelerPrefType>();
        }
        return this.relatedTravelerPref;
    }

    /**
     * Gets the value of the tpaExtensions property.
     * 
     * @return
     *     possible object is
     *     {@link TPAExtensionsType }
     *     
     */
    public TPAExtensionsType getTPAExtensions() {
        return tpaExtensions;
    }

    /**
     * Sets the value of the tpaExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link TPAExtensionsType }
     *     
     */
    public void setTPAExtensions(TPAExtensionsType value) {
        this.tpaExtensions = value;
    }

    /**
     * Gets the value of the shareSynchInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareSynchInd() {
        return shareSynchInd;
    }

    /**
     * Sets the value of the shareSynchInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareSynchInd(String value) {
        this.shareSynchInd = value;
    }

    /**
     * Gets the value of the shareMarketInd property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShareMarketInd() {
        return shareMarketInd;
    }

    /**
     * Sets the value of the shareMarketInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShareMarketInd(String value) {
        this.shareMarketInd = value;
    }

    /**
     * Gets the value of the altLangID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAltLangID() {
        return altLangID;
    }

    /**
     * Sets the value of the altLangID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAltLangID(String value) {
        this.altLangID = value;
    }

    /**
     * Gets the value of the smokingAllowed property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isSmokingAllowed() {
        if (smokingAllowed == null) {
            return false;
        } else {
            return smokingAllowed;
        }
    }

    /**
     * Sets the value of the smokingAllowed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setSmokingAllowed(Boolean value) {
        this.smokingAllowed = value;
    }

    /**
     * Gets the value of the primaryLangID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrimaryLangID() {
        return primaryLangID;
    }

    /**
     * Sets the value of the primaryLangID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrimaryLangID(String value) {
        this.primaryLangID = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<NamePrefType> theNamePref;
            theNamePref = (((this.namePref!= null)&&(!this.namePref.isEmpty()))?this.getNamePref():null);
            strategy.appendField(locator, this, "namePref", buffer, theNamePref);
        }
        {
            List<PhonePrefType> thePhonePref;
            thePhonePref = (((this.phonePref!= null)&&(!this.phonePref.isEmpty()))?this.getPhonePref():null);
            strategy.appendField(locator, this, "phonePref", buffer, thePhonePref);
        }
        {
            List<AddressPrefType> theAddressPref;
            theAddressPref = (((this.addressPref!= null)&&(!this.addressPref.isEmpty()))?this.getAddressPref():null);
            strategy.appendField(locator, this, "addressPref", buffer, theAddressPref);
        }
        {
            List<PaymentFormPrefType> thePaymentFormPref;
            thePaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
            strategy.appendField(locator, this, "paymentFormPref", buffer, thePaymentFormPref);
        }
        {
            List<InterestPrefType> theInterestPref;
            theInterestPref = (((this.interestPref!= null)&&(!this.interestPref.isEmpty()))?this.getInterestPref():null);
            strategy.appendField(locator, this, "interestPref", buffer, theInterestPref);
        }
        {
            List<InsurancePrefType> theInsurancePref;
            theInsurancePref = (((this.insurancePref!= null)&&(!this.insurancePref.isEmpty()))?this.getInsurancePref():null);
            strategy.appendField(locator, this, "insurancePref", buffer, theInsurancePref);
        }
        {
            List<SeatingPrefType> theSeatingPref;
            theSeatingPref = (((this.seatingPref!= null)&&(!this.seatingPref.isEmpty()))?this.getSeatingPref():null);
            strategy.appendField(locator, this, "seatingPref", buffer, theSeatingPref);
        }
        {
            List<TicketDistribPrefType> theTicketDistribPref;
            theTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            strategy.appendField(locator, this, "ticketDistribPref", buffer, theTicketDistribPref);
        }
        {
            List<MediaEntertainPrefType> theMediaEntertainPref;
            theMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
            strategy.appendField(locator, this, "mediaEntertainPref", buffer, theMediaEntertainPref);
        }
        {
            List<PetInfoPrefType> thePetInfoPref;
            thePetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
            strategy.appendField(locator, this, "petInfoPref", buffer, thePetInfoPref);
        }
        {
            List<MealPrefType> theMealPref;
            theMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
            strategy.appendField(locator, this, "mealPref", buffer, theMealPref);
        }
        {
            List<LoyaltyPrefType> theLoyaltyPref;
            theLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
            strategy.appendField(locator, this, "loyaltyPref", buffer, theLoyaltyPref);
        }
        {
            List<SpecRequestPrefType> theSpecRequestPref;
            theSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
            strategy.appendField(locator, this, "specRequestPref", buffer, theSpecRequestPref);
        }
        {
            List<RelatedTravelerPrefType> theRelatedTravelerPref;
            theRelatedTravelerPref = (((this.relatedTravelerPref!= null)&&(!this.relatedTravelerPref.isEmpty()))?this.getRelatedTravelerPref():null);
            strategy.appendField(locator, this, "relatedTravelerPref", buffer, theRelatedTravelerPref);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            strategy.appendField(locator, this, "tpaExtensions", buffer, theTPAExtensions);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
        }
        {
            String theAltLangID;
            theAltLangID = this.getAltLangID();
            strategy.appendField(locator, this, "altLangID", buffer, theAltLangID);
        }
        {
            boolean theSmokingAllowed;
            theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            strategy.appendField(locator, this, "smokingAllowed", buffer, theSmokingAllowed);
        }
        {
            String thePrimaryLangID;
            thePrimaryLangID = this.getPrimaryLangID();
            strategy.appendField(locator, this, "primaryLangID", buffer, thePrimaryLangID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CommonPrefType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CommonPrefType that = ((CommonPrefType) object);
        {
            List<NamePrefType> lhsNamePref;
            lhsNamePref = (((this.namePref!= null)&&(!this.namePref.isEmpty()))?this.getNamePref():null);
            List<NamePrefType> rhsNamePref;
            rhsNamePref = (((that.namePref!= null)&&(!that.namePref.isEmpty()))?that.getNamePref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "namePref", lhsNamePref), LocatorUtils.property(thatLocator, "namePref", rhsNamePref), lhsNamePref, rhsNamePref)) {
                return false;
            }
        }
        {
            List<PhonePrefType> lhsPhonePref;
            lhsPhonePref = (((this.phonePref!= null)&&(!this.phonePref.isEmpty()))?this.getPhonePref():null);
            List<PhonePrefType> rhsPhonePref;
            rhsPhonePref = (((that.phonePref!= null)&&(!that.phonePref.isEmpty()))?that.getPhonePref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "phonePref", lhsPhonePref), LocatorUtils.property(thatLocator, "phonePref", rhsPhonePref), lhsPhonePref, rhsPhonePref)) {
                return false;
            }
        }
        {
            List<AddressPrefType> lhsAddressPref;
            lhsAddressPref = (((this.addressPref!= null)&&(!this.addressPref.isEmpty()))?this.getAddressPref():null);
            List<AddressPrefType> rhsAddressPref;
            rhsAddressPref = (((that.addressPref!= null)&&(!that.addressPref.isEmpty()))?that.getAddressPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addressPref", lhsAddressPref), LocatorUtils.property(thatLocator, "addressPref", rhsAddressPref), lhsAddressPref, rhsAddressPref)) {
                return false;
            }
        }
        {
            List<PaymentFormPrefType> lhsPaymentFormPref;
            lhsPaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
            List<PaymentFormPrefType> rhsPaymentFormPref;
            rhsPaymentFormPref = (((that.paymentFormPref!= null)&&(!that.paymentFormPref.isEmpty()))?that.getPaymentFormPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentFormPref", lhsPaymentFormPref), LocatorUtils.property(thatLocator, "paymentFormPref", rhsPaymentFormPref), lhsPaymentFormPref, rhsPaymentFormPref)) {
                return false;
            }
        }
        {
            List<InterestPrefType> lhsInterestPref;
            lhsInterestPref = (((this.interestPref!= null)&&(!this.interestPref.isEmpty()))?this.getInterestPref():null);
            List<InterestPrefType> rhsInterestPref;
            rhsInterestPref = (((that.interestPref!= null)&&(!that.interestPref.isEmpty()))?that.getInterestPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interestPref", lhsInterestPref), LocatorUtils.property(thatLocator, "interestPref", rhsInterestPref), lhsInterestPref, rhsInterestPref)) {
                return false;
            }
        }
        {
            List<InsurancePrefType> lhsInsurancePref;
            lhsInsurancePref = (((this.insurancePref!= null)&&(!this.insurancePref.isEmpty()))?this.getInsurancePref():null);
            List<InsurancePrefType> rhsInsurancePref;
            rhsInsurancePref = (((that.insurancePref!= null)&&(!that.insurancePref.isEmpty()))?that.getInsurancePref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "insurancePref", lhsInsurancePref), LocatorUtils.property(thatLocator, "insurancePref", rhsInsurancePref), lhsInsurancePref, rhsInsurancePref)) {
                return false;
            }
        }
        {
            List<SeatingPrefType> lhsSeatingPref;
            lhsSeatingPref = (((this.seatingPref!= null)&&(!this.seatingPref.isEmpty()))?this.getSeatingPref():null);
            List<SeatingPrefType> rhsSeatingPref;
            rhsSeatingPref = (((that.seatingPref!= null)&&(!that.seatingPref.isEmpty()))?that.getSeatingPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seatingPref", lhsSeatingPref), LocatorUtils.property(thatLocator, "seatingPref", rhsSeatingPref), lhsSeatingPref, rhsSeatingPref)) {
                return false;
            }
        }
        {
            List<TicketDistribPrefType> lhsTicketDistribPref;
            lhsTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            List<TicketDistribPrefType> rhsTicketDistribPref;
            rhsTicketDistribPref = (((that.ticketDistribPref!= null)&&(!that.ticketDistribPref.isEmpty()))?that.getTicketDistribPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ticketDistribPref", lhsTicketDistribPref), LocatorUtils.property(thatLocator, "ticketDistribPref", rhsTicketDistribPref), lhsTicketDistribPref, rhsTicketDistribPref)) {
                return false;
            }
        }
        {
            List<MediaEntertainPrefType> lhsMediaEntertainPref;
            lhsMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
            List<MediaEntertainPrefType> rhsMediaEntertainPref;
            rhsMediaEntertainPref = (((that.mediaEntertainPref!= null)&&(!that.mediaEntertainPref.isEmpty()))?that.getMediaEntertainPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mediaEntertainPref", lhsMediaEntertainPref), LocatorUtils.property(thatLocator, "mediaEntertainPref", rhsMediaEntertainPref), lhsMediaEntertainPref, rhsMediaEntertainPref)) {
                return false;
            }
        }
        {
            List<PetInfoPrefType> lhsPetInfoPref;
            lhsPetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
            List<PetInfoPrefType> rhsPetInfoPref;
            rhsPetInfoPref = (((that.petInfoPref!= null)&&(!that.petInfoPref.isEmpty()))?that.getPetInfoPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "petInfoPref", lhsPetInfoPref), LocatorUtils.property(thatLocator, "petInfoPref", rhsPetInfoPref), lhsPetInfoPref, rhsPetInfoPref)) {
                return false;
            }
        }
        {
            List<MealPrefType> lhsMealPref;
            lhsMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
            List<MealPrefType> rhsMealPref;
            rhsMealPref = (((that.mealPref!= null)&&(!that.mealPref.isEmpty()))?that.getMealPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mealPref", lhsMealPref), LocatorUtils.property(thatLocator, "mealPref", rhsMealPref), lhsMealPref, rhsMealPref)) {
                return false;
            }
        }
        {
            List<LoyaltyPrefType> lhsLoyaltyPref;
            lhsLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
            List<LoyaltyPrefType> rhsLoyaltyPref;
            rhsLoyaltyPref = (((that.loyaltyPref!= null)&&(!that.loyaltyPref.isEmpty()))?that.getLoyaltyPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "loyaltyPref", lhsLoyaltyPref), LocatorUtils.property(thatLocator, "loyaltyPref", rhsLoyaltyPref), lhsLoyaltyPref, rhsLoyaltyPref)) {
                return false;
            }
        }
        {
            List<SpecRequestPrefType> lhsSpecRequestPref;
            lhsSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
            List<SpecRequestPrefType> rhsSpecRequestPref;
            rhsSpecRequestPref = (((that.specRequestPref!= null)&&(!that.specRequestPref.isEmpty()))?that.getSpecRequestPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specRequestPref", lhsSpecRequestPref), LocatorUtils.property(thatLocator, "specRequestPref", rhsSpecRequestPref), lhsSpecRequestPref, rhsSpecRequestPref)) {
                return false;
            }
        }
        {
            List<RelatedTravelerPrefType> lhsRelatedTravelerPref;
            lhsRelatedTravelerPref = (((this.relatedTravelerPref!= null)&&(!this.relatedTravelerPref.isEmpty()))?this.getRelatedTravelerPref():null);
            List<RelatedTravelerPrefType> rhsRelatedTravelerPref;
            rhsRelatedTravelerPref = (((that.relatedTravelerPref!= null)&&(!that.relatedTravelerPref.isEmpty()))?that.getRelatedTravelerPref():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedTravelerPref", lhsRelatedTravelerPref), LocatorUtils.property(thatLocator, "relatedTravelerPref", rhsRelatedTravelerPref), lhsRelatedTravelerPref, rhsRelatedTravelerPref)) {
                return false;
            }
        }
        {
            TPAExtensionsType lhsTPAExtensions;
            lhsTPAExtensions = this.getTPAExtensions();
            TPAExtensionsType rhsTPAExtensions;
            rhsTPAExtensions = that.getTPAExtensions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tpaExtensions", lhsTPAExtensions), LocatorUtils.property(thatLocator, "tpaExtensions", rhsTPAExtensions), lhsTPAExtensions, rhsTPAExtensions)) {
                return false;
            }
        }
        {
            String lhsShareSynchInd;
            lhsShareSynchInd = this.getShareSynchInd();
            String rhsShareSynchInd;
            rhsShareSynchInd = that.getShareSynchInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                return false;
            }
        }
        {
            String lhsShareMarketInd;
            lhsShareMarketInd = this.getShareMarketInd();
            String rhsShareMarketInd;
            rhsShareMarketInd = that.getShareMarketInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                return false;
            }
        }
        {
            String lhsAltLangID;
            lhsAltLangID = this.getAltLangID();
            String rhsAltLangID;
            rhsAltLangID = that.getAltLangID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "altLangID", lhsAltLangID), LocatorUtils.property(thatLocator, "altLangID", rhsAltLangID), lhsAltLangID, rhsAltLangID)) {
                return false;
            }
        }
        {
            boolean lhsSmokingAllowed;
            lhsSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            boolean rhsSmokingAllowed;
            rhsSmokingAllowed = ((that.smokingAllowed!= null)?that.isSmokingAllowed():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smokingAllowed", lhsSmokingAllowed), LocatorUtils.property(thatLocator, "smokingAllowed", rhsSmokingAllowed), lhsSmokingAllowed, rhsSmokingAllowed)) {
                return false;
            }
        }
        {
            String lhsPrimaryLangID;
            lhsPrimaryLangID = this.getPrimaryLangID();
            String rhsPrimaryLangID;
            rhsPrimaryLangID = that.getPrimaryLangID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "primaryLangID", lhsPrimaryLangID), LocatorUtils.property(thatLocator, "primaryLangID", rhsPrimaryLangID), lhsPrimaryLangID, rhsPrimaryLangID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<NamePrefType> theNamePref;
            theNamePref = (((this.namePref!= null)&&(!this.namePref.isEmpty()))?this.getNamePref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "namePref", theNamePref), currentHashCode, theNamePref);
        }
        {
            List<PhonePrefType> thePhonePref;
            thePhonePref = (((this.phonePref!= null)&&(!this.phonePref.isEmpty()))?this.getPhonePref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phonePref", thePhonePref), currentHashCode, thePhonePref);
        }
        {
            List<AddressPrefType> theAddressPref;
            theAddressPref = (((this.addressPref!= null)&&(!this.addressPref.isEmpty()))?this.getAddressPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressPref", theAddressPref), currentHashCode, theAddressPref);
        }
        {
            List<PaymentFormPrefType> thePaymentFormPref;
            thePaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentFormPref", thePaymentFormPref), currentHashCode, thePaymentFormPref);
        }
        {
            List<InterestPrefType> theInterestPref;
            theInterestPref = (((this.interestPref!= null)&&(!this.interestPref.isEmpty()))?this.getInterestPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interestPref", theInterestPref), currentHashCode, theInterestPref);
        }
        {
            List<InsurancePrefType> theInsurancePref;
            theInsurancePref = (((this.insurancePref!= null)&&(!this.insurancePref.isEmpty()))?this.getInsurancePref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "insurancePref", theInsurancePref), currentHashCode, theInsurancePref);
        }
        {
            List<SeatingPrefType> theSeatingPref;
            theSeatingPref = (((this.seatingPref!= null)&&(!this.seatingPref.isEmpty()))?this.getSeatingPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatingPref", theSeatingPref), currentHashCode, theSeatingPref);
        }
        {
            List<TicketDistribPrefType> theTicketDistribPref;
            theTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ticketDistribPref", theTicketDistribPref), currentHashCode, theTicketDistribPref);
        }
        {
            List<MediaEntertainPrefType> theMediaEntertainPref;
            theMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mediaEntertainPref", theMediaEntertainPref), currentHashCode, theMediaEntertainPref);
        }
        {
            List<PetInfoPrefType> thePetInfoPref;
            thePetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "petInfoPref", thePetInfoPref), currentHashCode, thePetInfoPref);
        }
        {
            List<MealPrefType> theMealPref;
            theMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mealPref", theMealPref), currentHashCode, theMealPref);
        }
        {
            List<LoyaltyPrefType> theLoyaltyPref;
            theLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loyaltyPref", theLoyaltyPref), currentHashCode, theLoyaltyPref);
        }
        {
            List<SpecRequestPrefType> theSpecRequestPref;
            theSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specRequestPref", theSpecRequestPref), currentHashCode, theSpecRequestPref);
        }
        {
            List<RelatedTravelerPrefType> theRelatedTravelerPref;
            theRelatedTravelerPref = (((this.relatedTravelerPref!= null)&&(!this.relatedTravelerPref.isEmpty()))?this.getRelatedTravelerPref():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedTravelerPref", theRelatedTravelerPref), currentHashCode, theRelatedTravelerPref);
        }
        {
            TPAExtensionsType theTPAExtensions;
            theTPAExtensions = this.getTPAExtensions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tpaExtensions", theTPAExtensions), currentHashCode, theTPAExtensions);
        }
        {
            String theShareSynchInd;
            theShareSynchInd = this.getShareSynchInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
        }
        {
            String theShareMarketInd;
            theShareMarketInd = this.getShareMarketInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
        }
        {
            String theAltLangID;
            theAltLangID = this.getAltLangID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "altLangID", theAltLangID), currentHashCode, theAltLangID);
        }
        {
            boolean theSmokingAllowed;
            theSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smokingAllowed", theSmokingAllowed), currentHashCode, theSmokingAllowed);
        }
        {
            String thePrimaryLangID;
            thePrimaryLangID = this.getPrimaryLangID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "primaryLangID", thePrimaryLangID), currentHashCode, thePrimaryLangID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CommonPrefType) {
            final CommonPrefType copy = ((CommonPrefType) draftCopy);
            if ((this.namePref!= null)&&(!this.namePref.isEmpty())) {
                List<NamePrefType> sourceNamePref;
                sourceNamePref = (((this.namePref!= null)&&(!this.namePref.isEmpty()))?this.getNamePref():null);
                @SuppressWarnings("unchecked")
                List<NamePrefType> copyNamePref = ((List<NamePrefType> ) strategy.copy(LocatorUtils.property(locator, "namePref", sourceNamePref), sourceNamePref));
                copy.namePref = null;
                if (copyNamePref!= null) {
                    List<NamePrefType> uniqueNamePrefl = copy.getNamePref();
                    uniqueNamePrefl.addAll(copyNamePref);
                }
            } else {
                copy.namePref = null;
            }
            if ((this.phonePref!= null)&&(!this.phonePref.isEmpty())) {
                List<PhonePrefType> sourcePhonePref;
                sourcePhonePref = (((this.phonePref!= null)&&(!this.phonePref.isEmpty()))?this.getPhonePref():null);
                @SuppressWarnings("unchecked")
                List<PhonePrefType> copyPhonePref = ((List<PhonePrefType> ) strategy.copy(LocatorUtils.property(locator, "phonePref", sourcePhonePref), sourcePhonePref));
                copy.phonePref = null;
                if (copyPhonePref!= null) {
                    List<PhonePrefType> uniquePhonePrefl = copy.getPhonePref();
                    uniquePhonePrefl.addAll(copyPhonePref);
                }
            } else {
                copy.phonePref = null;
            }
            if ((this.addressPref!= null)&&(!this.addressPref.isEmpty())) {
                List<AddressPrefType> sourceAddressPref;
                sourceAddressPref = (((this.addressPref!= null)&&(!this.addressPref.isEmpty()))?this.getAddressPref():null);
                @SuppressWarnings("unchecked")
                List<AddressPrefType> copyAddressPref = ((List<AddressPrefType> ) strategy.copy(LocatorUtils.property(locator, "addressPref", sourceAddressPref), sourceAddressPref));
                copy.addressPref = null;
                if (copyAddressPref!= null) {
                    List<AddressPrefType> uniqueAddressPrefl = copy.getAddressPref();
                    uniqueAddressPrefl.addAll(copyAddressPref);
                }
            } else {
                copy.addressPref = null;
            }
            if ((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty())) {
                List<PaymentFormPrefType> sourcePaymentFormPref;
                sourcePaymentFormPref = (((this.paymentFormPref!= null)&&(!this.paymentFormPref.isEmpty()))?this.getPaymentFormPref():null);
                @SuppressWarnings("unchecked")
                List<PaymentFormPrefType> copyPaymentFormPref = ((List<PaymentFormPrefType> ) strategy.copy(LocatorUtils.property(locator, "paymentFormPref", sourcePaymentFormPref), sourcePaymentFormPref));
                copy.paymentFormPref = null;
                if (copyPaymentFormPref!= null) {
                    List<PaymentFormPrefType> uniquePaymentFormPrefl = copy.getPaymentFormPref();
                    uniquePaymentFormPrefl.addAll(copyPaymentFormPref);
                }
            } else {
                copy.paymentFormPref = null;
            }
            if ((this.interestPref!= null)&&(!this.interestPref.isEmpty())) {
                List<InterestPrefType> sourceInterestPref;
                sourceInterestPref = (((this.interestPref!= null)&&(!this.interestPref.isEmpty()))?this.getInterestPref():null);
                @SuppressWarnings("unchecked")
                List<InterestPrefType> copyInterestPref = ((List<InterestPrefType> ) strategy.copy(LocatorUtils.property(locator, "interestPref", sourceInterestPref), sourceInterestPref));
                copy.interestPref = null;
                if (copyInterestPref!= null) {
                    List<InterestPrefType> uniqueInterestPrefl = copy.getInterestPref();
                    uniqueInterestPrefl.addAll(copyInterestPref);
                }
            } else {
                copy.interestPref = null;
            }
            if ((this.insurancePref!= null)&&(!this.insurancePref.isEmpty())) {
                List<InsurancePrefType> sourceInsurancePref;
                sourceInsurancePref = (((this.insurancePref!= null)&&(!this.insurancePref.isEmpty()))?this.getInsurancePref():null);
                @SuppressWarnings("unchecked")
                List<InsurancePrefType> copyInsurancePref = ((List<InsurancePrefType> ) strategy.copy(LocatorUtils.property(locator, "insurancePref", sourceInsurancePref), sourceInsurancePref));
                copy.insurancePref = null;
                if (copyInsurancePref!= null) {
                    List<InsurancePrefType> uniqueInsurancePrefl = copy.getInsurancePref();
                    uniqueInsurancePrefl.addAll(copyInsurancePref);
                }
            } else {
                copy.insurancePref = null;
            }
            if ((this.seatingPref!= null)&&(!this.seatingPref.isEmpty())) {
                List<SeatingPrefType> sourceSeatingPref;
                sourceSeatingPref = (((this.seatingPref!= null)&&(!this.seatingPref.isEmpty()))?this.getSeatingPref():null);
                @SuppressWarnings("unchecked")
                List<SeatingPrefType> copySeatingPref = ((List<SeatingPrefType> ) strategy.copy(LocatorUtils.property(locator, "seatingPref", sourceSeatingPref), sourceSeatingPref));
                copy.seatingPref = null;
                if (copySeatingPref!= null) {
                    List<SeatingPrefType> uniqueSeatingPrefl = copy.getSeatingPref();
                    uniqueSeatingPrefl.addAll(copySeatingPref);
                }
            } else {
                copy.seatingPref = null;
            }
            if ((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty())) {
                List<TicketDistribPrefType> sourceTicketDistribPref;
                sourceTicketDistribPref = (((this.ticketDistribPref!= null)&&(!this.ticketDistribPref.isEmpty()))?this.getTicketDistribPref():null);
                @SuppressWarnings("unchecked")
                List<TicketDistribPrefType> copyTicketDistribPref = ((List<TicketDistribPrefType> ) strategy.copy(LocatorUtils.property(locator, "ticketDistribPref", sourceTicketDistribPref), sourceTicketDistribPref));
                copy.ticketDistribPref = null;
                if (copyTicketDistribPref!= null) {
                    List<TicketDistribPrefType> uniqueTicketDistribPrefl = copy.getTicketDistribPref();
                    uniqueTicketDistribPrefl.addAll(copyTicketDistribPref);
                }
            } else {
                copy.ticketDistribPref = null;
            }
            if ((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty())) {
                List<MediaEntertainPrefType> sourceMediaEntertainPref;
                sourceMediaEntertainPref = (((this.mediaEntertainPref!= null)&&(!this.mediaEntertainPref.isEmpty()))?this.getMediaEntertainPref():null);
                @SuppressWarnings("unchecked")
                List<MediaEntertainPrefType> copyMediaEntertainPref = ((List<MediaEntertainPrefType> ) strategy.copy(LocatorUtils.property(locator, "mediaEntertainPref", sourceMediaEntertainPref), sourceMediaEntertainPref));
                copy.mediaEntertainPref = null;
                if (copyMediaEntertainPref!= null) {
                    List<MediaEntertainPrefType> uniqueMediaEntertainPrefl = copy.getMediaEntertainPref();
                    uniqueMediaEntertainPrefl.addAll(copyMediaEntertainPref);
                }
            } else {
                copy.mediaEntertainPref = null;
            }
            if ((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty())) {
                List<PetInfoPrefType> sourcePetInfoPref;
                sourcePetInfoPref = (((this.petInfoPref!= null)&&(!this.petInfoPref.isEmpty()))?this.getPetInfoPref():null);
                @SuppressWarnings("unchecked")
                List<PetInfoPrefType> copyPetInfoPref = ((List<PetInfoPrefType> ) strategy.copy(LocatorUtils.property(locator, "petInfoPref", sourcePetInfoPref), sourcePetInfoPref));
                copy.petInfoPref = null;
                if (copyPetInfoPref!= null) {
                    List<PetInfoPrefType> uniquePetInfoPrefl = copy.getPetInfoPref();
                    uniquePetInfoPrefl.addAll(copyPetInfoPref);
                }
            } else {
                copy.petInfoPref = null;
            }
            if ((this.mealPref!= null)&&(!this.mealPref.isEmpty())) {
                List<MealPrefType> sourceMealPref;
                sourceMealPref = (((this.mealPref!= null)&&(!this.mealPref.isEmpty()))?this.getMealPref():null);
                @SuppressWarnings("unchecked")
                List<MealPrefType> copyMealPref = ((List<MealPrefType> ) strategy.copy(LocatorUtils.property(locator, "mealPref", sourceMealPref), sourceMealPref));
                copy.mealPref = null;
                if (copyMealPref!= null) {
                    List<MealPrefType> uniqueMealPrefl = copy.getMealPref();
                    uniqueMealPrefl.addAll(copyMealPref);
                }
            } else {
                copy.mealPref = null;
            }
            if ((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty())) {
                List<LoyaltyPrefType> sourceLoyaltyPref;
                sourceLoyaltyPref = (((this.loyaltyPref!= null)&&(!this.loyaltyPref.isEmpty()))?this.getLoyaltyPref():null);
                @SuppressWarnings("unchecked")
                List<LoyaltyPrefType> copyLoyaltyPref = ((List<LoyaltyPrefType> ) strategy.copy(LocatorUtils.property(locator, "loyaltyPref", sourceLoyaltyPref), sourceLoyaltyPref));
                copy.loyaltyPref = null;
                if (copyLoyaltyPref!= null) {
                    List<LoyaltyPrefType> uniqueLoyaltyPrefl = copy.getLoyaltyPref();
                    uniqueLoyaltyPrefl.addAll(copyLoyaltyPref);
                }
            } else {
                copy.loyaltyPref = null;
            }
            if ((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty())) {
                List<SpecRequestPrefType> sourceSpecRequestPref;
                sourceSpecRequestPref = (((this.specRequestPref!= null)&&(!this.specRequestPref.isEmpty()))?this.getSpecRequestPref():null);
                @SuppressWarnings("unchecked")
                List<SpecRequestPrefType> copySpecRequestPref = ((List<SpecRequestPrefType> ) strategy.copy(LocatorUtils.property(locator, "specRequestPref", sourceSpecRequestPref), sourceSpecRequestPref));
                copy.specRequestPref = null;
                if (copySpecRequestPref!= null) {
                    List<SpecRequestPrefType> uniqueSpecRequestPrefl = copy.getSpecRequestPref();
                    uniqueSpecRequestPrefl.addAll(copySpecRequestPref);
                }
            } else {
                copy.specRequestPref = null;
            }
            if ((this.relatedTravelerPref!= null)&&(!this.relatedTravelerPref.isEmpty())) {
                List<RelatedTravelerPrefType> sourceRelatedTravelerPref;
                sourceRelatedTravelerPref = (((this.relatedTravelerPref!= null)&&(!this.relatedTravelerPref.isEmpty()))?this.getRelatedTravelerPref():null);
                @SuppressWarnings("unchecked")
                List<RelatedTravelerPrefType> copyRelatedTravelerPref = ((List<RelatedTravelerPrefType> ) strategy.copy(LocatorUtils.property(locator, "relatedTravelerPref", sourceRelatedTravelerPref), sourceRelatedTravelerPref));
                copy.relatedTravelerPref = null;
                if (copyRelatedTravelerPref!= null) {
                    List<RelatedTravelerPrefType> uniqueRelatedTravelerPrefl = copy.getRelatedTravelerPref();
                    uniqueRelatedTravelerPrefl.addAll(copyRelatedTravelerPref);
                }
            } else {
                copy.relatedTravelerPref = null;
            }
            if (this.tpaExtensions!= null) {
                TPAExtensionsType sourceTPAExtensions;
                sourceTPAExtensions = this.getTPAExtensions();
                TPAExtensionsType copyTPAExtensions = ((TPAExtensionsType) strategy.copy(LocatorUtils.property(locator, "tpaExtensions", sourceTPAExtensions), sourceTPAExtensions));
                copy.setTPAExtensions(copyTPAExtensions);
            } else {
                copy.tpaExtensions = null;
            }
            if (this.shareSynchInd!= null) {
                String sourceShareSynchInd;
                sourceShareSynchInd = this.getShareSynchInd();
                String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                copy.setShareSynchInd(copyShareSynchInd);
            } else {
                copy.shareSynchInd = null;
            }
            if (this.shareMarketInd!= null) {
                String sourceShareMarketInd;
                sourceShareMarketInd = this.getShareMarketInd();
                String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                copy.setShareMarketInd(copyShareMarketInd);
            } else {
                copy.shareMarketInd = null;
            }
            if (this.altLangID!= null) {
                String sourceAltLangID;
                sourceAltLangID = this.getAltLangID();
                String copyAltLangID = ((String) strategy.copy(LocatorUtils.property(locator, "altLangID", sourceAltLangID), sourceAltLangID));
                copy.setAltLangID(copyAltLangID);
            } else {
                copy.altLangID = null;
            }
            if (this.smokingAllowed!= null) {
                boolean sourceSmokingAllowed;
                sourceSmokingAllowed = ((this.smokingAllowed!= null)?this.isSmokingAllowed():false);
                boolean copySmokingAllowed = strategy.copy(LocatorUtils.property(locator, "smokingAllowed", sourceSmokingAllowed), sourceSmokingAllowed);
                copy.setSmokingAllowed(copySmokingAllowed);
            } else {
                copy.smokingAllowed = null;
            }
            if (this.primaryLangID!= null) {
                String sourcePrimaryLangID;
                sourcePrimaryLangID = this.getPrimaryLangID();
                String copyPrimaryLangID = ((String) strategy.copy(LocatorUtils.property(locator, "primaryLangID", sourcePrimaryLangID), sourcePrimaryLangID));
                copy.setPrimaryLangID(copyPrimaryLangID);
            } else {
                copy.primaryLangID = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CommonPrefType();
    }

}
