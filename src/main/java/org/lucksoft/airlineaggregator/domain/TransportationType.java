//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Defines the type of transportation offered.
 * 
 * <p>Java class for TransportationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TransportationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="Transportation" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="MultimediaDescriptions" type="{http://www.opentravel.org/OTA/2003/05}MultimediaDescriptionsType" minOccurs="0"/&gt;
 *                   &lt;element name="OperationSchedules" type="{http://www.opentravel.org/OTA/2003/05}OperationSchedulesType" minOccurs="0"/&gt;
 *                   &lt;element name="DescriptiveText" minOccurs="0"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *                         &lt;pattern value="[A-Za-z0-9]{1,500}"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}ID_OptionalGroup"/&gt;
 *                 &lt;attribute name="NotificationRequired" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *                 &lt;attribute name="TransportationCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                 &lt;attribute name="ChargeUnit" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                 &lt;attribute name="Included" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="Description" type="{http://www.opentravel.org/OTA/2003/05}StringLength0to64" /&gt;
 *                 &lt;attribute name="TypicalTravelTime" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *                 &lt;attribute name="ExistsCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TransportationType", propOrder = {
    "transportation"
})
public class TransportationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "Transportation", required = true)
    protected List<TransportationType.Transportation> transportation;

    /**
     * Gets the value of the transportation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transportation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTransportation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TransportationType.Transportation }
     * 
     * 
     */
    public List<TransportationType.Transportation> getTransportation() {
        if (transportation == null) {
            transportation = new ArrayList<TransportationType.Transportation>();
        }
        return this.transportation;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<TransportationType.Transportation> theTransportation;
            theTransportation = (((this.transportation!= null)&&(!this.transportation.isEmpty()))?this.getTransportation():null);
            strategy.appendField(locator, this, "transportation", buffer, theTransportation);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TransportationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TransportationType that = ((TransportationType) object);
        {
            List<TransportationType.Transportation> lhsTransportation;
            lhsTransportation = (((this.transportation!= null)&&(!this.transportation.isEmpty()))?this.getTransportation():null);
            List<TransportationType.Transportation> rhsTransportation;
            rhsTransportation = (((that.transportation!= null)&&(!that.transportation.isEmpty()))?that.getTransportation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transportation", lhsTransportation), LocatorUtils.property(thatLocator, "transportation", rhsTransportation), lhsTransportation, rhsTransportation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<TransportationType.Transportation> theTransportation;
            theTransportation = (((this.transportation!= null)&&(!this.transportation.isEmpty()))?this.getTransportation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transportation", theTransportation), currentHashCode, theTransportation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TransportationType) {
            final TransportationType copy = ((TransportationType) draftCopy);
            if ((this.transportation!= null)&&(!this.transportation.isEmpty())) {
                List<TransportationType.Transportation> sourceTransportation;
                sourceTransportation = (((this.transportation!= null)&&(!this.transportation.isEmpty()))?this.getTransportation():null);
                @SuppressWarnings("unchecked")
                List<TransportationType.Transportation> copyTransportation = ((List<TransportationType.Transportation> ) strategy.copy(LocatorUtils.property(locator, "transportation", sourceTransportation), sourceTransportation));
                copy.transportation = null;
                if (copyTransportation!= null) {
                    List<TransportationType.Transportation> uniqueTransportationl = copy.getTransportation();
                    uniqueTransportationl.addAll(copyTransportation);
                }
            } else {
                copy.transportation = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TransportationType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="MultimediaDescriptions" type="{http://www.opentravel.org/OTA/2003/05}MultimediaDescriptionsType" minOccurs="0"/&gt;
     *         &lt;element name="OperationSchedules" type="{http://www.opentravel.org/OTA/2003/05}OperationSchedulesType" minOccurs="0"/&gt;
     *         &lt;element name="DescriptiveText" minOccurs="0"&gt;
     *           &lt;simpleType&gt;
     *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
     *               &lt;pattern value="[A-Za-z0-9]{1,500}"/&gt;
     *             &lt;/restriction&gt;
     *           &lt;/simpleType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeInfoGroup"/&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyAmountGroup"/&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}ID_OptionalGroup"/&gt;
     *       &lt;attribute name="NotificationRequired" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *       &lt;attribute name="TransportationCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *       &lt;attribute name="ChargeUnit" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *       &lt;attribute name="Included" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="Description" type="{http://www.opentravel.org/OTA/2003/05}StringLength0to64" /&gt;
     *       &lt;attribute name="TypicalTravelTime" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
     *       &lt;attribute name="ExistsCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "multimediaDescriptions",
        "operationSchedules",
        "descriptiveText"
    })
    public static class Transportation
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "MultimediaDescriptions")
        protected MultimediaDescriptionsType multimediaDescriptions;
        @XmlElement(name = "OperationSchedules")
        protected OperationSchedulesType operationSchedules;
        @XmlElement(name = "DescriptiveText")
        protected String descriptiveText;
        @XmlAttribute(name = "NotificationRequired")
        protected String notificationRequired;
        @XmlAttribute(name = "TransportationCode")
        protected String transportationCode;
        @XmlAttribute(name = "ChargeUnit")
        protected String chargeUnit;
        @XmlAttribute(name = "Included")
        protected Boolean included;
        @XmlAttribute(name = "Description")
        protected String description;
        @XmlAttribute(name = "TypicalTravelTime")
        protected String typicalTravelTime;
        @XmlAttribute(name = "ExistsCode")
        protected String existsCode;
        @XmlAttribute(name = "CodeDetail")
        protected String codeDetail;
        @XmlAttribute(name = "Removal")
        protected Boolean removal;
        @XmlAttribute(name = "Amount")
        protected BigDecimal amount;
        @XmlAttribute(name = "CurrencyCode")
        protected String currencyCode;
        @XmlAttribute(name = "DecimalPlaces")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger decimalPlaces;
        @XmlAttribute(name = "ID")
        protected String id;

        /**
         * Gets the value of the multimediaDescriptions property.
         * 
         * @return
         *     possible object is
         *     {@link MultimediaDescriptionsType }
         *     
         */
        public MultimediaDescriptionsType getMultimediaDescriptions() {
            return multimediaDescriptions;
        }

        /**
         * Sets the value of the multimediaDescriptions property.
         * 
         * @param value
         *     allowed object is
         *     {@link MultimediaDescriptionsType }
         *     
         */
        public void setMultimediaDescriptions(MultimediaDescriptionsType value) {
            this.multimediaDescriptions = value;
        }

        /**
         * Gets the value of the operationSchedules property.
         * 
         * @return
         *     possible object is
         *     {@link OperationSchedulesType }
         *     
         */
        public OperationSchedulesType getOperationSchedules() {
            return operationSchedules;
        }

        /**
         * Sets the value of the operationSchedules property.
         * 
         * @param value
         *     allowed object is
         *     {@link OperationSchedulesType }
         *     
         */
        public void setOperationSchedules(OperationSchedulesType value) {
            this.operationSchedules = value;
        }

        /**
         * Gets the value of the descriptiveText property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDescriptiveText() {
            return descriptiveText;
        }

        /**
         * Sets the value of the descriptiveText property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDescriptiveText(String value) {
            this.descriptiveText = value;
        }

        /**
         * Gets the value of the notificationRequired property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNotificationRequired() {
            return notificationRequired;
        }

        /**
         * Sets the value of the notificationRequired property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNotificationRequired(String value) {
            this.notificationRequired = value;
        }

        /**
         * Gets the value of the transportationCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTransportationCode() {
            return transportationCode;
        }

        /**
         * Sets the value of the transportationCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTransportationCode(String value) {
            this.transportationCode = value;
        }

        /**
         * Gets the value of the chargeUnit property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChargeUnit() {
            return chargeUnit;
        }

        /**
         * Sets the value of the chargeUnit property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setChargeUnit(String value) {
            this.chargeUnit = value;
        }

        /**
         * Gets the value of the included property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isIncluded() {
            return included;
        }

        /**
         * Sets the value of the included property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setIncluded(Boolean value) {
            this.included = value;
        }

        /**
         * Gets the value of the description property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDescription() {
            return description;
        }

        /**
         * Sets the value of the description property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDescription(String value) {
            this.description = value;
        }

        /**
         * Gets the value of the typicalTravelTime property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTypicalTravelTime() {
            return typicalTravelTime;
        }

        /**
         * Sets the value of the typicalTravelTime property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTypicalTravelTime(String value) {
            this.typicalTravelTime = value;
        }

        /**
         * Gets the value of the existsCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getExistsCode() {
            return existsCode;
        }

        /**
         * Sets the value of the existsCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setExistsCode(String value) {
            this.existsCode = value;
        }

        /**
         * Gets the value of the codeDetail property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCodeDetail() {
            return codeDetail;
        }

        /**
         * Sets the value of the codeDetail property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCodeDetail(String value) {
            this.codeDetail = value;
        }

        /**
         * Gets the value of the removal property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isRemoval() {
            if (removal == null) {
                return false;
            } else {
                return removal;
            }
        }

        /**
         * Sets the value of the removal property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setRemoval(Boolean value) {
            this.removal = value;
        }

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *     
         */
        public BigDecimal getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *     
         */
        public void setAmount(BigDecimal value) {
            this.amount = value;
        }

        /**
         * Gets the value of the currencyCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCurrencyCode() {
            return currencyCode;
        }

        /**
         * Sets the value of the currencyCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCurrencyCode(String value) {
            this.currencyCode = value;
        }

        /**
         * Gets the value of the decimalPlaces property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getDecimalPlaces() {
            return decimalPlaces;
        }

        /**
         * Sets the value of the decimalPlaces property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setDecimalPlaces(BigInteger value) {
            this.decimalPlaces = value;
        }

        /**
         * Gets the value of the id property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getID() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setID(String value) {
            this.id = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                MultimediaDescriptionsType theMultimediaDescriptions;
                theMultimediaDescriptions = this.getMultimediaDescriptions();
                strategy.appendField(locator, this, "multimediaDescriptions", buffer, theMultimediaDescriptions);
            }
            {
                OperationSchedulesType theOperationSchedules;
                theOperationSchedules = this.getOperationSchedules();
                strategy.appendField(locator, this, "operationSchedules", buffer, theOperationSchedules);
            }
            {
                String theDescriptiveText;
                theDescriptiveText = this.getDescriptiveText();
                strategy.appendField(locator, this, "descriptiveText", buffer, theDescriptiveText);
            }
            {
                String theNotificationRequired;
                theNotificationRequired = this.getNotificationRequired();
                strategy.appendField(locator, this, "notificationRequired", buffer, theNotificationRequired);
            }
            {
                String theTransportationCode;
                theTransportationCode = this.getTransportationCode();
                strategy.appendField(locator, this, "transportationCode", buffer, theTransportationCode);
            }
            {
                String theChargeUnit;
                theChargeUnit = this.getChargeUnit();
                strategy.appendField(locator, this, "chargeUnit", buffer, theChargeUnit);
            }
            {
                Boolean theIncluded;
                theIncluded = this.isIncluded();
                strategy.appendField(locator, this, "included", buffer, theIncluded);
            }
            {
                String theDescription;
                theDescription = this.getDescription();
                strategy.appendField(locator, this, "description", buffer, theDescription);
            }
            {
                String theTypicalTravelTime;
                theTypicalTravelTime = this.getTypicalTravelTime();
                strategy.appendField(locator, this, "typicalTravelTime", buffer, theTypicalTravelTime);
            }
            {
                String theExistsCode;
                theExistsCode = this.getExistsCode();
                strategy.appendField(locator, this, "existsCode", buffer, theExistsCode);
            }
            {
                String theCodeDetail;
                theCodeDetail = this.getCodeDetail();
                strategy.appendField(locator, this, "codeDetail", buffer, theCodeDetail);
            }
            {
                boolean theRemoval;
                theRemoval = ((this.removal!= null)?this.isRemoval():false);
                strategy.appendField(locator, this, "removal", buffer, theRemoval);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
            }
            {
                String theID;
                theID = this.getID();
                strategy.appendField(locator, this, "id", buffer, theID);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof TransportationType.Transportation)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final TransportationType.Transportation that = ((TransportationType.Transportation) object);
            {
                MultimediaDescriptionsType lhsMultimediaDescriptions;
                lhsMultimediaDescriptions = this.getMultimediaDescriptions();
                MultimediaDescriptionsType rhsMultimediaDescriptions;
                rhsMultimediaDescriptions = that.getMultimediaDescriptions();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "multimediaDescriptions", lhsMultimediaDescriptions), LocatorUtils.property(thatLocator, "multimediaDescriptions", rhsMultimediaDescriptions), lhsMultimediaDescriptions, rhsMultimediaDescriptions)) {
                    return false;
                }
            }
            {
                OperationSchedulesType lhsOperationSchedules;
                lhsOperationSchedules = this.getOperationSchedules();
                OperationSchedulesType rhsOperationSchedules;
                rhsOperationSchedules = that.getOperationSchedules();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "operationSchedules", lhsOperationSchedules), LocatorUtils.property(thatLocator, "operationSchedules", rhsOperationSchedules), lhsOperationSchedules, rhsOperationSchedules)) {
                    return false;
                }
            }
            {
                String lhsDescriptiveText;
                lhsDescriptiveText = this.getDescriptiveText();
                String rhsDescriptiveText;
                rhsDescriptiveText = that.getDescriptiveText();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "descriptiveText", lhsDescriptiveText), LocatorUtils.property(thatLocator, "descriptiveText", rhsDescriptiveText), lhsDescriptiveText, rhsDescriptiveText)) {
                    return false;
                }
            }
            {
                String lhsNotificationRequired;
                lhsNotificationRequired = this.getNotificationRequired();
                String rhsNotificationRequired;
                rhsNotificationRequired = that.getNotificationRequired();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "notificationRequired", lhsNotificationRequired), LocatorUtils.property(thatLocator, "notificationRequired", rhsNotificationRequired), lhsNotificationRequired, rhsNotificationRequired)) {
                    return false;
                }
            }
            {
                String lhsTransportationCode;
                lhsTransportationCode = this.getTransportationCode();
                String rhsTransportationCode;
                rhsTransportationCode = that.getTransportationCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "transportationCode", lhsTransportationCode), LocatorUtils.property(thatLocator, "transportationCode", rhsTransportationCode), lhsTransportationCode, rhsTransportationCode)) {
                    return false;
                }
            }
            {
                String lhsChargeUnit;
                lhsChargeUnit = this.getChargeUnit();
                String rhsChargeUnit;
                rhsChargeUnit = that.getChargeUnit();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "chargeUnit", lhsChargeUnit), LocatorUtils.property(thatLocator, "chargeUnit", rhsChargeUnit), lhsChargeUnit, rhsChargeUnit)) {
                    return false;
                }
            }
            {
                Boolean lhsIncluded;
                lhsIncluded = this.isIncluded();
                Boolean rhsIncluded;
                rhsIncluded = that.isIncluded();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "included", lhsIncluded), LocatorUtils.property(thatLocator, "included", rhsIncluded), lhsIncluded, rhsIncluded)) {
                    return false;
                }
            }
            {
                String lhsDescription;
                lhsDescription = this.getDescription();
                String rhsDescription;
                rhsDescription = that.getDescription();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                    return false;
                }
            }
            {
                String lhsTypicalTravelTime;
                lhsTypicalTravelTime = this.getTypicalTravelTime();
                String rhsTypicalTravelTime;
                rhsTypicalTravelTime = that.getTypicalTravelTime();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "typicalTravelTime", lhsTypicalTravelTime), LocatorUtils.property(thatLocator, "typicalTravelTime", rhsTypicalTravelTime), lhsTypicalTravelTime, rhsTypicalTravelTime)) {
                    return false;
                }
            }
            {
                String lhsExistsCode;
                lhsExistsCode = this.getExistsCode();
                String rhsExistsCode;
                rhsExistsCode = that.getExistsCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "existsCode", lhsExistsCode), LocatorUtils.property(thatLocator, "existsCode", rhsExistsCode), lhsExistsCode, rhsExistsCode)) {
                    return false;
                }
            }
            {
                String lhsCodeDetail;
                lhsCodeDetail = this.getCodeDetail();
                String rhsCodeDetail;
                rhsCodeDetail = that.getCodeDetail();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "codeDetail", lhsCodeDetail), LocatorUtils.property(thatLocator, "codeDetail", rhsCodeDetail), lhsCodeDetail, rhsCodeDetail)) {
                    return false;
                }
            }
            {
                boolean lhsRemoval;
                lhsRemoval = ((this.removal!= null)?this.isRemoval():false);
                boolean rhsRemoval;
                rhsRemoval = ((that.removal!= null)?that.isRemoval():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "removal", lhsRemoval), LocatorUtils.property(thatLocator, "removal", rhsRemoval), lhsRemoval, rhsRemoval)) {
                    return false;
                }
            }
            {
                BigDecimal lhsAmount;
                lhsAmount = this.getAmount();
                BigDecimal rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            {
                String lhsCurrencyCode;
                lhsCurrencyCode = this.getCurrencyCode();
                String rhsCurrencyCode;
                rhsCurrencyCode = that.getCurrencyCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsDecimalPlaces;
                lhsDecimalPlaces = this.getDecimalPlaces();
                BigInteger rhsDecimalPlaces;
                rhsDecimalPlaces = that.getDecimalPlaces();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                    return false;
                }
            }
            {
                String lhsID;
                lhsID = this.getID();
                String rhsID;
                rhsID = that.getID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsID), LocatorUtils.property(thatLocator, "id", rhsID), lhsID, rhsID)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                MultimediaDescriptionsType theMultimediaDescriptions;
                theMultimediaDescriptions = this.getMultimediaDescriptions();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multimediaDescriptions", theMultimediaDescriptions), currentHashCode, theMultimediaDescriptions);
            }
            {
                OperationSchedulesType theOperationSchedules;
                theOperationSchedules = this.getOperationSchedules();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operationSchedules", theOperationSchedules), currentHashCode, theOperationSchedules);
            }
            {
                String theDescriptiveText;
                theDescriptiveText = this.getDescriptiveText();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "descriptiveText", theDescriptiveText), currentHashCode, theDescriptiveText);
            }
            {
                String theNotificationRequired;
                theNotificationRequired = this.getNotificationRequired();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notificationRequired", theNotificationRequired), currentHashCode, theNotificationRequired);
            }
            {
                String theTransportationCode;
                theTransportationCode = this.getTransportationCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transportationCode", theTransportationCode), currentHashCode, theTransportationCode);
            }
            {
                String theChargeUnit;
                theChargeUnit = this.getChargeUnit();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chargeUnit", theChargeUnit), currentHashCode, theChargeUnit);
            }
            {
                Boolean theIncluded;
                theIncluded = this.isIncluded();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "included", theIncluded), currentHashCode, theIncluded);
            }
            {
                String theDescription;
                theDescription = this.getDescription();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
            }
            {
                String theTypicalTravelTime;
                theTypicalTravelTime = this.getTypicalTravelTime();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "typicalTravelTime", theTypicalTravelTime), currentHashCode, theTypicalTravelTime);
            }
            {
                String theExistsCode;
                theExistsCode = this.getExistsCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "existsCode", theExistsCode), currentHashCode, theExistsCode);
            }
            {
                String theCodeDetail;
                theCodeDetail = this.getCodeDetail();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeDetail", theCodeDetail), currentHashCode, theCodeDetail);
            }
            {
                boolean theRemoval;
                theRemoval = ((this.removal!= null)?this.isRemoval():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "removal", theRemoval), currentHashCode, theRemoval);
            }
            {
                BigDecimal theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            {
                String theCurrencyCode;
                theCurrencyCode = this.getCurrencyCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
            }
            {
                BigInteger theDecimalPlaces;
                theDecimalPlaces = this.getDecimalPlaces();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
            }
            {
                String theID;
                theID = this.getID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theID), currentHashCode, theID);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof TransportationType.Transportation) {
                final TransportationType.Transportation copy = ((TransportationType.Transportation) draftCopy);
                if (this.multimediaDescriptions!= null) {
                    MultimediaDescriptionsType sourceMultimediaDescriptions;
                    sourceMultimediaDescriptions = this.getMultimediaDescriptions();
                    MultimediaDescriptionsType copyMultimediaDescriptions = ((MultimediaDescriptionsType) strategy.copy(LocatorUtils.property(locator, "multimediaDescriptions", sourceMultimediaDescriptions), sourceMultimediaDescriptions));
                    copy.setMultimediaDescriptions(copyMultimediaDescriptions);
                } else {
                    copy.multimediaDescriptions = null;
                }
                if (this.operationSchedules!= null) {
                    OperationSchedulesType sourceOperationSchedules;
                    sourceOperationSchedules = this.getOperationSchedules();
                    OperationSchedulesType copyOperationSchedules = ((OperationSchedulesType) strategy.copy(LocatorUtils.property(locator, "operationSchedules", sourceOperationSchedules), sourceOperationSchedules));
                    copy.setOperationSchedules(copyOperationSchedules);
                } else {
                    copy.operationSchedules = null;
                }
                if (this.descriptiveText!= null) {
                    String sourceDescriptiveText;
                    sourceDescriptiveText = this.getDescriptiveText();
                    String copyDescriptiveText = ((String) strategy.copy(LocatorUtils.property(locator, "descriptiveText", sourceDescriptiveText), sourceDescriptiveText));
                    copy.setDescriptiveText(copyDescriptiveText);
                } else {
                    copy.descriptiveText = null;
                }
                if (this.notificationRequired!= null) {
                    String sourceNotificationRequired;
                    sourceNotificationRequired = this.getNotificationRequired();
                    String copyNotificationRequired = ((String) strategy.copy(LocatorUtils.property(locator, "notificationRequired", sourceNotificationRequired), sourceNotificationRequired));
                    copy.setNotificationRequired(copyNotificationRequired);
                } else {
                    copy.notificationRequired = null;
                }
                if (this.transportationCode!= null) {
                    String sourceTransportationCode;
                    sourceTransportationCode = this.getTransportationCode();
                    String copyTransportationCode = ((String) strategy.copy(LocatorUtils.property(locator, "transportationCode", sourceTransportationCode), sourceTransportationCode));
                    copy.setTransportationCode(copyTransportationCode);
                } else {
                    copy.transportationCode = null;
                }
                if (this.chargeUnit!= null) {
                    String sourceChargeUnit;
                    sourceChargeUnit = this.getChargeUnit();
                    String copyChargeUnit = ((String) strategy.copy(LocatorUtils.property(locator, "chargeUnit", sourceChargeUnit), sourceChargeUnit));
                    copy.setChargeUnit(copyChargeUnit);
                } else {
                    copy.chargeUnit = null;
                }
                if (this.included!= null) {
                    Boolean sourceIncluded;
                    sourceIncluded = this.isIncluded();
                    Boolean copyIncluded = ((Boolean) strategy.copy(LocatorUtils.property(locator, "included", sourceIncluded), sourceIncluded));
                    copy.setIncluded(copyIncluded);
                } else {
                    copy.included = null;
                }
                if (this.description!= null) {
                    String sourceDescription;
                    sourceDescription = this.getDescription();
                    String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                    copy.setDescription(copyDescription);
                } else {
                    copy.description = null;
                }
                if (this.typicalTravelTime!= null) {
                    String sourceTypicalTravelTime;
                    sourceTypicalTravelTime = this.getTypicalTravelTime();
                    String copyTypicalTravelTime = ((String) strategy.copy(LocatorUtils.property(locator, "typicalTravelTime", sourceTypicalTravelTime), sourceTypicalTravelTime));
                    copy.setTypicalTravelTime(copyTypicalTravelTime);
                } else {
                    copy.typicalTravelTime = null;
                }
                if (this.existsCode!= null) {
                    String sourceExistsCode;
                    sourceExistsCode = this.getExistsCode();
                    String copyExistsCode = ((String) strategy.copy(LocatorUtils.property(locator, "existsCode", sourceExistsCode), sourceExistsCode));
                    copy.setExistsCode(copyExistsCode);
                } else {
                    copy.existsCode = null;
                }
                if (this.codeDetail!= null) {
                    String sourceCodeDetail;
                    sourceCodeDetail = this.getCodeDetail();
                    String copyCodeDetail = ((String) strategy.copy(LocatorUtils.property(locator, "codeDetail", sourceCodeDetail), sourceCodeDetail));
                    copy.setCodeDetail(copyCodeDetail);
                } else {
                    copy.codeDetail = null;
                }
                if (this.removal!= null) {
                    boolean sourceRemoval;
                    sourceRemoval = ((this.removal!= null)?this.isRemoval():false);
                    boolean copyRemoval = strategy.copy(LocatorUtils.property(locator, "removal", sourceRemoval), sourceRemoval);
                    copy.setRemoval(copyRemoval);
                } else {
                    copy.removal = null;
                }
                if (this.amount!= null) {
                    BigDecimal sourceAmount;
                    sourceAmount = this.getAmount();
                    BigDecimal copyAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
                if (this.currencyCode!= null) {
                    String sourceCurrencyCode;
                    sourceCurrencyCode = this.getCurrencyCode();
                    String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                    copy.setCurrencyCode(copyCurrencyCode);
                } else {
                    copy.currencyCode = null;
                }
                if (this.decimalPlaces!= null) {
                    BigInteger sourceDecimalPlaces;
                    sourceDecimalPlaces = this.getDecimalPlaces();
                    BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                    copy.setDecimalPlaces(copyDecimalPlaces);
                } else {
                    copy.decimalPlaces = null;
                }
                if (this.id!= null) {
                    String sourceID;
                    sourceID = this.getID();
                    String copyID = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceID), sourceID));
                    copy.setID(copyID);
                } else {
                    copy.id = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new TransportationType.Transportation();
        }

    }

}
