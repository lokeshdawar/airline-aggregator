//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 *  Construct for holding the booked flight segment information.
 * 
 * <p>Java class for BookFlightSegmentType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="BookFlightSegmentType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}FlightSegmentType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="MarriageGrp" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to16" minOccurs="0"/&gt;
 *         &lt;element name="BookingClassAvails" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="BookingClassAvail" maxOccurs="26"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}BookingClassAvailabilityGroup"/&gt;
 *                           &lt;attribute name="RPH" use="required" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Comment" type="{http://www.opentravel.org/OTA/2003/05}FreeTextType" maxOccurs="9" minOccurs="0"/&gt;
 *         &lt;element name="StopLocation" maxOccurs="9" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LocationGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="ResBookDesigCode" type="{http://www.opentravel.org/OTA/2003/05}UpperCaseAlphaLength1to2" /&gt;
 *       &lt;attribute name="NumberInParty" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" /&gt;
 *       &lt;attribute name="Status" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *       &lt;attribute name="E_TicketEligibility"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.opentravel.org/OTA/2003/05}StringLength1to16"&gt;
 *             &lt;enumeration value="Eligible"/&gt;
 *             &lt;enumeration value="Not Eligible"/&gt;
 *             &lt;enumeration value="Required"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *       &lt;attribute name="MealCode" type="{http://www.opentravel.org/OTA/2003/05}MealServiceType" /&gt;
 *       &lt;attribute name="DepartureDay" type="{http://www.opentravel.org/OTA/2003/05}DayOfWeekType" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BookFlightSegmentType", propOrder = {
    "marriageGrp",
    "bookingClassAvails",
    "comment",
    "stopLocation"
})
public class BookFlightSegmentType
    extends FlightSegmentType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "MarriageGrp")
    protected String marriageGrp;
    @XmlElement(name = "BookingClassAvails")
    protected BookFlightSegmentType.BookingClassAvails bookingClassAvails;
    @XmlElement(name = "Comment")
    protected List<FreeTextType> comment;
    @XmlElement(name = "StopLocation")
    protected List<BookFlightSegmentType.StopLocation> stopLocation;
    @XmlAttribute(name = "ResBookDesigCode")
    protected String resBookDesigCode;
    @XmlAttribute(name = "NumberInParty")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger numberInParty;
    @XmlAttribute(name = "Status")
    protected String status;
    @XmlAttribute(name = "E_TicketEligibility")
    protected String eTicketEligibility;
    @XmlAttribute(name = "MealCode")
    protected String mealCode;
    @XmlAttribute(name = "DepartureDay")
    protected DayOfWeekType departureDay;

    /**
     * Gets the value of the marriageGrp property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMarriageGrp() {
        return marriageGrp;
    }

    /**
     * Sets the value of the marriageGrp property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMarriageGrp(String value) {
        this.marriageGrp = value;
    }

    /**
     * Gets the value of the bookingClassAvails property.
     * 
     * @return
     *     possible object is
     *     {@link BookFlightSegmentType.BookingClassAvails }
     *     
     */
    public BookFlightSegmentType.BookingClassAvails getBookingClassAvails() {
        return bookingClassAvails;
    }

    /**
     * Sets the value of the bookingClassAvails property.
     * 
     * @param value
     *     allowed object is
     *     {@link BookFlightSegmentType.BookingClassAvails }
     *     
     */
    public void setBookingClassAvails(BookFlightSegmentType.BookingClassAvails value) {
        this.bookingClassAvails = value;
    }

    /**
     * Gets the value of the comment property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the comment property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getComment().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FreeTextType }
     * 
     * 
     */
    public List<FreeTextType> getComment() {
        if (comment == null) {
            comment = new ArrayList<FreeTextType>();
        }
        return this.comment;
    }

    /**
     * Gets the value of the stopLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the stopLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getStopLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BookFlightSegmentType.StopLocation }
     * 
     * 
     */
    public List<BookFlightSegmentType.StopLocation> getStopLocation() {
        if (stopLocation == null) {
            stopLocation = new ArrayList<BookFlightSegmentType.StopLocation>();
        }
        return this.stopLocation;
    }

    /**
     * Gets the value of the resBookDesigCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getResBookDesigCode() {
        return resBookDesigCode;
    }

    /**
     * Sets the value of the resBookDesigCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setResBookDesigCode(String value) {
        this.resBookDesigCode = value;
    }

    /**
     * Gets the value of the numberInParty property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getNumberInParty() {
        return numberInParty;
    }

    /**
     * Sets the value of the numberInParty property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setNumberInParty(BigInteger value) {
        this.numberInParty = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the eTicketEligibility property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getETicketEligibility() {
        return eTicketEligibility;
    }

    /**
     * Sets the value of the eTicketEligibility property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setETicketEligibility(String value) {
        this.eTicketEligibility = value;
    }

    /**
     * Gets the value of the mealCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMealCode() {
        return mealCode;
    }

    /**
     * Sets the value of the mealCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMealCode(String value) {
        this.mealCode = value;
    }

    /**
     * Gets the value of the departureDay property.
     * 
     * @return
     *     possible object is
     *     {@link DayOfWeekType }
     *     
     */
    public DayOfWeekType getDepartureDay() {
        return departureDay;
    }

    /**
     * Sets the value of the departureDay property.
     * 
     * @param value
     *     allowed object is
     *     {@link DayOfWeekType }
     *     
     */
    public void setDepartureDay(DayOfWeekType value) {
        this.departureDay = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theMarriageGrp;
            theMarriageGrp = this.getMarriageGrp();
            strategy.appendField(locator, this, "marriageGrp", buffer, theMarriageGrp);
        }
        {
            BookFlightSegmentType.BookingClassAvails theBookingClassAvails;
            theBookingClassAvails = this.getBookingClassAvails();
            strategy.appendField(locator, this, "bookingClassAvails", buffer, theBookingClassAvails);
        }
        {
            List<FreeTextType> theComment;
            theComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
            strategy.appendField(locator, this, "comment", buffer, theComment);
        }
        {
            List<BookFlightSegmentType.StopLocation> theStopLocation;
            theStopLocation = (((this.stopLocation!= null)&&(!this.stopLocation.isEmpty()))?this.getStopLocation():null);
            strategy.appendField(locator, this, "stopLocation", buffer, theStopLocation);
        }
        {
            String theResBookDesigCode;
            theResBookDesigCode = this.getResBookDesigCode();
            strategy.appendField(locator, this, "resBookDesigCode", buffer, theResBookDesigCode);
        }
        {
            BigInteger theNumberInParty;
            theNumberInParty = this.getNumberInParty();
            strategy.appendField(locator, this, "numberInParty", buffer, theNumberInParty);
        }
        {
            String theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            String theETicketEligibility;
            theETicketEligibility = this.getETicketEligibility();
            strategy.appendField(locator, this, "eTicketEligibility", buffer, theETicketEligibility);
        }
        {
            String theMealCode;
            theMealCode = this.getMealCode();
            strategy.appendField(locator, this, "mealCode", buffer, theMealCode);
        }
        {
            DayOfWeekType theDepartureDay;
            theDepartureDay = this.getDepartureDay();
            strategy.appendField(locator, this, "departureDay", buffer, theDepartureDay);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof BookFlightSegmentType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final BookFlightSegmentType that = ((BookFlightSegmentType) object);
        {
            String lhsMarriageGrp;
            lhsMarriageGrp = this.getMarriageGrp();
            String rhsMarriageGrp;
            rhsMarriageGrp = that.getMarriageGrp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "marriageGrp", lhsMarriageGrp), LocatorUtils.property(thatLocator, "marriageGrp", rhsMarriageGrp), lhsMarriageGrp, rhsMarriageGrp)) {
                return false;
            }
        }
        {
            BookFlightSegmentType.BookingClassAvails lhsBookingClassAvails;
            lhsBookingClassAvails = this.getBookingClassAvails();
            BookFlightSegmentType.BookingClassAvails rhsBookingClassAvails;
            rhsBookingClassAvails = that.getBookingClassAvails();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bookingClassAvails", lhsBookingClassAvails), LocatorUtils.property(thatLocator, "bookingClassAvails", rhsBookingClassAvails), lhsBookingClassAvails, rhsBookingClassAvails)) {
                return false;
            }
        }
        {
            List<FreeTextType> lhsComment;
            lhsComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
            List<FreeTextType> rhsComment;
            rhsComment = (((that.comment!= null)&&(!that.comment.isEmpty()))?that.getComment():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comment", lhsComment), LocatorUtils.property(thatLocator, "comment", rhsComment), lhsComment, rhsComment)) {
                return false;
            }
        }
        {
            List<BookFlightSegmentType.StopLocation> lhsStopLocation;
            lhsStopLocation = (((this.stopLocation!= null)&&(!this.stopLocation.isEmpty()))?this.getStopLocation():null);
            List<BookFlightSegmentType.StopLocation> rhsStopLocation;
            rhsStopLocation = (((that.stopLocation!= null)&&(!that.stopLocation.isEmpty()))?that.getStopLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stopLocation", lhsStopLocation), LocatorUtils.property(thatLocator, "stopLocation", rhsStopLocation), lhsStopLocation, rhsStopLocation)) {
                return false;
            }
        }
        {
            String lhsResBookDesigCode;
            lhsResBookDesigCode = this.getResBookDesigCode();
            String rhsResBookDesigCode;
            rhsResBookDesigCode = that.getResBookDesigCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resBookDesigCode", lhsResBookDesigCode), LocatorUtils.property(thatLocator, "resBookDesigCode", rhsResBookDesigCode), lhsResBookDesigCode, rhsResBookDesigCode)) {
                return false;
            }
        }
        {
            BigInteger lhsNumberInParty;
            lhsNumberInParty = this.getNumberInParty();
            BigInteger rhsNumberInParty;
            rhsNumberInParty = that.getNumberInParty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberInParty", lhsNumberInParty), LocatorUtils.property(thatLocator, "numberInParty", rhsNumberInParty), lhsNumberInParty, rhsNumberInParty)) {
                return false;
            }
        }
        {
            String lhsStatus;
            lhsStatus = this.getStatus();
            String rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            String lhsETicketEligibility;
            lhsETicketEligibility = this.getETicketEligibility();
            String rhsETicketEligibility;
            rhsETicketEligibility = that.getETicketEligibility();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eTicketEligibility", lhsETicketEligibility), LocatorUtils.property(thatLocator, "eTicketEligibility", rhsETicketEligibility), lhsETicketEligibility, rhsETicketEligibility)) {
                return false;
            }
        }
        {
            String lhsMealCode;
            lhsMealCode = this.getMealCode();
            String rhsMealCode;
            rhsMealCode = that.getMealCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mealCode", lhsMealCode), LocatorUtils.property(thatLocator, "mealCode", rhsMealCode), lhsMealCode, rhsMealCode)) {
                return false;
            }
        }
        {
            DayOfWeekType lhsDepartureDay;
            lhsDepartureDay = this.getDepartureDay();
            DayOfWeekType rhsDepartureDay;
            rhsDepartureDay = that.getDepartureDay();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "departureDay", lhsDepartureDay), LocatorUtils.property(thatLocator, "departureDay", rhsDepartureDay), lhsDepartureDay, rhsDepartureDay)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theMarriageGrp;
            theMarriageGrp = this.getMarriageGrp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "marriageGrp", theMarriageGrp), currentHashCode, theMarriageGrp);
        }
        {
            BookFlightSegmentType.BookingClassAvails theBookingClassAvails;
            theBookingClassAvails = this.getBookingClassAvails();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bookingClassAvails", theBookingClassAvails), currentHashCode, theBookingClassAvails);
        }
        {
            List<FreeTextType> theComment;
            theComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comment", theComment), currentHashCode, theComment);
        }
        {
            List<BookFlightSegmentType.StopLocation> theStopLocation;
            theStopLocation = (((this.stopLocation!= null)&&(!this.stopLocation.isEmpty()))?this.getStopLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stopLocation", theStopLocation), currentHashCode, theStopLocation);
        }
        {
            String theResBookDesigCode;
            theResBookDesigCode = this.getResBookDesigCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resBookDesigCode", theResBookDesigCode), currentHashCode, theResBookDesigCode);
        }
        {
            BigInteger theNumberInParty;
            theNumberInParty = this.getNumberInParty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberInParty", theNumberInParty), currentHashCode, theNumberInParty);
        }
        {
            String theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            String theETicketEligibility;
            theETicketEligibility = this.getETicketEligibility();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eTicketEligibility", theETicketEligibility), currentHashCode, theETicketEligibility);
        }
        {
            String theMealCode;
            theMealCode = this.getMealCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mealCode", theMealCode), currentHashCode, theMealCode);
        }
        {
            DayOfWeekType theDepartureDay;
            theDepartureDay = this.getDepartureDay();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departureDay", theDepartureDay), currentHashCode, theDepartureDay);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof BookFlightSegmentType) {
            final BookFlightSegmentType copy = ((BookFlightSegmentType) draftCopy);
            if (this.marriageGrp!= null) {
                String sourceMarriageGrp;
                sourceMarriageGrp = this.getMarriageGrp();
                String copyMarriageGrp = ((String) strategy.copy(LocatorUtils.property(locator, "marriageGrp", sourceMarriageGrp), sourceMarriageGrp));
                copy.setMarriageGrp(copyMarriageGrp);
            } else {
                copy.marriageGrp = null;
            }
            if (this.bookingClassAvails!= null) {
                BookFlightSegmentType.BookingClassAvails sourceBookingClassAvails;
                sourceBookingClassAvails = this.getBookingClassAvails();
                BookFlightSegmentType.BookingClassAvails copyBookingClassAvails = ((BookFlightSegmentType.BookingClassAvails) strategy.copy(LocatorUtils.property(locator, "bookingClassAvails", sourceBookingClassAvails), sourceBookingClassAvails));
                copy.setBookingClassAvails(copyBookingClassAvails);
            } else {
                copy.bookingClassAvails = null;
            }
            if ((this.comment!= null)&&(!this.comment.isEmpty())) {
                List<FreeTextType> sourceComment;
                sourceComment = (((this.comment!= null)&&(!this.comment.isEmpty()))?this.getComment():null);
                @SuppressWarnings("unchecked")
                List<FreeTextType> copyComment = ((List<FreeTextType> ) strategy.copy(LocatorUtils.property(locator, "comment", sourceComment), sourceComment));
                copy.comment = null;
                if (copyComment!= null) {
                    List<FreeTextType> uniqueCommentl = copy.getComment();
                    uniqueCommentl.addAll(copyComment);
                }
            } else {
                copy.comment = null;
            }
            if ((this.stopLocation!= null)&&(!this.stopLocation.isEmpty())) {
                List<BookFlightSegmentType.StopLocation> sourceStopLocation;
                sourceStopLocation = (((this.stopLocation!= null)&&(!this.stopLocation.isEmpty()))?this.getStopLocation():null);
                @SuppressWarnings("unchecked")
                List<BookFlightSegmentType.StopLocation> copyStopLocation = ((List<BookFlightSegmentType.StopLocation> ) strategy.copy(LocatorUtils.property(locator, "stopLocation", sourceStopLocation), sourceStopLocation));
                copy.stopLocation = null;
                if (copyStopLocation!= null) {
                    List<BookFlightSegmentType.StopLocation> uniqueStopLocationl = copy.getStopLocation();
                    uniqueStopLocationl.addAll(copyStopLocation);
                }
            } else {
                copy.stopLocation = null;
            }
            if (this.resBookDesigCode!= null) {
                String sourceResBookDesigCode;
                sourceResBookDesigCode = this.getResBookDesigCode();
                String copyResBookDesigCode = ((String) strategy.copy(LocatorUtils.property(locator, "resBookDesigCode", sourceResBookDesigCode), sourceResBookDesigCode));
                copy.setResBookDesigCode(copyResBookDesigCode);
            } else {
                copy.resBookDesigCode = null;
            }
            if (this.numberInParty!= null) {
                BigInteger sourceNumberInParty;
                sourceNumberInParty = this.getNumberInParty();
                BigInteger copyNumberInParty = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "numberInParty", sourceNumberInParty), sourceNumberInParty));
                copy.setNumberInParty(copyNumberInParty);
            } else {
                copy.numberInParty = null;
            }
            if (this.status!= null) {
                String sourceStatus;
                sourceStatus = this.getStatus();
                String copyStatus = ((String) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            if (this.eTicketEligibility!= null) {
                String sourceETicketEligibility;
                sourceETicketEligibility = this.getETicketEligibility();
                String copyETicketEligibility = ((String) strategy.copy(LocatorUtils.property(locator, "eTicketEligibility", sourceETicketEligibility), sourceETicketEligibility));
                copy.setETicketEligibility(copyETicketEligibility);
            } else {
                copy.eTicketEligibility = null;
            }
            if (this.mealCode!= null) {
                String sourceMealCode;
                sourceMealCode = this.getMealCode();
                String copyMealCode = ((String) strategy.copy(LocatorUtils.property(locator, "mealCode", sourceMealCode), sourceMealCode));
                copy.setMealCode(copyMealCode);
            } else {
                copy.mealCode = null;
            }
            if (this.departureDay!= null) {
                DayOfWeekType sourceDepartureDay;
                sourceDepartureDay = this.getDepartureDay();
                DayOfWeekType copyDepartureDay = ((DayOfWeekType) strategy.copy(LocatorUtils.property(locator, "departureDay", sourceDepartureDay), sourceDepartureDay));
                copy.setDepartureDay(copyDepartureDay);
            } else {
                copy.departureDay = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new BookFlightSegmentType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="BookingClassAvail" maxOccurs="26"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}BookingClassAvailabilityGroup"/&gt;
     *                 &lt;attribute name="RPH" use="required" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "bookingClassAvail"
    })
    public static class BookingClassAvails
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "BookingClassAvail", required = true)
        protected List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> bookingClassAvail;

        /**
         * Gets the value of the bookingClassAvail property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the bookingClassAvail property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getBookingClassAvail().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link BookFlightSegmentType.BookingClassAvails.BookingClassAvail }
         * 
         * 
         */
        public List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> getBookingClassAvail() {
            if (bookingClassAvail == null) {
                bookingClassAvail = new ArrayList<BookFlightSegmentType.BookingClassAvails.BookingClassAvail>();
            }
            return this.bookingClassAvail;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> theBookingClassAvail;
                theBookingClassAvail = (((this.bookingClassAvail!= null)&&(!this.bookingClassAvail.isEmpty()))?this.getBookingClassAvail():null);
                strategy.appendField(locator, this, "bookingClassAvail", buffer, theBookingClassAvail);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof BookFlightSegmentType.BookingClassAvails)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final BookFlightSegmentType.BookingClassAvails that = ((BookFlightSegmentType.BookingClassAvails) object);
            {
                List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> lhsBookingClassAvail;
                lhsBookingClassAvail = (((this.bookingClassAvail!= null)&&(!this.bookingClassAvail.isEmpty()))?this.getBookingClassAvail():null);
                List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> rhsBookingClassAvail;
                rhsBookingClassAvail = (((that.bookingClassAvail!= null)&&(!that.bookingClassAvail.isEmpty()))?that.getBookingClassAvail():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "bookingClassAvail", lhsBookingClassAvail), LocatorUtils.property(thatLocator, "bookingClassAvail", rhsBookingClassAvail), lhsBookingClassAvail, rhsBookingClassAvail)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> theBookingClassAvail;
                theBookingClassAvail = (((this.bookingClassAvail!= null)&&(!this.bookingClassAvail.isEmpty()))?this.getBookingClassAvail():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bookingClassAvail", theBookingClassAvail), currentHashCode, theBookingClassAvail);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof BookFlightSegmentType.BookingClassAvails) {
                final BookFlightSegmentType.BookingClassAvails copy = ((BookFlightSegmentType.BookingClassAvails) draftCopy);
                if ((this.bookingClassAvail!= null)&&(!this.bookingClassAvail.isEmpty())) {
                    List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> sourceBookingClassAvail;
                    sourceBookingClassAvail = (((this.bookingClassAvail!= null)&&(!this.bookingClassAvail.isEmpty()))?this.getBookingClassAvail():null);
                    @SuppressWarnings("unchecked")
                    List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> copyBookingClassAvail = ((List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> ) strategy.copy(LocatorUtils.property(locator, "bookingClassAvail", sourceBookingClassAvail), sourceBookingClassAvail));
                    copy.bookingClassAvail = null;
                    if (copyBookingClassAvail!= null) {
                        List<BookFlightSegmentType.BookingClassAvails.BookingClassAvail> uniqueBookingClassAvaill = copy.getBookingClassAvail();
                        uniqueBookingClassAvaill.addAll(copyBookingClassAvail);
                    }
                } else {
                    copy.bookingClassAvail = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new BookFlightSegmentType.BookingClassAvails();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}BookingClassAvailabilityGroup"/&gt;
         *       &lt;attribute name="RPH" use="required" type="{http://www.opentravel.org/OTA/2003/05}RPH_Type" /&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class BookingClassAvail
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlAttribute(name = "RPH", required = true)
            protected String rph;
            @XmlAttribute(name = "ResBookDesigCode")
            protected String resBookDesigCode;
            @XmlAttribute(name = "ResBookDesigQuantity")
            protected String resBookDesigQuantity;
            @XmlAttribute(name = "ResBookDesigStatusCode")
            protected String resBookDesigStatusCode;

            /**
             * Gets the value of the rph property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getRPH() {
                return rph;
            }

            /**
             * Sets the value of the rph property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setRPH(String value) {
                this.rph = value;
            }

            /**
             * Gets the value of the resBookDesigCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getResBookDesigCode() {
                return resBookDesigCode;
            }

            /**
             * Sets the value of the resBookDesigCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setResBookDesigCode(String value) {
                this.resBookDesigCode = value;
            }

            /**
             * Gets the value of the resBookDesigQuantity property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getResBookDesigQuantity() {
                return resBookDesigQuantity;
            }

            /**
             * Sets the value of the resBookDesigQuantity property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setResBookDesigQuantity(String value) {
                this.resBookDesigQuantity = value;
            }

            /**
             * Gets the value of the resBookDesigStatusCode property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getResBookDesigStatusCode() {
                return resBookDesigStatusCode;
            }

            /**
             * Sets the value of the resBookDesigStatusCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setResBookDesigStatusCode(String value) {
                this.resBookDesigStatusCode = value;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    strategy.appendField(locator, this, "rph", buffer, theRPH);
                }
                {
                    String theResBookDesigCode;
                    theResBookDesigCode = this.getResBookDesigCode();
                    strategy.appendField(locator, this, "resBookDesigCode", buffer, theResBookDesigCode);
                }
                {
                    String theResBookDesigQuantity;
                    theResBookDesigQuantity = this.getResBookDesigQuantity();
                    strategy.appendField(locator, this, "resBookDesigQuantity", buffer, theResBookDesigQuantity);
                }
                {
                    String theResBookDesigStatusCode;
                    theResBookDesigStatusCode = this.getResBookDesigStatusCode();
                    strategy.appendField(locator, this, "resBookDesigStatusCode", buffer, theResBookDesigStatusCode);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof BookFlightSegmentType.BookingClassAvails.BookingClassAvail)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final BookFlightSegmentType.BookingClassAvails.BookingClassAvail that = ((BookFlightSegmentType.BookingClassAvails.BookingClassAvail) object);
                {
                    String lhsRPH;
                    lhsRPH = this.getRPH();
                    String rhsRPH;
                    rhsRPH = that.getRPH();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                        return false;
                    }
                }
                {
                    String lhsResBookDesigCode;
                    lhsResBookDesigCode = this.getResBookDesigCode();
                    String rhsResBookDesigCode;
                    rhsResBookDesigCode = that.getResBookDesigCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "resBookDesigCode", lhsResBookDesigCode), LocatorUtils.property(thatLocator, "resBookDesigCode", rhsResBookDesigCode), lhsResBookDesigCode, rhsResBookDesigCode)) {
                        return false;
                    }
                }
                {
                    String lhsResBookDesigQuantity;
                    lhsResBookDesigQuantity = this.getResBookDesigQuantity();
                    String rhsResBookDesigQuantity;
                    rhsResBookDesigQuantity = that.getResBookDesigQuantity();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "resBookDesigQuantity", lhsResBookDesigQuantity), LocatorUtils.property(thatLocator, "resBookDesigQuantity", rhsResBookDesigQuantity), lhsResBookDesigQuantity, rhsResBookDesigQuantity)) {
                        return false;
                    }
                }
                {
                    String lhsResBookDesigStatusCode;
                    lhsResBookDesigStatusCode = this.getResBookDesigStatusCode();
                    String rhsResBookDesigStatusCode;
                    rhsResBookDesigStatusCode = that.getResBookDesigStatusCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "resBookDesigStatusCode", lhsResBookDesigStatusCode), LocatorUtils.property(thatLocator, "resBookDesigStatusCode", rhsResBookDesigStatusCode), lhsResBookDesigStatusCode, rhsResBookDesigStatusCode)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theRPH;
                    theRPH = this.getRPH();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
                }
                {
                    String theResBookDesigCode;
                    theResBookDesigCode = this.getResBookDesigCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resBookDesigCode", theResBookDesigCode), currentHashCode, theResBookDesigCode);
                }
                {
                    String theResBookDesigQuantity;
                    theResBookDesigQuantity = this.getResBookDesigQuantity();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resBookDesigQuantity", theResBookDesigQuantity), currentHashCode, theResBookDesigQuantity);
                }
                {
                    String theResBookDesigStatusCode;
                    theResBookDesigStatusCode = this.getResBookDesigStatusCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resBookDesigStatusCode", theResBookDesigStatusCode), currentHashCode, theResBookDesigStatusCode);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof BookFlightSegmentType.BookingClassAvails.BookingClassAvail) {
                    final BookFlightSegmentType.BookingClassAvails.BookingClassAvail copy = ((BookFlightSegmentType.BookingClassAvails.BookingClassAvail) draftCopy);
                    if (this.rph!= null) {
                        String sourceRPH;
                        sourceRPH = this.getRPH();
                        String copyRPH = ((String) strategy.copy(LocatorUtils.property(locator, "rph", sourceRPH), sourceRPH));
                        copy.setRPH(copyRPH);
                    } else {
                        copy.rph = null;
                    }
                    if (this.resBookDesigCode!= null) {
                        String sourceResBookDesigCode;
                        sourceResBookDesigCode = this.getResBookDesigCode();
                        String copyResBookDesigCode = ((String) strategy.copy(LocatorUtils.property(locator, "resBookDesigCode", sourceResBookDesigCode), sourceResBookDesigCode));
                        copy.setResBookDesigCode(copyResBookDesigCode);
                    } else {
                        copy.resBookDesigCode = null;
                    }
                    if (this.resBookDesigQuantity!= null) {
                        String sourceResBookDesigQuantity;
                        sourceResBookDesigQuantity = this.getResBookDesigQuantity();
                        String copyResBookDesigQuantity = ((String) strategy.copy(LocatorUtils.property(locator, "resBookDesigQuantity", sourceResBookDesigQuantity), sourceResBookDesigQuantity));
                        copy.setResBookDesigQuantity(copyResBookDesigQuantity);
                    } else {
                        copy.resBookDesigQuantity = null;
                    }
                    if (this.resBookDesigStatusCode!= null) {
                        String sourceResBookDesigStatusCode;
                        sourceResBookDesigStatusCode = this.getResBookDesigStatusCode();
                        String copyResBookDesigStatusCode = ((String) strategy.copy(LocatorUtils.property(locator, "resBookDesigStatusCode", sourceResBookDesigStatusCode), sourceResBookDesigStatusCode));
                        copy.setResBookDesigStatusCode(copyResBookDesigStatusCode);
                    } else {
                        copy.resBookDesigStatusCode = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new BookFlightSegmentType.BookingClassAvails.BookingClassAvail();
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}LocationGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class StopLocation
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "LocationCode")
        protected String locationCode;
        @XmlAttribute(name = "CodeContext")
        protected String codeContext;

        /**
         * Gets the value of the locationCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLocationCode() {
            return locationCode;
        }

        /**
         * Sets the value of the locationCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLocationCode(String value) {
            this.locationCode = value;
        }

        /**
         * Gets the value of the codeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCodeContext() {
            if (codeContext == null) {
                return "IATA";
            } else {
                return codeContext;
            }
        }

        /**
         * Sets the value of the codeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCodeContext(String value) {
            this.codeContext = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                strategy.appendField(locator, this, "locationCode", buffer, theLocationCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                strategy.appendField(locator, this, "codeContext", buffer, theCodeContext);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof BookFlightSegmentType.StopLocation)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final BookFlightSegmentType.StopLocation that = ((BookFlightSegmentType.StopLocation) object);
            {
                String lhsLocationCode;
                lhsLocationCode = this.getLocationCode();
                String rhsLocationCode;
                rhsLocationCode = that.getLocationCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "locationCode", lhsLocationCode), LocatorUtils.property(thatLocator, "locationCode", rhsLocationCode), lhsLocationCode, rhsLocationCode)) {
                    return false;
                }
            }
            {
                String lhsCodeContext;
                lhsCodeContext = this.getCodeContext();
                String rhsCodeContext;
                rhsCodeContext = that.getCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "codeContext", lhsCodeContext), LocatorUtils.property(thatLocator, "codeContext", rhsCodeContext), lhsCodeContext, rhsCodeContext)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theLocationCode;
                theLocationCode = this.getLocationCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locationCode", theLocationCode), currentHashCode, theLocationCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeContext", theCodeContext), currentHashCode, theCodeContext);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof BookFlightSegmentType.StopLocation) {
                final BookFlightSegmentType.StopLocation copy = ((BookFlightSegmentType.StopLocation) draftCopy);
                if (this.locationCode!= null) {
                    String sourceLocationCode;
                    sourceLocationCode = this.getLocationCode();
                    String copyLocationCode = ((String) strategy.copy(LocatorUtils.property(locator, "locationCode", sourceLocationCode), sourceLocationCode));
                    copy.setLocationCode(copyLocationCode);
                } else {
                    copy.locationCode = null;
                }
                if (this.codeContext!= null) {
                    String sourceCodeContext;
                    sourceCodeContext = this.getCodeContext();
                    String copyCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "codeContext", sourceCodeContext), sourceCodeContext));
                    copy.setCodeContext(copyCodeContext);
                } else {
                    copy.codeContext = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new BookFlightSegmentType.StopLocation();
        }

    }

}
