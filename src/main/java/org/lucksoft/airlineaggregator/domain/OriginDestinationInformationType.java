//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Origin and Destination location, and time information for the request. Also includes the ability to specify a connection location for the search.
 * 
 * <p>Java class for OriginDestinationInformationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="OriginDestinationInformationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}TravelDateTimeType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="OriginLocation"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;LocationType"&gt;
 *                 &lt;attribute name="MultiAirportCityInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="AlternateLocationInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="DestinationLocation"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;LocationType"&gt;
 *                 &lt;attribute name="MultiAirportCityInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                 &lt;attribute name="AlternateLocationInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="ConnectionLocations" type="{http://www.opentravel.org/OTA/2003/05}ConnectionType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OriginDestinationInformationType", propOrder = {
    "originLocation",
    "destinationLocation",
    "connectionLocations"
})
@XmlSeeAlso({
    org.lucksoft.airlineaggregator.domain.OTAAirLowFareSearchRQ.OriginDestinationInformation.class
})
public class OriginDestinationInformationType
    extends TravelDateTimeType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "OriginLocation", required = true)
    protected OriginDestinationInformationType.OriginLocation originLocation;
    @XmlElement(name = "DestinationLocation", required = true)
    protected OriginDestinationInformationType.DestinationLocation destinationLocation;
    @XmlElement(name = "ConnectionLocations")
    protected ConnectionType connectionLocations;

    /**
     * Gets the value of the originLocation property.
     * 
     * @return
     *     possible object is
     *     {@link OriginDestinationInformationType.OriginLocation }
     *     
     */
    public OriginDestinationInformationType.OriginLocation getOriginLocation() {
        return originLocation;
    }

    /**
     * Sets the value of the originLocation property.
     * 
     * @param value
     *     allowed object is
     *     {@link OriginDestinationInformationType.OriginLocation }
     *     
     */
    public void setOriginLocation(OriginDestinationInformationType.OriginLocation value) {
        this.originLocation = value;
    }

    /**
     * Gets the value of the destinationLocation property.
     * 
     * @return
     *     possible object is
     *     {@link OriginDestinationInformationType.DestinationLocation }
     *     
     */
    public OriginDestinationInformationType.DestinationLocation getDestinationLocation() {
        return destinationLocation;
    }

    /**
     * Sets the value of the destinationLocation property.
     * 
     * @param value
     *     allowed object is
     *     {@link OriginDestinationInformationType.DestinationLocation }
     *     
     */
    public void setDestinationLocation(OriginDestinationInformationType.DestinationLocation value) {
        this.destinationLocation = value;
    }

    /**
     * Gets the value of the connectionLocations property.
     * 
     * @return
     *     possible object is
     *     {@link ConnectionType }
     *     
     */
    public ConnectionType getConnectionLocations() {
        return connectionLocations;
    }

    /**
     * Sets the value of the connectionLocations property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConnectionType }
     *     
     */
    public void setConnectionLocations(ConnectionType value) {
        this.connectionLocations = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            OriginDestinationInformationType.OriginLocation theOriginLocation;
            theOriginLocation = this.getOriginLocation();
            strategy.appendField(locator, this, "originLocation", buffer, theOriginLocation);
        }
        {
            OriginDestinationInformationType.DestinationLocation theDestinationLocation;
            theDestinationLocation = this.getDestinationLocation();
            strategy.appendField(locator, this, "destinationLocation", buffer, theDestinationLocation);
        }
        {
            ConnectionType theConnectionLocations;
            theConnectionLocations = this.getConnectionLocations();
            strategy.appendField(locator, this, "connectionLocations", buffer, theConnectionLocations);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof OriginDestinationInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final OriginDestinationInformationType that = ((OriginDestinationInformationType) object);
        {
            OriginDestinationInformationType.OriginLocation lhsOriginLocation;
            lhsOriginLocation = this.getOriginLocation();
            OriginDestinationInformationType.OriginLocation rhsOriginLocation;
            rhsOriginLocation = that.getOriginLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "originLocation", lhsOriginLocation), LocatorUtils.property(thatLocator, "originLocation", rhsOriginLocation), lhsOriginLocation, rhsOriginLocation)) {
                return false;
            }
        }
        {
            OriginDestinationInformationType.DestinationLocation lhsDestinationLocation;
            lhsDestinationLocation = this.getDestinationLocation();
            OriginDestinationInformationType.DestinationLocation rhsDestinationLocation;
            rhsDestinationLocation = that.getDestinationLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "destinationLocation", lhsDestinationLocation), LocatorUtils.property(thatLocator, "destinationLocation", rhsDestinationLocation), lhsDestinationLocation, rhsDestinationLocation)) {
                return false;
            }
        }
        {
            ConnectionType lhsConnectionLocations;
            lhsConnectionLocations = this.getConnectionLocations();
            ConnectionType rhsConnectionLocations;
            rhsConnectionLocations = that.getConnectionLocations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "connectionLocations", lhsConnectionLocations), LocatorUtils.property(thatLocator, "connectionLocations", rhsConnectionLocations), lhsConnectionLocations, rhsConnectionLocations)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            OriginDestinationInformationType.OriginLocation theOriginLocation;
            theOriginLocation = this.getOriginLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originLocation", theOriginLocation), currentHashCode, theOriginLocation);
        }
        {
            OriginDestinationInformationType.DestinationLocation theDestinationLocation;
            theDestinationLocation = this.getDestinationLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destinationLocation", theDestinationLocation), currentHashCode, theDestinationLocation);
        }
        {
            ConnectionType theConnectionLocations;
            theConnectionLocations = this.getConnectionLocations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "connectionLocations", theConnectionLocations), currentHashCode, theConnectionLocations);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof OriginDestinationInformationType) {
            final OriginDestinationInformationType copy = ((OriginDestinationInformationType) draftCopy);
            if (this.originLocation!= null) {
                OriginDestinationInformationType.OriginLocation sourceOriginLocation;
                sourceOriginLocation = this.getOriginLocation();
                OriginDestinationInformationType.OriginLocation copyOriginLocation = ((OriginDestinationInformationType.OriginLocation) strategy.copy(LocatorUtils.property(locator, "originLocation", sourceOriginLocation), sourceOriginLocation));
                copy.setOriginLocation(copyOriginLocation);
            } else {
                copy.originLocation = null;
            }
            if (this.destinationLocation!= null) {
                OriginDestinationInformationType.DestinationLocation sourceDestinationLocation;
                sourceDestinationLocation = this.getDestinationLocation();
                OriginDestinationInformationType.DestinationLocation copyDestinationLocation = ((OriginDestinationInformationType.DestinationLocation) strategy.copy(LocatorUtils.property(locator, "destinationLocation", sourceDestinationLocation), sourceDestinationLocation));
                copy.setDestinationLocation(copyDestinationLocation);
            } else {
                copy.destinationLocation = null;
            }
            if (this.connectionLocations!= null) {
                ConnectionType sourceConnectionLocations;
                sourceConnectionLocations = this.getConnectionLocations();
                ConnectionType copyConnectionLocations = ((ConnectionType) strategy.copy(LocatorUtils.property(locator, "connectionLocations", sourceConnectionLocations), sourceConnectionLocations));
                copy.setConnectionLocations(copyConnectionLocations);
            } else {
                copy.connectionLocations = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new OriginDestinationInformationType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;LocationType"&gt;
     *       &lt;attribute name="MultiAirportCityInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="AlternateLocationInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DestinationLocation
        extends LocationType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "MultiAirportCityInd")
        protected Boolean multiAirportCityInd;
        @XmlAttribute(name = "AlternateLocationInd")
        protected Boolean alternateLocationInd;

        /**
         * Gets the value of the multiAirportCityInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isMultiAirportCityInd() {
            return multiAirportCityInd;
        }

        /**
         * Sets the value of the multiAirportCityInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setMultiAirportCityInd(Boolean value) {
            this.multiAirportCityInd = value;
        }

        /**
         * Gets the value of the alternateLocationInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isAlternateLocationInd() {
            return alternateLocationInd;
        }

        /**
         * Sets the value of the alternateLocationInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setAlternateLocationInd(Boolean value) {
            this.alternateLocationInd = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                Boolean theMultiAirportCityInd;
                theMultiAirportCityInd = this.isMultiAirportCityInd();
                strategy.appendField(locator, this, "multiAirportCityInd", buffer, theMultiAirportCityInd);
            }
            {
                Boolean theAlternateLocationInd;
                theAlternateLocationInd = this.isAlternateLocationInd();
                strategy.appendField(locator, this, "alternateLocationInd", buffer, theAlternateLocationInd);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof OriginDestinationInformationType.DestinationLocation)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final OriginDestinationInformationType.DestinationLocation that = ((OriginDestinationInformationType.DestinationLocation) object);
            {
                Boolean lhsMultiAirportCityInd;
                lhsMultiAirportCityInd = this.isMultiAirportCityInd();
                Boolean rhsMultiAirportCityInd;
                rhsMultiAirportCityInd = that.isMultiAirportCityInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "multiAirportCityInd", lhsMultiAirportCityInd), LocatorUtils.property(thatLocator, "multiAirportCityInd", rhsMultiAirportCityInd), lhsMultiAirportCityInd, rhsMultiAirportCityInd)) {
                    return false;
                }
            }
            {
                Boolean lhsAlternateLocationInd;
                lhsAlternateLocationInd = this.isAlternateLocationInd();
                Boolean rhsAlternateLocationInd;
                rhsAlternateLocationInd = that.isAlternateLocationInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "alternateLocationInd", lhsAlternateLocationInd), LocatorUtils.property(thatLocator, "alternateLocationInd", rhsAlternateLocationInd), lhsAlternateLocationInd, rhsAlternateLocationInd)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                Boolean theMultiAirportCityInd;
                theMultiAirportCityInd = this.isMultiAirportCityInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multiAirportCityInd", theMultiAirportCityInd), currentHashCode, theMultiAirportCityInd);
            }
            {
                Boolean theAlternateLocationInd;
                theAlternateLocationInd = this.isAlternateLocationInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alternateLocationInd", theAlternateLocationInd), currentHashCode, theAlternateLocationInd);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof OriginDestinationInformationType.DestinationLocation) {
                final OriginDestinationInformationType.DestinationLocation copy = ((OriginDestinationInformationType.DestinationLocation) draftCopy);
                if (this.multiAirportCityInd!= null) {
                    Boolean sourceMultiAirportCityInd;
                    sourceMultiAirportCityInd = this.isMultiAirportCityInd();
                    Boolean copyMultiAirportCityInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "multiAirportCityInd", sourceMultiAirportCityInd), sourceMultiAirportCityInd));
                    copy.setMultiAirportCityInd(copyMultiAirportCityInd);
                } else {
                    copy.multiAirportCityInd = null;
                }
                if (this.alternateLocationInd!= null) {
                    Boolean sourceAlternateLocationInd;
                    sourceAlternateLocationInd = this.isAlternateLocationInd();
                    Boolean copyAlternateLocationInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "alternateLocationInd", sourceAlternateLocationInd), sourceAlternateLocationInd));
                    copy.setAlternateLocationInd(copyAlternateLocationInd);
                } else {
                    copy.alternateLocationInd = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new OriginDestinationInformationType.DestinationLocation();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;LocationType"&gt;
     *       &lt;attribute name="MultiAirportCityInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *       &lt;attribute name="AlternateLocationInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class OriginLocation
        extends LocationType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "MultiAirportCityInd")
        protected Boolean multiAirportCityInd;
        @XmlAttribute(name = "AlternateLocationInd")
        protected Boolean alternateLocationInd;

        /**
         * Gets the value of the multiAirportCityInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isMultiAirportCityInd() {
            return multiAirportCityInd;
        }

        /**
         * Sets the value of the multiAirportCityInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setMultiAirportCityInd(Boolean value) {
            this.multiAirportCityInd = value;
        }

        /**
         * Gets the value of the alternateLocationInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isAlternateLocationInd() {
            return alternateLocationInd;
        }

        /**
         * Sets the value of the alternateLocationInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setAlternateLocationInd(Boolean value) {
            this.alternateLocationInd = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                Boolean theMultiAirportCityInd;
                theMultiAirportCityInd = this.isMultiAirportCityInd();
                strategy.appendField(locator, this, "multiAirportCityInd", buffer, theMultiAirportCityInd);
            }
            {
                Boolean theAlternateLocationInd;
                theAlternateLocationInd = this.isAlternateLocationInd();
                strategy.appendField(locator, this, "alternateLocationInd", buffer, theAlternateLocationInd);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof OriginDestinationInformationType.OriginLocation)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final OriginDestinationInformationType.OriginLocation that = ((OriginDestinationInformationType.OriginLocation) object);
            {
                Boolean lhsMultiAirportCityInd;
                lhsMultiAirportCityInd = this.isMultiAirportCityInd();
                Boolean rhsMultiAirportCityInd;
                rhsMultiAirportCityInd = that.isMultiAirportCityInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "multiAirportCityInd", lhsMultiAirportCityInd), LocatorUtils.property(thatLocator, "multiAirportCityInd", rhsMultiAirportCityInd), lhsMultiAirportCityInd, rhsMultiAirportCityInd)) {
                    return false;
                }
            }
            {
                Boolean lhsAlternateLocationInd;
                lhsAlternateLocationInd = this.isAlternateLocationInd();
                Boolean rhsAlternateLocationInd;
                rhsAlternateLocationInd = that.isAlternateLocationInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "alternateLocationInd", lhsAlternateLocationInd), LocatorUtils.property(thatLocator, "alternateLocationInd", rhsAlternateLocationInd), lhsAlternateLocationInd, rhsAlternateLocationInd)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                Boolean theMultiAirportCityInd;
                theMultiAirportCityInd = this.isMultiAirportCityInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multiAirportCityInd", theMultiAirportCityInd), currentHashCode, theMultiAirportCityInd);
            }
            {
                Boolean theAlternateLocationInd;
                theAlternateLocationInd = this.isAlternateLocationInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alternateLocationInd", theAlternateLocationInd), currentHashCode, theAlternateLocationInd);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof OriginDestinationInformationType.OriginLocation) {
                final OriginDestinationInformationType.OriginLocation copy = ((OriginDestinationInformationType.OriginLocation) draftCopy);
                if (this.multiAirportCityInd!= null) {
                    Boolean sourceMultiAirportCityInd;
                    sourceMultiAirportCityInd = this.isMultiAirportCityInd();
                    Boolean copyMultiAirportCityInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "multiAirportCityInd", sourceMultiAirportCityInd), sourceMultiAirportCityInd));
                    copy.setMultiAirportCityInd(copyMultiAirportCityInd);
                } else {
                    copy.multiAirportCityInd = null;
                }
                if (this.alternateLocationInd!= null) {
                    Boolean sourceAlternateLocationInd;
                    sourceAlternateLocationInd = this.isAlternateLocationInd();
                    Boolean copyAlternateLocationInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "alternateLocationInd", sourceAlternateLocationInd), sourceAlternateLocationInd));
                    copy.setAlternateLocationInd(copyAlternateLocationInd);
                } else {
                    copy.alternateLocationInd = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new OriginDestinationInformationType.OriginLocation();
        }

    }

}
