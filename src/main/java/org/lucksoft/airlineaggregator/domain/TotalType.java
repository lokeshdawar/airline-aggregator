//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * The total amount charged for the service including additional amounts and fees.
 * 
 * <p>Java class for TotalType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TotalType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="Taxes" type="{http://www.opentravel.org/OTA/2003/05}TaxesType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CurrencyCodeGroup"/&gt;
 *       &lt;attribute name="AmountBeforeTax" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
 *       &lt;attribute name="AmountAfterTax" type="{http://www.opentravel.org/OTA/2003/05}Money" /&gt;
 *       &lt;attribute name="AdditionalFeesExcludedIndicator" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TotalType", propOrder = {
    "taxes"
})
public class TotalType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "Taxes")
    protected TaxesType taxes;
    @XmlAttribute(name = "AmountBeforeTax")
    protected BigDecimal amountBeforeTax;
    @XmlAttribute(name = "AmountAfterTax")
    protected BigDecimal amountAfterTax;
    @XmlAttribute(name = "AdditionalFeesExcludedIndicator")
    protected Boolean additionalFeesExcludedIndicator;
    @XmlAttribute(name = "CurrencyCode")
    protected String currencyCode;
    @XmlAttribute(name = "DecimalPlaces")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger decimalPlaces;

    /**
     * Gets the value of the taxes property.
     * 
     * @return
     *     possible object is
     *     {@link TaxesType }
     *     
     */
    public TaxesType getTaxes() {
        return taxes;
    }

    /**
     * Sets the value of the taxes property.
     * 
     * @param value
     *     allowed object is
     *     {@link TaxesType }
     *     
     */
    public void setTaxes(TaxesType value) {
        this.taxes = value;
    }

    /**
     * Gets the value of the amountBeforeTax property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getAmountBeforeTax() {
        return amountBeforeTax;
    }

    /**
     * Sets the value of the amountBeforeTax property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setAmountBeforeTax(BigDecimal value) {
        this.amountBeforeTax = value;
    }

    /**
     * Gets the value of the amountAfterTax property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getAmountAfterTax() {
        return amountAfterTax;
    }

    /**
     * Sets the value of the amountAfterTax property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setAmountAfterTax(BigDecimal value) {
        this.amountAfterTax = value;
    }

    /**
     * Gets the value of the additionalFeesExcludedIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAdditionalFeesExcludedIndicator() {
        return additionalFeesExcludedIndicator;
    }

    /**
     * Sets the value of the additionalFeesExcludedIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAdditionalFeesExcludedIndicator(Boolean value) {
        this.additionalFeesExcludedIndicator = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the decimalPlaces property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDecimalPlaces() {
        return decimalPlaces;
    }

    /**
     * Sets the value of the decimalPlaces property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDecimalPlaces(BigInteger value) {
        this.decimalPlaces = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TaxesType theTaxes;
            theTaxes = this.getTaxes();
            strategy.appendField(locator, this, "taxes", buffer, theTaxes);
        }
        {
            BigDecimal theAmountBeforeTax;
            theAmountBeforeTax = this.getAmountBeforeTax();
            strategy.appendField(locator, this, "amountBeforeTax", buffer, theAmountBeforeTax);
        }
        {
            BigDecimal theAmountAfterTax;
            theAmountAfterTax = this.getAmountAfterTax();
            strategy.appendField(locator, this, "amountAfterTax", buffer, theAmountAfterTax);
        }
        {
            Boolean theAdditionalFeesExcludedIndicator;
            theAdditionalFeesExcludedIndicator = this.isAdditionalFeesExcludedIndicator();
            strategy.appendField(locator, this, "additionalFeesExcludedIndicator", buffer, theAdditionalFeesExcludedIndicator);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            strategy.appendField(locator, this, "currencyCode", buffer, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            strategy.appendField(locator, this, "decimalPlaces", buffer, theDecimalPlaces);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TotalType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TotalType that = ((TotalType) object);
        {
            TaxesType lhsTaxes;
            lhsTaxes = this.getTaxes();
            TaxesType rhsTaxes;
            rhsTaxes = that.getTaxes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "taxes", lhsTaxes), LocatorUtils.property(thatLocator, "taxes", rhsTaxes), lhsTaxes, rhsTaxes)) {
                return false;
            }
        }
        {
            BigDecimal lhsAmountBeforeTax;
            lhsAmountBeforeTax = this.getAmountBeforeTax();
            BigDecimal rhsAmountBeforeTax;
            rhsAmountBeforeTax = that.getAmountBeforeTax();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "amountBeforeTax", lhsAmountBeforeTax), LocatorUtils.property(thatLocator, "amountBeforeTax", rhsAmountBeforeTax), lhsAmountBeforeTax, rhsAmountBeforeTax)) {
                return false;
            }
        }
        {
            BigDecimal lhsAmountAfterTax;
            lhsAmountAfterTax = this.getAmountAfterTax();
            BigDecimal rhsAmountAfterTax;
            rhsAmountAfterTax = that.getAmountAfterTax();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "amountAfterTax", lhsAmountAfterTax), LocatorUtils.property(thatLocator, "amountAfterTax", rhsAmountAfterTax), lhsAmountAfterTax, rhsAmountAfterTax)) {
                return false;
            }
        }
        {
            Boolean lhsAdditionalFeesExcludedIndicator;
            lhsAdditionalFeesExcludedIndicator = this.isAdditionalFeesExcludedIndicator();
            Boolean rhsAdditionalFeesExcludedIndicator;
            rhsAdditionalFeesExcludedIndicator = that.isAdditionalFeesExcludedIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "additionalFeesExcludedIndicator", lhsAdditionalFeesExcludedIndicator), LocatorUtils.property(thatLocator, "additionalFeesExcludedIndicator", rhsAdditionalFeesExcludedIndicator), lhsAdditionalFeesExcludedIndicator, rhsAdditionalFeesExcludedIndicator)) {
                return false;
            }
        }
        {
            String lhsCurrencyCode;
            lhsCurrencyCode = this.getCurrencyCode();
            String rhsCurrencyCode;
            rhsCurrencyCode = that.getCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyCode", lhsCurrencyCode), LocatorUtils.property(thatLocator, "currencyCode", rhsCurrencyCode), lhsCurrencyCode, rhsCurrencyCode)) {
                return false;
            }
        }
        {
            BigInteger lhsDecimalPlaces;
            lhsDecimalPlaces = this.getDecimalPlaces();
            BigInteger rhsDecimalPlaces;
            rhsDecimalPlaces = that.getDecimalPlaces();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TaxesType theTaxes;
            theTaxes = this.getTaxes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "taxes", theTaxes), currentHashCode, theTaxes);
        }
        {
            BigDecimal theAmountBeforeTax;
            theAmountBeforeTax = this.getAmountBeforeTax();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amountBeforeTax", theAmountBeforeTax), currentHashCode, theAmountBeforeTax);
        }
        {
            BigDecimal theAmountAfterTax;
            theAmountAfterTax = this.getAmountAfterTax();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amountAfterTax", theAmountAfterTax), currentHashCode, theAmountAfterTax);
        }
        {
            Boolean theAdditionalFeesExcludedIndicator;
            theAdditionalFeesExcludedIndicator = this.isAdditionalFeesExcludedIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "additionalFeesExcludedIndicator", theAdditionalFeesExcludedIndicator), currentHashCode, theAdditionalFeesExcludedIndicator);
        }
        {
            String theCurrencyCode;
            theCurrencyCode = this.getCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyCode", theCurrencyCode), currentHashCode, theCurrencyCode);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TotalType) {
            final TotalType copy = ((TotalType) draftCopy);
            if (this.taxes!= null) {
                TaxesType sourceTaxes;
                sourceTaxes = this.getTaxes();
                TaxesType copyTaxes = ((TaxesType) strategy.copy(LocatorUtils.property(locator, "taxes", sourceTaxes), sourceTaxes));
                copy.setTaxes(copyTaxes);
            } else {
                copy.taxes = null;
            }
            if (this.amountBeforeTax!= null) {
                BigDecimal sourceAmountBeforeTax;
                sourceAmountBeforeTax = this.getAmountBeforeTax();
                BigDecimal copyAmountBeforeTax = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amountBeforeTax", sourceAmountBeforeTax), sourceAmountBeforeTax));
                copy.setAmountBeforeTax(copyAmountBeforeTax);
            } else {
                copy.amountBeforeTax = null;
            }
            if (this.amountAfterTax!= null) {
                BigDecimal sourceAmountAfterTax;
                sourceAmountAfterTax = this.getAmountAfterTax();
                BigDecimal copyAmountAfterTax = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "amountAfterTax", sourceAmountAfterTax), sourceAmountAfterTax));
                copy.setAmountAfterTax(copyAmountAfterTax);
            } else {
                copy.amountAfterTax = null;
            }
            if (this.additionalFeesExcludedIndicator!= null) {
                Boolean sourceAdditionalFeesExcludedIndicator;
                sourceAdditionalFeesExcludedIndicator = this.isAdditionalFeesExcludedIndicator();
                Boolean copyAdditionalFeesExcludedIndicator = ((Boolean) strategy.copy(LocatorUtils.property(locator, "additionalFeesExcludedIndicator", sourceAdditionalFeesExcludedIndicator), sourceAdditionalFeesExcludedIndicator));
                copy.setAdditionalFeesExcludedIndicator(copyAdditionalFeesExcludedIndicator);
            } else {
                copy.additionalFeesExcludedIndicator = null;
            }
            if (this.currencyCode!= null) {
                String sourceCurrencyCode;
                sourceCurrencyCode = this.getCurrencyCode();
                String copyCurrencyCode = ((String) strategy.copy(LocatorUtils.property(locator, "currencyCode", sourceCurrencyCode), sourceCurrencyCode));
                copy.setCurrencyCode(copyCurrencyCode);
            } else {
                copy.currencyCode = null;
            }
            if (this.decimalPlaces!= null) {
                BigInteger sourceDecimalPlaces;
                sourceDecimalPlaces = this.getDecimalPlaces();
                BigInteger copyDecimalPlaces = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "decimalPlaces", sourceDecimalPlaces), sourceDecimalPlaces));
                copy.setDecimalPlaces(copyDecimalPlaces);
            } else {
                copy.decimalPlaces = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TotalType();
    }

}
