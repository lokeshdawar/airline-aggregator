//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.02 at 10:21:37 AM IST 
//


package org.lucksoft.airlineaggregator.domain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Identifies the criterion for a search.
 * 
 * <p>Java class for ItemSearchCriterionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ItemSearchCriterionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="Position" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PositionGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Address" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AddressType"&gt;
 *                 &lt;attribute name="SameCountryInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Telephone" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TelephoneGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="RefPoint" maxOccurs="999" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength0to64"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeListGroup"/&gt;
 *                 &lt;attribute name="StateProv" type="{http://www.opentravel.org/OTA/2003/05}StateProvCodeType" /&gt;
 *                 &lt;attribute name="CountryCode" type="{http://www.opentravel.org/OTA/2003/05}ISO3166" /&gt;
 *                 &lt;attribute name="RefPointType" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                 &lt;attribute name="Name" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to128" /&gt;
 *                 &lt;attribute name="CityName" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="CodeRef" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;LocationType"&gt;
 *                 &lt;attribute name="VicinityCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="HotelRef" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}HotelReferenceGroup"/&gt;
 *                 &lt;attribute name="SegmentCategoryCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                 &lt;attribute name="PropertyClassCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                 &lt;attribute name="ArchitecturalStyleCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
 *                 &lt;attribute name="SupplierIntegrationLevel" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Radius" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}DistanceAttributesGroup"/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="ExactMatch" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="ImportanceType"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.opentravel.org/OTA/2003/05}StringLength1to16"&gt;
 *             &lt;enumeration value="Mandatory"/&gt;
 *             &lt;enumeration value="High"/&gt;
 *             &lt;enumeration value="Medium"/&gt;
 *             &lt;enumeration value="Low"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *       &lt;attribute name="Ranking" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ItemSearchCriterionType", propOrder = {
    "position",
    "address",
    "telephone",
    "refPoint",
    "codeRef",
    "hotelRef",
    "radius"
})
public class ItemSearchCriterionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "Position")
    protected ItemSearchCriterionType.Position position;
    @XmlElement(name = "Address")
    protected ItemSearchCriterionType.Address address;
    @XmlElement(name = "Telephone")
    protected ItemSearchCriterionType.Telephone telephone;
    @XmlElement(name = "RefPoint")
    protected List<ItemSearchCriterionType.RefPoint> refPoint;
    @XmlElement(name = "CodeRef")
    protected ItemSearchCriterionType.CodeRef codeRef;
    @XmlElement(name = "HotelRef")
    protected ItemSearchCriterionType.HotelRef hotelRef;
    @XmlElement(name = "Radius")
    protected ItemSearchCriterionType.Radius radius;
    @XmlAttribute(name = "ExactMatch")
    protected Boolean exactMatch;
    @XmlAttribute(name = "ImportanceType")
    protected String importanceType;
    @XmlAttribute(name = "Ranking")
    protected BigInteger ranking;

    /**
     * Gets the value of the position property.
     * 
     * @return
     *     possible object is
     *     {@link ItemSearchCriterionType.Position }
     *     
     */
    public ItemSearchCriterionType.Position getPosition() {
        return position;
    }

    /**
     * Sets the value of the position property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemSearchCriterionType.Position }
     *     
     */
    public void setPosition(ItemSearchCriterionType.Position value) {
        this.position = value;
    }

    /**
     * Gets the value of the address property.
     * 
     * @return
     *     possible object is
     *     {@link ItemSearchCriterionType.Address }
     *     
     */
    public ItemSearchCriterionType.Address getAddress() {
        return address;
    }

    /**
     * Sets the value of the address property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemSearchCriterionType.Address }
     *     
     */
    public void setAddress(ItemSearchCriterionType.Address value) {
        this.address = value;
    }

    /**
     * Gets the value of the telephone property.
     * 
     * @return
     *     possible object is
     *     {@link ItemSearchCriterionType.Telephone }
     *     
     */
    public ItemSearchCriterionType.Telephone getTelephone() {
        return telephone;
    }

    /**
     * Sets the value of the telephone property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemSearchCriterionType.Telephone }
     *     
     */
    public void setTelephone(ItemSearchCriterionType.Telephone value) {
        this.telephone = value;
    }

    /**
     * Gets the value of the refPoint property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the refPoint property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRefPoint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ItemSearchCriterionType.RefPoint }
     * 
     * 
     */
    public List<ItemSearchCriterionType.RefPoint> getRefPoint() {
        if (refPoint == null) {
            refPoint = new ArrayList<ItemSearchCriterionType.RefPoint>();
        }
        return this.refPoint;
    }

    /**
     * Gets the value of the codeRef property.
     * 
     * @return
     *     possible object is
     *     {@link ItemSearchCriterionType.CodeRef }
     *     
     */
    public ItemSearchCriterionType.CodeRef getCodeRef() {
        return codeRef;
    }

    /**
     * Sets the value of the codeRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemSearchCriterionType.CodeRef }
     *     
     */
    public void setCodeRef(ItemSearchCriterionType.CodeRef value) {
        this.codeRef = value;
    }

    /**
     * Gets the value of the hotelRef property.
     * 
     * @return
     *     possible object is
     *     {@link ItemSearchCriterionType.HotelRef }
     *     
     */
    public ItemSearchCriterionType.HotelRef getHotelRef() {
        return hotelRef;
    }

    /**
     * Sets the value of the hotelRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemSearchCriterionType.HotelRef }
     *     
     */
    public void setHotelRef(ItemSearchCriterionType.HotelRef value) {
        this.hotelRef = value;
    }

    /**
     * Gets the value of the radius property.
     * 
     * @return
     *     possible object is
     *     {@link ItemSearchCriterionType.Radius }
     *     
     */
    public ItemSearchCriterionType.Radius getRadius() {
        return radius;
    }

    /**
     * Sets the value of the radius property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemSearchCriterionType.Radius }
     *     
     */
    public void setRadius(ItemSearchCriterionType.Radius value) {
        this.radius = value;
    }

    /**
     * Gets the value of the exactMatch property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isExactMatch() {
        return exactMatch;
    }

    /**
     * Sets the value of the exactMatch property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setExactMatch(Boolean value) {
        this.exactMatch = value;
    }

    /**
     * Gets the value of the importanceType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getImportanceType() {
        return importanceType;
    }

    /**
     * Sets the value of the importanceType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setImportanceType(String value) {
        this.importanceType = value;
    }

    /**
     * Gets the value of the ranking property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getRanking() {
        return ranking;
    }

    /**
     * Sets the value of the ranking property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setRanking(BigInteger value) {
        this.ranking = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            ItemSearchCriterionType.Position thePosition;
            thePosition = this.getPosition();
            strategy.appendField(locator, this, "position", buffer, thePosition);
        }
        {
            ItemSearchCriterionType.Address theAddress;
            theAddress = this.getAddress();
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            ItemSearchCriterionType.Telephone theTelephone;
            theTelephone = this.getTelephone();
            strategy.appendField(locator, this, "telephone", buffer, theTelephone);
        }
        {
            List<ItemSearchCriterionType.RefPoint> theRefPoint;
            theRefPoint = (((this.refPoint!= null)&&(!this.refPoint.isEmpty()))?this.getRefPoint():null);
            strategy.appendField(locator, this, "refPoint", buffer, theRefPoint);
        }
        {
            ItemSearchCriterionType.CodeRef theCodeRef;
            theCodeRef = this.getCodeRef();
            strategy.appendField(locator, this, "codeRef", buffer, theCodeRef);
        }
        {
            ItemSearchCriterionType.HotelRef theHotelRef;
            theHotelRef = this.getHotelRef();
            strategy.appendField(locator, this, "hotelRef", buffer, theHotelRef);
        }
        {
            ItemSearchCriterionType.Radius theRadius;
            theRadius = this.getRadius();
            strategy.appendField(locator, this, "radius", buffer, theRadius);
        }
        {
            Boolean theExactMatch;
            theExactMatch = this.isExactMatch();
            strategy.appendField(locator, this, "exactMatch", buffer, theExactMatch);
        }
        {
            String theImportanceType;
            theImportanceType = this.getImportanceType();
            strategy.appendField(locator, this, "importanceType", buffer, theImportanceType);
        }
        {
            BigInteger theRanking;
            theRanking = this.getRanking();
            strategy.appendField(locator, this, "ranking", buffer, theRanking);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ItemSearchCriterionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ItemSearchCriterionType that = ((ItemSearchCriterionType) object);
        {
            ItemSearchCriterionType.Position lhsPosition;
            lhsPosition = this.getPosition();
            ItemSearchCriterionType.Position rhsPosition;
            rhsPosition = that.getPosition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "position", lhsPosition), LocatorUtils.property(thatLocator, "position", rhsPosition), lhsPosition, rhsPosition)) {
                return false;
            }
        }
        {
            ItemSearchCriterionType.Address lhsAddress;
            lhsAddress = this.getAddress();
            ItemSearchCriterionType.Address rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            ItemSearchCriterionType.Telephone lhsTelephone;
            lhsTelephone = this.getTelephone();
            ItemSearchCriterionType.Telephone rhsTelephone;
            rhsTelephone = that.getTelephone();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telephone", lhsTelephone), LocatorUtils.property(thatLocator, "telephone", rhsTelephone), lhsTelephone, rhsTelephone)) {
                return false;
            }
        }
        {
            List<ItemSearchCriterionType.RefPoint> lhsRefPoint;
            lhsRefPoint = (((this.refPoint!= null)&&(!this.refPoint.isEmpty()))?this.getRefPoint():null);
            List<ItemSearchCriterionType.RefPoint> rhsRefPoint;
            rhsRefPoint = (((that.refPoint!= null)&&(!that.refPoint.isEmpty()))?that.getRefPoint():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "refPoint", lhsRefPoint), LocatorUtils.property(thatLocator, "refPoint", rhsRefPoint), lhsRefPoint, rhsRefPoint)) {
                return false;
            }
        }
        {
            ItemSearchCriterionType.CodeRef lhsCodeRef;
            lhsCodeRef = this.getCodeRef();
            ItemSearchCriterionType.CodeRef rhsCodeRef;
            rhsCodeRef = that.getCodeRef();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codeRef", lhsCodeRef), LocatorUtils.property(thatLocator, "codeRef", rhsCodeRef), lhsCodeRef, rhsCodeRef)) {
                return false;
            }
        }
        {
            ItemSearchCriterionType.HotelRef lhsHotelRef;
            lhsHotelRef = this.getHotelRef();
            ItemSearchCriterionType.HotelRef rhsHotelRef;
            rhsHotelRef = that.getHotelRef();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hotelRef", lhsHotelRef), LocatorUtils.property(thatLocator, "hotelRef", rhsHotelRef), lhsHotelRef, rhsHotelRef)) {
                return false;
            }
        }
        {
            ItemSearchCriterionType.Radius lhsRadius;
            lhsRadius = this.getRadius();
            ItemSearchCriterionType.Radius rhsRadius;
            rhsRadius = that.getRadius();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "radius", lhsRadius), LocatorUtils.property(thatLocator, "radius", rhsRadius), lhsRadius, rhsRadius)) {
                return false;
            }
        }
        {
            Boolean lhsExactMatch;
            lhsExactMatch = this.isExactMatch();
            Boolean rhsExactMatch;
            rhsExactMatch = that.isExactMatch();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "exactMatch", lhsExactMatch), LocatorUtils.property(thatLocator, "exactMatch", rhsExactMatch), lhsExactMatch, rhsExactMatch)) {
                return false;
            }
        }
        {
            String lhsImportanceType;
            lhsImportanceType = this.getImportanceType();
            String rhsImportanceType;
            rhsImportanceType = that.getImportanceType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "importanceType", lhsImportanceType), LocatorUtils.property(thatLocator, "importanceType", rhsImportanceType), lhsImportanceType, rhsImportanceType)) {
                return false;
            }
        }
        {
            BigInteger lhsRanking;
            lhsRanking = this.getRanking();
            BigInteger rhsRanking;
            rhsRanking = that.getRanking();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ranking", lhsRanking), LocatorUtils.property(thatLocator, "ranking", rhsRanking), lhsRanking, rhsRanking)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            ItemSearchCriterionType.Position thePosition;
            thePosition = this.getPosition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "position", thePosition), currentHashCode, thePosition);
        }
        {
            ItemSearchCriterionType.Address theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            ItemSearchCriterionType.Telephone theTelephone;
            theTelephone = this.getTelephone();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telephone", theTelephone), currentHashCode, theTelephone);
        }
        {
            List<ItemSearchCriterionType.RefPoint> theRefPoint;
            theRefPoint = (((this.refPoint!= null)&&(!this.refPoint.isEmpty()))?this.getRefPoint():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refPoint", theRefPoint), currentHashCode, theRefPoint);
        }
        {
            ItemSearchCriterionType.CodeRef theCodeRef;
            theCodeRef = this.getCodeRef();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeRef", theCodeRef), currentHashCode, theCodeRef);
        }
        {
            ItemSearchCriterionType.HotelRef theHotelRef;
            theHotelRef = this.getHotelRef();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hotelRef", theHotelRef), currentHashCode, theHotelRef);
        }
        {
            ItemSearchCriterionType.Radius theRadius;
            theRadius = this.getRadius();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "radius", theRadius), currentHashCode, theRadius);
        }
        {
            Boolean theExactMatch;
            theExactMatch = this.isExactMatch();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exactMatch", theExactMatch), currentHashCode, theExactMatch);
        }
        {
            String theImportanceType;
            theImportanceType = this.getImportanceType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "importanceType", theImportanceType), currentHashCode, theImportanceType);
        }
        {
            BigInteger theRanking;
            theRanking = this.getRanking();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ranking", theRanking), currentHashCode, theRanking);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ItemSearchCriterionType) {
            final ItemSearchCriterionType copy = ((ItemSearchCriterionType) draftCopy);
            if (this.position!= null) {
                ItemSearchCriterionType.Position sourcePosition;
                sourcePosition = this.getPosition();
                ItemSearchCriterionType.Position copyPosition = ((ItemSearchCriterionType.Position) strategy.copy(LocatorUtils.property(locator, "position", sourcePosition), sourcePosition));
                copy.setPosition(copyPosition);
            } else {
                copy.position = null;
            }
            if (this.address!= null) {
                ItemSearchCriterionType.Address sourceAddress;
                sourceAddress = this.getAddress();
                ItemSearchCriterionType.Address copyAddress = ((ItemSearchCriterionType.Address) strategy.copy(LocatorUtils.property(locator, "address", sourceAddress), sourceAddress));
                copy.setAddress(copyAddress);
            } else {
                copy.address = null;
            }
            if (this.telephone!= null) {
                ItemSearchCriterionType.Telephone sourceTelephone;
                sourceTelephone = this.getTelephone();
                ItemSearchCriterionType.Telephone copyTelephone = ((ItemSearchCriterionType.Telephone) strategy.copy(LocatorUtils.property(locator, "telephone", sourceTelephone), sourceTelephone));
                copy.setTelephone(copyTelephone);
            } else {
                copy.telephone = null;
            }
            if ((this.refPoint!= null)&&(!this.refPoint.isEmpty())) {
                List<ItemSearchCriterionType.RefPoint> sourceRefPoint;
                sourceRefPoint = (((this.refPoint!= null)&&(!this.refPoint.isEmpty()))?this.getRefPoint():null);
                @SuppressWarnings("unchecked")
                List<ItemSearchCriterionType.RefPoint> copyRefPoint = ((List<ItemSearchCriterionType.RefPoint> ) strategy.copy(LocatorUtils.property(locator, "refPoint", sourceRefPoint), sourceRefPoint));
                copy.refPoint = null;
                if (copyRefPoint!= null) {
                    List<ItemSearchCriterionType.RefPoint> uniqueRefPointl = copy.getRefPoint();
                    uniqueRefPointl.addAll(copyRefPoint);
                }
            } else {
                copy.refPoint = null;
            }
            if (this.codeRef!= null) {
                ItemSearchCriterionType.CodeRef sourceCodeRef;
                sourceCodeRef = this.getCodeRef();
                ItemSearchCriterionType.CodeRef copyCodeRef = ((ItemSearchCriterionType.CodeRef) strategy.copy(LocatorUtils.property(locator, "codeRef", sourceCodeRef), sourceCodeRef));
                copy.setCodeRef(copyCodeRef);
            } else {
                copy.codeRef = null;
            }
            if (this.hotelRef!= null) {
                ItemSearchCriterionType.HotelRef sourceHotelRef;
                sourceHotelRef = this.getHotelRef();
                ItemSearchCriterionType.HotelRef copyHotelRef = ((ItemSearchCriterionType.HotelRef) strategy.copy(LocatorUtils.property(locator, "hotelRef", sourceHotelRef), sourceHotelRef));
                copy.setHotelRef(copyHotelRef);
            } else {
                copy.hotelRef = null;
            }
            if (this.radius!= null) {
                ItemSearchCriterionType.Radius sourceRadius;
                sourceRadius = this.getRadius();
                ItemSearchCriterionType.Radius copyRadius = ((ItemSearchCriterionType.Radius) strategy.copy(LocatorUtils.property(locator, "radius", sourceRadius), sourceRadius));
                copy.setRadius(copyRadius);
            } else {
                copy.radius = null;
            }
            if (this.exactMatch!= null) {
                Boolean sourceExactMatch;
                sourceExactMatch = this.isExactMatch();
                Boolean copyExactMatch = ((Boolean) strategy.copy(LocatorUtils.property(locator, "exactMatch", sourceExactMatch), sourceExactMatch));
                copy.setExactMatch(copyExactMatch);
            } else {
                copy.exactMatch = null;
            }
            if (this.importanceType!= null) {
                String sourceImportanceType;
                sourceImportanceType = this.getImportanceType();
                String copyImportanceType = ((String) strategy.copy(LocatorUtils.property(locator, "importanceType", sourceImportanceType), sourceImportanceType));
                copy.setImportanceType(copyImportanceType);
            } else {
                copy.importanceType = null;
            }
            if (this.ranking!= null) {
                BigInteger sourceRanking;
                sourceRanking = this.getRanking();
                BigInteger copyRanking = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "ranking", sourceRanking), sourceRanking));
                copy.setRanking(copyRanking);
            } else {
                copy.ranking = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ItemSearchCriterionType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{http://www.opentravel.org/OTA/2003/05}AddressType"&gt;
     *       &lt;attribute name="SameCountryInd" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Address
        extends AddressType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "SameCountryInd")
        protected Boolean sameCountryInd;

        /**
         * Gets the value of the sameCountryInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public Boolean isSameCountryInd() {
            return sameCountryInd;
        }

        /**
         * Sets the value of the sameCountryInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setSameCountryInd(Boolean value) {
            this.sameCountryInd = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                Boolean theSameCountryInd;
                theSameCountryInd = this.isSameCountryInd();
                strategy.appendField(locator, this, "sameCountryInd", buffer, theSameCountryInd);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ItemSearchCriterionType.Address)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final ItemSearchCriterionType.Address that = ((ItemSearchCriterionType.Address) object);
            {
                Boolean lhsSameCountryInd;
                lhsSameCountryInd = this.isSameCountryInd();
                Boolean rhsSameCountryInd;
                rhsSameCountryInd = that.isSameCountryInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "sameCountryInd", lhsSameCountryInd), LocatorUtils.property(thatLocator, "sameCountryInd", rhsSameCountryInd), lhsSameCountryInd, rhsSameCountryInd)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                Boolean theSameCountryInd;
                theSameCountryInd = this.isSameCountryInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sameCountryInd", theSameCountryInd), currentHashCode, theSameCountryInd);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof ItemSearchCriterionType.Address) {
                final ItemSearchCriterionType.Address copy = ((ItemSearchCriterionType.Address) draftCopy);
                if (this.sameCountryInd!= null) {
                    Boolean sourceSameCountryInd;
                    sourceSameCountryInd = this.isSameCountryInd();
                    Boolean copySameCountryInd = ((Boolean) strategy.copy(LocatorUtils.property(locator, "sameCountryInd", sourceSameCountryInd), sourceSameCountryInd));
                    copy.setSameCountryInd(copySameCountryInd);
                } else {
                    copy.sameCountryInd = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ItemSearchCriterionType.Address();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;LocationType"&gt;
     *       &lt;attribute name="VicinityCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class CodeRef
        extends LocationType
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "VicinityCode")
        protected String vicinityCode;

        /**
         * Gets the value of the vicinityCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getVicinityCode() {
            return vicinityCode;
        }

        /**
         * Sets the value of the vicinityCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setVicinityCode(String value) {
            this.vicinityCode = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            super.appendFields(locator, buffer, strategy);
            {
                String theVicinityCode;
                theVicinityCode = this.getVicinityCode();
                strategy.appendField(locator, this, "vicinityCode", buffer, theVicinityCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ItemSearchCriterionType.CodeRef)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            if (!super.equals(thisLocator, thatLocator, object, strategy)) {
                return false;
            }
            final ItemSearchCriterionType.CodeRef that = ((ItemSearchCriterionType.CodeRef) object);
            {
                String lhsVicinityCode;
                lhsVicinityCode = this.getVicinityCode();
                String rhsVicinityCode;
                rhsVicinityCode = that.getVicinityCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "vicinityCode", lhsVicinityCode), LocatorUtils.property(thatLocator, "vicinityCode", rhsVicinityCode), lhsVicinityCode, rhsVicinityCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = super.hashCode(locator, strategy);
            {
                String theVicinityCode;
                theVicinityCode = this.getVicinityCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vicinityCode", theVicinityCode), currentHashCode, theVicinityCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            super.copyTo(locator, draftCopy, strategy);
            if (draftCopy instanceof ItemSearchCriterionType.CodeRef) {
                final ItemSearchCriterionType.CodeRef copy = ((ItemSearchCriterionType.CodeRef) draftCopy);
                if (this.vicinityCode!= null) {
                    String sourceVicinityCode;
                    sourceVicinityCode = this.getVicinityCode();
                    String copyVicinityCode = ((String) strategy.copy(LocatorUtils.property(locator, "vicinityCode", sourceVicinityCode), sourceVicinityCode));
                    copy.setVicinityCode(copyVicinityCode);
                } else {
                    copy.vicinityCode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ItemSearchCriterionType.CodeRef();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}HotelReferenceGroup"/&gt;
     *       &lt;attribute name="SegmentCategoryCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *       &lt;attribute name="PropertyClassCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *       &lt;attribute name="ArchitecturalStyleCode" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *       &lt;attribute name="SupplierIntegrationLevel" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class HotelRef
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "SegmentCategoryCode")
        protected String segmentCategoryCode;
        @XmlAttribute(name = "PropertyClassCode")
        protected String propertyClassCode;
        @XmlAttribute(name = "ArchitecturalStyleCode")
        protected String architecturalStyleCode;
        @XmlAttribute(name = "SupplierIntegrationLevel")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger supplierIntegrationLevel;
        @XmlAttribute(name = "ChainCode")
        protected String chainCode;
        @XmlAttribute(name = "BrandCode")
        protected String brandCode;
        @XmlAttribute(name = "HotelCode")
        protected String hotelCode;
        @XmlAttribute(name = "HotelCityCode")
        protected String hotelCityCode;
        @XmlAttribute(name = "HotelName")
        protected String hotelName;
        @XmlAttribute(name = "HotelCodeContext")
        protected String hotelCodeContext;
        @XmlAttribute(name = "ChainName")
        protected String chainName;
        @XmlAttribute(name = "BrandName")
        protected String brandName;
        @XmlAttribute(name = "AreaID")
        protected String areaID;

        /**
         * Gets the value of the segmentCategoryCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSegmentCategoryCode() {
            return segmentCategoryCode;
        }

        /**
         * Sets the value of the segmentCategoryCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSegmentCategoryCode(String value) {
            this.segmentCategoryCode = value;
        }

        /**
         * Gets the value of the propertyClassCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPropertyClassCode() {
            return propertyClassCode;
        }

        /**
         * Sets the value of the propertyClassCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPropertyClassCode(String value) {
            this.propertyClassCode = value;
        }

        /**
         * Gets the value of the architecturalStyleCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getArchitecturalStyleCode() {
            return architecturalStyleCode;
        }

        /**
         * Sets the value of the architecturalStyleCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setArchitecturalStyleCode(String value) {
            this.architecturalStyleCode = value;
        }

        /**
         * Gets the value of the supplierIntegrationLevel property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getSupplierIntegrationLevel() {
            return supplierIntegrationLevel;
        }

        /**
         * Sets the value of the supplierIntegrationLevel property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setSupplierIntegrationLevel(BigInteger value) {
            this.supplierIntegrationLevel = value;
        }

        /**
         * Gets the value of the chainCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChainCode() {
            return chainCode;
        }

        /**
         * Sets the value of the chainCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setChainCode(String value) {
            this.chainCode = value;
        }

        /**
         * Gets the value of the brandCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getBrandCode() {
            return brandCode;
        }

        /**
         * Sets the value of the brandCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setBrandCode(String value) {
            this.brandCode = value;
        }

        /**
         * Gets the value of the hotelCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getHotelCode() {
            return hotelCode;
        }

        /**
         * Sets the value of the hotelCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setHotelCode(String value) {
            this.hotelCode = value;
        }

        /**
         * Gets the value of the hotelCityCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getHotelCityCode() {
            return hotelCityCode;
        }

        /**
         * Sets the value of the hotelCityCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setHotelCityCode(String value) {
            this.hotelCityCode = value;
        }

        /**
         * Gets the value of the hotelName property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getHotelName() {
            return hotelName;
        }

        /**
         * Sets the value of the hotelName property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setHotelName(String value) {
            this.hotelName = value;
        }

        /**
         * Gets the value of the hotelCodeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getHotelCodeContext() {
            return hotelCodeContext;
        }

        /**
         * Sets the value of the hotelCodeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setHotelCodeContext(String value) {
            this.hotelCodeContext = value;
        }

        /**
         * Gets the value of the chainName property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getChainName() {
            return chainName;
        }

        /**
         * Sets the value of the chainName property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setChainName(String value) {
            this.chainName = value;
        }

        /**
         * Gets the value of the brandName property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getBrandName() {
            return brandName;
        }

        /**
         * Sets the value of the brandName property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setBrandName(String value) {
            this.brandName = value;
        }

        /**
         * Gets the value of the areaID property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAreaID() {
            return areaID;
        }

        /**
         * Sets the value of the areaID property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAreaID(String value) {
            this.areaID = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theSegmentCategoryCode;
                theSegmentCategoryCode = this.getSegmentCategoryCode();
                strategy.appendField(locator, this, "segmentCategoryCode", buffer, theSegmentCategoryCode);
            }
            {
                String thePropertyClassCode;
                thePropertyClassCode = this.getPropertyClassCode();
                strategy.appendField(locator, this, "propertyClassCode", buffer, thePropertyClassCode);
            }
            {
                String theArchitecturalStyleCode;
                theArchitecturalStyleCode = this.getArchitecturalStyleCode();
                strategy.appendField(locator, this, "architecturalStyleCode", buffer, theArchitecturalStyleCode);
            }
            {
                BigInteger theSupplierIntegrationLevel;
                theSupplierIntegrationLevel = this.getSupplierIntegrationLevel();
                strategy.appendField(locator, this, "supplierIntegrationLevel", buffer, theSupplierIntegrationLevel);
            }
            {
                String theChainCode;
                theChainCode = this.getChainCode();
                strategy.appendField(locator, this, "chainCode", buffer, theChainCode);
            }
            {
                String theBrandCode;
                theBrandCode = this.getBrandCode();
                strategy.appendField(locator, this, "brandCode", buffer, theBrandCode);
            }
            {
                String theHotelCode;
                theHotelCode = this.getHotelCode();
                strategy.appendField(locator, this, "hotelCode", buffer, theHotelCode);
            }
            {
                String theHotelCityCode;
                theHotelCityCode = this.getHotelCityCode();
                strategy.appendField(locator, this, "hotelCityCode", buffer, theHotelCityCode);
            }
            {
                String theHotelName;
                theHotelName = this.getHotelName();
                strategy.appendField(locator, this, "hotelName", buffer, theHotelName);
            }
            {
                String theHotelCodeContext;
                theHotelCodeContext = this.getHotelCodeContext();
                strategy.appendField(locator, this, "hotelCodeContext", buffer, theHotelCodeContext);
            }
            {
                String theChainName;
                theChainName = this.getChainName();
                strategy.appendField(locator, this, "chainName", buffer, theChainName);
            }
            {
                String theBrandName;
                theBrandName = this.getBrandName();
                strategy.appendField(locator, this, "brandName", buffer, theBrandName);
            }
            {
                String theAreaID;
                theAreaID = this.getAreaID();
                strategy.appendField(locator, this, "areaID", buffer, theAreaID);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ItemSearchCriterionType.HotelRef)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ItemSearchCriterionType.HotelRef that = ((ItemSearchCriterionType.HotelRef) object);
            {
                String lhsSegmentCategoryCode;
                lhsSegmentCategoryCode = this.getSegmentCategoryCode();
                String rhsSegmentCategoryCode;
                rhsSegmentCategoryCode = that.getSegmentCategoryCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "segmentCategoryCode", lhsSegmentCategoryCode), LocatorUtils.property(thatLocator, "segmentCategoryCode", rhsSegmentCategoryCode), lhsSegmentCategoryCode, rhsSegmentCategoryCode)) {
                    return false;
                }
            }
            {
                String lhsPropertyClassCode;
                lhsPropertyClassCode = this.getPropertyClassCode();
                String rhsPropertyClassCode;
                rhsPropertyClassCode = that.getPropertyClassCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "propertyClassCode", lhsPropertyClassCode), LocatorUtils.property(thatLocator, "propertyClassCode", rhsPropertyClassCode), lhsPropertyClassCode, rhsPropertyClassCode)) {
                    return false;
                }
            }
            {
                String lhsArchitecturalStyleCode;
                lhsArchitecturalStyleCode = this.getArchitecturalStyleCode();
                String rhsArchitecturalStyleCode;
                rhsArchitecturalStyleCode = that.getArchitecturalStyleCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "architecturalStyleCode", lhsArchitecturalStyleCode), LocatorUtils.property(thatLocator, "architecturalStyleCode", rhsArchitecturalStyleCode), lhsArchitecturalStyleCode, rhsArchitecturalStyleCode)) {
                    return false;
                }
            }
            {
                BigInteger lhsSupplierIntegrationLevel;
                lhsSupplierIntegrationLevel = this.getSupplierIntegrationLevel();
                BigInteger rhsSupplierIntegrationLevel;
                rhsSupplierIntegrationLevel = that.getSupplierIntegrationLevel();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "supplierIntegrationLevel", lhsSupplierIntegrationLevel), LocatorUtils.property(thatLocator, "supplierIntegrationLevel", rhsSupplierIntegrationLevel), lhsSupplierIntegrationLevel, rhsSupplierIntegrationLevel)) {
                    return false;
                }
            }
            {
                String lhsChainCode;
                lhsChainCode = this.getChainCode();
                String rhsChainCode;
                rhsChainCode = that.getChainCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "chainCode", lhsChainCode), LocatorUtils.property(thatLocator, "chainCode", rhsChainCode), lhsChainCode, rhsChainCode)) {
                    return false;
                }
            }
            {
                String lhsBrandCode;
                lhsBrandCode = this.getBrandCode();
                String rhsBrandCode;
                rhsBrandCode = that.getBrandCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "brandCode", lhsBrandCode), LocatorUtils.property(thatLocator, "brandCode", rhsBrandCode), lhsBrandCode, rhsBrandCode)) {
                    return false;
                }
            }
            {
                String lhsHotelCode;
                lhsHotelCode = this.getHotelCode();
                String rhsHotelCode;
                rhsHotelCode = that.getHotelCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "hotelCode", lhsHotelCode), LocatorUtils.property(thatLocator, "hotelCode", rhsHotelCode), lhsHotelCode, rhsHotelCode)) {
                    return false;
                }
            }
            {
                String lhsHotelCityCode;
                lhsHotelCityCode = this.getHotelCityCode();
                String rhsHotelCityCode;
                rhsHotelCityCode = that.getHotelCityCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "hotelCityCode", lhsHotelCityCode), LocatorUtils.property(thatLocator, "hotelCityCode", rhsHotelCityCode), lhsHotelCityCode, rhsHotelCityCode)) {
                    return false;
                }
            }
            {
                String lhsHotelName;
                lhsHotelName = this.getHotelName();
                String rhsHotelName;
                rhsHotelName = that.getHotelName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "hotelName", lhsHotelName), LocatorUtils.property(thatLocator, "hotelName", rhsHotelName), lhsHotelName, rhsHotelName)) {
                    return false;
                }
            }
            {
                String lhsHotelCodeContext;
                lhsHotelCodeContext = this.getHotelCodeContext();
                String rhsHotelCodeContext;
                rhsHotelCodeContext = that.getHotelCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "hotelCodeContext", lhsHotelCodeContext), LocatorUtils.property(thatLocator, "hotelCodeContext", rhsHotelCodeContext), lhsHotelCodeContext, rhsHotelCodeContext)) {
                    return false;
                }
            }
            {
                String lhsChainName;
                lhsChainName = this.getChainName();
                String rhsChainName;
                rhsChainName = that.getChainName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "chainName", lhsChainName), LocatorUtils.property(thatLocator, "chainName", rhsChainName), lhsChainName, rhsChainName)) {
                    return false;
                }
            }
            {
                String lhsBrandName;
                lhsBrandName = this.getBrandName();
                String rhsBrandName;
                rhsBrandName = that.getBrandName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "brandName", lhsBrandName), LocatorUtils.property(thatLocator, "brandName", rhsBrandName), lhsBrandName, rhsBrandName)) {
                    return false;
                }
            }
            {
                String lhsAreaID;
                lhsAreaID = this.getAreaID();
                String rhsAreaID;
                rhsAreaID = that.getAreaID();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "areaID", lhsAreaID), LocatorUtils.property(thatLocator, "areaID", rhsAreaID), lhsAreaID, rhsAreaID)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theSegmentCategoryCode;
                theSegmentCategoryCode = this.getSegmentCategoryCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "segmentCategoryCode", theSegmentCategoryCode), currentHashCode, theSegmentCategoryCode);
            }
            {
                String thePropertyClassCode;
                thePropertyClassCode = this.getPropertyClassCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "propertyClassCode", thePropertyClassCode), currentHashCode, thePropertyClassCode);
            }
            {
                String theArchitecturalStyleCode;
                theArchitecturalStyleCode = this.getArchitecturalStyleCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "architecturalStyleCode", theArchitecturalStyleCode), currentHashCode, theArchitecturalStyleCode);
            }
            {
                BigInteger theSupplierIntegrationLevel;
                theSupplierIntegrationLevel = this.getSupplierIntegrationLevel();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplierIntegrationLevel", theSupplierIntegrationLevel), currentHashCode, theSupplierIntegrationLevel);
            }
            {
                String theChainCode;
                theChainCode = this.getChainCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chainCode", theChainCode), currentHashCode, theChainCode);
            }
            {
                String theBrandCode;
                theBrandCode = this.getBrandCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brandCode", theBrandCode), currentHashCode, theBrandCode);
            }
            {
                String theHotelCode;
                theHotelCode = this.getHotelCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hotelCode", theHotelCode), currentHashCode, theHotelCode);
            }
            {
                String theHotelCityCode;
                theHotelCityCode = this.getHotelCityCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hotelCityCode", theHotelCityCode), currentHashCode, theHotelCityCode);
            }
            {
                String theHotelName;
                theHotelName = this.getHotelName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hotelName", theHotelName), currentHashCode, theHotelName);
            }
            {
                String theHotelCodeContext;
                theHotelCodeContext = this.getHotelCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hotelCodeContext", theHotelCodeContext), currentHashCode, theHotelCodeContext);
            }
            {
                String theChainName;
                theChainName = this.getChainName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chainName", theChainName), currentHashCode, theChainName);
            }
            {
                String theBrandName;
                theBrandName = this.getBrandName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brandName", theBrandName), currentHashCode, theBrandName);
            }
            {
                String theAreaID;
                theAreaID = this.getAreaID();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "areaID", theAreaID), currentHashCode, theAreaID);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ItemSearchCriterionType.HotelRef) {
                final ItemSearchCriterionType.HotelRef copy = ((ItemSearchCriterionType.HotelRef) draftCopy);
                if (this.segmentCategoryCode!= null) {
                    String sourceSegmentCategoryCode;
                    sourceSegmentCategoryCode = this.getSegmentCategoryCode();
                    String copySegmentCategoryCode = ((String) strategy.copy(LocatorUtils.property(locator, "segmentCategoryCode", sourceSegmentCategoryCode), sourceSegmentCategoryCode));
                    copy.setSegmentCategoryCode(copySegmentCategoryCode);
                } else {
                    copy.segmentCategoryCode = null;
                }
                if (this.propertyClassCode!= null) {
                    String sourcePropertyClassCode;
                    sourcePropertyClassCode = this.getPropertyClassCode();
                    String copyPropertyClassCode = ((String) strategy.copy(LocatorUtils.property(locator, "propertyClassCode", sourcePropertyClassCode), sourcePropertyClassCode));
                    copy.setPropertyClassCode(copyPropertyClassCode);
                } else {
                    copy.propertyClassCode = null;
                }
                if (this.architecturalStyleCode!= null) {
                    String sourceArchitecturalStyleCode;
                    sourceArchitecturalStyleCode = this.getArchitecturalStyleCode();
                    String copyArchitecturalStyleCode = ((String) strategy.copy(LocatorUtils.property(locator, "architecturalStyleCode", sourceArchitecturalStyleCode), sourceArchitecturalStyleCode));
                    copy.setArchitecturalStyleCode(copyArchitecturalStyleCode);
                } else {
                    copy.architecturalStyleCode = null;
                }
                if (this.supplierIntegrationLevel!= null) {
                    BigInteger sourceSupplierIntegrationLevel;
                    sourceSupplierIntegrationLevel = this.getSupplierIntegrationLevel();
                    BigInteger copySupplierIntegrationLevel = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "supplierIntegrationLevel", sourceSupplierIntegrationLevel), sourceSupplierIntegrationLevel));
                    copy.setSupplierIntegrationLevel(copySupplierIntegrationLevel);
                } else {
                    copy.supplierIntegrationLevel = null;
                }
                if (this.chainCode!= null) {
                    String sourceChainCode;
                    sourceChainCode = this.getChainCode();
                    String copyChainCode = ((String) strategy.copy(LocatorUtils.property(locator, "chainCode", sourceChainCode), sourceChainCode));
                    copy.setChainCode(copyChainCode);
                } else {
                    copy.chainCode = null;
                }
                if (this.brandCode!= null) {
                    String sourceBrandCode;
                    sourceBrandCode = this.getBrandCode();
                    String copyBrandCode = ((String) strategy.copy(LocatorUtils.property(locator, "brandCode", sourceBrandCode), sourceBrandCode));
                    copy.setBrandCode(copyBrandCode);
                } else {
                    copy.brandCode = null;
                }
                if (this.hotelCode!= null) {
                    String sourceHotelCode;
                    sourceHotelCode = this.getHotelCode();
                    String copyHotelCode = ((String) strategy.copy(LocatorUtils.property(locator, "hotelCode", sourceHotelCode), sourceHotelCode));
                    copy.setHotelCode(copyHotelCode);
                } else {
                    copy.hotelCode = null;
                }
                if (this.hotelCityCode!= null) {
                    String sourceHotelCityCode;
                    sourceHotelCityCode = this.getHotelCityCode();
                    String copyHotelCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "hotelCityCode", sourceHotelCityCode), sourceHotelCityCode));
                    copy.setHotelCityCode(copyHotelCityCode);
                } else {
                    copy.hotelCityCode = null;
                }
                if (this.hotelName!= null) {
                    String sourceHotelName;
                    sourceHotelName = this.getHotelName();
                    String copyHotelName = ((String) strategy.copy(LocatorUtils.property(locator, "hotelName", sourceHotelName), sourceHotelName));
                    copy.setHotelName(copyHotelName);
                } else {
                    copy.hotelName = null;
                }
                if (this.hotelCodeContext!= null) {
                    String sourceHotelCodeContext;
                    sourceHotelCodeContext = this.getHotelCodeContext();
                    String copyHotelCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "hotelCodeContext", sourceHotelCodeContext), sourceHotelCodeContext));
                    copy.setHotelCodeContext(copyHotelCodeContext);
                } else {
                    copy.hotelCodeContext = null;
                }
                if (this.chainName!= null) {
                    String sourceChainName;
                    sourceChainName = this.getChainName();
                    String copyChainName = ((String) strategy.copy(LocatorUtils.property(locator, "chainName", sourceChainName), sourceChainName));
                    copy.setChainName(copyChainName);
                } else {
                    copy.chainName = null;
                }
                if (this.brandName!= null) {
                    String sourceBrandName;
                    sourceBrandName = this.getBrandName();
                    String copyBrandName = ((String) strategy.copy(LocatorUtils.property(locator, "brandName", sourceBrandName), sourceBrandName));
                    copy.setBrandName(copyBrandName);
                } else {
                    copy.brandName = null;
                }
                if (this.areaID!= null) {
                    String sourceAreaID;
                    sourceAreaID = this.getAreaID();
                    String copyAreaID = ((String) strategy.copy(LocatorUtils.property(locator, "areaID", sourceAreaID), sourceAreaID));
                    copy.setAreaID(copyAreaID);
                } else {
                    copy.areaID = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ItemSearchCriterionType.HotelRef();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}PositionGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Position
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Latitude")
        protected String latitude;
        @XmlAttribute(name = "Longitude")
        protected String longitude;
        @XmlAttribute(name = "Altitude")
        protected String altitude;
        @XmlAttribute(name = "AltitudeUnitOfMeasureCode")
        protected String altitudeUnitOfMeasureCode;

        /**
         * Gets the value of the latitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLatitude() {
            return latitude;
        }

        /**
         * Sets the value of the latitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLatitude(String value) {
            this.latitude = value;
        }

        /**
         * Gets the value of the longitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLongitude() {
            return longitude;
        }

        /**
         * Sets the value of the longitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setLongitude(String value) {
            this.longitude = value;
        }

        /**
         * Gets the value of the altitude property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAltitude() {
            return altitude;
        }

        /**
         * Sets the value of the altitude property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAltitude(String value) {
            this.altitude = value;
        }

        /**
         * Gets the value of the altitudeUnitOfMeasureCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAltitudeUnitOfMeasureCode() {
            return altitudeUnitOfMeasureCode;
        }

        /**
         * Sets the value of the altitudeUnitOfMeasureCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAltitudeUnitOfMeasureCode(String value) {
            this.altitudeUnitOfMeasureCode = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                strategy.appendField(locator, this, "latitude", buffer, theLatitude);
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                strategy.appendField(locator, this, "longitude", buffer, theLongitude);
            }
            {
                String theAltitude;
                theAltitude = this.getAltitude();
                strategy.appendField(locator, this, "altitude", buffer, theAltitude);
            }
            {
                String theAltitudeUnitOfMeasureCode;
                theAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                strategy.appendField(locator, this, "altitudeUnitOfMeasureCode", buffer, theAltitudeUnitOfMeasureCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ItemSearchCriterionType.Position)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ItemSearchCriterionType.Position that = ((ItemSearchCriterionType.Position) object);
            {
                String lhsLatitude;
                lhsLatitude = this.getLatitude();
                String rhsLatitude;
                rhsLatitude = that.getLatitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "latitude", lhsLatitude), LocatorUtils.property(thatLocator, "latitude", rhsLatitude), lhsLatitude, rhsLatitude)) {
                    return false;
                }
            }
            {
                String lhsLongitude;
                lhsLongitude = this.getLongitude();
                String rhsLongitude;
                rhsLongitude = that.getLongitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "longitude", lhsLongitude), LocatorUtils.property(thatLocator, "longitude", rhsLongitude), lhsLongitude, rhsLongitude)) {
                    return false;
                }
            }
            {
                String lhsAltitude;
                lhsAltitude = this.getAltitude();
                String rhsAltitude;
                rhsAltitude = that.getAltitude();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "altitude", lhsAltitude), LocatorUtils.property(thatLocator, "altitude", rhsAltitude), lhsAltitude, rhsAltitude)) {
                    return false;
                }
            }
            {
                String lhsAltitudeUnitOfMeasureCode;
                lhsAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                String rhsAltitudeUnitOfMeasureCode;
                rhsAltitudeUnitOfMeasureCode = that.getAltitudeUnitOfMeasureCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "altitudeUnitOfMeasureCode", lhsAltitudeUnitOfMeasureCode), LocatorUtils.property(thatLocator, "altitudeUnitOfMeasureCode", rhsAltitudeUnitOfMeasureCode), lhsAltitudeUnitOfMeasureCode, rhsAltitudeUnitOfMeasureCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theLatitude;
                theLatitude = this.getLatitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latitude", theLatitude), currentHashCode, theLatitude);
            }
            {
                String theLongitude;
                theLongitude = this.getLongitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longitude", theLongitude), currentHashCode, theLongitude);
            }
            {
                String theAltitude;
                theAltitude = this.getAltitude();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "altitude", theAltitude), currentHashCode, theAltitude);
            }
            {
                String theAltitudeUnitOfMeasureCode;
                theAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "altitudeUnitOfMeasureCode", theAltitudeUnitOfMeasureCode), currentHashCode, theAltitudeUnitOfMeasureCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ItemSearchCriterionType.Position) {
                final ItemSearchCriterionType.Position copy = ((ItemSearchCriterionType.Position) draftCopy);
                if (this.latitude!= null) {
                    String sourceLatitude;
                    sourceLatitude = this.getLatitude();
                    String copyLatitude = ((String) strategy.copy(LocatorUtils.property(locator, "latitude", sourceLatitude), sourceLatitude));
                    copy.setLatitude(copyLatitude);
                } else {
                    copy.latitude = null;
                }
                if (this.longitude!= null) {
                    String sourceLongitude;
                    sourceLongitude = this.getLongitude();
                    String copyLongitude = ((String) strategy.copy(LocatorUtils.property(locator, "longitude", sourceLongitude), sourceLongitude));
                    copy.setLongitude(copyLongitude);
                } else {
                    copy.longitude = null;
                }
                if (this.altitude!= null) {
                    String sourceAltitude;
                    sourceAltitude = this.getAltitude();
                    String copyAltitude = ((String) strategy.copy(LocatorUtils.property(locator, "altitude", sourceAltitude), sourceAltitude));
                    copy.setAltitude(copyAltitude);
                } else {
                    copy.altitude = null;
                }
                if (this.altitudeUnitOfMeasureCode!= null) {
                    String sourceAltitudeUnitOfMeasureCode;
                    sourceAltitudeUnitOfMeasureCode = this.getAltitudeUnitOfMeasureCode();
                    String copyAltitudeUnitOfMeasureCode = ((String) strategy.copy(LocatorUtils.property(locator, "altitudeUnitOfMeasureCode", sourceAltitudeUnitOfMeasureCode), sourceAltitudeUnitOfMeasureCode));
                    copy.setAltitudeUnitOfMeasureCode(copyAltitudeUnitOfMeasureCode);
                } else {
                    copy.altitudeUnitOfMeasureCode = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ItemSearchCriterionType.Position();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}DistanceAttributesGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Radius
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "Distance")
        protected String distance;
        @XmlAttribute(name = "DistanceMeasure")
        protected String distanceMeasure;
        @XmlAttribute(name = "Direction")
        protected String direction;
        @XmlAttribute(name = "DistanceMax")
        protected String distanceMax;

        /**
         * Gets the value of the distance property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDistance() {
            return distance;
        }

        /**
         * Sets the value of the distance property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDistance(String value) {
            this.distance = value;
        }

        /**
         * Gets the value of the distanceMeasure property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDistanceMeasure() {
            return distanceMeasure;
        }

        /**
         * Sets the value of the distanceMeasure property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDistanceMeasure(String value) {
            this.distanceMeasure = value;
        }

        /**
         * Gets the value of the direction property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDirection() {
            return direction;
        }

        /**
         * Sets the value of the direction property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDirection(String value) {
            this.direction = value;
        }

        /**
         * Gets the value of the distanceMax property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getDistanceMax() {
            return distanceMax;
        }

        /**
         * Sets the value of the distanceMax property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setDistanceMax(String value) {
            this.distanceMax = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theDistance;
                theDistance = this.getDistance();
                strategy.appendField(locator, this, "distance", buffer, theDistance);
            }
            {
                String theDistanceMeasure;
                theDistanceMeasure = this.getDistanceMeasure();
                strategy.appendField(locator, this, "distanceMeasure", buffer, theDistanceMeasure);
            }
            {
                String theDirection;
                theDirection = this.getDirection();
                strategy.appendField(locator, this, "direction", buffer, theDirection);
            }
            {
                String theDistanceMax;
                theDistanceMax = this.getDistanceMax();
                strategy.appendField(locator, this, "distanceMax", buffer, theDistanceMax);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ItemSearchCriterionType.Radius)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ItemSearchCriterionType.Radius that = ((ItemSearchCriterionType.Radius) object);
            {
                String lhsDistance;
                lhsDistance = this.getDistance();
                String rhsDistance;
                rhsDistance = that.getDistance();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "distance", lhsDistance), LocatorUtils.property(thatLocator, "distance", rhsDistance), lhsDistance, rhsDistance)) {
                    return false;
                }
            }
            {
                String lhsDistanceMeasure;
                lhsDistanceMeasure = this.getDistanceMeasure();
                String rhsDistanceMeasure;
                rhsDistanceMeasure = that.getDistanceMeasure();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "distanceMeasure", lhsDistanceMeasure), LocatorUtils.property(thatLocator, "distanceMeasure", rhsDistanceMeasure), lhsDistanceMeasure, rhsDistanceMeasure)) {
                    return false;
                }
            }
            {
                String lhsDirection;
                lhsDirection = this.getDirection();
                String rhsDirection;
                rhsDirection = that.getDirection();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "direction", lhsDirection), LocatorUtils.property(thatLocator, "direction", rhsDirection), lhsDirection, rhsDirection)) {
                    return false;
                }
            }
            {
                String lhsDistanceMax;
                lhsDistanceMax = this.getDistanceMax();
                String rhsDistanceMax;
                rhsDistanceMax = that.getDistanceMax();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "distanceMax", lhsDistanceMax), LocatorUtils.property(thatLocator, "distanceMax", rhsDistanceMax), lhsDistanceMax, rhsDistanceMax)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theDistance;
                theDistance = this.getDistance();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distance", theDistance), currentHashCode, theDistance);
            }
            {
                String theDistanceMeasure;
                theDistanceMeasure = this.getDistanceMeasure();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distanceMeasure", theDistanceMeasure), currentHashCode, theDistanceMeasure);
            }
            {
                String theDirection;
                theDirection = this.getDirection();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "direction", theDirection), currentHashCode, theDirection);
            }
            {
                String theDistanceMax;
                theDistanceMax = this.getDistanceMax();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distanceMax", theDistanceMax), currentHashCode, theDistanceMax);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ItemSearchCriterionType.Radius) {
                final ItemSearchCriterionType.Radius copy = ((ItemSearchCriterionType.Radius) draftCopy);
                if (this.distance!= null) {
                    String sourceDistance;
                    sourceDistance = this.getDistance();
                    String copyDistance = ((String) strategy.copy(LocatorUtils.property(locator, "distance", sourceDistance), sourceDistance));
                    copy.setDistance(copyDistance);
                } else {
                    copy.distance = null;
                }
                if (this.distanceMeasure!= null) {
                    String sourceDistanceMeasure;
                    sourceDistanceMeasure = this.getDistanceMeasure();
                    String copyDistanceMeasure = ((String) strategy.copy(LocatorUtils.property(locator, "distanceMeasure", sourceDistanceMeasure), sourceDistanceMeasure));
                    copy.setDistanceMeasure(copyDistanceMeasure);
                } else {
                    copy.distanceMeasure = null;
                }
                if (this.direction!= null) {
                    String sourceDirection;
                    sourceDirection = this.getDirection();
                    String copyDirection = ((String) strategy.copy(LocatorUtils.property(locator, "direction", sourceDirection), sourceDirection));
                    copy.setDirection(copyDirection);
                } else {
                    copy.direction = null;
                }
                if (this.distanceMax!= null) {
                    String sourceDistanceMax;
                    sourceDistanceMax = this.getDistanceMax();
                    String copyDistanceMax = ((String) strategy.copy(LocatorUtils.property(locator, "distanceMax", sourceDistanceMax), sourceDistanceMax));
                    copy.setDistanceMax(copyDistanceMax);
                } else {
                    copy.distanceMax = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ItemSearchCriterionType.Radius();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opentravel.org/OTA/2003/05&gt;StringLength0to64"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}CodeListGroup"/&gt;
     *       &lt;attribute name="StateProv" type="{http://www.opentravel.org/OTA/2003/05}StateProvCodeType" /&gt;
     *       &lt;attribute name="CountryCode" type="{http://www.opentravel.org/OTA/2003/05}ISO3166" /&gt;
     *       &lt;attribute name="RefPointType" type="{http://www.opentravel.org/OTA/2003/05}OTA_CodeType" /&gt;
     *       &lt;attribute name="Name" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to128" /&gt;
     *       &lt;attribute name="CityName" type="{http://www.opentravel.org/OTA/2003/05}StringLength1to64" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class RefPoint
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String value;
        @XmlAttribute(name = "StateProv")
        protected String stateProv;
        @XmlAttribute(name = "CountryCode")
        protected String countryCode;
        @XmlAttribute(name = "RefPointType")
        protected String refPointType;
        @XmlAttribute(name = "Name")
        protected String name;
        @XmlAttribute(name = "CityName")
        protected String cityName;
        @XmlAttribute(name = "URI")
        @XmlSchemaType(name = "anyURI")
        protected String uri;
        @XmlAttribute(name = "Code")
        protected String code;
        @XmlAttribute(name = "CodeContext")
        protected String codeContext;
        @XmlAttribute(name = "Quantity")
        @XmlSchemaType(name = "nonNegativeInteger")
        protected BigInteger quantity;

        /**
         * Used for Character Strings, length 0 to 64
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setValue(String value) {
            this.value = value;
        }

        /**
         * Gets the value of the stateProv property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getStateProv() {
            return stateProv;
        }

        /**
         * Sets the value of the stateProv property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setStateProv(String value) {
            this.stateProv = value;
        }

        /**
         * Gets the value of the countryCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCountryCode() {
            return countryCode;
        }

        /**
         * Sets the value of the countryCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCountryCode(String value) {
            this.countryCode = value;
        }

        /**
         * Gets the value of the refPointType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRefPointType() {
            return refPointType;
        }

        /**
         * Sets the value of the refPointType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRefPointType(String value) {
            this.refPointType = value;
        }

        /**
         * Gets the value of the name property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the name property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setName(String value) {
            this.name = value;
        }

        /**
         * Gets the value of the cityName property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCityName() {
            return cityName;
        }

        /**
         * Sets the value of the cityName property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCityName(String value) {
            this.cityName = value;
        }

        /**
         * Gets the value of the uri property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getURI() {
            return uri;
        }

        /**
         * Sets the value of the uri property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setURI(String value) {
            this.uri = value;
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        /**
         * Gets the value of the codeContext property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCodeContext() {
            return codeContext;
        }

        /**
         * Sets the value of the codeContext property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCodeContext(String value) {
            this.codeContext = value;
        }

        /**
         * Gets the value of the quantity property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getQuantity() {
            return quantity;
        }

        /**
         * Sets the value of the quantity property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setQuantity(BigInteger value) {
            this.quantity = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theValue;
                theValue = this.getValue();
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                String theStateProv;
                theStateProv = this.getStateProv();
                strategy.appendField(locator, this, "stateProv", buffer, theStateProv);
            }
            {
                String theCountryCode;
                theCountryCode = this.getCountryCode();
                strategy.appendField(locator, this, "countryCode", buffer, theCountryCode);
            }
            {
                String theRefPointType;
                theRefPointType = this.getRefPointType();
                strategy.appendField(locator, this, "refPointType", buffer, theRefPointType);
            }
            {
                String theName;
                theName = this.getName();
                strategy.appendField(locator, this, "name", buffer, theName);
            }
            {
                String theCityName;
                theCityName = this.getCityName();
                strategy.appendField(locator, this, "cityName", buffer, theCityName);
            }
            {
                String theURI;
                theURI = this.getURI();
                strategy.appendField(locator, this, "uri", buffer, theURI);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                strategy.appendField(locator, this, "codeContext", buffer, theCodeContext);
            }
            {
                BigInteger theQuantity;
                theQuantity = this.getQuantity();
                strategy.appendField(locator, this, "quantity", buffer, theQuantity);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ItemSearchCriterionType.RefPoint)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ItemSearchCriterionType.RefPoint that = ((ItemSearchCriterionType.RefPoint) object);
            {
                String lhsValue;
                lhsValue = this.getValue();
                String rhsValue;
                rhsValue = that.getValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                String lhsStateProv;
                lhsStateProv = this.getStateProv();
                String rhsStateProv;
                rhsStateProv = that.getStateProv();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "stateProv", lhsStateProv), LocatorUtils.property(thatLocator, "stateProv", rhsStateProv), lhsStateProv, rhsStateProv)) {
                    return false;
                }
            }
            {
                String lhsCountryCode;
                lhsCountryCode = this.getCountryCode();
                String rhsCountryCode;
                rhsCountryCode = that.getCountryCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "countryCode", lhsCountryCode), LocatorUtils.property(thatLocator, "countryCode", rhsCountryCode), lhsCountryCode, rhsCountryCode)) {
                    return false;
                }
            }
            {
                String lhsRefPointType;
                lhsRefPointType = this.getRefPointType();
                String rhsRefPointType;
                rhsRefPointType = that.getRefPointType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "refPointType", lhsRefPointType), LocatorUtils.property(thatLocator, "refPointType", rhsRefPointType), lhsRefPointType, rhsRefPointType)) {
                    return false;
                }
            }
            {
                String lhsName;
                lhsName = this.getName();
                String rhsName;
                rhsName = that.getName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                    return false;
                }
            }
            {
                String lhsCityName;
                lhsCityName = this.getCityName();
                String rhsCityName;
                rhsCityName = that.getCityName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "cityName", lhsCityName), LocatorUtils.property(thatLocator, "cityName", rhsCityName), lhsCityName, rhsCityName)) {
                    return false;
                }
            }
            {
                String lhsURI;
                lhsURI = this.getURI();
                String rhsURI;
                rhsURI = that.getURI();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "uri", lhsURI), LocatorUtils.property(thatLocator, "uri", rhsURI), lhsURI, rhsURI)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            {
                String lhsCodeContext;
                lhsCodeContext = this.getCodeContext();
                String rhsCodeContext;
                rhsCodeContext = that.getCodeContext();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "codeContext", lhsCodeContext), LocatorUtils.property(thatLocator, "codeContext", rhsCodeContext), lhsCodeContext, rhsCodeContext)) {
                    return false;
                }
            }
            {
                BigInteger lhsQuantity;
                lhsQuantity = this.getQuantity();
                BigInteger rhsQuantity;
                rhsQuantity = that.getQuantity();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theValue;
                theValue = this.getValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                String theStateProv;
                theStateProv = this.getStateProv();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stateProv", theStateProv), currentHashCode, theStateProv);
            }
            {
                String theCountryCode;
                theCountryCode = this.getCountryCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "countryCode", theCountryCode), currentHashCode, theCountryCode);
            }
            {
                String theRefPointType;
                theRefPointType = this.getRefPointType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refPointType", theRefPointType), currentHashCode, theRefPointType);
            }
            {
                String theName;
                theName = this.getName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
            }
            {
                String theCityName;
                theCityName = this.getCityName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cityName", theCityName), currentHashCode, theCityName);
            }
            {
                String theURI;
                theURI = this.getURI();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uri", theURI), currentHashCode, theURI);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            {
                String theCodeContext;
                theCodeContext = this.getCodeContext();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeContext", theCodeContext), currentHashCode, theCodeContext);
            }
            {
                BigInteger theQuantity;
                theQuantity = this.getQuantity();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ItemSearchCriterionType.RefPoint) {
                final ItemSearchCriterionType.RefPoint copy = ((ItemSearchCriterionType.RefPoint) draftCopy);
                if (this.value!= null) {
                    String sourceValue;
                    sourceValue = this.getValue();
                    String copyValue = ((String) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.setValue(copyValue);
                } else {
                    copy.value = null;
                }
                if (this.stateProv!= null) {
                    String sourceStateProv;
                    sourceStateProv = this.getStateProv();
                    String copyStateProv = ((String) strategy.copy(LocatorUtils.property(locator, "stateProv", sourceStateProv), sourceStateProv));
                    copy.setStateProv(copyStateProv);
                } else {
                    copy.stateProv = null;
                }
                if (this.countryCode!= null) {
                    String sourceCountryCode;
                    sourceCountryCode = this.getCountryCode();
                    String copyCountryCode = ((String) strategy.copy(LocatorUtils.property(locator, "countryCode", sourceCountryCode), sourceCountryCode));
                    copy.setCountryCode(copyCountryCode);
                } else {
                    copy.countryCode = null;
                }
                if (this.refPointType!= null) {
                    String sourceRefPointType;
                    sourceRefPointType = this.getRefPointType();
                    String copyRefPointType = ((String) strategy.copy(LocatorUtils.property(locator, "refPointType", sourceRefPointType), sourceRefPointType));
                    copy.setRefPointType(copyRefPointType);
                } else {
                    copy.refPointType = null;
                }
                if (this.name!= null) {
                    String sourceName;
                    sourceName = this.getName();
                    String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                    copy.setName(copyName);
                } else {
                    copy.name = null;
                }
                if (this.cityName!= null) {
                    String sourceCityName;
                    sourceCityName = this.getCityName();
                    String copyCityName = ((String) strategy.copy(LocatorUtils.property(locator, "cityName", sourceCityName), sourceCityName));
                    copy.setCityName(copyCityName);
                } else {
                    copy.cityName = null;
                }
                if (this.uri!= null) {
                    String sourceURI;
                    sourceURI = this.getURI();
                    String copyURI = ((String) strategy.copy(LocatorUtils.property(locator, "uri", sourceURI), sourceURI));
                    copy.setURI(copyURI);
                } else {
                    copy.uri = null;
                }
                if (this.code!= null) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
                if (this.codeContext!= null) {
                    String sourceCodeContext;
                    sourceCodeContext = this.getCodeContext();
                    String copyCodeContext = ((String) strategy.copy(LocatorUtils.property(locator, "codeContext", sourceCodeContext), sourceCodeContext));
                    copy.setCodeContext(copyCodeContext);
                } else {
                    copy.codeContext = null;
                }
                if (this.quantity!= null) {
                    BigInteger sourceQuantity;
                    sourceQuantity = this.getQuantity();
                    BigInteger copyQuantity = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "quantity", sourceQuantity), sourceQuantity));
                    copy.setQuantity(copyQuantity);
                } else {
                    copy.quantity = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ItemSearchCriterionType.RefPoint();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{http://www.opentravel.org/OTA/2003/05}TelephoneGroup"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Telephone
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlAttribute(name = "ShareSynchInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareSynchInd;
        @XmlAttribute(name = "ShareMarketInd")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String shareMarketInd;
        @XmlAttribute(name = "PhoneLocationType")
        protected String phoneLocationType;
        @XmlAttribute(name = "PhoneTechType")
        protected String phoneTechType;
        @XmlAttribute(name = "PhoneUseType")
        protected String phoneUseType;
        @XmlAttribute(name = "CountryAccessCode")
        protected String countryAccessCode;
        @XmlAttribute(name = "AreaCityCode")
        protected String areaCityCode;
        @XmlAttribute(name = "PhoneNumber", required = true)
        protected String phoneNumber;
        @XmlAttribute(name = "Extension")
        protected String extension;
        @XmlAttribute(name = "PIN")
        protected String pin;
        @XmlAttribute(name = "Remark")
        protected String remark;
        @XmlAttribute(name = "FormattedInd")
        protected Boolean formattedInd;

        /**
         * Gets the value of the shareSynchInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareSynchInd() {
            return shareSynchInd;
        }

        /**
         * Sets the value of the shareSynchInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareSynchInd(String value) {
            this.shareSynchInd = value;
        }

        /**
         * Gets the value of the shareMarketInd property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getShareMarketInd() {
            return shareMarketInd;
        }

        /**
         * Sets the value of the shareMarketInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setShareMarketInd(String value) {
            this.shareMarketInd = value;
        }

        /**
         * Gets the value of the phoneLocationType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneLocationType() {
            return phoneLocationType;
        }

        /**
         * Sets the value of the phoneLocationType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneLocationType(String value) {
            this.phoneLocationType = value;
        }

        /**
         * Gets the value of the phoneTechType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneTechType() {
            return phoneTechType;
        }

        /**
         * Sets the value of the phoneTechType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneTechType(String value) {
            this.phoneTechType = value;
        }

        /**
         * Gets the value of the phoneUseType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneUseType() {
            return phoneUseType;
        }

        /**
         * Sets the value of the phoneUseType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneUseType(String value) {
            this.phoneUseType = value;
        }

        /**
         * Gets the value of the countryAccessCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCountryAccessCode() {
            return countryAccessCode;
        }

        /**
         * Sets the value of the countryAccessCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCountryAccessCode(String value) {
            this.countryAccessCode = value;
        }

        /**
         * Gets the value of the areaCityCode property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAreaCityCode() {
            return areaCityCode;
        }

        /**
         * Sets the value of the areaCityCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAreaCityCode(String value) {
            this.areaCityCode = value;
        }

        /**
         * Gets the value of the phoneNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPhoneNumber() {
            return phoneNumber;
        }

        /**
         * Sets the value of the phoneNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPhoneNumber(String value) {
            this.phoneNumber = value;
        }

        /**
         * Gets the value of the extension property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getExtension() {
            return extension;
        }

        /**
         * Sets the value of the extension property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setExtension(String value) {
            this.extension = value;
        }

        /**
         * Gets the value of the pin property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPIN() {
            return pin;
        }

        /**
         * Sets the value of the pin property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPIN(String value) {
            this.pin = value;
        }

        /**
         * Gets the value of the remark property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRemark() {
            return remark;
        }

        /**
         * Sets the value of the remark property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRemark(String value) {
            this.remark = value;
        }

        /**
         * Gets the value of the formattedInd property.
         * 
         * @return
         *     possible object is
         *     {@link Boolean }
         *     
         */
        public boolean isFormattedInd() {
            if (formattedInd == null) {
                return false;
            } else {
                return formattedInd;
            }
        }

        /**
         * Sets the value of the formattedInd property.
         * 
         * @param value
         *     allowed object is
         *     {@link Boolean }
         *     
         */
        public void setFormattedInd(Boolean value) {
            this.formattedInd = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                strategy.appendField(locator, this, "shareSynchInd", buffer, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                strategy.appendField(locator, this, "shareMarketInd", buffer, theShareMarketInd);
            }
            {
                String thePhoneLocationType;
                thePhoneLocationType = this.getPhoneLocationType();
                strategy.appendField(locator, this, "phoneLocationType", buffer, thePhoneLocationType);
            }
            {
                String thePhoneTechType;
                thePhoneTechType = this.getPhoneTechType();
                strategy.appendField(locator, this, "phoneTechType", buffer, thePhoneTechType);
            }
            {
                String thePhoneUseType;
                thePhoneUseType = this.getPhoneUseType();
                strategy.appendField(locator, this, "phoneUseType", buffer, thePhoneUseType);
            }
            {
                String theCountryAccessCode;
                theCountryAccessCode = this.getCountryAccessCode();
                strategy.appendField(locator, this, "countryAccessCode", buffer, theCountryAccessCode);
            }
            {
                String theAreaCityCode;
                theAreaCityCode = this.getAreaCityCode();
                strategy.appendField(locator, this, "areaCityCode", buffer, theAreaCityCode);
            }
            {
                String thePhoneNumber;
                thePhoneNumber = this.getPhoneNumber();
                strategy.appendField(locator, this, "phoneNumber", buffer, thePhoneNumber);
            }
            {
                String theExtension;
                theExtension = this.getExtension();
                strategy.appendField(locator, this, "extension", buffer, theExtension);
            }
            {
                String thePIN;
                thePIN = this.getPIN();
                strategy.appendField(locator, this, "pin", buffer, thePIN);
            }
            {
                String theRemark;
                theRemark = this.getRemark();
                strategy.appendField(locator, this, "remark", buffer, theRemark);
            }
            {
                boolean theFormattedInd;
                theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                strategy.appendField(locator, this, "formattedInd", buffer, theFormattedInd);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ItemSearchCriterionType.Telephone)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ItemSearchCriterionType.Telephone that = ((ItemSearchCriterionType.Telephone) object);
            {
                String lhsShareSynchInd;
                lhsShareSynchInd = this.getShareSynchInd();
                String rhsShareSynchInd;
                rhsShareSynchInd = that.getShareSynchInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareSynchInd", lhsShareSynchInd), LocatorUtils.property(thatLocator, "shareSynchInd", rhsShareSynchInd), lhsShareSynchInd, rhsShareSynchInd)) {
                    return false;
                }
            }
            {
                String lhsShareMarketInd;
                lhsShareMarketInd = this.getShareMarketInd();
                String rhsShareMarketInd;
                rhsShareMarketInd = that.getShareMarketInd();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shareMarketInd", lhsShareMarketInd), LocatorUtils.property(thatLocator, "shareMarketInd", rhsShareMarketInd), lhsShareMarketInd, rhsShareMarketInd)) {
                    return false;
                }
            }
            {
                String lhsPhoneLocationType;
                lhsPhoneLocationType = this.getPhoneLocationType();
                String rhsPhoneLocationType;
                rhsPhoneLocationType = that.getPhoneLocationType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneLocationType", lhsPhoneLocationType), LocatorUtils.property(thatLocator, "phoneLocationType", rhsPhoneLocationType), lhsPhoneLocationType, rhsPhoneLocationType)) {
                    return false;
                }
            }
            {
                String lhsPhoneTechType;
                lhsPhoneTechType = this.getPhoneTechType();
                String rhsPhoneTechType;
                rhsPhoneTechType = that.getPhoneTechType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneTechType", lhsPhoneTechType), LocatorUtils.property(thatLocator, "phoneTechType", rhsPhoneTechType), lhsPhoneTechType, rhsPhoneTechType)) {
                    return false;
                }
            }
            {
                String lhsPhoneUseType;
                lhsPhoneUseType = this.getPhoneUseType();
                String rhsPhoneUseType;
                rhsPhoneUseType = that.getPhoneUseType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneUseType", lhsPhoneUseType), LocatorUtils.property(thatLocator, "phoneUseType", rhsPhoneUseType), lhsPhoneUseType, rhsPhoneUseType)) {
                    return false;
                }
            }
            {
                String lhsCountryAccessCode;
                lhsCountryAccessCode = this.getCountryAccessCode();
                String rhsCountryAccessCode;
                rhsCountryAccessCode = that.getCountryAccessCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "countryAccessCode", lhsCountryAccessCode), LocatorUtils.property(thatLocator, "countryAccessCode", rhsCountryAccessCode), lhsCountryAccessCode, rhsCountryAccessCode)) {
                    return false;
                }
            }
            {
                String lhsAreaCityCode;
                lhsAreaCityCode = this.getAreaCityCode();
                String rhsAreaCityCode;
                rhsAreaCityCode = that.getAreaCityCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "areaCityCode", lhsAreaCityCode), LocatorUtils.property(thatLocator, "areaCityCode", rhsAreaCityCode), lhsAreaCityCode, rhsAreaCityCode)) {
                    return false;
                }
            }
            {
                String lhsPhoneNumber;
                lhsPhoneNumber = this.getPhoneNumber();
                String rhsPhoneNumber;
                rhsPhoneNumber = that.getPhoneNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "phoneNumber", lhsPhoneNumber), LocatorUtils.property(thatLocator, "phoneNumber", rhsPhoneNumber), lhsPhoneNumber, rhsPhoneNumber)) {
                    return false;
                }
            }
            {
                String lhsExtension;
                lhsExtension = this.getExtension();
                String rhsExtension;
                rhsExtension = that.getExtension();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "extension", lhsExtension), LocatorUtils.property(thatLocator, "extension", rhsExtension), lhsExtension, rhsExtension)) {
                    return false;
                }
            }
            {
                String lhsPIN;
                lhsPIN = this.getPIN();
                String rhsPIN;
                rhsPIN = that.getPIN();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "pin", lhsPIN), LocatorUtils.property(thatLocator, "pin", rhsPIN), lhsPIN, rhsPIN)) {
                    return false;
                }
            }
            {
                String lhsRemark;
                lhsRemark = this.getRemark();
                String rhsRemark;
                rhsRemark = that.getRemark();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "remark", lhsRemark), LocatorUtils.property(thatLocator, "remark", rhsRemark), lhsRemark, rhsRemark)) {
                    return false;
                }
            }
            {
                boolean lhsFormattedInd;
                lhsFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                boolean rhsFormattedInd;
                rhsFormattedInd = ((that.formattedInd!= null)?that.isFormattedInd():false);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "formattedInd", lhsFormattedInd), LocatorUtils.property(thatLocator, "formattedInd", rhsFormattedInd), lhsFormattedInd, rhsFormattedInd)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theShareSynchInd;
                theShareSynchInd = this.getShareSynchInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareSynchInd", theShareSynchInd), currentHashCode, theShareSynchInd);
            }
            {
                String theShareMarketInd;
                theShareMarketInd = this.getShareMarketInd();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shareMarketInd", theShareMarketInd), currentHashCode, theShareMarketInd);
            }
            {
                String thePhoneLocationType;
                thePhoneLocationType = this.getPhoneLocationType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneLocationType", thePhoneLocationType), currentHashCode, thePhoneLocationType);
            }
            {
                String thePhoneTechType;
                thePhoneTechType = this.getPhoneTechType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneTechType", thePhoneTechType), currentHashCode, thePhoneTechType);
            }
            {
                String thePhoneUseType;
                thePhoneUseType = this.getPhoneUseType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneUseType", thePhoneUseType), currentHashCode, thePhoneUseType);
            }
            {
                String theCountryAccessCode;
                theCountryAccessCode = this.getCountryAccessCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "countryAccessCode", theCountryAccessCode), currentHashCode, theCountryAccessCode);
            }
            {
                String theAreaCityCode;
                theAreaCityCode = this.getAreaCityCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "areaCityCode", theAreaCityCode), currentHashCode, theAreaCityCode);
            }
            {
                String thePhoneNumber;
                thePhoneNumber = this.getPhoneNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phoneNumber", thePhoneNumber), currentHashCode, thePhoneNumber);
            }
            {
                String theExtension;
                theExtension = this.getExtension();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extension", theExtension), currentHashCode, theExtension);
            }
            {
                String thePIN;
                thePIN = this.getPIN();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pin", thePIN), currentHashCode, thePIN);
            }
            {
                String theRemark;
                theRemark = this.getRemark();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remark", theRemark), currentHashCode, theRemark);
            }
            {
                boolean theFormattedInd;
                theFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formattedInd", theFormattedInd), currentHashCode, theFormattedInd);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ItemSearchCriterionType.Telephone) {
                final ItemSearchCriterionType.Telephone copy = ((ItemSearchCriterionType.Telephone) draftCopy);
                if (this.shareSynchInd!= null) {
                    String sourceShareSynchInd;
                    sourceShareSynchInd = this.getShareSynchInd();
                    String copyShareSynchInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareSynchInd", sourceShareSynchInd), sourceShareSynchInd));
                    copy.setShareSynchInd(copyShareSynchInd);
                } else {
                    copy.shareSynchInd = null;
                }
                if (this.shareMarketInd!= null) {
                    String sourceShareMarketInd;
                    sourceShareMarketInd = this.getShareMarketInd();
                    String copyShareMarketInd = ((String) strategy.copy(LocatorUtils.property(locator, "shareMarketInd", sourceShareMarketInd), sourceShareMarketInd));
                    copy.setShareMarketInd(copyShareMarketInd);
                } else {
                    copy.shareMarketInd = null;
                }
                if (this.phoneLocationType!= null) {
                    String sourcePhoneLocationType;
                    sourcePhoneLocationType = this.getPhoneLocationType();
                    String copyPhoneLocationType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneLocationType", sourcePhoneLocationType), sourcePhoneLocationType));
                    copy.setPhoneLocationType(copyPhoneLocationType);
                } else {
                    copy.phoneLocationType = null;
                }
                if (this.phoneTechType!= null) {
                    String sourcePhoneTechType;
                    sourcePhoneTechType = this.getPhoneTechType();
                    String copyPhoneTechType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneTechType", sourcePhoneTechType), sourcePhoneTechType));
                    copy.setPhoneTechType(copyPhoneTechType);
                } else {
                    copy.phoneTechType = null;
                }
                if (this.phoneUseType!= null) {
                    String sourcePhoneUseType;
                    sourcePhoneUseType = this.getPhoneUseType();
                    String copyPhoneUseType = ((String) strategy.copy(LocatorUtils.property(locator, "phoneUseType", sourcePhoneUseType), sourcePhoneUseType));
                    copy.setPhoneUseType(copyPhoneUseType);
                } else {
                    copy.phoneUseType = null;
                }
                if (this.countryAccessCode!= null) {
                    String sourceCountryAccessCode;
                    sourceCountryAccessCode = this.getCountryAccessCode();
                    String copyCountryAccessCode = ((String) strategy.copy(LocatorUtils.property(locator, "countryAccessCode", sourceCountryAccessCode), sourceCountryAccessCode));
                    copy.setCountryAccessCode(copyCountryAccessCode);
                } else {
                    copy.countryAccessCode = null;
                }
                if (this.areaCityCode!= null) {
                    String sourceAreaCityCode;
                    sourceAreaCityCode = this.getAreaCityCode();
                    String copyAreaCityCode = ((String) strategy.copy(LocatorUtils.property(locator, "areaCityCode", sourceAreaCityCode), sourceAreaCityCode));
                    copy.setAreaCityCode(copyAreaCityCode);
                } else {
                    copy.areaCityCode = null;
                }
                if (this.phoneNumber!= null) {
                    String sourcePhoneNumber;
                    sourcePhoneNumber = this.getPhoneNumber();
                    String copyPhoneNumber = ((String) strategy.copy(LocatorUtils.property(locator, "phoneNumber", sourcePhoneNumber), sourcePhoneNumber));
                    copy.setPhoneNumber(copyPhoneNumber);
                } else {
                    copy.phoneNumber = null;
                }
                if (this.extension!= null) {
                    String sourceExtension;
                    sourceExtension = this.getExtension();
                    String copyExtension = ((String) strategy.copy(LocatorUtils.property(locator, "extension", sourceExtension), sourceExtension));
                    copy.setExtension(copyExtension);
                } else {
                    copy.extension = null;
                }
                if (this.pin!= null) {
                    String sourcePIN;
                    sourcePIN = this.getPIN();
                    String copyPIN = ((String) strategy.copy(LocatorUtils.property(locator, "pin", sourcePIN), sourcePIN));
                    copy.setPIN(copyPIN);
                } else {
                    copy.pin = null;
                }
                if (this.remark!= null) {
                    String sourceRemark;
                    sourceRemark = this.getRemark();
                    String copyRemark = ((String) strategy.copy(LocatorUtils.property(locator, "remark", sourceRemark), sourceRemark));
                    copy.setRemark(copyRemark);
                } else {
                    copy.remark = null;
                }
                if (this.formattedInd!= null) {
                    boolean sourceFormattedInd;
                    sourceFormattedInd = ((this.formattedInd!= null)?this.isFormattedInd():false);
                    boolean copyFormattedInd = strategy.copy(LocatorUtils.property(locator, "formattedInd", sourceFormattedInd), sourceFormattedInd);
                    copy.setFormattedInd(copyFormattedInd);
                } else {
                    copy.formattedInd = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ItemSearchCriterionType.Telephone();
        }

    }

}
